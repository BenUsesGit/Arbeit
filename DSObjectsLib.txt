// Generated .IDL file (by the OLE/COM Object Viewer)
// 
// typelib filename: <could not determine filename>

[
  uuid(8C153B47-6605-4622-94BF-85A2BA240DF5),
  version(12.0),
  helpstring("DSObjectsAuto 12.0 Type Library"),
  custom(DE77BA64-517C-11D1-A2DA-0000F8773CE9, 134218323),
  custom(DE77BA63-517C-11D1-A2DA-0000F8773CE9, 1469606881),
  custom(DE77BA65-517C-11D1-A2DA-0000F8773CE9, "Created by MIDL version 8.00.0595 at Wed Jul 27 04:07:59 2016
")

]
library DSOBJECTSAUTOLib
{
    // TLib : OLE Automation : {00020430-0000-0000-C000-000000000046}
    importlib("stdole2.tlb");

    // Forward declare all types defined in this typelib
    interface ISimulationFilter;
    interface ISimulationFilterCollection;
    interface IDSMessage;
    interface IDSOBJECTAUTO_DUMMY;
    interface IDSObjects;
    interface IAnsSupportAnnotation;
    interface IDSAccelerationAuto;
    interface IDSAccessControl;
    interface IDSAdvancedOptionsAuto;
    interface IDSAdvancedPostOutputAuto;
    interface IDSAdvancedPostProcessingAuto;
    interface IDSAlertAuto;
    interface IDSJobProgressMap;
    interface IAnsIDispColl;
    interface IDSAnswerSetAuto;
    interface IAnsProgress;
    interface IAnsDelegate;
    interface IAnsDoubleColl;
    interface IAnsBSTRColl;
    interface IAnsIntColl;
    interface IDSBeamConnectionAuto;
    interface IDSBeamToolAuto;
    interface IDSFractureToolAuto;
    interface IDSBodyGroupAuto;
    interface IDSBranchAuto;
    interface IDSChartAuto;
    interface IAnsUINTColl;
    interface IDSCommandEditorAuto;
    interface IDSCommentAuto;
    interface IDSConstraintEquationAuto;
    interface IDSNodalRotationAuto;
    interface IDSComponentAuto;
    interface IAnsReferenceColl;
    interface IAnsReference;
    interface IAnsMultiplatformStream;
    interface IStream;
    interface ISequentialStream;
    interface IStorage;
    interface IEnumSTATSTG;
    interface IDSComponentGroupAuto;
    interface IDSContactGroupAuto;
    interface IDSConnectionGroupAuto;
    interface IDSCondensedPartInfoToolAuto;
    interface IDSContactInfoToolAuto;
    interface IDSContactRegionAuto;
    interface IDSMeshConnectionAuto;
    interface IDSBeamEndReleaseAuto;
    interface IDSBoltToolAuto;
    interface IDSContactToolAuto;
    interface IDSContactToolSelection;
    interface IDSCollectionAuto;
    interface IDSConvectionAuto;
    interface IDSConvectionLoadAuto;
    interface IDSConvergenceAuto;
    interface IDSCSysTransformsHelper;
    interface IDSConstructionGeometryGroupAuto;
    interface IDSCoordinateSystemAuto;
    interface IAnsTransformableCoordinateSystem;
    interface IAnsCoordinateSystem;
    interface IAnsXYZ;
    interface IAnsTransformColl;
    interface IAnsTransform;
    interface IDSCoordinateSystemGroupAuto;
    interface IDSCouplingConditionAuto;
    interface IDSCustomResultAuto;
    interface IDSDataCurve;
    interface IDSDataTable;
    interface IDSElementAuto;
    interface IDSEnvironmentAuto;
    interface IDSExternalLoadAuto;
    interface IAnsVARIANTColl;
    interface IDSExternalLoadGroupAuto;
    interface IDSFace;
    interface IDSFigureAuto;
    interface IDSForceAtPointLoadAuto;
    interface IDSFrequencyGroupAuto;
    interface IDSFatigueToolAuto;
    interface IDSGeneralLoadAuto;
    interface IDSListWrapper;
    interface IDSGeneralLoadExtended;
    interface IDSCustomResultExtended;
    interface IDSGeneralLoadEntry;
    interface IDSHarmonicToolAuto;
    interface IDSInitialInfoSummaryAuto;
    interface IDSAnalysisSettings;
    interface IDSModalSettingsAuto;
    interface IDSRSLoadAuto;
    interface IDSPSDLoadAuto;
    interface IDSInitialConditionsAuto;
    interface IDSInitialConditionGroupAuto;
    interface IDSBodyInteractionGroupAuto;
    interface IDSBodyInteractionAuto;
    interface IDSJointAuto;
    interface IDSJointConditionAuto;
    interface IDSSpringAuto;
    interface IDSBearingAuto;
    interface IDSLoadAuto;
    interface IDSAutodynBCAuto;
    interface IDSLoadGroupAuto;
    interface IDSSolutionCombinationAuto;
    interface IDSDASolutionCombinationAuto;
    interface IDSDAAttributeAuto;
    interface IDSDAResultAuto;
    interface IDSMaterialAuto;
    interface IDSMeshAuto;
    interface IDSMeshBCAuto;
    interface IDSMeshControlAuto;
    interface IDSMeshControlGroupAuto;
    interface IDSMeshEditGroupAuto;
    interface IDSNodeMoveAuto;
    interface IDSModelAuto;
    interface IDSMomentLoadAuto;
    interface IDSSolutionInfoToolAuto;
    interface IDSExpansionSettingsAuto;
    interface IExpansionDatabase;
    interface IDSNodeAuto;
    interface IDSVariantColl;
    interface IDSEnumVariants;
    interface IDSParameterSetAuto;
    interface IDSParameter;
    interface IDSPathAuto;
    interface IDSSurfaceAuto;
    interface IDSPretensionBoltLoadAuto;
    interface IDSProbeToolAuto;
    interface IDSProbeResultAuto;
    interface IDSPrototypeAuto;
    interface IDSPrototypeGroupAuto;
    interface IDSRemotePointGroupAuto;
    interface IDSRemotePointAuto;
    interface IDSReportSettingsAuto;
    interface IDSResultAuto;
    interface IDSResultArrayAuto;
    interface IDSResultChartAuto;
    interface IDSResultTableAuto;
    interface IDSContactDataTableAuto;
    interface IDSRotationAuto;
    interface IDSScalarLoadAuto;
    interface IDSScope;
    interface IDSSolConvergence;
    interface IDSSolutionAuto;
    interface IDSSolutionSettingsAuto;
    interface IDSTransientThermalSettingsAuto;
    interface IDSTransientMechanicalSettingsAuto;
    interface IDSSolutionStepAuto;
    interface IDSSolutionStepsGroupAuto;
    interface IDSSolutionSummaryAuto;
    interface IDSStressSafetyToolAuto;
    interface IDSSupportAuto;
    interface IDSTemplateAuto;
    interface IDSTemplateOutputAuto;
    interface IDSTreeGroupingFolderAuto;
    interface IDSTreePlaceHolder;
    interface IDSTreeRootAuto;
    interface IDSVectorLoadAuto;
    interface IDSVirtualCellAuto;
    interface IDSVirtualSplitEdgeAuto;
    interface IDSVirtualSplitFaceAuto;
    interface IDSVirtualHardVertexAuto;
    interface IDSGapSizeAuto;
    interface IDSGapToolAuto;
    interface IDSJobConnection;
    interface IDSPointMassAuto;
    interface IStateEngineObject;
    interface IWB2StateAdapter;
    interface IDSMessageFilter;
    interface IDSMessageDatabase;
    interface IDSLoadObjectCollectionSetup;
    interface IDSLoadObjectCollectionMap;
    interface IDSGenPlaneStrainAuto;
    interface IDSSymmetryGroupAuto;
    interface IDSSymmetryGeneralAuto;
    interface IDSThermalConditionAuto;
    interface IDSEmagConditionAuto;
    interface IDSDependencyIterator;
    interface IDSDependencyNodeEventArgs;
    interface IDSDependencyEdgeEventArgs;
    interface IDSDependencyManager;
    interface IDSParameterSetItfHolder;
    interface IParamItfConverter;
    interface IDSMeshWrapperGroupAuto;
    interface IDSMeshWrapAuto;
    interface IDSMeshRenumberingControlGroupAuto;
    interface IDSMeshRenumberingControlAuto;
    interface IDSThicknessAuto;
    interface IDSMappingValidationAuto;
    interface IDSGasketAuto;
    interface IDSPipeIdealizationAuto;
    interface IDSElementOrientationAuto;
    interface IDSSimplorerPinAuto;
    interface IDSExternalEnhancedModelAuto;
    interface IDSFractureGroupAuto;
    interface IDSCrackAuto;
    interface IDSDelaminationAuto;
    interface IDSCondensedGeometryAuto;
    interface IDSCondensedPartAuto;
    interface IDSCondensedSolutionSummaryAuto;
    interface IDSMeshConnectionsParentAuto;
    interface IDSAnalysisPlyAuto;
    interface IDSNonlinearAdaptivityAuto;
    interface IDSCompositeFailureToolAuto;
    interface IDSCompositeFailureCriteriaGroupAuto;
    interface IDSCompositeFailureCriteriaAuto;
    interface IDSResponsePSDToolAuto;
    interface IDSPhysicsRegionAuto;
    interface IAnsUITreeProxy;
    interface IDSService2;
    interface IDSProjectAuto;
    interface IDSVirtualCellGroupAuto;
    interface IScopedMeshCommit;

    [
      odl,
      uuid(D044A462-946C-403C-AF7A-75F952A03311),
      helpstring("ISimulationFilter Interface"),
      dual,
      oleautomation
    ]
    interface ISimulationFilter : IDispatch {
        [id(0x00000001), propget, helpstring("property PhysicsType")]
        HRESULT PhysicsType([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property PhysicsType")]
        HRESULT PhysicsType([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property AnalysisType")]
        HRESULT AnalysisType([out, retval] BSTR* pVal);
        [id(0x00000002), propput, helpstring("property AnalysisType")]
        HRESULT AnalysisType([in] BSTR pVal);
        [id(0x00000003), propget, helpstring("property SolverName")]
        HRESULT SolverName([out, retval] BSTR* pVal);
        [id(0x00000003), propput, helpstring("property SolverName")]
        HRESULT SolverName([in] BSTR pVal);
        [id(0x00000004), propget, helpstring("property Location")]
        HRESULT Location([out, retval] int* pVal);
        [id(0x00000004), propput, helpstring("property Location")]
        HRESULT Location([in] int pVal);
    };

    [
      odl,
      uuid(4068D3AF-2E70-4E64-A765-E425E46B4643),
      helpstring("ISimulationFilterCollection Interface"),
      dual,
      oleautomation
    ]
    interface ISimulationFilterCollection : IDispatch {
        [id(0x00000001), propget, helpstring("property Count")]
        HRESULT Count([out, retval] int* pVal);
        [id(0x00000002), propget, helpstring("property Item")]
        HRESULT Item(
                        int index, 
                        IDispatch** pVal);
        [id(0x00000003), helpstring("method AddSimulationFilter")]
        HRESULT AddSimulationFilter([out, retval] IDispatch** ppDisp);
    };

    [
      odl,
      uuid(BDDD8D41-B877-4F9D-82E4-254A2482081B),
      helpstring("IDSMessage Interface"),
      dual,
      oleautomation
    ]
    interface IDSMessage : IDispatch {
        [id(0x0000000a), propget, helpstring("property FormatEntry")]
        HRESULT FormatEntry(
                        [in] int iPos, 
                        [out, retval] int* pVal);
        [id(0x0000000a), propput, helpstring("property FormatEntry")]
        HRESULT FormatEntry(
                        [in] int iPos, 
                        [in] int pVal);
        [id(0x0000000b), propget, helpstring("property FormatLength")]
        HRESULT FormatLength([out, retval] int* pVal);
        [id(0x0000000b), propput, helpstring("property FormatLength")]
        HRESULT FormatLength([in] int pVal);
        [id(0x0000000c), propget, helpstring("property FormatType")]
        HRESULT FormatType([out, retval] int* pVal);
        [id(0x0000000c), propput, helpstring("property FormatType")]
        HRESULT FormatType([in] int pVal);
        [id(0x0000000d), propget, helpstring("property Source")]
        HRESULT Source([out, retval] int* pVal);
        [id(0x0000000d), propput, helpstring("property Source")]
        HRESULT Source([in] int pVal);
        [id(0x0000000e), propget, helpstring("property DisplayString")]
        HRESULT DisplayString([out, retval] BSTR* pStr);
        [id(0x0000000e), propput, helpstring("property DisplayString")]
        HRESULT DisplayString([in] BSTR pStr);
        [id(0x0000000f), propget, helpstring("property ReadyToDisplay")]
        HRESULT ReadyToDisplay([out, retval] VARIANT_BOOL* bVal);
        [id(0x0000000f), propput, helpstring("property ReadyToDisplay")]
        HRESULT ReadyToDisplay([in] VARIANT_BOOL bVal);
        [id(0x00000011), propget, helpstring("property StringEntry")]
        HRESULT StringEntry(
                        [in] int iPos, 
                        [out, retval] BSTR* pStr);
        [id(0x00000011), propput, helpstring("property StringEntry")]
        HRESULT StringEntry(
                        [in] int iPos, 
                        [in] BSTR pStr);
        [id(0x00000012), propget, helpstring("property StringListLength")]
        HRESULT StringListLength([out, retval] int* pVal);
        [id(0x00000012), propput, helpstring("property StringListLength")]
        HRESULT StringListLength([in] int pVal);
        [id(0x00000013), propget, helpstring("property DoubleEntry")]
        HRESULT DoubleEntry(
                        [in] int iPos, 
                        [out, retval] double* pVal);
        [id(0x00000013), propput, helpstring("property DoubleEntry")]
        HRESULT DoubleEntry(
                        [in] int iPos, 
                        [in] double pVal);
        [id(0x00000014), propget, helpstring("property DoubleLength")]
        HRESULT DoubleLength([out, retval] int* pVal);
        [id(0x00000014), propput, helpstring("property DoubleLength")]
        HRESULT DoubleLength([in] int pVal);
        [id(0x00000015), propget, helpstring("property PathId")]
        HRESULT PathId([out, retval] int* pVal);
        [id(0x00000015), propput, helpstring("property PathId")]
        HRESULT PathId([in] int pVal);
        [id(0x00000016), helpstring("method WriteToXML")]
        HRESULT WriteToXML([out, retval] BSTR* pStr);
        [id(0x00000017), helpstring("method ReadFromXML")]
        HRESULT ReadFromXML(
                        [in] BSTR bsXMLMessage, 
                        [in] int iVersion);
        [id(0x00000018), propget, helpstring("property SourceOperation")]
        HRESULT SourceOperation([out, retval] int* pVal);
        [id(0x00000018), propput, helpstring("property SourceOperation")]
        HRESULT SourceOperation([in] int pVal);
        [id(0x00000019), propget, helpstring("property TimeStamp")]
        HRESULT TimeStamp([out, retval] BSTR* pVal);
        [id(0x0000001a), propget, helpstring("property Year")]
        HRESULT Year([out, retval] int* Year);
        [id(0x0000001b), propget, helpstring("property Month")]
        HRESULT Month([out, retval] int* Year);
        [id(0x0000001c), propget, helpstring("property Day")]
        HRESULT Day([out, retval] int* Year);
        [id(0x0000001d), propget, helpstring("property Hour")]
        HRESULT Hour([out, retval] int* Year);
        [id(0x0000001e), propget, helpstring("property Minute")]
        HRESULT Minute([out, retval] int* Year);
        [id(0x0000001f), propget, helpstring("property Second")]
        HRESULT Second([out, retval] int* Year);
        [id(0x00000020), propget, helpstring("property Milliseconds")]
        HRESULT Milliseconds([out, retval] int* Year);
        [id(0x00000021), propget, helpstring("property DisplayPath")]
        HRESULT DisplayPath([out, retval] BSTR* pStr);
        [id(0x00000021), propput, helpstring("property DisplayPath")]
        HRESULT DisplayPath([in] BSTR pStr);
        [id(0x00000022), propget, helpstring("property HasDisplayPath")]
        HRESULT HasDisplayPath([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000023), helpstring("method AddTopoId")]
        HRESULT AddTopoId(
                        [in] unsigned int iPart, 
                        [in] unsigned int iTopo);
        [id(0x00000024), helpstring("method GetTopoId")]
        HRESULT GetTopoId(
                        [in] int iIndex, 
                        [out, retval] unsigned int* iTopo);
        [id(0x00000025), helpstring("method GetPartId")]
        HRESULT GetPartId(
                        [in] int iIndex, 
                        [out, retval] unsigned int* iPart);
        [id(0x00000026), helpstring("method NumTopoId")]
        HRESULT NumTopoId([out, retval] int* iNumTopoEntries);
        [id(0x00000027), helpstring("method Clone")]
        HRESULT Clone([out, retval] IDSMessage** pClonedMessage);
        [id(0x00000028), propget, helpstring("property DisplayStringCode")]
        HRESULT DisplayStringCode([out, retval] BSTR* pStr);
        [id(0x00000028), propput, helpstring("property DisplayStringCode")]
        HRESULT DisplayStringCode([in] BSTR pStr);
        [id(0x00000029), propget, helpstring("property TimeStamp in EN-US always")]
        HRESULT TimeStampEN_US([out, retval] BSTR* pVal);
        [id(0x0000002a), helpstring("method AddRelatedObjId")]
        HRESULT AddRelatedObjId([in] unsigned int iVal);
        [id(0x0000002b), helpstring("method GetRelatedObjId")]
        HRESULT GetRelatedObjId(
                        [in] int iIndex, 
                        [out, retval] unsigned int* pVal);
        [id(0x0000002c), helpstring("method NumRelatedObjId")]
        HRESULT NumRelatedObjId([out, retval] int* iNumEntries);
    };

    [
      odl,
      uuid(7C740D3E-DE35-44C1-8213-CBB18375E1CB)
    ]
    interface IDSOBJECTAUTO_DUMMY : IUnknown {
        HRESULT _stdcall DUMMY_ENUM_REFERENCES(
                        kDispId_Project __MIDL__IDSOBJECTAUTO_DUMMY0000, 
                        kDispId_VirtualCellGroup __MIDL__IDSOBJECTAUTO_DUMMY0001);
    };

    typedef enum {
        DISPID_ProjectAuthor = 10,
        DISPID_ProjectSubject = 11,
        DISPID_ProjectPreparedFor = 12,
        DISPID_ProjectComments = 13,
        DISPID_ProjectIsReadOnly = 14,
        DISPID_ProjectCreationDate = 15,
        DISPID_ProjectCreationTime = 16,
        DISPID_ProjectModifiedTime = 17,
        DISPID_ProjectModifiedDate = 18,
        DISPID_ProjectModels = 19,
        DISPID_ProjectMaterials = 20,
        DISPID_ProjectFilmCoeffs = 21,
        DISPID_ProjectDataFileGroup = 22,
        DISPID_ProjectAddComment = 23,
        DISPID_ProjectReportSettings = 24,
        DISPID_ProductVersion = 25,
        DISPID_ProjectFirstSaved = 26,
        DISPID_ProjectLastSaved = 27,
        DISPID_ProjectExportTree = 28,
        DISPID_ProjectWereAdvOptsConvertedToCommands = 29,
        DISPID_ProjectImages = 30,
        DISPID_ProjectAddImage = 31,
        DISPID_ProjectCurrentDateTimeForLocale = 32,
        DISPID_ProjectToggleStateEngine = 33,
        DISPID_ProjectResetTree = 34,
        DISPID_ProjectLoadEngrDataLibraryFromFile = 35,
        DISPID_ProjectSaveEngrDataLibraryToFile = 36,
        DISPID_ProjectMaterialNames = 37,
        DISPID_ProjectMaterialPropertyNames = 38,
        DISPID_ProjectLoadMaterialIntoLibraryFromFile = 39,
        DISPID_ProjectWriteMaterialFromLibraryToFile = 40,
        DISPID_ProjectDeleteMaterial = 41,
        DISPID_SaveMaterialSuppression = 42,
        DISPID_ProjectStateEngineManualMode = 43,
        DISPID_ProjectStateEngineAutomaticMode = 44,
        DISPID_ProjectBuildHTMLReportSectionForMaterials = 45,
        DISPID_ProjectImportedFile = 46,
        DISPID_ProjectImportedVersion = 47,
        DISPID_DeleteSuppressedMaterialProps = 48,
        DISPID_ProjectImportObjectLinkMap = 49,
        DISPID_ProjectRepairObjectLinkMap = 50,
        DISPID_ProjectStartTiming = 51,
        DISPID_ProjectStopTiming = 52,
        DISPID_ProjectClearTiming = 53,
        DISPID_ProjectReportTiming = 54,
        DISPID_ProjectSaveProjectBeforeSolution = 55,
        DISPID_ProjectSaveProjectAfterSolution = 56,
        DISPID_ProjectRepairAttachedReferences = 57,
        DISPID_ProjectDefaultSolidMaterialName = 58,
        DISPID_ProjectDefaultFluidMaterialName = 59,
        DISPID_ProjectAddGlobalTag = 60,
        DISPID_ProjectRemoveGlobalTag = 61,
        DISPID_ProjectGlobalTagCount = 62,
        DISPID_ProjectGlobalTag = 63,
        DISPID_ProjectRenameGlobalTag = 64,
        DISPID_ProjectLoadEngrDataLibraryFromFiles = 65,
        DISPID_ProjectLoadMaterialIntoLibraryFromFiles = 66,
        DISPID_ProjectHasGlobalTag = 67,
        DISPID_ProjectExportGeometry = 68,
        DISPID_ProjectExportMesh = 69,
        DISPID_ProjectExportASMJournal = 70,
        DISPID_ProjectInitializeCreep = 71,
        DISPID_ProjectFirstSavedVersion = 72,
        DISPID_ProjectFirstSavedDate = 73,
        DISPID_ProjectNumberOfTimesSaved = 74,
        DISPID_ProjectExportGeometrySelect = 75,
        DISPID_ProjectGetMaterialPropertyNamesForAnalytics = 76
    } kDispId_Project;

    typedef enum {
        DISPID_VCellAutoGenerate = 10,
        DISPID_VCellGroupAddVCell = 11,
        DISPID_VCellGroupCreateVCell = 12,
        DISPID_VCellGroupSetStateAll = 14,
        DISPID_VCellGroupInvertStateAll = 15,
        DISPID_VCellGroupDeleteAll = 16,
        DISPID_VCellGroupAddComment = 30,
        DISPID_VCellGroupComment = 31,
        DISPID_VCellGroupAddFigure = 32,
        DISPID_VCellGroupFigures = 33,
        DISPID_VCellGroupHasError = 40,
        DISPID_VCellGroupErrorString = 41,
        DISPID_VCellGroupVirtualCells = 42,
        DISPID_VCellGroupAutoGen = 43,
        DISPID_VCellGroupIdForRefId = 44,
        DISPID_VCellGroupRegionFlatness = 45,
        DISPID_VCellGroupSharedBoundary = 46,
        DISPID_VCellGroupRegionSize = 47,
        DISPID_VCellGroupRefreshMode = 48,
        DISPID_VCellGroupSmallEdge = 49,
        DISPID_VCellGroupBehavior = 50,
        DISPID_VCellGroupDeleteDependents = 60,
        DISPID_VCellGroupSuppressDependents = 61,
        DISPID_VCellGroupNeedsTreeUpdate = 62,
        DISPID_VCellGroupImages = 63,
        DISPID_VCellGroupAddImage = 64,
        DISPID_CreateVTFromImportedPM = 65,
        DISPID_VCellMergeFaceEdges = 66,
        DISPID_VCellGroupCreateVSplitEdge = 67,
        DISPID_VCellGroupDeleteVSplitEdgeDependents = 68,
        DISPID_VCellGroupDeleteAllVirtualCells = 69,
        DISPID_VCellGroupDeleteAllVirtualSplitEdges = 70,
        DISPID_VCellGroupVirtualSplitEdges = 71,
        DISPID_VCellGroupSuppressVSplitEdgeDependents = 72,
        DISPID_VCellGroupSplitEdgeIdForRefId = 73,
        DISPID_VCellGroupSplitEdgeIdForVertexRefId = 74,
        DISPID_VCellGroupLockChildEdgeSplits = 75,
        DISPID_VCellGroupDeleteVEntityDependents = 76,
        DISPID_VCellGroupDeleteAllVirtualEntities = 77,
        DISPID_VCellGroupMethod = 78,
        DISPID_VCellGroupOrthogonalControl = 79,
        DISPID_VCellGroupDefeatureSize = 80,
        DISPID_VCellGroupElementSize = 81,
        DISPID_VCellGroupFeatureAngle = 82,
        DISPID_VCellGroupAutoGenVirtualCellsOnSelectEntities = 83,
        DISPID_VCellGroupNumVirtualFaces = 84,
        DISPID_VCellGroupNumVirtualEdges = 85,
        DISPID_VCellGroupNumVirtualSplitEdges = 86,
        DISPID_VCellGroupNumVirtualEntities = 87,
        DISPID_VCellGroupUpdateVTStatistics = 88,
        DISPID_VCellGroupCreateVSplitFace = 89,
        DISPID_VCellGroupDeleteVSplitFaceDependents = 90,
        DISPID_VCellGroupDeleteAllVirtualSplitFaces = 91,
        DISPID_VCellGroupSuppressVSplitFaceDependents = 92,
        DISPID_VCellGroupVirtualSplitFaces = 93,
        DISPID_VCellGroupNumVirtualSplitFaces = 94,
        DISPID_VCellGroupCreateVHardVertex = 95,
        DISPID_VCellGroupDeleteVHardVertexDependents = 96,
        DISPID_VCellGroupDeleteAllVirtualHardVertex = 97,
        DISPID_VCellGroupSuppressVHardVertexDependents = 98,
        DISPID_VCellGroupVirtualHardVertex = 99,
        DISPID_VCellGroupNumVirtualHardVertex = 100,
        DISPID_VCellGroupHardVertexIdForRefId = 101,
        DISPID_VCellGroupUpdateAfterRefresh = 102,
        DISPID_VCellGroupNextPreviousVirtualEntity = 103,
        DISPID_VCellGroupRelinkDatabase = 104,
        DISPID_VCellSimplifyFaces = 105,
        DISPID_VCellGroupGaussAngle = 106,
        DISPID_VCellGroupSharedBoundaryRatio = 107,
        DISPID_VCellGroupContactAngle = 108,
        DISPID_VCellGroupDihedralAngle = 109,
        DISPID_VCellGroupAspectRatio = 110,
        DISPID_VCellGroupEdgeAngle = 111,
        DISPID_VCellGroupMaxEdgeLength = 112,
        DISPID_VCellGroupMinEdgeLength = 113,
        DISPID_VCellGroupMaxFaceArea = 114,
        DISPID_VCellGroupMinFaceArea = 115,
        DISPID_VCellGroupMaxSliverWidth = 116,
        DISPID_VCellGroupMinSliverWidth = 117
    } kDispId_VirtualCellGroup;

    [
      odl,
      uuid(6F0FFB07-818A-443E-9EE6-9D94C558103B),
      helpstring("IDSObjects Interface")
    ]
    interface IDSObjects : IUnknown {
        [propget, helpstring("property TreeRoot")]
        HRESULT _stdcall TreeRoot([out, retval] VARIANT* pVal);
        [propget, helpstring("property AccessControl")]
        HRESULT _stdcall AccessControl([out, retval] VARIANT* pVal);
        [helpstring("property TreeRootUnknown")]
        HRESULT _stdcall TreeRootUnknown([out] IUnknown** ppVal);
        [propget, helpstring("property TreeRootNoCreate")]
        HRESULT _stdcall TreeRootNoCreate([out, retval] VARIANT* pVal);
    };

    [
      odl,
      uuid(839A651F-9B97-4AFA-8B35-01D458F7CD40),
      helpstring("IAnsSupportAnnotation Interface")
    ]
    interface IAnsSupportAnnotation : IUnknown {
        [helpstring("property GetAnnotationInfo")]
        HRESULT _stdcall GetAnnotationInfo(
                        [out] BSTR* pbsTitle, 
                        [in] IDispatch* pText);
    };

    typedef enum {
        DISPID_AccelerationGeometrySelection = 10,
        DISPID_AccelerationDefineBy = 11,
        DISPID_AccelerationComponentX = 12,
        DISPID_AccelerationComponentY = 13,
        DISPID_AccelerationComponentZ = 14,
        DISPID_AccelerationMagnitude = 15,
        DISPID_AccelerationAddComment = 16,
        DISPID_AccelerationComment = 17,
        DISPID_AccelerationAddFigure = 18,
        DISPID_AccelerationFigure = 19,
        DISPID_AccelerationDirection = 20,
        DISPID_AccelerationSuppressed = 21,
        DISPID_AccelerationIsGravity = 22,
        DISPID_AccelerationGravityOrientation = 23,
        DISPID_AccelerationTimeType = 24,
        DISPID_AccelerationCoordinateSystemSelection = 25,
        DISPID_AccelerationNumSequenceEntries = 26,
        DISPID_AccelerationSequenceComponentX = 27,
        DISPID_AccelerationSequenceComponentY = 28,
        DISPID_AccelerationSequenceComponentZ = 29,
        DISPID_AccelerationLoadVariation = 30,
        DISPID_AccelerationImages = 31,
        DISPID_AccelerationAddImage = 32,
        DISPID_AccelerationDomainLowerLimit = 33,
        DISPID_AccelerationDomainUpperLimit = 34,
        DISPID_AccelerationUnitTypeByDispid = 35,
        DISPID_AccelerationUnitStringByDispid = 36,
        DISPID_AccelerationFunctionUnitSystem = 37,
        DISPID_AccelerationParamNameByDispid = 38,
        DISPID_AccelerationFunctionAngleMeasure = 39,
        DISPID_AccelerationFunctionAngularVelocityMeasure = 40,
        DISPID_AccelerationFunctionNumberOfSegments = 41,
        DISPID_AccelerationIsBaseExcitation = 42,
        DISPID_AccelerationBoundaryConditionSelection = 43,
        DISPID_AccelerationBaseExcitationDirection = 44,
        DISPID_AccelerationBaseExcitationPhaseAngle = 45,
        DISPID_AccelerationIsAbsoluteResult = 46,
        DISPID_AccelerationBaseExcitationPhaseAngleNew = 47,
        DISPID_AccelerationMagnitudeImag = 48,
        DISPID_AccelerationSetPropertyByStep = 49
    } kDispId_Acceleration;

    [
      odl,
      uuid(23101870-A1F1-450F-8CF7-C442DCD26D70),
      helpstring("IDSAccelerationAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSAccelerationAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x0000000a), propget, helpstring("property GeometrySelection")]
        HRESULT GeometrySelection([out, retval] BSTR* pVal);
        [id(0x00000018), propget, helpstring("property TimeType")]
        HRESULT TimeType([out, retval] DSTimeType* pTimeType);
        [id(0x00000018), propput, helpstring("property TimeType")]
        HRESULT TimeType([in] DSTimeType pTimeType);
        [id(0x0000000b), propget, helpstring("property DefineBy")]
        HRESULT DefineBy([out, retval] DefineByType* pVal);
        [id(0x0000000b), propput, helpstring("property DefineBy")]
        HRESULT DefineBy([in] DefineByType pVal);
        [id(0x00000019), propget, helpstring("property CoordinateSystemSelection")]
        HRESULT CoordinateSystemSelection([out, retval] int* pVal);
        [id(0x00000019), propput, helpstring("property CoordinateSystemSelection")]
        HRESULT CoordinateSystemSelection([in] int pVal);
        [id(0x0000000c), propget, helpstring("property ComponentX")]
        HRESULT ComponentX([out, retval] VARIANT* pVal);
        [id(0x0000000c), propput, helpstring("property ComponentX")]
        HRESULT ComponentX([in] VARIANT pVal);
        [id(0x0000000d), propget, helpstring("property ComponentY")]
        HRESULT ComponentY([out, retval] VARIANT* pVal);
        [id(0x0000000d), propput, helpstring("property ComponentY")]
        HRESULT ComponentY([in] VARIANT pVal);
        [id(0x0000000e), propget, helpstring("property ComponentZ")]
        HRESULT ComponentZ([out, retval] VARIANT* pVal);
        [id(0x0000000e), propput, helpstring("property ComponentZ")]
        HRESULT ComponentZ([in] VARIANT pVal);
        [id(0x0000000f), propget, helpstring("property Magnitude")]
        HRESULT Magnitude([out, retval] VARIANT* pVal);
        [id(0x0000000f), propput, helpstring("property Magnitude")]
        HRESULT Magnitude([in] VARIANT pVal);
        [id(0x00000025), propput, helpstring("property FunctionUnitSystem")]
        HRESULT FunctionUnitSystem([in] VARIANT vtVal);
        [id(0x00000025), propget, helpstring("property FunctionUnitSystem")]
        HRESULT FunctionUnitSystem([out, retval] VARIANT* vtVal);
        [id(0x00000027), propput, helpstring("property FunctionAngleMeasure")]
        HRESULT FunctionAngleMeasure([in] VARIANT vtVal);
        [id(0x00000027), propget, helpstring("property FunctionAngleMeasure")]
        HRESULT FunctionAngleMeasure([out, retval] VARIANT* vtVal);
        [id(0x00000028), propput, helpstring("property FunctionAngularVelocityMeasure")]
        HRESULT FunctionAngularVelocityMeasure([in] VARIANT vtVal);
        [id(0x00000028), propget, helpstring("property FunctionAngularVelocityMeasure")]
        HRESULT FunctionAngularVelocityMeasure([out, retval] VARIANT* vtVal);
        [id(0x00000010), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x00000012), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x00000011), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x00000013), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x00000014), propput, helpstring("property Direction")]
        HRESULT Direction([in] IDispatch* rhs);
        [id(0x00000015), propget, helpstring("property Suppressed")]
        HRESULT Suppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000015), propput, helpstring("property Suppressed")]
        HRESULT Suppressed([in] VARIANT_BOOL pVal);
        [id(0x00000016), propget, helpstring("property IsGravity")]
        HRESULT IsGravity([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000016), propput, helpstring("property IsGravity")]
        HRESULT IsGravity([in] VARIANT_BOOL pVal);
        [id(0x0000002a), propget, helpstring("property IsBaseExcitation")]
        HRESULT IsBaseExcitation([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000002a), propput, helpstring("property IsBaseExcitation")]
        HRESULT IsBaseExcitation([in] VARIANT_BOOL pVal);
        [id(0x0000002e), propget, helpstring("property IsAbsoluteResult")]
        HRESULT IsAbsoluteResult([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000002e), propput, helpstring("property IsAbsoluteResult")]
        HRESULT IsAbsoluteResult([in] VARIANT_BOOL pVal);
        [id(0x0000002b), propget, helpstring("property BoundaryConditionSelection")]
        HRESULT BoundaryConditionSelection([out, retval] int* pVal);
        [id(0x0000002b), propput, helpstring("property BoundaryConditionSelection")]
        HRESULT BoundaryConditionSelection([in] int pVal);
        [id(0x0000002c), propget, helpstring("property BaseExcitationDirection")]
        HRESULT BaseExcitationDirection([out, retval] NormalOrientationType* pVal);
        [id(0x0000002c), propput, helpstring("property BaseExcitationDirection")]
        HRESULT BaseExcitationDirection([in] NormalOrientationType pVal);
        [id(0x0000002d), propget, helpstring("property PhaseAngle")]
        HRESULT PhaseAngle([out, retval] double* pVal);
        [id(0x0000002d), propput, helpstring("property PhaseAngle")]
        HRESULT PhaseAngle([in] double pVal);
        [id(0x00000017), propget, helpstring("property GravityOrientation")]
        HRESULT GravityOrientation([out, retval] GravityOrientationType* pVal);
        [id(0x00000017), propput, helpstring("property GravityOrientation")]
        HRESULT GravityOrientation([in] GravityOrientationType pVal);
        [id(0x0000002f), propget, helpstring("property PhaseAngleNew")]
        HRESULT PhaseAngleNew([out, retval] VARIANT* pVal);
        [id(0x0000002f), propput, helpstring("property PhaseAngleNew")]
        HRESULT PhaseAngleNew([in] VARIANT pVal);
        [id(0x00000030), propget, helpstring("property MagnitudeImag")]
        HRESULT MagnitudeImag([out, retval] VARIANT* pVal);
        [id(0x00000030), propput, helpstring("property MagnitudeImag")]
        HRESULT MagnitudeImag([in] VARIANT pVal);
        [id(0x0000001a), propget, helpstring("property NumSequenceEntries")]
        HRESULT NumSequenceEntries([out, retval] unsigned int* pVal);
        [id(0x0000001a), propput, helpstring("property NumSequenceEntries")]
        HRESULT NumSequenceEntries([in] unsigned int pVal);
        [id(0x0000001b), propget, helpstring("property SequenceComponentX")]
        HRESULT SequenceComponentX(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x0000001b), propput, helpstring("property SequenceComponentX")]
        HRESULT SequenceComponentX(
                        [in] int index, 
                        [in] double pVal);
        [id(0x0000001c), propget, helpstring("property SequenceComponentY")]
        HRESULT SequenceComponentY(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x0000001c), propput, helpstring("property SequenceComponentY")]
        HRESULT SequenceComponentY(
                        [in] int index, 
                        [in] double pVal);
        [id(0x0000001d), propget, helpstring("property SequenceComponentZ")]
        HRESULT SequenceComponentZ(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x0000001d), propput, helpstring("property SequenceComponentZ")]
        HRESULT SequenceComponentZ(
                        [in] int index, 
                        [in] double pVal);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
        [id(0x0000001e), propget, helpstring("property LoadVariation")]
        HRESULT LoadVariation(
                        [in] int ComponentPosition, 
                        [out, retval] IDispatch** ppDisp);
        [id(0x0000001f), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000020), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00000021), propget, helpstring("property DomainLowerLimit")]
        HRESULT DomainLowerLimit([out, retval] double* pVal);
        [id(0x00000021), propput, helpstring("property DomainLowerLimit")]
        HRESULT DomainLowerLimit([in] double pVal);
        [id(0x00000022), propget, helpstring("property DomainUpperLimit")]
        HRESULT DomainUpperLimit([out, retval] double* pVal);
        [id(0x00000022), propput, helpstring("property DomainUpperLimit")]
        HRESULT DomainUpperLimit([in] double pVal);
        [id(0x00000023), propget, helpstring("property UnitTypeByDispid")]
        HRESULT UnitTypeByDispid(
                        [in] int dispid, 
                        [out, retval] int* unitType);
        [id(0x00000024), propget, helpstring("property UnitStringByDispid")]
        HRESULT UnitStringByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* unitString);
        [id(0x60020048), propget, helpstring("Get whether the BC is active at a step")]
        HRESULT ActiveAtLoadStep(
                        [in] unsigned int stepNumber, 
                        [out, retval] VARIANT_BOOL* bActive);
        [id(0x60020048), propput, helpstring("Get whether the BC is active at a step")]
        HRESULT ActiveAtLoadStep(
                        [in] unsigned int stepNumber, 
                        [in] VARIANT_BOOL bActive);
        [id(0x6002004a), propget, helpstring("property DataViewType ")]
        HRESULT DataViewType(
                        [in] int iAnsBCLVType, 
                        [out, retval] int* pVal);
        [id(0x00000026), propget, helpstring("property ParamNameByDispid")]
        HRESULT ParamNameByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* paramName);
        [id(0x00000029), propget, helpstring("property FunctionNumberOfSegments")]
        HRESULT FunctionNumberOfSegments([out, retval] int* pVal);
        [id(0x00000029), propput, helpstring("property FunctionNumberOfSegments")]
        HRESULT FunctionNumberOfSegments([in] int pVal);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x00000031), helpstring("method SetPropertyByStep")]
        HRESULT SetPropertyByStep(
                        [in] int step, 
                        [in] BSTR propertyName, 
                        [in] VARIANT newVal);
    };

    typedef enum {
        kTT_Static = 0,
        kTT_Sequence = 1,
        kTT_Harmonic = 2,
        kTT_Transient = 3,
        kTT_Spectrum = 4,
        kTT_ResponseSpectrum = 5
    } DSTimeType;

    typedef enum {
        kComponents = 0,
        kGeometry = 1,
        kNormalTo = 2,
        kComponentX = 3,
        kComponentY = 4,
        kComponentZ = 5,
        kComplexComponents = 6,
        kComplexGeometry = 7,
        kComplexNormalTo = 8
    } DefineByType;

    typedef enum {
        kNoState = 0,
        kFullyDefined = 1,
        kUnderDefined = 2,
        kSuppressed = 3,
        kNotSolved = 4,
        kSolved = 5,
        kObsolete = 6,
        kError = 7,
        kLicenseConflict = 8,
        kIgnored = 9,
        kHidden = 10,
        kSolving = 11,
        kSolvedNotLoaded = 12,
        kSolveFailed = 13,
        kSolveFailedNotLoaded = 14,
        kPartialSolved = 15,
        kMeshed = 16,
        kWaitForValidation = 17
    } eObjectState;

    typedef enum {
        kWorldNormalOrientationNone = 0xffffff9d,
        kWorldXAxis = 0,
        kWorldYAxis = 1,
        kWorldZAxis = 2,
        kWorldXYAxis = 3,
        kWorldXZAxis = 4,
        kWorldYZAxis = 5,
        kWorldXYZAxis = 6,
        kWorldTotal = 7
    } NormalOrientationType;

    typedef enum {
        gPosWorldXAxis = 0,
        gNegWorldXAxis = 1,
        gPosWorldYAxis = 2,
        gNegWorldYAxis = 3,
        gPosWorldZAxis = 4,
        gNegWorldZAxis = 5
    } GravityOrientationType;

    typedef enum {
        kAnsysComponents = 1
    } eAnsysCommandsType;

    [
      odl,
      uuid(8F1EF071-102E-4CC3-81D7-3087814274EB),
      helpstring("IDSAccessControl Interface"),
      dual,
      oleautomation
    ]
    interface IDSAccessControl : IDispatch {
        [id(0x00000001), propget, helpstring("property ValueLength")]
        HRESULT ValueLength([out, retval] VARIANT* pVal);
        [id(0x00000001), propput, helpstring("property ValueLength")]
        HRESULT ValueLength([in] int pVal);
        [id(0x00000002), propget, helpstring("property UnitSystem")]
        HRESULT UnitSystem([out, retval] VARIANT* pVal);
        [id(0x00000002), propput, helpstring("property UnitSystem")]
        HRESULT UnitSystem([in] VARIANT pVal);
        [id(0x00000003), propget, helpstring("property HTMLPath")]
        HRESULT HTMLPath([out, retval] VARIANT* pVal);
        [id(0x00000003), propput, helpstring("property HTMLPath")]
        HRESULT HTMLPath([in] BSTR pVal);
        [id(0x00000004), propget, helpstring("property DisplayImages")]
        HRESULT DisplayImages([out, retval] VARIANT* pVal);
        [id(0x00000004), propput, helpstring("property DisplayImages")]
        HRESULT DisplayImages([in] long pVal);
        [id(0x00000005), helpstring("method ExportImage")]
        HRESULT ExportImage(
                        int dsid, 
                        BSTR bsPath, 
                        int width, 
                        int height, 
                        ImageType type);
        [id(0x00000006), propget, helpstring("property ActiveProject")]
        HRESULT ActiveProject([out, retval] VARIANT* pVal);
        [id(0x00000006), propput, helpstring("property ActiveProject")]
        HRESULT ActiveProject([in] int pVal);
        [id(0x00000007), propget, helpstring("property Drawings")]
        HRESULT Drawings([out, retval] VARIANT* pVal);
        [id(0x00000008), helpstring("method Undo")]
        HRESULT Undo([in] int i_lNoOfActions);
        [id(0x00000009), helpstring("method Redo")]
        HRESULT Redo([in] int i_lNoOfActions);
        [id(0x0000000a), propget, helpstring("property UnitString")]
        HRESULT unitString(
                        [in] int ulCategory, 
                        [out, retval] BSTR* pVal);
        [id(0x0000000b), helpstring("method ConvertNumberByColumns")]
        HRESULT ConvertNumberByDigits(
                        [in] VARIANT vNum, 
                        [in] unsigned int numColumns, 
                        [out, retval] BSTR* pbsNum);
        [id(0x0000000c), helpstring("method ConvertNumberByDigits")]
        HRESULT ConvertNumberByColumns(
                        [in] VARIANT vNum, 
                        [in] unsigned int numDigits, 
                        [out, retval] BSTR* pbsNum);
        [id(0x0000000e), propget, helpstring("property CustomData")]
        HRESULT CustomData([out, retval] IDispatch** ppDictionary);
        [id(0x0000000f), propget, helpstring("property UseDegrees")]
        HRESULT UseDegrees([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000000f), propput, helpstring("property UseDegrees")]
        HRESULT UseDegrees([in] VARIANT_BOOL pVal);
        [id(0x00000010), propget, helpstring("property UseRadsSecond")]
        HRESULT UseRadsSecond([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000010), propput, helpstring("property UseRadsSecond")]
        HRESULT UseRadsSecond([in] VARIANT_BOOL pVal);
        [id(0x00000011), propget, helpstring("property UseMetricTemperatureInCelsius")]
        HRESULT UseMetricTemperatureInCelsius([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000011), propput, helpstring("property UseMetricTemperatureInCelsius")]
        HRESULT UseMetricTemperatureInCelsius([in] VARIANT_BOOL pVal);
    };

    typedef enum {
        kJPEG = 0,
        kTIFF = 1,
        kBMP = 2,
        kPCX = 3,
        kTARGA = 4
    } ImageType;

    typedef enum {
        DISPID_AdvancedOptionsInput = 11,
        DISPID_AdvancedOptionsText = 12,
        DISPID_AdvancedOptionsSuppressed = 13,
        DISPID_AdvancedOptionsAddComment = 50,
        DISPID_AdvancedOptionsComment = 51,
        DISPID_AdvancedOptionsImages = 52,
        DISPID_AdvancedOptionsAddImage = 53
    } kDispId_AdvancedOptions;

    [
      odl,
      uuid(02F1270E-EA5A-434A-86E8-E3489ADAE432),
      helpstring("IDSAdvancedOptionsAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSAdvancedOptionsAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x0000000b), propget, helpstring("property Input")]
        HRESULT Input([out, retval] BSTR* pVal);
        [id(0x0000000b), propput, helpstring("property Input")]
        HRESULT Input([in] BSTR pVal);
        [id(0x0000000c), propget, helpstring("property Text")]
        HRESULT Text([out, retval] BSTR* pVal);
        [id(0x0000000c), propput, helpstring("property Text")]
        HRESULT Text([in] BSTR pVal);
        [id(0x0000000d), propget, helpstring("property Suppressed")]
        HRESULT Suppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000000d), propput, helpstring("property Suppressed")]
        HRESULT Suppressed([in] VARIANT_BOOL pVal);
        [id(0x00000032), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x00000033), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
        [id(0x00000034), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000035), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
    };

    typedef enum {
        DISPID_AdvancedPostOutputInput = 11,
        DISPID_AdvancedPostOutputSourceType = 12,
        DISPID_AdvancedPostOutputHTML = 13,
        DISPID_AdvancedPostOutputImagePath = 14,
        DISPID_AdvancedPostOutputGenerateHTML = 15,
        DISPID_AdvancedPostOutputImageSize = 16,
        DISPID_AdvancedPostOutputAddComment = 50,
        DISPID_AdvancedPostOutputComment = 51,
        DISPID_AdvancedPostOutputImages = 52,
        DISPID_AdvancedPostOutputAddImage = 53
    } kDispId_AdvancedPostOutput;

    [
      odl,
      uuid(34C706A7-EAF1-4783-8251-ADB9F0FE2929),
      helpstring("IDSAdvancedPostOutputAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSAdvancedPostOutputAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x00000032), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x00000033), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x0000000c), propget, helpstring("property SourceType")]
        HRESULT SourceType([out, retval] VARIANT* pVal);
        [id(0x0000000c), propput, helpstring("property SourceType")]
        HRESULT SourceType([in] VARIANT pVal);
        [id(0x0000000d), propget, helpstring("property HTML")]
        HRESULT HTML([out, retval] BSTR* pVal);
        [id(0x0000000d), propput, helpstring("property HTML")]
        HRESULT HTML([in] BSTR pVal);
        [id(0x0000000e), propget, helpstring("property ImagePath")]
        HRESULT ImagePath([out, retval] BSTR* pVal);
        [id(0x0000000e), propput, helpstring("property ImagePath")]
        HRESULT ImagePath([in] BSTR pVal);
        [id(0x0000000f), helpstring("method GenerateHTML")]
        HRESULT GenerateHTML(
                        [in] BSTR bsFile, 
                        [out, retval] IDispatch** ppVal);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
        [id(0x00000034), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000035), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
    };

    typedef enum {
        DISPID_AdvancedPostProcessingInput = 11,
        DISPID_AdvancedPostProcessingText = 12,
        DISPID_AdvancedPostProcessingSuppressed = 13,
        DISPID_AdvancedPostProcessingAddPostOutput = 14,
        DISPID_AdvancedPostProcessingAdvancedPostOutputs = 15,
        DISPID_AdvancedPostProcessingRSTFilePath = 20,
        DISPID_AdvancedPostProcessingAddComment = 50,
        DISPID_AdvancedPostProcessingComment = 51,
        DISPID_AdvancedPostProcessingImages = 52,
        DISPID_AdvancedPostProcessingAddImage = 53
    } kDispId_AdvancedPostProcessing;

    [
      odl,
      uuid(B2D3FCB8-45F3-40D4-9253-3A1E38449C2A),
      helpstring("IDSAdvancedPostProcessingAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSAdvancedPostProcessingAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x0000000b), propget, helpstring("property Input")]
        HRESULT Input([out, retval] BSTR* pVal);
        [id(0x0000000b), propput, helpstring("property Input")]
        HRESULT Input([in] BSTR pVal);
        [id(0x0000000c), propget, helpstring("property Text")]
        HRESULT Text([out, retval] BSTR* pVal);
        [id(0x0000000c), propput, helpstring("property Text")]
        HRESULT Text([in] BSTR pVal);
        [id(0x0000000d), propget, helpstring("property Suppressed")]
        HRESULT Suppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000000d), propput, helpstring("property Suppressed")]
        HRESULT Suppressed([in] VARIANT_BOOL pVal);
        [id(0x00000014), propget, helpstring("property RSTFilePath")]
        HRESULT RSTFilePath([out, retval] BSTR* pBSFilePath);
        [id(0x0000000e), helpstring("method AddPostOutput")]
        HRESULT AddPostOutput([out, retval] IDispatch** pDisp);
        [id(0x0000000f), propget, helpstring("property AdvancedPostOutputs")]
        HRESULT AdvancedPostOutputs([out, retval] IDispatch** ppDisp);
        [id(0x00000032), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x00000033), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
        [id(0x00000034), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000035), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
    };

    typedef enum {
        DISPID_AlertCriteria = 10,
        DISPID_AlertAlertValue = 11,
        DISPID_AlertCurrentValue = 12,
        DISPID_AlertStatus = 13,
        DISPID_AlertUnitString = 14,
        DISPID_AlertAddComment = 15,
        DISPID_AlertComment = 16,
        DISPID_AlertImages = 17,
        DISPID_AlertAddImage = 18
    } kDispId_Alert;

    [
      odl,
      uuid(EA89EF9C-C026-490C-8DEF-5D0572F8C2AA),
      helpstring("IDSAlertAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSAlertAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x0000000a), propget, helpstring("property Criteria")]
        HRESULT Criteria([out, retval] DSMinMax* pVal);
        [id(0x0000000a), propput, helpstring("property Criteria")]
        HRESULT Criteria([in] DSMinMax pVal);
        [id(0x0000000b), propget, helpstring("property AlertValue")]
        HRESULT AlertValue([out, retval] double* pVal);
        [id(0x0000000b), propput, helpstring("property AlertValue")]
        HRESULT AlertValue([in] double pVal);
        [id(0x0000000c), propget, helpstring("property CurrentValue")]
        HRESULT CurrentValue([out, retval] double* pVal);
        [id(0x0000000d), propget, helpstring("property Status")]
        HRESULT Status([out, retval] DSPassFailResult* pVal);
        [id(0x0000000e), propget, helpstring("property UnitString")]
        HRESULT unitString([out, retval] BSTR* pVal);
        [id(0x0000000f), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x00000010), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** pDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
        [id(0x00000011), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000012), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
    };

    typedef enum {
        DS_MIN = 0,
        DS_MAX = 1
    } DSMinMax;

    typedef enum {
        DS_FAIL_BELOW = 0,
        DS_FAIL_ABOVE = 1,
        DS_PASS_BELOW = 2,
        DS_PASS_ABOVE = 3,
        DS_UNKNOWN = 4
    } DSPassFailResult;

    typedef enum {
        DISPID_JobProgressMapJobConnections = 10,
        DISPID_JobProgressMapJobClearAll = 20
    } kDispId_JobProgressMap;

    [
      odl,
      uuid(94EF44A4-B64E-46F0-BC44-44A1ADEE8488),
      helpstring("IDSJobProgressMap Interface"),
      dual,
      oleautomation
    ]
    interface IDSJobProgressMap : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x0000000a), propget, helpstring("property JobConnections")]
        HRESULT JobConnections([out, retval] IAnsIDispColl** pVal);
        [id(0x00000014), helpstring("property ClearAll")]
        HRESULT ClearAll();
    };

    [
      odl,
      uuid(A567F734-24AA-4AFD-A262-3E2338B0420D),
      helpstring("IAnsIDispColl Interface"),
      dual,
      nonextensible,
      oleautomation
    ]
    interface IAnsIDispColl : IDispatch {
        [id(0x00000001), propget, helpstring("property Count")]
        HRESULT Count([out, retval] unsigned int* plCount);
        [id(00000000), propget, helpstring("property Item")]
        HRESULT Item(
                        [in] unsigned int lNum, 
                        [out, retval] IDispatch** pdVal);
        [id(0xfffffffc), propget, helpstring("property NewEnum")]
        HRESULT _NewEnum([out, retval] IUnknown** ppunkEnum);
        [id(0x00000002), helpstring("method Add")]
        HRESULT Add([in] IDispatch* dNewVal);
        [id(0x00000003), helpstring("method Clear")]
        HRESULT Clear();
    };

    typedef enum {
        DISPID_AnswerSetResults = 10,
        DISPID_AnswerSetFrequencyGroup = 11,
        DISPID_AnswerSetStructuralResults = 12,
        DISPID_AnswerSetThermalResults = 13,
        DISPID_AnswerSetShapeResults = 14,
        DISPID_AnswerSetStressSafetyTools = 15,
        DISPID_AnswerSetMaxRefinementLoops = 16,
        DISPID_AnswerSetSaveAnsysDB = 17,
        DISPID_AnswerSetBranch = 18,
        DISPID_AnswerSetComments = 19,
        DISPID_AnswerSetFigures = 20,
        DISPID_AnswerSetFatigueTools = 21,
        DISPID_AnswerSetTemplates = 22,
        DISPID_AnswerSetAddFatigueTool = 24,
        DISPID_AnswerSetAddResult = 25,
        DISPID_AnswerSetAddFrequencyGroup = 26,
        DISPID_AnswerSetAddParameterSet = 27,
        DISPID_AnswerSetAddComment = 28,
        DISPID_AnswerSetAddFigure = 29,
        DISPID_AnswerSetAddTemplate = 30,
        DISPID_AnswerSetAddStressSafetyTool = 31,
        DISPID_AnswerSetFindAnswers = 32,
        DISPID_UserAborted = 33,
        DISPID_AnswerSetAddReportHelper = 34,
        DISPID_AnswerSetParameterManager = 35,
        DISPID_AnswerSetSaveAnsysDBFileName = 36,
        DISPID_AnswerSetSolverType = 37,
        DISPID_AnswerSetWriteInputFile = 38,
        DISPID_AnswerSetAdvancedPostProcessing = 39,
        DISPID_AnswerSetSolveBranch = 100,
        DISPID_AnswerSetRemoveReportHelper = 101,
        DISPID_AnswerSetUseLargeDeformation = 102,
        DISPID_AnswerSetAddBucklingGroup = 103,
        DISPID_AnswerSetBucklingGroup = 104,
        DISPID_AnswerSetAddHarmonicTool = 105,
        DISPID_AnswerSetHarmonicTools = 106,
        DISPID_AnswerSetAnalysisType = 107,
        DISPID_AnswerSetUpdateFEData = 108,
        DISPID_AnswerSetNonLinear = 109,
        DISPID_AnswerSetSolutionSummary = 110,
        DISPID_AnswerSetUseWeakSprings = 111,
        DISPID_AnswerSetAddAdvancedPostProcessing = 115,
        DISPID_AnswerSetWorkingDir = 116,
        DISPID_AnswerSetSolverMessages = 117,
        DISPID_AnswerSetDisplaySolverMessages = 118,
        DISPID_AnswerSetSolveBranch2 = 119,
        DISPID_AnswerSetLoadRemoteResults = 120,
        DISPID_AnswerSetRemoteJobDescriptor = 121,
        DISPID_AnswerSetAddContactTool = 123,
        DISPID_AnswerSetAddSolutionInfoTool = 124,
        DISPID_AnswerSetSolutionInfoTools = 125,
        DISPID_AnswerSetContactTools = 126,
        DISPID_AnswerSetCopyProcessSettingsFrom = 127,
        DISPID_AnswerSetSolveProcessSite = 128,
        DISPID_AnswerSetPassLicenseToQueue = 129,
        DISPID_AnswerSetLicenseToUse = 130,
        DISPID_AnswerSetCEMachineName = 131,
        DISPID_AnswerSetCEQueueName = 132,
        DISPID_AnswerSetGetResultsAutomatically = 133,
        DISPID_AnswerSetLSFQueueName = 134,
        DISPID_AnswerSetUNIXMachineName = 135,
        DISPID_AnswerSetUNIXLoginName = 136,
        DISPID_AnswerSetUNIXLoginPassword = 137,
        DISPID_AnswerSetUNIXSolveCommand = 138,
        DISPID_AnswerSetUNIXWorkingDirectory = 139,
        DISPID_AnswerSetUseAutoTimeStepping = 140,
        DISPID_AnswerSetInitialSteps = 141,
        DISPID_AnswerSetMaximumSteps = 142,
        DISPID_AnswerSetMinimumSteps = 143,
        DISPID_AnswerSetNumberOfSteps = 144,
        DISPID_AnswerSetCopyProcessSettingsTo = 145,
        DISPID_AnswerSetAddCommandEditor = 146,
        DISPID_AnswerSetLSFQueueNameIndex = 147,
        DISPID_AnswerSetCEQueueNameIndex = 148,
        DISPID_AnswerSetAddBeamTool = 149,
        DISPID_AnswerSetBeamTools = 150,
        DISPID_AnswerSetReturnIncompleteSolution = 151,
        DISPID_AnswerSetCommandEditors = 152,
        DISPID_AnswerSetStopRemoteSolution = 153,
        DISPID_AnswerSetRefinementDepth = 154,
        DISPID_AnswerSetAddResultTable = 155,
        DISPID_AnswerSetResultTables = 156,
        DISPID_AnswerSetInquireRemoteSolution = 157,
        DISPID_AnswerSetSolveInductance = 158,
        DISPID_AnswerSetAddProbeTool = 159,
        DISPID_AnswerSetProbeTools = 160,
        DISPID_AnswerSetNumberOfProcessesToUse = 161,
        DISPID_AnswerSetCalculateStress = 162,
        DISPID_AnswerSetCalculateStrain = 163,
        DISPID_AnswerSetCalculateContact = 164,
        DISPID_AnswerSetCalculateError = 165,
        DISPID_AnswerSetSolveBranch3 = 166,
        DISPID_AnswerSetNumSequenceEntries = 167,
        DISPID_AnswerSetSequenceAutoTimeStepping = 168,
        DISPID_AnswerSetSequenceInitialSteps = 169,
        DISPID_AnswerSetSequenceMinimumSteps = 170,
        DISPID_AnswerSetSequenceMaximumSteps = 171,
        DISPID_AnswerSetSequenceNumberOfSteps = 172,
        DISPID_AnswerSetTimeType = 173,
        DISPID_AnswerSetSolverMessage = 174,
        DISPID_AnswerSetSolvingState = 175,
        DISPID_AnswerSetUseWeakSpringsStiffness = 176,
        DISPID_AnswerSetUseWeakSpringsFactor = 177,
        DISPID_AnswerSetUseWeakSpringsValue = 178,
        DISPID_AnswerSetTransientEndTime = 179,
        DISPID_AnswerSetNonLinearFormulation = 180,
        DISPID_AnswerSetReformulationTolerance = 181,
        DISPID_AnswerSetTimeStepDefineby = 182,
        DISPID_AnswerSetInitialTimeStep = 183,
        DISPID_AnswerSetMinimumTimeStep = 184,
        DISPID_AnswerSetMaximumTimeStep = 185,
        DISPID_AnswerSetTimeStep = 186,
        DISPID_AnswerSetThermalResultFileLocation = 187,
        DISPID_AnswerSetNumSolvedTimePoints = 188,
        DISPID_AnswerSetSolvedTimePoint = 189,
        DISPID_AnswerSetResetDefaults = 190,
        DISPID_AnswerSetSaveXML = 191,
        DISPID_AnswerSetLoadXML = 192,
        DISPID_AnswerSetSolutionSettings = 193,
        DISPID_AnswerSetNumResultTimePoints = 194,
        DISPID_AnswerSetResultTimePoint = 195,
        DISPID_AnswerSetCalculateThermalFlux = 196,
        DISPID_AnswerSetUseMemorySettings = 197,
        DISPID_AnswerSetUseMemorySettingsManualWSValue = 198,
        DISPID_AnswerSetUseMemorySettingsManualDBValue = 199,
        DISPID_AnswerSetJobAssignment = 200,
        DISPID_AnswerSetThermalResultFileNameControl = 201,
        DISPID_AnswerSetCalculateResults = 202,
        DISPID_AnswerSetWillSolve = 203,
        DISPID_AnswerSetWillPost = 204,
        DISPID_AnswerSetThermalResultFileLocationOverride = 205,
        DISPID_AnswerSetHasDependentSolves = 206,
        DISPID_AnswerSetSolutionState = 207,
        DISPID_AnswerSetFindAnswersType = 208,
        DISPID_AnswerSetDistributedSolve = 209,
        DISPID_AnswerSetImages = 210,
        DISPID_AnswerSetAddImage = 211,
        DISPID_AnswerSetAddResultChart = 212,
        DISPID_AnswerSetRefinementType = 213,
        DISPID_AnswerSetRefinementEnergyBased = 214,
        DISPID_AnswerSetRefinementErrorBased = 215,
        DISPID_AnswerSetAddResultProbe = 216,
        DISPID_AnswerSetSolverFeedbackCode = 217,
        DISPID_AnswerSetMultipleChildrenAdded = 218,
        DISPID_AnswerSetUpdatePostResults = 219,
        DISPID_AnswerSetSyncResultFilePrefix = 220,
        DISPID_AnswerSetAddCustomResult = 221,
        DISPID_AnswerSetReadResultFile = 222,
        DISPID_AnswerSetDoesResultFileExist = 223,
        DISPID_AnswerSetAddPreDefinedCustomResult = 224,
        DISPID_AnswerSetAdaptiveMesh = 225,
        DISPID_AnswerSetResetSolution = 226,
        DISPID_AnswerSetClearSolution = 227,
        DISPID_AnswerSetResetResults = 228,
        DISPID_AnswerSetClearResults = 229,
        DISPID_AnswerSetUpdateSolution = 230,
        DISPID_AnswerSetUpdateResults = 231,
        DISPID_AnswerSetBrachHideFlag = 232,
        DISPID_AnswerSetLockForShareLicense = 233,
        DISPID_AnswerSetUnLockForShareLicense = 234,
        DISPID_AnswerSetIsConvergencePresent = 235,
        DISPID_AnswerSetAsyncJobInSynchronousMode = 236,
        DISPID_AnswerSetShouldExportResults = 237,
        DISPID_AnswerSetExportResults = 238,
        DISPID_AnserSetClearRemoteJobInformation = 239,
        DISPID_AnswerSetSolutionOutcomeType = 240,
        DISPID_AnswerSetSolutionTimeAchieved = 241,
        DISPID_AnswerSetSetCouplingServiceConnectionInformation = 242,
        DISPID_AnswerSetInvalidateSolution = 243,
        DISPID_AnswerSetInterruptRemoteSolution = 244,
        DISPID_AnswerSetAddDAResult = 245,
        DISPID_AnswerSetModalResultsCase = 249,
        DISPID_AnswerSetResultsAvailability = 250,
        DISPID_AnswerSetAddFractureTool = 251,
        DISPID_AnswerSetCyclicSectorDisplayRangeSize = 252,
        DISPID_AnswerSetCyclicSectorDisplayRangeBegin = 253,
        DISPID_AnswerSetCyclicPostMethod = 254,
        DISPID_AnswerSetNotDPUpdate = 255,
        DISPID_AnswerSetJobHPCInfo = 256,
        DISPID_AnswerSetDisconnectRSMJob = 257,
        DISPID_AnswerSetCustomResults = 258,
        DISPID_AnswerSetResultProbe = 259,
        DISPID_AnswerSetJobProgressMap = 260,
        DISPID_AnswerSetWS_SS_CM = 261,
        DISPID_AnswerSetAddCustomResultForACT = 262,
        DISPID_AnswerSetAddBoltTool = 263,
        DISPID_AnswerSetBoltTools = 264,
        DISPID_AnswerSetPostProcessingMeshSource = 265,
        DISPID_AnswerSetPostProcessingBeamStress = 266,
        DISPID_AnswerSetGenerateCDBFilesFromResultTime = 267,
        DISPID_AnswerSetGenerateCDBFilesFromResultMode = 268,
        DISPID_AnswerSetAddGroupedScopedACPResults = 269,
        DISPID_AnswerSetRefreshCNDTrackerData = 270,
        DISPID_AnswerSetAddGroupedScopedCustomResult = 271,
        DISPID_AnswerSetCreateProbeResultsForContactRegions = 272,
        DISPID_AnswerSetRefreshSelectedCNDTrackerData = 273,
        DISPID_AnswerSetAddContactToolWithWorksheetScoping = 274,
        DISPID_AnswerSetAddCompositeFailureTool = 275,
        DISPID_AnswerSetElapsedRunTime = 276,
        DISPID_AnswerSetMemoryUsed = 277,
        DISPID_AnswerSetResultFileSize = 278,
        DISPID_AnswerSetAddExpansionSettings = 279,
        DISPID_AnswerSetDistributedPostProcessing = 280,
        DISPID_AnswerSetMeshIfNeeded = 281,
        DISPID_AnswerSetCompositeFailureTools = 282,
        DISPID_AnswerSetGetMemoryAvailable = 283,
        DISPID_AnswerSetGetNumCoresAvailable = 284,
        DISPID_AnswerSetGetNumProcRequested = 285,
        DISPID_AnswerSetGetNumGPURequested = 286,
        DISPID_AnswerSetGetSolverOSType = 287,
        DISPID_AnswerSetIsDistributedSolution = 288,
        DISPID_AnswerSetIsGPUAccelerationRequested = 289,
        DISPID_AnswerSetIsDataExtractionComplete = 290,
        DISPID_AnswerSetGetGPUType = 291,
        DISPID_AnswerSetGetMPIType = 292,
        DISPID_AnswerSetGetNumMachinesRequested = 293,
        DISPID_AnswerSetGetMainThreadCPUTime = 294,
        DISPID_AnswerSetGetAllThreadsCPUTime = 295,
        DISPID_AnswerSetAddResponsePSDTool = 296,
        DISPID_AnswerSetPostProcessingLiveStress = 297,
        DISPID_AnswerSetIsEigenSolver = 298,
        DISPID_AnswerSetGetEquationSolverType = 299,
        DISPID_AnswerSetGetEigenSolverType = 300,
        DISPID_AnswerSetIsUnsymmetricMatrixSolve = 301
    } kDispId_AnswerSet;

    [
      odl,
      uuid(79884ECB-9DEF-47D6-801D-8FE968CED474),
      helpstring("IDSAnswerSetAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSAnswerSetAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x0000000a), propget, helpstring("property Results")]
        HRESULT Results([out, retval] IDispatch** pVal);
        [id(0x0000000b), propget, helpstring("property FrequencyGroup")]
        HRESULT FrequencyGroup([out, retval] IDispatch** pVal);
        [id(0x00000068), propget, helpstring("property BucklingGroup")]
        HRESULT BucklingGroup([out, retval] IDispatch** pVal);
        [id(0x0000000c), propget, helpstring("property StructuralResults")]
        HRESULT StructuralResults([out, retval] IDispatch** pVal);
        [id(0x0000000d), propget, helpstring("property ThermalResults")]
        HRESULT ThermalResults([out, retval] IDispatch** pVal);
        [id(0x0000000e), propget, helpstring("property ShapeResults")]
        HRESULT ShapeResults([out, retval] IDispatch** pVal);
        [id(0x0000000f), propget, helpstring("property StressSafetyTools")]
        HRESULT StressSafetyTools([out, retval] IDispatch** pVal);
        [id(0x000000fa), propget, helpstring("property ResultsAvailability")]
        HRESULT ResultsAvailability([out, retval] VARIANT_BOOL* pAllowAllResults);
        [id(0x000000fa), propput, helpstring("property ResultsAvailability")]
        HRESULT ResultsAvailability([in] VARIANT_BOOL pAllowAllResults);
        [id(0x00000010), propget, helpstring("property MaxRefinementLoops")]
        HRESULT MaxRefinementLoops([out, retval] int* pVal);
        [id(0x00000010), propput, helpstring("property MaxRefinementLoops")]
        HRESULT MaxRefinementLoops([in] int pVal);
        [id(0x000000d5), propget, helpstring("property RefinementType")]
        HRESULT RefinementType([out, retval] DSConvergenceControlType* pVal);
        [id(0x000000d5), propput, helpstring("property RefinementType")]
        HRESULT RefinementType([in] DSConvergenceControlType pVal);
        [id(0x000000d6), propget, helpstring("property RefinementEnergyBased")]
        HRESULT RefinementEnergyBased([out, retval] int* pVal);
        [id(0x000000d6), propput, helpstring("property RefinementEnergyBased")]
        HRESULT RefinementEnergyBased([in] int pVal);
        [id(0x000000d7), propget, helpstring("property RefinementErrorBased")]
        HRESULT RefinementErrorBased([out, retval] int* pVal);
        [id(0x000000d7), propput, helpstring("property RefinementErrorBased")]
        HRESULT RefinementErrorBased([in] int pVal);
        [id(0x00000011), propget, helpstring("property SaveAnsysDB")]
        HRESULT SaveAnsysDB([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000011), propput, helpstring("property SaveAnsysDB")]
        HRESULT SaveAnsysDB([in] VARIANT_BOOL pVal);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x00000012), propget, helpstring("property Branch")]
        HRESULT Branch([out, retval] VARIANT* pVal);
        [id(0x00000018), helpstring("method AddFatigueTool")]
        HRESULT AddFatigueTool([out, retval] IDispatch** ppVal);
        [id(0x00000019), helpstring("method AddResult")]
        HRESULT AddResult(
                        [in] IDispatch* piSelectMgr, 
                        [in] unsigned int resType, 
                        [out, retval] IDispatch** ppVal);
        [id(0x0000001a), helpstring("method AddFrequencyGroup")]
        HRESULT AddFrequencyGroup([out, retval] IDispatch** ppVal);
        [id(0x0000001b), helpstring("method AddParameterSet")]
        HRESULT AddParameterSet([out, retval] IDispatch** pDisp);
        [id(0x0000001c), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x0000001d), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x0000001e), helpstring("method AddTemplate")]
        HRESULT AddTemplate(
                        [in, optional, defaultvalue("")] BSTR fileInPath, 
                        [in, optional, defaultvalue("")] BSTR fileOutPath, 
                        [out, retval] IDispatch** pDisp);
        [id(0x0000001f), helpstring("method AddStressSafetyTool")]
        HRESULT AddStressSafetyTool(
                        [in] unsigned int toolType, 
                        [out, retval] IDispatch** pDisp);
        [id(0x00000020), helpstring("method FindAnswers")]
        HRESULT FindAnswers();
        [id(0x00000013), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** pDisp);
        [id(0x00000014), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000015), propget, helpstring("property FatigueTools")]
        HRESULT FatigueTools([out, retval] IDispatch** ppDisp);
        [id(0x00000016), propget, helpstring("property Templates")]
        HRESULT Templates([out, retval] IDispatch** ppDisp);
        [id(0x00000027), propget, helpstring("property AdvancedPostProcessing")]
        HRESULT AdvancedPostProcessing([out, retval] IDispatch** ppDisp);
        [id(0x00000021), propget, helpstring("property UserAborted")]
        HRESULT UserAborted([out, retval] long* pVal);
        [id(0x00000021), propput, helpstring("property UserAborted")]
        HRESULT UserAborted([in] long pVal);
        [id(0x00000022), helpstring("method AddReportHelper")]
        HRESULT AddReportHelper(
                        [in, optional, defaultvalue("")] BSTR fileInPath, 
                        [in, optional, defaultvalue("")] BSTR fileOutPath, 
                        [out, retval] IDispatch** pDisp);
        [id(0x00000023), propget, helpstring("property ParameterManager")]
        HRESULT ParameterManager([out, retval] IDispatch** ppVal);
        [id(0x00000024), propget, helpstring("property SaveAnsysDBFileName")]
        HRESULT SaveAnsysDBFileName([out, retval] BSTR* pVal);
        [id(0x00000024), propput, helpstring("property SaveAnsysDBFileName")]
        HRESULT SaveAnsysDBFileName([in] BSTR pVal);
        [id(0x00000025), propget, helpstring("property SolverType")]
        HRESULT SolverType([out, retval] DSSolverType* pVal);
        [id(0x00000025), propput, helpstring("property SolverType")]
        HRESULT SolverType([in] DSSolverType pVal);
        [id(0x0000006f), propget, helpstring("property UseWeakSprings")]
        HRESULT UseWeakSprings([out, retval] DSWeakSpringsType* pVal);
        [id(0x0000006f), propput, helpstring("property UseWeakSprings")]
        HRESULT UseWeakSprings([in] DSWeakSpringsType pVal);
        [id(0x000000b0), propget, helpstring("property UseWeakSpringsStiffness")]
        HRESULT UseWeakSpringsStiffness([out, retval] DSSpringsStiffnessType* pVal);
        [id(0x000000b0), propput, helpstring("property UseWeakSpringsStiffness")]
        HRESULT UseWeakSpringsStiffness([in] DSSpringsStiffnessType pVal);
        [id(0x000000b1), propget, helpstring("property UseWeakSpringsFactor")]
        HRESULT UseWeakSpringsFactor([out, retval] double* pVal);
        [id(0x000000b1), propput, helpstring("property UseWeakSpringsFactor")]
        HRESULT UseWeakSpringsFactor([in] double pVal);
        [id(0x000000b2), propget, helpstring("property UseWeakSpringsValue")]
        HRESULT UseWeakSpringsValue([out, retval] double* pVal);
        [id(0x000000b2), propput, helpstring("property UseWeakSpringsValue")]
        HRESULT UseWeakSpringsValue([in] double pVal);
        [id(0x00000064), helpstring("method SolveBranch")]
        HRESULT SolveBranch(
                        [in] BSTR license, 
                        [in] IAnsProgress* piProgress, 
                        [in] unsigned int iActiveObjectID);
        [id(0x00000026), helpstring("method WriteInputFile")]
        HRESULT WriteInputFile(
                        [in] BSTR filename, 
                        [in] IAnsProgress* piProgress);
        [id(0x00000065), helpstring("method RemoveReportHelper")]
        HRESULT RemoveReportHelper(
                        [in] IDispatch* pIDisp, 
                        [in] unsigned int ulTemplateId);
        [id(0x00000066), propget, helpstring("property UseLargeDeformation")]
        HRESULT UseLargeDeformation([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000066), propput, helpstring("property UseLargeDeformation")]
        HRESULT UseLargeDeformation([in] VARIANT_BOOL pVal);
        [id(0x000000b3), propget, helpstring("property TransientEndTime")]
        HRESULT TransientEndTime([out, retval] double* pVal);
        [id(0x000000b3), propput, helpstring("property TransientEndTime")]
        HRESULT TransientEndTime([in] double pVal);
        [id(0x000000b4), propget, helpstring("property NonLinearFormulation")]
        HRESULT NonLinearFormulation([out, retval] DSNonlinearFormulationType* pVal);
        [id(0x000000b4), propput, helpstring("property NonLinearFormulation")]
        HRESULT NonLinearFormulation([in] DSNonlinearFormulationType pVal);
        [id(0x000000b5), propget, helpstring("property ReformulationTolerance")]
        HRESULT ReformulationTolerance([out, retval] int* pVal);
        [id(0x000000b5), propput, helpstring("property ReformulationTolerance")]
        HRESULT ReformulationTolerance([in] int pVal);
        [id(0x0000008c), propget, helpstring("property UseAutoTimeStepping")]
        HRESULT UseAutoTimeStepping([out, retval] DSAutoTimeSteppingType* pVal);
        [id(0x0000008c), propput, helpstring("property UseAutoTimeStepping")]
        HRESULT UseAutoTimeStepping([in] DSAutoTimeSteppingType pVal);
        [id(0x000000b6), propget, helpstring("property TimeStepDefineby")]
        HRESULT TimeStepDefineby([out, retval] DSTimeStepDefineByType* pVal);
        [id(0x000000b6), propput, helpstring("property TimeStepDefineby")]
        HRESULT TimeStepDefineby([in] DSTimeStepDefineByType pVal);
        [id(0x0000008d), propget, helpstring("property InitialSteps")]
        HRESULT InitialSteps([out, retval] unsigned int* pVal);
        [id(0x0000008d), propput, helpstring("property InitialSteps")]
        HRESULT InitialSteps([in] unsigned int pVal);
        [id(0x0000008f), propget, helpstring("property MinimumSteps")]
        HRESULT MinimumSteps([out, retval] unsigned int* pVal);
        [id(0x0000008f), propput, helpstring("property MinimumSteps")]
        HRESULT MinimumSteps([in] unsigned int pVal);
        [id(0x0000008e), propget, helpstring("property MaximumSteps")]
        HRESULT MaximumSteps([out, retval] unsigned int* pVal);
        [id(0x0000008e), propput, helpstring("property MaximumSteps")]
        HRESULT MaximumSteps([in] unsigned int pVal);
        [id(0x00000090), propget, helpstring("property NumberOfSteps")]
        HRESULT NumberOfSteps([out, retval] unsigned int* pVal);
        [id(0x00000090), propput, helpstring("property NumberOfSteps")]
        HRESULT NumberOfSteps([in] unsigned int pVal);
        [id(0x000000b7), propget, helpstring("property InitialTimeStep")]
        HRESULT InitialTimeStep([out, retval] double* pVal);
        [id(0x000000b7), propput, helpstring("property InitialTimeStep")]
        HRESULT InitialTimeStep([in] double pVal);
        [id(0x000000b8), propget, helpstring("property MinimumTimeStep")]
        HRESULT MinimumTimeStep([out, retval] double* pVal);
        [id(0x000000b8), propput, helpstring("property MinimumTimeStep")]
        HRESULT MinimumTimeStep([in] double pVal);
        [id(0x000000b9), propget, helpstring("property MaximumTimeStep")]
        HRESULT MaximumTimeStep([out, retval] double* pVal);
        [id(0x000000b9), propput, helpstring("property MaximumTimeStep")]
        HRESULT MaximumTimeStep([in] double pVal);
        [id(0x000000ba), propget, helpstring("property TimeStep")]
        HRESULT TimeStep([out, retval] double* pVal);
        [id(0x000000ba), propput, helpstring("property TimeStep")]
        HRESULT TimeStep([in] double pVal);
        [id(0x00000067), helpstring("method AddBucklingGroup")]
        HRESULT AddBucklingGroup([out, retval] IDispatch** ppVal);
        [id(0x00000069), helpstring("method AddHarmonicTool")]
        HRESULT AddHarmonicTool([out, retval] IDispatch** ppVal);
        [id(0x0000006a), propget, helpstring("property HarmonicTools")]
        HRESULT HarmonicTools([out, retval] IDispatch** pVal);
        [id(0x0000006b), propget, helpstring("property AnalysisType")]
        HRESULT AnalysisType([out, retval] DSSolutionType* pVal);
        [id(0x0000006c), helpstring("method UpdateFEData")]
        HRESULT UpdateFEData();
        [id(0x0000006d), propget, helpstring("property NonLinear")]
        HRESULT NonLinear([out, retval] unsigned int* pVal);
        [id(0x0000006e), propget, helpstring("property SolutionSummary")]
        HRESULT SolutionSummary([out, retval] IDispatch** ppDisp);
        [id(0x00000073), helpstring("method AddAdvancedPostProcessing")]
        HRESULT AddAdvancedPostProcessing([out, retval] IDispatch** ppDisp);
        [id(0x00000074), propget, helpstring("property WorkingDir")]
        HRESULT WorkingDir([out, retval] BSTR* pBSWorkDir);
        [id(0x000000c9), propget, helpstring("property ThermalResultFileNameControl")]
        HRESULT ThermalResultFileNameControl([out, retval] VARIANT_BOOL* pbProgramControlled);
        [id(0x000000c9), propput, helpstring("property ThermalResultFileNameControl")]
        HRESULT ThermalResultFileNameControl([in] VARIANT_BOOL pbProgramControlled);
        [id(0x000000bb), propget, helpstring("property ThermalResultFileLocation")]
        HRESULT ThermalResultFileLocation([out, retval] BSTR* pFilePath);
        [id(0x000000bb), propput, helpstring("property ThermalResultFileLocation")]
        HRESULT ThermalResultFileLocation([in] BSTR pFilePath);
        [id(0x00000075), propget, helpstring("property SolverMessages")]
        HRESULT SolverMessages([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000076), helpstring("method DisplaySolverMessages")]
        HRESULT DisplaySolverMessages();
        [id(0x00000077), helpstring("method SolveBranch2")]
        HRESULT SolveBranch2(
                        [in] SolveBranchWaitType eWaitType, 
                        [in] BSTR license, 
                        [in] IAnsProgress* piProgress, 
                        [in] unsigned int iActiveObjectID);
        [id(0x00000078), helpstring("method LoadRemoteResults")]
        HRESULT LoadRemoteResults([in] BSTR bsFilename);
        [id(0x00000079), propget, helpstring("method RemoteJobDescriptor")]
        HRESULT RemoteJobDescriptor([out, retval] BSTR* pbsRemoteJobDescriptor);
        [id(0x0000007b), helpstring("method AddContactTool")]
        HRESULT AddContactTool(
                        [in] IDispatch* piSelectMgr, 
                        [out, retval] IDispatch** ppVal);
        [id(0x0000007c), helpstring("method AddSolutionInfoTool")]
        HRESULT AddSolutionInfoTool([out, retval] IDispatch** ppVal);
        [id(0x0000007d), propget, helpstring("property SolutionInfoTools")]
        HRESULT SolutionInfoTools([out, retval] IDispatch** pVal);
        [id(0x0000007e), propget, helpstring("property ContactTools")]
        HRESULT ContactTools([out, retval] IDispatch** pVal);
        [id(0x0000007f), helpstring("method CopyProcessSettingsFrom")]
        HRESULT CopyProcessSettingsFrom([in] int val);
        [id(0x00000091), helpstring("method CopyProcessSettingsTo")]
        HRESULT CopyProcessSettingsTo([in] int val);
        [id(0x00000080), propget, helpstring("property SolveProcessSite")]
        HRESULT SolveProcessSite([out, retval] DSSolveProcessSiteType* pVal);
        [id(0x00000080), propput, helpstring("property SolveProcessSite")]
        HRESULT SolveProcessSite([in] DSSolveProcessSiteType pVal);
        [id(0x00000083), propget, helpstring("property CEMachineName")]
        HRESULT CEMachineName([out, retval] BSTR* pVal);
        [id(0x00000083), propput, helpstring("property CEMachineName")]
        HRESULT CEMachineName([in] BSTR pVal);
        [id(0x000000c8), propget, helpstring("property JobAssignment")]
        HRESULT JobAssignment([out, retval] DSSolveJobAssignmentType* kVal);
        [id(0x000000c8), propput, helpstring("property JobAssignment")]
        HRESULT JobAssignment([in] DSSolveJobAssignmentType kVal);
        [id(0x00000084), propget, helpstring("property CEQueueName")]
        HRESULT CEQueueName([out, retval] BSTR* pVal);
        [id(0x00000084), propput, helpstring("property CEQueueName")]
        HRESULT CEQueueName([in] BSTR pVal);
        [id(0x00000093), propget, helpstring("property LSFQueueNameIndex")]
        HRESULT LSFQueueNameIndex([out, retval] int* pVal);
        [id(0x00000093), propput, helpstring("property LSFQueueNameIndex")]
        HRESULT LSFQueueNameIndex([in] int pVal);
        [id(0x00000094), propget, helpstring("property CEQueueNameIndex")]
        HRESULT CEQueueNameIndex([out, retval] int* pVal);
        [id(0x00000094), propput, helpstring("property CEQueueNameIndex")]
        HRESULT CEQueueNameIndex([in] int pVal);
        [id(0x00000085), propget, helpstring("property GetResultsAutomatically")]
        HRESULT GetResultsAutomatically([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000085), propput, helpstring("property GetResultsAutomatically")]
        HRESULT GetResultsAutomatically([in] VARIANT_BOOL pVal);
        [id(0x00000086), propget, helpstring("property LSFQueueName")]
        HRESULT LSFQueueName([out, retval] BSTR* pVal);
        [id(0x00000086), propput, helpstring("property LSFQueueName")]
        HRESULT LSFQueueName([in] BSTR pVal);
        [id(0x00000087), propget, helpstring("property UNIXMachineName")]
        HRESULT UNIXMachineName([out, retval] BSTR* pVal);
        [id(0x00000087), propput, helpstring("property UNIXMachineName")]
        HRESULT UNIXMachineName([in] BSTR pVal);
        [id(0x00000088), propget, helpstring("property UNIXLoginName")]
        HRESULT UNIXLoginName([out, retval] BSTR* pVal);
        [id(0x00000088), propput, helpstring("property UNIXLoginName")]
        HRESULT UNIXLoginName([in] BSTR pVal);
        [id(0x00000089), propget, helpstring("property UNIXLoginPassword")]
        HRESULT UNIXLoginPassword([out, retval] BSTR* pVal);
        [id(0x00000089), propput, helpstring("property UNIXLoginPassword")]
        HRESULT UNIXLoginPassword([in] BSTR pVal);
        [id(0x0000008b), propget, helpstring("property UNIXWorkingDirectory")]
        HRESULT UNIXWorkingDirectory([out, retval] BSTR* pVal);
        [id(0x0000008b), propput, helpstring("property UNIXWorkingDirectory")]
        HRESULT UNIXWorkingDirectory([in] BSTR pVal);
        [id(0x0000008a), propget, helpstring("property UNIXSolveCommand")]
        HRESULT UNIXSolveCommand([out, retval] BSTR* pVal);
        [id(0x0000008a), propput, helpstring("property UNIXSolveCommand")]
        HRESULT UNIXSolveCommand([in] BSTR pVal);
        [id(0x000000d1), propget, helpstring("property DistributedSolve")]
        HRESULT DistributedSolve([out, retval] VARIANT_BOOL* pVal);
        [id(0x000000d1), propput, helpstring("property DistributedSolve")]
        HRESULT DistributedSolve([in] VARIANT_BOOL pVal);
        [id(0x00000081), propget, helpstring("property PassLicenseToQueue")]
        HRESULT PassLicenseToQueue([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000081), propput, helpstring("property PassLicenseToQueue")]
        HRESULT PassLicenseToQueue([in] VARIANT_BOOL pVal);
        [id(0x00000082), propget, helpstring("property LicenseToUse")]
        HRESULT LicenseToUse([out, retval] BSTR* pVal);
        [id(0x00000082), propput, helpstring("property LicenseToUse")]
        HRESULT LicenseToUse([in] BSTR pVal);
        [id(0x00000092), helpstring("method AddCommandEditor")]
        HRESULT AddCommandEditor([out, retval] IDispatch** ppVal);
        [id(0x00000095), helpstring("method AddBeamTool")]
        HRESULT AddBeamTool(
                        [in] IDispatch* piSelectMgr, 
                        [out, retval] IDispatch** ppVal);
        [id(0x00000096), propget, helpstring("property BeamTools")]
        HRESULT BeamTools([out, retval] IDispatch** pVal);
        [id(0x00000097), propget, helpstring("property ReturnIncompleteSolution")]
        HRESULT ReturnIncompleteSolution([out, retval] DSIncompleteSolutionType* pVal);
        [id(0x00000097), propput, helpstring("property ReturnIncompleteSolution")]
        HRESULT ReturnIncompleteSolution([in] DSIncompleteSolutionType pVal);
        [id(0x00000098), propget, helpstring("property CommandEditors")]
        HRESULT CommandEditors([out, retval] IDispatch** ppDisp);
        [id(0x00000099), helpstring("method StopRemoteSolution")]
        HRESULT StopRemoteSolution();
        [id(0x0000009a), propget, helpstring("property RefinementDepth")]
        HRESULT RefinementDepth([out, retval] int* pVal);
        [id(0x0000009a), propput, helpstring("property RefinementDepth")]
        HRESULT RefinementDepth([in] int pVal);
        [id(0x0000009b), helpstring("method AddResultTable")]
        HRESULT AddResultTable(
                        [in] IDispatch* piSelectMgr, 
                        [in] unsigned int resType, 
                        [out, retval] IDispatch** ppVal);
        [id(0x0000009c), propget, helpstring("property ResultTables")]
        HRESULT ResultTables([out, retval] IDispatch** pVal);
        [id(0x0000009d), helpstring("method InquireRemoteSolution")]
        HRESULT InquireRemoteSolution();
        [id(0x0000009e), propget, helpstring("property SolveInductance")]
        HRESULT SolveInductance([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000009e), propput, helpstring("property SolveInductance")]
        HRESULT SolveInductance([in] VARIANT_BOOL pVal);
        [id(0x000000a1), propget, helpstring("property NumberOfProcessesToUse")]
        HRESULT NumberOfProcessesToUse([out, retval] int* iVal);
        [id(0x000000a1), propput, helpstring("property NumberOfProcessesToUse")]
        HRESULT NumberOfProcessesToUse([in] int iVal);
        [id(0x0000009f), helpstring("method AddProbeTool")]
        HRESULT AddProbeTool(
                        [in] IDispatch* piSelectMgr, 
                        [in] DSProbeResultType type, 
                        [out, retval] IDispatch** ppVal);
        [id(0x000000a0), propget, helpstring("property ProbeTools")]
        HRESULT ProbeTools([out, retval] IDispatch** pVal);
        [id(0x000000a2), propget, helpstring("property CalculateStress")]
        HRESULT CalculateStress([out, retval] VARIANT_BOOL* pVal);
        [id(0x000000a2), propput, helpstring("property CalculateStress")]
        HRESULT CalculateStress([in] VARIANT_BOOL pVal);
        [id(0x000000a3), propget, helpstring("property CalculateStrain")]
        HRESULT CalculateStrain([out, retval] VARIANT_BOOL* pVal);
        [id(0x000000a3), propput, helpstring("property CalculateStrain")]
        HRESULT CalculateStrain([in] VARIANT_BOOL pVal);
        [id(0x000000a4), propget, helpstring("property CalculateContact")]
        HRESULT CalculateContact([out, retval] VARIANT_BOOL* pVal);
        [id(0x000000a4), propput, helpstring("property CalculateContact")]
        HRESULT CalculateContact([in] VARIANT_BOOL pVal);
        [id(0x000000a5), propget, helpstring("property CalculateError")]
        HRESULT CalculateError([out, retval] VARIANT_BOOL* pVal);
        [id(0x000000a5), propput, helpstring("property CalculateError")]
        HRESULT CalculateError([in] VARIANT_BOOL pVal);
        [id(0x000000c4), propget, helpstring("property CalculateThermalFlux")]
        HRESULT CalculateThermalFlux([out, retval] VARIANT_BOOL* pVal);
        [id(0x000000c4), propput, helpstring("property CalculateThermalFlux")]
        HRESULT CalculateThermalFlux([in] VARIANT_BOOL pVal);
        [id(0x000000a6), helpstring("method SolveBranch3")]
        HRESULT SolveBranch3(
                        [in] SolveBranchWaitType eWaitType, 
                        [in] BSTR license, 
                        [in] IAnsProgress* pProgress, 
                        [in] unsigned int iActiveObjectID, 
                        [out, retval] BSTR* pbsJobId);
        [id(0x000000a7), propget, helpstring("property NumSequenceEntries")]
        HRESULT NumSequenceEntries([out, retval] unsigned int* pVal);
        [id(0x000000a7), propput, helpstring("property NumSequenceEntries")]
        HRESULT NumSequenceEntries([in] unsigned int pVal);
        [id(0x000000a8), propget, helpstring("property SequenceAutoTimeStepping")]
        HRESULT SequenceAutoTimeStepping(
                        [in] int index, 
                        [out, retval] DSAutoTimeSteppingType* pVal);
        [id(0x000000a8), propput, helpstring("property SequenceAutoTimeStepping")]
        HRESULT SequenceAutoTimeStepping(
                        [in] int index, 
                        [in] DSAutoTimeSteppingType pVal);
        [id(0x000000a9), propget, helpstring("property SequenceInitialSteps")]
        HRESULT SequenceInitialSteps(
                        [in] int index, 
                        [out, retval] unsigned int* pVal);
        [id(0x000000a9), propput, helpstring("property SequenceInitialSteps")]
        HRESULT SequenceInitialSteps(
                        [in] int index, 
                        [in] unsigned int pVal);
        [id(0x000000aa), propget, helpstring("property SequenceMinimumSteps")]
        HRESULT SequenceMinimumSteps(
                        [in] int index, 
                        [out, retval] unsigned int* pVal);
        [id(0x000000aa), propput, helpstring("property SequenceMinimumSteps")]
        HRESULT SequenceMinimumSteps(
                        [in] int index, 
                        [in] unsigned int pVal);
        [id(0x000000ab), propget, helpstring("property SequenceMaximumSteps")]
        HRESULT SequenceMaximumSteps(
                        [in] int index, 
                        [out, retval] unsigned int* pVal);
        [id(0x000000ab), propput, helpstring("property SequenceMaximumSteps")]
        HRESULT SequenceMaximumSteps(
                        [in] int index, 
                        [in] unsigned int pVal);
        [id(0x000000ac), propget, helpstring("property SequenceNumberOfSteps")]
        HRESULT SequenceNumberOfSteps(
                        [in] int index, 
                        [out, retval] unsigned int* pVal);
        [id(0x000000ac), propput, helpstring("property SequenceNumberOfSteps")]
        HRESULT SequenceNumberOfSteps(
                        [in] int index, 
                        [in] unsigned int pVal);
        [id(0x000000ad), propget, helpstring("property TimeType")]
        HRESULT TimeType([out, retval] DSTimeType* pTimeType);
        [id(0x000000ad), propput, helpstring("property TimeType")]
        HRESULT TimeType([in] DSTimeType pTimeType);
        [id(0x000000ae), propget, helpstring("property SolverMessage")]
        HRESULT SolverMessage([out, retval] BSTR* pVal);
        [id(0x000000af), propget, helpstring("property SolvingState")]
        HRESULT SolvingState([out, retval] eObjectState* pVal);
        [id(0x000000bc), propget, helpstring("property NumSolvedTimePoints")]
        HRESULT NumSolvedTimePoints([out, retval] unsigned int* pVal);
        [id(0x000000bd), propget, helpstring("property SolvedTimePoint")]
        HRESULT SolvedTimePoint(
                        [in] int index, 
                        [out, retval] VARIANT* pVal);
        [id(0x000000be), helpstring("method ResetDefaults")]
        HRESULT ResetDefaults();
        [id(0x000000bf), helpstring("method SaveXML")]
        HRESULT SaveXML([in] BSTR url);
        [id(0x000000c0), helpstring("method LoadXML")]
        HRESULT LoadXML([in] BSTR url);
        [id(0x000000c1), propget, helpstring("property SolutionSettings")]
        HRESULT SolutionSettings([out, retval] IDispatch** ppVal);
        [id(0x000000c2), propget, helpstring("property NumResultTimePoints")]
        HRESULT NumResultTimePoints([out, retval] unsigned int* pVal);
        [id(0x000000c3), propget, helpstring("property ResultTimePoint")]
        HRESULT ResultTimePoint(
                        [in] int index, 
                        [out, retval] VARIANT* pVal);
        [id(0x000000c5), propget, helpstring("property UseMemorySettings")]
        HRESULT UseMemorySettings([out, retval] DSMemorySettingsType* pVal);
        [id(0x000000c5), propput, helpstring("property UseMemorySettings")]
        HRESULT UseMemorySettings([in] DSMemorySettingsType pVal);
        [id(0x000000c6), propget, helpstring("property UseMemorySettingsManualWSValue")]
        HRESULT UseMemorySettingsManualWSValue([out, retval] int* iVal);
        [id(0x000000c6), propput, helpstring("property UseMemorySettingsManualWSValue")]
        HRESULT UseMemorySettingsManualWSValue([in] int iVal);
        [id(0x000000c7), propget, helpstring("property UseMemorySettingsManualDBValue")]
        HRESULT UseMemorySettingsManualDBValue([out, retval] int* iVal);
        [id(0x000000c7), propput, helpstring("property UseMemorySettingsManualDBValue")]
        HRESULT UseMemorySettingsManualDBValue([in] int iVal);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
        [id(0x000000ca), helpstring("method CalculateResults")]
        HRESULT CalculateResults([in] IAnsProgress* piProgress);
        [id(0x000000cd), propput, helpstring("property ThermalResultFileLocationOverride")]
        HRESULT ThermalResultFileLocationOverride([in] BSTR rhs);
        [id(0x000000ce), helpstring("property HasDependentSolves")]
        HRESULT HasDependentSolves([out, retval] VARIANT_BOOL* pVal);
        [id(0x000000cf), propget, helpstring("property SolutionState")]
        HRESULT SolutionState([out, retval] eObjectState* pVal);
        [id(0x000000d0), propget, helpstring("property FindAnswersType")]
        HRESULT FindAnswersType([out, retval] DSFindAnswersType* pVal);
        [id(0x000000d2), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x000000d3), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x000000d4), helpstring("method AddResultChart")]
        HRESULT AddResultChart(
                        [in] IDispatch* piSelectMgr, 
                        [in] unsigned int resType, 
                        [in] int responseType, 
                        [out, retval] IDispatch** ppVal);
        [id(0x000000d8), helpstring("method AddResultProbe")]
        HRESULT AddResultProbe(
                        [in] IDispatch* piSelectMgr, 
                        [in] DSProbeResultType probeType, 
                        [out, retval] IDispatch** ppVal);
        [id(0x600200d6), helpstring("method SyncResultsInFolder")]
        HRESULT SyncResultsInFolder(
                        [in] BSTR bsFilename, 
                        [in] IAnsProgress* piProgress);
        [id(0x000000d9), propget, helpstring("property SolverFeedbackCode")]
        HRESULT SolverFeedbackCode([out, retval] int* pVal);
        [id(0x000000db), helpstring("method UpdatePostResults")]
        HRESULT UpdatePostResults([in] int lDSId);
        [id(0x000000dc), propput]
        HRESULT SyncResultFilePrefix([in] BSTR rhs);
        [id(0x000000dd), helpstring("method AddCustomResult")]
        HRESULT AddCustomResult(
                        [in] IDispatch* piSelectMgr, 
                        [out, retval] IDispatch** ppVal);
        [id(0x000000df), helpstring("method DoesResultFileExist")]
        HRESULT DoesResultFileExist([out, retval] VARIANT_BOOL* bExists);
        [id(0x000000de), helpstring("method ReadResultFile")]
        HRESULT ReadResultFile([out, retval] BSTR* fileText);
        [id(0x000000e0), helpstring("method AddPreDefinedCustomResult")]
        HRESULT AddPreDefinedCustomResult(
                        [in] IDispatch* piSelectMgr, 
                        [in] BSTR bsType, 
                        [in] BSTR bsComp, 
                        [in] BSTR bsExpression, 
                        [in] BSTR bsWBUnitTypeInt, 
                        [in] BSTR bsIdentifier, 
                        [out, retval] IDispatch** ppVal);
        [id(0x00002710), propget, helpstring("property CellId")]
        HRESULT CellId([out, retval] BSTR* pVal);
        [id(0x00002710), propput, helpstring("property CellId")]
        HRESULT CellId([in] BSTR pVal);
        [id(0x00002711), propget, helpstring("property DisplayName")]
        HRESULT DisplayName([out, retval] BSTR* pVal);
        [id(0x000000e1), helpstring("method Adaptive Mesh")]
        HRESULT GenerateAdaptedMesh([in] IAnsProgress* piProgress);
        [id(0x000000e2), helpstring("method ResetSolution")]
        HRESULT ResetSolution();
        [id(0x000000e3), helpstring("method ClearSolution")]
        HRESULT ClearSolution();
        [id(0x000000e4), helpstring("method ResetResults")]
        HRESULT ResetResults();
        [id(0x000000e5), helpstring("method ClearResults")]
        HRESULT ClearResults();
        [id(0x000000e6), helpstring("method UpdateSolution")]
        HRESULT UpdateSolution(
                        [in] BSTR solveHandlerName, 
                        [in] IAnsProgress* piProgress, 
                        [in] VARIANT_BOOL vbDesignPointUpdate, 
                        [out, retval] BSTR* bsJobId);
        [id(0x000000e7), helpstring("method UpdateResults")]
        HRESULT UpdateResults([in] IAnsProgress* piProgress);
        [id(0x600200e8), helpstring("method WriteInputFile2")]
        HRESULT WriteInputFile2(
                        [in] BSTR filename, 
                        [in] IAnsProgress* piProgress);
        [id(0x000000eb), propget, helpstring("property IsConvergencePresent")]
        HRESULT IsConvergencePresent([out, retval] VARIANT_BOOL* pVal);
        [id(0x000000ec), propget, helpstring("property AsyncJobInSynchronousMode")]
        HRESULT AsyncJobInSynchronousMode([out, retval] VARIANT_BOOL* pVal);
        [id(0x000000ec), propput, helpstring("property AsyncJobInSynchronousMode")]
        HRESULT AsyncJobInSynchronousMode([in] VARIANT_BOOL pVal);
        [id(0x000000ed), helpstring("method ShouldExportResults")]
        HRESULT ShouldExportResults([out, retval] VARIANT_BOOL* pVal);
        [id(0x000000ee), helpstring("method ExportResults")]
        HRESULT ExportResults([in] IAnsProgress* piProgress);
        [id(0x000000ef), helpstring("method ClearRemoteJobInformation")]
        HRESULT ClearRemoteJobInformation();
        [id(0x000000f0), propget, helpstring("property SolutionOutcomeType")]
        HRESULT SolutionOutcomeType([out, retval] DSOutcomeType* pVal);
        [id(0x000000f1), propget, helpstring("property SolutionOutcomeType")]
        HRESULT SolutionTimeAchieved([out, retval] double* pVal);
        [id(0x000000f2), helpstring("method SetCouplingServiceConnectionInformation")]
        HRESULT SetCouplingServiceConnectionInformation(
                        [in] BSTR couplingServiceIdentifier, 
                        [in] BSTR couplingServiceHost, 
                        [in] int couplingServicePort);
        [id(0x000000f3), helpstring("method InvalidateSolution")]
        HRESULT InvalidateSolution();
        [id(0x000000f4), helpstring("method InterruptRemoteSolution")]
        HRESULT InterruptRemoteSolution();
        [id(0x000000f5), helpstring("method AddDAResult")]
        HRESULT AddDAResult(
                        [in] IDispatch* piSelectMgr, 
                        [out, retval] IDispatch** ppVal);
        [id(0x000000f9), propget, helpstring("property ModalResultsCase")]
        HRESULT ModalResultsCase([out, retval] DSModalResultsCase* pVal);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x000000fb), helpstring("method AddFractureTool")]
        HRESULT AddFractureTool([out, retval] IDispatch** ppVal);
        [id(0x000000fc), propget, helpstring("property CyclicSectorDisplayRangeSize")]
        HRESULT CyclicSectorDisplayRangeSize([out, retval] int* pVal);
        [id(0x000000fc), propput, helpstring("property CyclicSectorDisplayRangeSize")]
        HRESULT CyclicSectorDisplayRangeSize([in] int pVal);
        [id(0x000000fd), propget, helpstring("property CyclicSectorDisplayRangeBegin")]
        HRESULT CyclicSectorDisplayRangeBegin([out, retval] int* pVal);
        [id(0x000000fd), propput, helpstring("property CyclicSectorDisplayRangeBegin")]
        HRESULT CyclicSectorDisplayRangeBegin([in] int pVal);
        [id(0x000000fe), propget, helpstring("property CyclicPostMethod")]
        HRESULT CyclicPostMethod([out, retval] int* pVal);
        [id(0x000000fe), propput, helpstring("property CyclicPostMethod")]
        HRESULT CyclicPostMethod([in] int pVal);
        [id(0x000000ff), helpstring("method setNotDPUpdate")]
        HRESULT setNotDPUpdate();
        [id(0x00000100), helpstring("method setJobHPCInfo")]
        HRESULT setJobHPCInfo([in] VARIANT_BOOL vbRunningAsPartOfRsmJobOnHpc);
        [id(0x00000101), helpstring("method DisconnectRSMJob")]
        HRESULT DisconnectRSMJob();
        [id(0x00000102), propget, helpstring("property Results")]
        HRESULT CustomResults([out, retval] IDispatch** pVal);
        [id(0x00000103), propget, helpstring("property Results")]
        HRESULT ResultProbe([out, retval] IDispatch** pVal);
        [id(0x00000104), propget, helpstring("method JobProgressMap")]
        HRESULT JobProgressMap([out, retval] IDSJobProgressMap** pJobProgressMap);
        [id(0x00000105), propget, helpstring("property WrkSheet_SolutionSummary_ContextMenu")]
        HRESULT WsheetSolCMenu([out, retval] int* pVal);
        [id(0x00000105), propput, helpstring("property WrkSheet_SolutionSummary_ContextMenu")]
        HRESULT WsheetSolCMenu([in] int pVal);
        [id(0x00000106), helpstring("method AddCustomResultForACT")]
        HRESULT AddCustomResultForACT(
                        [in] IDispatch* piSelectMgr, 
                        [out, retval] IDispatch** ppVal);
        [id(0x00000107), helpstring("method AddBoltTool")]
        HRESULT AddBoltTool(
                        [in] IDispatch* piSelectMgr, 
                        [out, retval] IDispatch** ppVal);
        [id(0x00000108), propget, helpstring("property BoltTools")]
        HRESULT BoltTools([out, retval] IDispatch** pVal);
        [id(0x00000109), propget, helpstring("property PostProcessingMeshSource")]
        HRESULT PostProcessingMeshSource([out, retval] DSPostProcessingMeshSourceType* pVal);
        [id(0x00000109), propput, helpstring("property PostProcessingMeshSource")]
        HRESULT PostProcessingMeshSource([in] DSPostProcessingMeshSourceType pVal);
        [id(0x0000010a), propget, helpstring("property PostProcessingBeamStress")]
        HRESULT PostProcessingBeamStress([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000010a), propput, helpstring("property PostProcessingBeamStress")]
        HRESULT PostProcessingBeamStress([in] VARIANT_BOOL pVal);
        [id(0x0000010b), helpstring("method GenerateCDBFilesFromResultTime")]
        HRESULT GenerateCDBFilesFromResultTime(
                        [in] IAnsDoubleColl* pdTimeColl, 
                        [in] IAnsDoubleColl* pdScaleFactorColl, 
                        [in] IAnsBSTRColl* pbsMeshFileColl, 
                        [in] IAnsProgress* piProgress, 
                        [out, retval] BSTR* bsLengthUnit);
        [id(0x0000010c), helpstring("method GenerateCDBFilesFromResultMode")]
        HRESULT GenerateCDBFilesFromResultMode(
                        [in] IAnsIntColl* piModeColl, 
                        [in] IAnsDoubleColl* pdScaleFactorColl, 
                        [in] IAnsBSTRColl* pbsMeshFileColl, 
                        [in] IAnsProgress* piProgress, 
                        [out, retval] BSTR* bsLengthUnit);
        [id(0x0000010d), helpstring("method AddGroupedScopedACPResults")]
        HRESULT AddGroupedScopedACPResults(
                        [in] unsigned int iResultType, 
                        [in] IDispatch* pIAnsUINTColl, 
                        [out, retval] int* groupFolderId);
        [id(0x0000010e), helpstring("method Refresh, updates contact trackers from file")]
        HRESULT RefreshCNDTrackerData();
        [id(0x0000010f), helpstring("method AddGroupedScopedCustomResult")]
        HRESULT AddGroupedScopedCustomResult(
                        [in] IDispatch* pIAnsUINTColl, 
                        [out, retval] int* groupFolderId);
        [id(0x00000111), helpstring("method Refresh, updates contact trackers from file")]
        HRESULT RefreshSelectedCNDTrackerData();
        [id(0x00000110), helpstring("method CreateProbeResultsForContactRegions")]
        HRESULT CreateProbeResultsForContactRegions(
                        [in] dsid contactRegionObjId, 
                        [in] DSProbeResultType eProbeType);
        [id(0x00000112), helpstring("method AddContactToolWithWorksheetScoping")]
        HRESULT AddContactToolWithWorksheetScoping([out, retval] IDispatch** ppVal);
        [id(0x00000113), helpstring("method AddCompositeFailureTool")]
        HRESULT AddCompositeFailureTool(
                        [in] IDispatch* piSelectMgr, 
                        [out, retval] IDispatch** ppVal);
        [id(0x0000011a), propget, helpstring("property CompositeFailureTools")]
        HRESULT CompositeFailureTools([out, retval] IDispatch** ppVal);
        [id(0x00000114), propget, helpstring("property ElapsedRunTime")]
        HRESULT ElapsedRunTime([out, retval] double* pVal);
        [id(0x00000115), propget, helpstring("property MemoryUsed")]
        HRESULT MemoryUsed([out, retval] double* pVal);
        [id(0x00000116), propget, helpstring("property ResultFileSize")]
        HRESULT ResultFileSize([out, retval] double* pVal);
        [id(0x00000117), helpstring("method AddExpansionSettings")]
        HRESULT AddExpansionSettings([out, retval] IDispatch** ppVal);
        [id(0x00000118), propget, helpstring("property DistributedPostProcessing")]
        HRESULT DistributedPostProcessing([out, retval] DSDistributedPostBehavior* pVal);
        [id(0x00000118), propput, helpstring("property DistributedPostProcessing")]
        HRESULT DistributedPostProcessing([in] DSDistributedPostBehavior pVal);
        [id(0x00000119), helpstring("method MeshIfNeeded")]
        HRESULT MeshIfNeeded(
                        [in] IAnsProgress* piProgress, 
                        [out, retval] int* isMeshed);
        [id(0x0000011b), helpstring("method GetMemoryAvailable")]
        HRESULT GetMemoryAvailable([out, retval] double* pVal);
        [id(0x0000011c), helpstring("method GetNumCoresAvailable")]
        HRESULT GetNumCoresAvailable([out, retval] unsigned int* pVal);
        [id(0x0000011d), helpstring("method GetNumProcRequested")]
        HRESULT GetNumProcRequested([out, retval] unsigned int* pVal);
        [id(0x0000011e), helpstring("method GetNumGPURequested")]
        HRESULT GetNumGPURequested([out, retval] unsigned int* pVal);
        [id(0x0000011f), helpstring("method GetSolverOSType")]
        HRESULT GetSolverOSType([out, retval] unsigned int* pVal);
        [id(0x00000120), helpstring("method IsDistributedSolution")]
        HRESULT IsDistributedSolution([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000121), helpstring("method IsGPUAccelerationRequested")]
        HRESULT IsGPUAccelerationRequested([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000122), helpstring("method IsDataExtractionComplete")]
        HRESULT IsDataExtractionComplete([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000123), helpstring("property GetGPUType")]
        HRESULT GetGPUType([out, retval] DSGPUType* pVal);
        [id(0x00000124), helpstring("property GetMPIType")]
        HRESULT GetMPIType([out, retval] DSMPIType* pVal);
        [id(0x00000125), helpstring("method GetNumMachinesRequested")]
        HRESULT GetNumMachinesRequested([out, retval] unsigned int* pVal);
        [id(0x00000126), helpstring("property GetMainThreadCPUTime")]
        HRESULT GetMainThreadCPUTime([out, retval] double* pVal);
        [id(0x00000127), helpstring("property GetAllThreadsCPUTime")]
        HRESULT GetAllThreadsCPUTime([out, retval] double* pVal);
        [id(0x0000012a), helpstring("property IsEigenSolver")]
        HRESULT IsEigenSolver([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000012b), helpstring("property GetEquationSolverType")]
        HRESULT GetEquationSolverType([out, retval] DSEquationSolverType* pVal);
        [id(0x0000012c), helpstring("method GetEigenSolverType")]
        HRESULT GetEigenSolverType([out, retval] DSEigenSolverType* pVal);
        [id(0x0000012d), helpstring("property IsUnsymmetricMatrixSolve")]
        HRESULT IsUnsymmetricMatrixSolve([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000128), helpstring("method AddResponsePSDTool")]
        HRESULT AddResponsePSDTool([out, retval] IDispatch** ppVal);
        [id(0x00000129), propget, helpstring("property PostProcessingLiveStress")]
        HRESULT PostProcessingLiveStress([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000129), propput, helpstring("property PostProcessingLiveStress")]
        HRESULT PostProcessingLiveStress([in] VARIANT_BOOL pVal);
    };

    typedef enum {
        kCONVERGENCE_CONTROL_PROGRAM_CHOOSES = 0,
        kCONVERGENCE_CONTROL_MANUAL = 1
    } DSConvergenceControlType;

    typedef enum {
        kSOLVER_PROGRAM_CHOOSES = 0,
        kSOLVER_DIRECT = 1,
        kSOLVER_ITERATIVE = 2,
        kSOLVER_UNSYMM = 3,
        kSOLVER_DAMP = 4,
        kSOLVER_QRDAMP = 5,
        kSOLVER_SNODE = 6,
        kSOLVER_SUBSPACE = 7
    } DSSolverType;

    typedef enum {
        kWEAK_SPRINGS_PROGRAM_CHOOSES = 0,
        kWEAK_SPRINGS_ON = 1,
        kWEAK_SPRINGS_OFF = 2
    } DSWeakSpringsType;

    typedef enum {
        kStiffness_SPRINGS_PROGRAM_CHOOSES = 0,
        kStiffness_SPRINGS_FACTOR = 1,
        kStiffness_SPRINGS_MANUAL = 2
    } DSSpringsStiffnessType;

    [
      odl,
      uuid(3B4CD280-9048-4D95-A36B-227383FC86DE),
      dual,
      oleautomation
    ]
    interface IAnsProgress : IDispatch {
        [id(0x00000032), helpstring("property SetProgress")]
        HRESULT SetProgress(
                        [in] unsigned int uiProgress, 
                        BSTR uiMessage, 
                        unsigned int uiSubProgress, 
                        BSTR uiSubMessage);
        [id(0x00000001), propget, helpstring("property Progress")]
        HRESULT Progress([out, retval] unsigned int* pVal);
        [id(0x00000002), propget, helpstring("property Message ")]
        HRESULT Message([out, retval] BSTR* pVal);
        [id(0x00000003), propget, helpstring("property SubProgress")]
        HRESULT SubProgress([out, retval] unsigned int* pVal);
        [id(0x00000004), propget, helpstring("property Message ")]
        HRESULT SubMessage([out, retval] BSTR* pVal);
        [id(0x00000014), helpstring("method Update")]
        HRESULT Update();
        [id(0x00000015), helpstring("method Stop")]
        HRESULT Stop();
        [id(0x0000001e), propget, helpstring("property OnProgress")]
        HRESULT OnProgress([out, retval] IAnsDelegate** pVal);
        [id(0x0000001f), propget, helpstring("property OnStop")]
        HRESULT OnStop([out, retval] IAnsDelegate** pVal);
        [id(0x00000020), propget, helpstring("property StopWaitHandle")]
        HRESULT StopWaitHandle([out, retval] void** pVal);
        [id(0x00000016), helpstring("method Interrupt")]
        HRESULT Interrupt();
        [id(0x00000021), propget, helpstring("property OnInterrupt")]
        HRESULT OnInterrupt([out, retval] IAnsDelegate** pVal);
        [id(0x00000022), propget, helpstring("property ProgressHandle")]
        HRESULT ProgressHandle([out, retval] void** pVal);
        [id(0x00000023)]
        HRESULT ClearReferences();
        [id(0x00000024)]
        HRESULT AddReference(
                        [in] unsigned int partId, 
                        [in] unsigned int topoId);
        [id(0x00000025)]
        HRESULT GetNumReferences([out, retval] unsigned int* numReferences);
        [id(0x00000026)]
        HRESULT GetReferencePart(
                        [in] int index, 
                        [out, retval] unsigned int* part);
        [id(0x00000027)]
        HRESULT GetReferenceTopo(
                        [in] int index, 
                        [out, retval] unsigned int* topo);
        [id(0x00000028), propget]
        HRESULT Status([out, retval] BSTR* Status);
        [id(0x00000028), propput]
        HRESULT Status([in] BSTR Status);
    };

    [
      odl,
      uuid(0C4F278A-0EC0-4EE3-BC92-0B6BEDE4CD49),
      helpstring("IAnsDelegate Interface"),
      dual,
      oleautomation
    ]
    interface IAnsDelegate : IDispatch {
        [id(0x00000001), helpstring("method Fire")]
        HRESULT Fire(
                        IUnknown* pSender, 
                        IUnknown* pArgs);
        [id(0x00000002), helpstring("method Add")]
        HRESULT Add(IAnsDelegate* pVal);
        [id(0x00000003), helpstring("method Remove")]
        HRESULT Remove(IAnsDelegate* pVal);
        [id(0x00000004), helpstring("method Clear")]
        HRESULT Clear();
        [id(0x00000014), helpstring("method Init")]
        HRESULT Init(
                        IDispatch* pTarget, 
                        BSTR bsMethodName);
        [id(0x00000015), helpstring("method Init")]
        HRESULT InitC(LONG_PTR fncPtr);
        [id(0x00000016), helpstring("method Init")]
        HRESULT InitCPP(LONG_PTR fncPtr);
        [id(0x00000017), helpstring("method AddCOM")]
        HRESULT AddCOM(
                        IDispatch* pTarget, 
                        BSTR bsMethodName);
        [id(0x00000018), helpstring("method AddC")]
        HRESULT AddC(LONG_PTR fncPtr);
        [id(0x00000019), helpstring("method AddCPP")]
        HRESULT AddCPP(LONG_PTR fncPtr);
        [id(0x0000001a), helpstring("method RemoveCOM")]
        HRESULT RemoveCOM(
                        IDispatch* pTarget, 
                        BSTR bsMethodName);
        [id(0x0000001b), helpstring("method RemoveC")]
        HRESULT RemoveC(LONG_PTR fncPtr);
        [id(0x0000001c), helpstring("method RemoveCPP")]
        HRESULT RemoveCPP(LONG_PTR fncPtr);
    };

    typedef [public    ,
      custom(F914481D-9C62-4B43-9340-E9B2E6252E5F, 1)    
]
    int64 LONG_PTR;

    typedef enum {
        kNONLINEAR_FORMULATION_PROGRAM_CHOOSES = 0,
        kNONLINEAR_FORMULATION_FULL = 1,
        kNONLINEAR_FORMULATION_QUASI = 2
    } DSNonlinearFormulationType;

    typedef enum {
        kAUTO_TIME_STEPPING_PROGRAM_CHOOSES = 0,
        kAUTO_TIME_STEPPING_ON = 1,
        kAUTO_TIME_STEPPING_OFF = 2
    } DSAutoTimeSteppingType;

    typedef enum {
        kTIME_STEP_DEFINEBY_SUBSTEPS = 0,
        kTIME_STEP_DEFINEBY_TIME = 1
    } DSTimeStepDefineByType;

    typedef enum {
        kST_Unknown = 0,
        kST_Structural = 1,
        kST_Modal = 2,
        kST_Thermal = 3,
        kST_Shape = 4,
        kST_PreStressedModal = 5,
        kST_ThermalStress = 6,
        kST_ThermalPreStressedModal = 7,
        kST_ThermalShape = 8,
        kST_Buckling = 9,
        kST_Harmonic = 10,
        kST_PreStressedHarmonic = 11,
        kST_ElectroMagnetic = 12,
        kST_SequenceStructural = 13,
        kST_RandomVibration = 14,
        kST_ResponseSpectrum = 15
    } DSSolutionType;

    typedef enum {
        kReturnWhenOperationComplete = 0,
        kReturnImmediately = 1,
        kLetUserPreferencesDecide = 2
    } SolveBranchWaitType;

    typedef enum {
        kSolveOnLocalMachine = 0,
        kSolveOnLSFCluster = 1,
        kSolveOnUNIXServer = 2,
        kSolveOnCE = 3,
        kSolveOnRSM = 4
    } DSSolveProcessSiteType;

    typedef enum {
        kJobAssignQueue = 0,
        kJobAssignServer = 1
    } DSSolveJobAssignmentType;

    typedef enum {
        kReturnNone = 0,
        kLastConverged = 1,
        kLastUnconverged = 2
    } DSIncompleteSolutionType;

    typedef enum {
        kProbeUnknown = 0,
        kProbeStress = 1,
        kProbeStrain = 2,
        kProbeDeformation = 3,
        kProbeTemperature = 4,
        kProbeHeatFlux = 5,
        kProbeFluxDensity = 6,
        kProbeFieldIntensity = 7,
        kProbeRotation = 8,
        kProbeReaction = 9,
        kProbeVelocity = 10,
        kProbeAcceleration = 11,
        kProbeJoint = 12,
        kProbeSpring = 13,
        kProbeEnergy = 14,
        kProbeReactionForce = 15,
        kProbeReactionMoment = 16,
        kProbeEmagReaction = 17,
        kProbeAngularVelocity = 18,
        kProbeAngularAcceleration = 19,
        kProbePositional = 20,
        kProbePretentionBoltReaction = 21,
        kProbeGenPlaneStrain = 22,
        kProbeResponsePSD = 23,
        kProbeElectricPotential = 24,
        kProbeCurrentDensity = 25,
        kProbeElectricField = 26,
        kProbeEdgeFlux = 27,
        kProbeBeamConnection = 28,
        kProbeConstrainedForce = 29,
        kProbeElasticForce = 30,
        kProbeDampingForce = 31,
        kProbeConstrainedMoment = 32,
        kProbeElasticMoment = 33,
        kProbeDampingMoment = 34,
        kProbeRadiation = 35,
        kProbeBearing = 36,
        kProbeFrictionForce = 37,
        kProbeFrictionMoment = 38,
        kProbeFlexibleRotation = 39,
        kProbeJouleHeat = 40
    } DSProbeResultType;

    typedef enum {
        kMEMORY_SETTINGS_PROGRAM_CHOOSES = 0,
        kMEMORY_SETTINGS_MANUAL = 1
    } DSMemorySettingsType;

    typedef enum {
        kFAUnknown = 0,
        kFAFullSolve = 1,
        kFAPost = 2,
        kFAConvergence = 3,
        kFAPartialSolve = 4,
        kFAInputFile = 5,
        kFARestart = 6,
        kFASolvePostSnippets = 7
    } DSFindAnswersType;

    typedef enum {
        kOTUnknown = 0,
        kOTNoResults = 1,
        kOTResultsRange = 2,
        kOTAllResults = 3
    } DSOutcomeType;

    typedef enum {
        kModal_NO_COMLEX_RESULTS = 0,
        kModal_2_COMLEX_RESULTS = 1,
        kModal_4_COMLEX_RESULTS = 2
    } DSModalResultsCase;

    typedef enum {
        kDSPostProcessingMeshSource_PROGRAM_CHOOSES = 0,
        kDSPostProcessingMeshSource_MECHANICAL = 1,
        kDSPostProcessingMeshSource_RESULT_FILE = 2
    } DSPostProcessingMeshSourceType;

    [
      odl,
      uuid(5EFA648B-7E3A-4DCD-988F-55A0011407A2),
      helpstring("IAnsDoubleColl Interface"),
      dual,
      oleautomation
    ]
    interface IAnsDoubleColl : IDispatch {
        [id(0x00000001), propget, helpstring("property Count")]
        HRESULT Count([out, retval] unsigned int* plCount);
        [id(00000000), propget, helpstring("property Item")]
        HRESULT Item(
                        [in] unsigned int lNum, 
                        [out, retval] double* pdVal);
        [id(0xfffffffc), propget, helpstring("property NewEnum")]
        HRESULT _NewEnum([out, retval] IUnknown** ppunkEnum);
        [id(0x00000002), helpstring("method Add")]
        HRESULT Add([in] double dNewVal);
        [id(0x00000003), helpstring("method Clear")]
        HRESULT Clear();
        [id(0x00000004), propget, helpstring("Returns index of first match from collection")]
        HRESULT FindItem(
                        [in] double bszItem, 
                        [out, retval] unsigned int* pVal);
    };

    [
      odl,
      uuid(0F9CAC6B-29E9-4449-838C-5F8E0B63CA81),
      helpstring("IAnsBSTRColl Interface"),
      dual,
      oleautomation
    ]
    interface IAnsBSTRColl : IDispatch {
        [id(0x00000001), propget, helpstring("property Count")]
        HRESULT Count([out, retval] unsigned int* plCount);
        [id(00000000), propget, helpstring("property Item")]
        HRESULT Item(
                        [in] unsigned int lNum, 
                        [out, retval] BSTR* pdVal);
        [id(0xfffffffc), propget, helpstring("property NewEnum")]
        HRESULT _NewEnum([out, retval] IUnknown** ppunkEnum);
        [id(0x00000002), helpstring("method Add")]
        HRESULT Add([in] BSTR bsNewVal);
        [id(0x00000003), helpstring("method Remove")]
        HRESULT RemoveAt(unsigned int index);
        [id(0x00000004), helpstring("method Clear")]
        HRESULT Clear();
        [id(0x00000005), propget, helpstring("property FindItem")]
        HRESULT FindItem(
                        [in] BSTR bszItem, 
                        [out, retval] unsigned int* pVal);
    };

    [
      odl,
      uuid(943FFA74-F8CF-4BE0-80F8-AE5FFB385E53),
      helpstring("IAnsIntColl Interface"),
      dual,
      nonextensible,
      oleautomation
    ]
    interface IAnsIntColl : IDispatch {
        [id(0x00000001), propget, helpstring("property Count")]
        HRESULT Count([out, retval] unsigned int* plCount);
        [id(00000000), propget, helpstring("property Item")]
        HRESULT Item(
                        [in] unsigned int lNum, 
                        [out, retval] int* pdVal);
        [id(0xfffffffc), propget, helpstring("property NewEnum")]
        HRESULT _NewEnum([out, retval] IUnknown** ppunkEnum);
        [id(0x00000002), helpstring("method Add")]
        HRESULT Add([in] int iNewVal);
        [id(0x00000003), propget, helpstring("Returns index of first match from collection")]
        HRESULT FindItem(
                        [in] int bszItem, 
                        [out, retval] unsigned int* pVal);
        [id(0x00000004), helpstring("method Clear")]
        HRESULT Clear();
    };

    typedef [public]
    unsigned int dsid;

    typedef enum {
        kDistPostProgCont = 0,
        kDistPostYes = 1,
        kDistPostNo = 2
    } DSDistributedPostBehavior;

    typedef enum {
        kGPU_TYPE_NVIDIA = 0,
        kGPU_TYPE_INTEL = 1
    } DSGPUType;

    typedef enum {
        kMPI_TYPE_PCMPI = 0,
        kMPI_TYPE_INTELMPI = 1,
        kMPI_TYPE_MSMPI = 2
    } DSMPIType;

    typedef enum {
        kEQ_SOLVER_FRONTAL = 0,
        kEQ_SOLVER_JCG = 1,
        kEQ_SOLVER_PCG = 2,
        kEQ_SOLVER_ICCG = 3,
        kEQ_SOLVER_SPARSE = 4,
        kEQ_SOLVER_USER_SUPPLIED = 5,
        kEQ_SOLVER_AMG = 6,
        kEQ_SOLVER_QMR = 7
    } DSEquationSolverType;

    typedef enum {
        kEIGEN_SOLVER_REDUCED = 0,
        kEIGEN_SOLVER_SUBSPACE = 1,
        kEIGEN_SOLVER_LANCZOS = 2,
        kEIGEN_SOLVER_UNSYMMETRIC = 3,
        kEIGEN_SOLVER_DAMPED = 4,
        kEIGEN_SOLVER_BLOCK_LANCZOS = 5,
        kEIGEN_SOLVER_QRDAMP = 6,
        kEIGEN_SOLVER_SUPERNODE = 7,
        kEIGEN_SOLVER_PCG_LANCZOS = 8
    } DSEigenSolverType;

    typedef enum {
        DISPID_BeamConnectionScopingType = 10,
        DISPID_BeamConnectionReferenceGeometryDefineBy = 11,
        DISPID_BeamConnectionMobileGeometryDefineBy = 12,
        DISPID_BeamConnectionReferenceRemotePointSelection = 13,
        DISPID_BeamConnectionMobileRemotePointSelection = 14,
        DISPID_BeamConnectionReferenceBehavior = 15,
        DISPID_BeamConnectionMobileBehavior = 16,
        DISPID_BeamConnectionReferenceCoordinateSystemSelection = 17,
        DISPID_BeamConnectionMobileCoordinateSystemSelection = 18,
        DISPID_BeamConnectionSuppressed = 19,
        DISPID_BeamConnectionReferenceSet = 20,
        DISPID_BeamConnectionMobileSet = 21,
        DISPID_BeamConnectionReferenceBodyName = 22,
        DISPID_BeamConnectionMobileBodyName = 23,
        DISPID_BeamConnectionReferenceComponent = 24,
        DISPID_BeamConnectionMobileComponent = 25,
        DISPID_BeamConnectionReferenceLocationX = 26,
        DISPID_BeamConnectionReferenceLocationY = 27,
        DISPID_BeamConnectionReferenceLocationZ = 28,
        DISPID_BeamConnectionMobileLocationX = 29,
        DISPID_BeamConnectionMobileLocationY = 30,
        DISPID_BeamConnectionMobileLocationZ = 31,
        DISPID_BeamConnectionReferenceLocationSelection = 32,
        DISPID_BeamConnectionMobileLocationSelection = 33,
        DISPID_BeamConnectionReferencePinballSize = 34,
        DISPID_BeamConnectionMobilePinballSize = 36,
        DISPID_BeamConnectionCrossSectionType = 37,
        DISPID_BeamConnectionRadius = 38,
        DISPID_BeamConnectionComments = 39,
        DISPID_BeamConnectionFigures = 40,
        DISPID_BeamConnectionImages = 41,
        DISPID_BeamConnectionCommandEditors = 42,
        DISPID_BeamConnectionAddComment = 43,
        DISPID_BeamConnectionAddFigure = 44,
        DISPID_BeamConnectionAddImage = 45,
        DISPID_BeamConnectionAddCommandEditor = 46,
        DISPID_BeamConnectionMaterialName = 47,
        DISPID_BeamConnectionHidden = 48,
        DISPID_BeamConnectionPrototypes = 51,
        DISPID_BeamConnectionSuppressedForSolve = 52,
        DISPID_BeamConnectionNumReference = 53,
        DISPID_BeamConnectionNumMobile = 54,
        DISPID_BeamConnectionPrototypesForSubset = 55,
        DISPID_BeamConnectionEDAMaterialTransferId = 56,
        DISPID_BeamConnectionReferenceAppliedBy = 57,
        DISPID_BeamConnectionMobileAppliedBy = 58,
        DISPID_BeamConnectionReferenceBeamMaterialName = 59,
        DISPID_BeamConnectionReferenceBeamRadius = 60,
        DISPID_BeamConnectionMobileBeamMaterialName = 61,
        DISPID_BeamConnectionMobileBeamRadius = 62,
        DISPID_BeamConnectionUncheckRemotePointRelatedParameters = 63,
        DISPID_BeamConnectionUnitTypeByDispid = 64,
        DISPID_BeamConnectionUnitStringByDispid = 65,
        DISPID_BeamConnectionParamNameByDispid = 66
    } kDispId_BeamConnection;

    [
      odl,
      uuid(87356BB8-16DB-40E9-8DE9-F471E705152F),
      helpstring("IDSBeamConnectionAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSBeamConnectionAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x0000000a), propget, helpstring("property ScopingType")]
        HRESULT ScopingType([out, retval] DSSpringScopingType* pVal);
        [id(0x0000000a), propput, helpstring("property ScopingType")]
        HRESULT ScopingType([in] DSSpringScopingType pVal);
        [id(0x0000000b), propget, helpstring("property ReferenceGeometryDefineBy")]
        HRESULT ReferenceGeometryDefineBy([out, retval] DSGeometryDefineByType* pVal);
        [id(0x0000000b), propput, helpstring("property ReferenceGeometryDefineBy")]
        HRESULT ReferenceGeometryDefineBy([in] DSGeometryDefineByType pVal);
        [id(0x0000000c), propget, helpstring("property MobileGeometryDefineBy")]
        HRESULT MobileGeometryDefineBy([out, retval] DSGeometryDefineByType* pVal);
        [id(0x0000000c), propput, helpstring("property MobileGeometryDefineBy")]
        HRESULT MobileGeometryDefineBy([in] DSGeometryDefineByType pVal);
        [id(0x0000000d), propget, helpstring("property ReferenceRemotePointSelection")]
        HRESULT ReferenceRemotePointSelection([out, retval] dsid* pVal);
        [id(0x0000000d), propput, helpstring("property ReferenceRemotePointSelection")]
        HRESULT ReferenceRemotePointSelection([in] dsid pVal);
        [id(0x0000000e), propget, helpstring("property MobileRemotePointSelection")]
        HRESULT MobileRemotePointSelection([out, retval] dsid* pVal);
        [id(0x0000000e), propput, helpstring("property MobileRemotePointSelection")]
        HRESULT MobileRemotePointSelection([in] dsid pVal);
        [id(0x0000000f), propget, helpstring("property ReferenceBehavior")]
        HRESULT ReferenceBehavior([out, retval] DSLoadBehavior* pVal);
        [id(0x0000000f), propput, helpstring("property ReferenceBehavior")]
        HRESULT ReferenceBehavior([in] DSLoadBehavior pVal);
        [id(0x00000010), propget, helpstring("property MobileBehavior")]
        HRESULT MobileBehavior([out, retval] DSLoadBehavior* pVal);
        [id(0x00000010), propput, helpstring("property MobileBehavior")]
        HRESULT MobileBehavior([in] DSLoadBehavior pVal);
        [id(0x00000011), propget, helpstring("property ReferenceCoordinateSystemSelection")]
        HRESULT ReferenceCoordinateSystemSelection([out, retval] int* pVal);
        [id(0x00000011), propput, helpstring("property ReferenceCoordinateSystemSelection")]
        HRESULT ReferenceCoordinateSystemSelection([in] int pVal);
        [id(0x00000012), propget, helpstring("property MobileCoordinateSystemSelection")]
        HRESULT MobileCoordinateSystemSelection([out, retval] int* pVal);
        [id(0x00000012), propput, helpstring("property MobileCoordinateSystemSelection")]
        HRESULT MobileCoordinateSystemSelection([in] int pVal);
        [id(0x00000013), propget, helpstring("property Suppressed")]
        HRESULT Suppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000013), propput, helpstring("property Suppressed")]
        HRESULT Suppressed([in] VARIANT_BOOL pVal);
        [id(0x00000014), propput, helpstring("property ReferenceSet")]
        HRESULT ReferenceSet([in] IDispatch* rhs);
        [id(0x00000015), propput, helpstring("property MobileSet")]
        HRESULT MobileSet([in] IDispatch* rhs);
        [id(0x00000016), propget, helpstring("property ReferenceBodyName")]
        HRESULT ReferenceBodyName([out, retval] BSTR* pVal);
        [id(0x00000017), propget, helpstring("property MobileBodyName")]
        HRESULT MobileBodyName([out, retval] BSTR* pVal);
        [id(0x00000018), propget, helpstring("property ReferenceComponent")]
        HRESULT ReferenceComponent([out, retval] int* pVal);
        [id(0x00000018), propput, helpstring("property ReferenceComponent")]
        HRESULT ReferenceComponent([in] int pVal);
        [id(0x00000019), propget, helpstring("property MobileComponent")]
        HRESULT MobileComponent([out, retval] int* pVal);
        [id(0x00000019), propput, helpstring("property MobileComponent")]
        HRESULT MobileComponent([in] int pVal);
        [id(0x0000001a), propget, helpstring("property ReferenceLocationX")]
        HRESULT ReferenceLocationX([out, retval] double* pVal);
        [id(0x0000001a), propput, helpstring("property ReferenceLocationX")]
        HRESULT ReferenceLocationX([in] double pVal);
        [id(0x0000001b), propget, helpstring("property ReferenceLocationY")]
        HRESULT ReferenceLocationY([out, retval] double* pVal);
        [id(0x0000001b), propput, helpstring("property ReferenceLocationY")]
        HRESULT ReferenceLocationY([in] double pVal);
        [id(0x0000001c), propget, helpstring("property ReferenceLocationZ")]
        HRESULT ReferenceLocationZ([out, retval] double* pVal);
        [id(0x0000001c), propput, helpstring("property ReferenceLocationZ")]
        HRESULT ReferenceLocationZ([in] double pVal);
        [id(0x0000001d), propget, helpstring("property MobileLocationX")]
        HRESULT MobileLocationX([out, retval] double* pVal);
        [id(0x0000001d), propput, helpstring("property MobileLocationX")]
        HRESULT MobileLocationX([in] double pVal);
        [id(0x0000001e), propget, helpstring("property MobileLocationY")]
        HRESULT MobileLocationY([out, retval] double* pVal);
        [id(0x0000001e), propput, helpstring("property MobileLocationY")]
        HRESULT MobileLocationY([in] double pVal);
        [id(0x0000001f), propget, helpstring("property MobileLocationZ")]
        HRESULT MobileLocationZ([out, retval] double* pVal);
        [id(0x0000001f), propput, helpstring("property MobileLocationZ")]
        HRESULT MobileLocationZ([in] double pVal);
        [id(0x00000020), propput, helpstring("property ReferenceLocationSelection")]
        HRESULT ReferenceLocationSelection([in] IDispatch* rhs);
        [id(0x00000021), propput, helpstring("property MobileLocationSelection")]
        HRESULT MobileLocationSelection([in] IDispatch* rhs);
        [id(0x00000022), propget, helpstring("property ReferencePinballSize")]
        HRESULT ReferencePinballSize([out, retval] double* dVal);
        [id(0x00000022), propput, helpstring("property ReferencePinballSize")]
        HRESULT ReferencePinballSize([in] double dVal);
        [id(0x00000024), propget, helpstring("property MobilePinballSize")]
        HRESULT MobilePinballSize([out, retval] double* dVal);
        [id(0x00000024), propput, helpstring("property MobilePinballSize")]
        HRESULT MobilePinballSize([in] double dVal);
        [id(0x00000025), propget, helpstring("property CrossSectionType")]
        HRESULT CrossSectionType([out, retval] DSCrossSectionType* dVal);
        [id(0x00000025), propput, helpstring("property CrossSectionType")]
        HRESULT CrossSectionType([in] DSCrossSectionType dVal);
        [id(0x00000026), propget, helpstring("property Radius")]
        HRESULT Radius([out, retval] double* dVal);
        [id(0x00000026), propput, helpstring("property Radius")]
        HRESULT Radius([in] double dVal);
        [id(0x0000002b), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x0000002c), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x0000002d), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x0000002e), helpstring("method AddCommandEditor")]
        HRESULT AddCommandEditor([out, retval] IDispatch** ppVal);
        [id(0x00000029), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x0000002a), propget, helpstring("property CommandEditors")]
        HRESULT CommandEditors([out, retval] IDispatch** ppDisp);
        [id(0x00000027), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x00000028), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x0000002f), propget, helpstring("property MaterialName")]
        HRESULT MaterialName([out, retval] BSTR* pVal);
        [id(0x0000002f), propput, helpstring("property MaterialName")]
        HRESULT MaterialName([in] BSTR pVal);
        [id(0x00000030), propget, helpstring("property Hidden")]
        HRESULT Hidden([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000030), propput, helpstring("property Hidden")]
        HRESULT Hidden([in] VARIANT_BOOL pVal);
        [id(0x00000033), propget, helpstring("property Prototypes")]
        HRESULT Prototypes([out, retval] VARIANT* pVal);
        [id(0x00000034), propget, helpstring("property SuppressedForSolve")]
        HRESULT SuppressedForSolve([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000035), propget, helpstring("property NumReference")]
        HRESULT NumReference([out, retval] int* pVal);
        [id(0x00000036), propget, helpstring("property NumMobile")]
        HRESULT NumMobile([out, retval] int* pVal);
        [id(0x00000037), propget, helpstring("property PrototypesForSubset")]
        HRESULT PrototypesForSubset(
                        [in] int subset, 
                        [out, retval] VARIANT* pVal);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x00000038), propget, helpstring("property EDAMaterialTransferId")]
        HRESULT EDAMaterialTransferId([out, retval] BSTR* pVal);
        [id(0x00000039), propget, helpstring("property ReferenceAppliedBy")]
        HRESULT ReferenceAppliedBy([out, retval] DSRemoteApplicationType* pVal);
        [id(0x00000039), propput, helpstring("property ReferenceAppliedBy")]
        HRESULT ReferenceAppliedBy([in] DSRemoteApplicationType pVal);
        [id(0x0000003a), propget, helpstring("property MobileAppliedBy")]
        HRESULT MobileAppliedBy([out, retval] DSRemoteApplicationType* pVal);
        [id(0x0000003a), propput, helpstring("property MobileAppliedBy")]
        HRESULT MobileAppliedBy([in] DSRemoteApplicationType pVal);
        [id(0x0000003b), propget, helpstring("property ReferenceBeamMaterialName")]
        HRESULT ReferenceBeamMaterialName([out, retval] BSTR* pVal);
        [id(0x0000003b), propput, helpstring("property ReferenceBeamMaterialName")]
        HRESULT ReferenceBeamMaterialName([in] BSTR pVal);
        [id(0x0000003d), propget, helpstring("property MobileBeamMaterialName")]
        HRESULT MobileBeamMaterialName([out, retval] BSTR* pVal);
        [id(0x0000003d), propput, helpstring("property MobileBeamMaterialName")]
        HRESULT MobileBeamMaterialName([in] BSTR pVal);
        [id(0x0000003f), helpstring("method UncheckRemotePointRelatedParameters")]
        HRESULT UncheckRemotePointRelatedParameters();
        [id(0x00000040), propget, helpstring("property UnitTypeByDispid")]
        HRESULT UnitTypeByDispid(
                        [in] int dispid, 
                        [out, retval] int* unitType);
        [id(0x00000041), propget, helpstring("property UnitStringByDispid")]
        HRESULT UnitStringByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* unitString);
        [id(0x00000042), propget, helpstring("property ParamNameByDispid")]
        HRESULT ParamNameByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* paramName);
        [id(0x0000003e), propget, helpstring("property MobileBeamRadius")]
        HRESULT MobileBeamRadius([out, retval] double* dVal);
        [id(0x0000003e), propput, helpstring("property MobileBeamRadius")]
        HRESULT MobileBeamRadius([in] double dVal);
        [id(0x0000003c), propget, helpstring("property ReferenceBeamRadius")]
        HRESULT ReferenceBeamRadius([out, retval] double* dVal);
        [id(0x0000003c), propput, helpstring("property ReferenceBeamRadius")]
        HRESULT ReferenceBeamRadius([in] double dVal);
    };

    typedef enum {
        kSpringScopingTypeBodyToBody = 0,
        kSpringScopingTypeBodyToGround = 1
    } DSSpringScopingType;

    typedef enum {
        kGeometryDefineByGeometry = 0,
        kGeometryDefineByComponent = 1,
        kGeometryDefineByWorksheet = 2,
        kMinValues = 3,
        kMaxValues = 4,
        kGeometryDefineByRemotePoint = 5,
        kGeometryDefineByPath = 6,
        kGeometryDefineBySurface = 7,
        kGeometryDefineByMapping = 8,
        kGeometryDefineByFracture = 9,
        kGeometryDefineByImportedInterface = 10,
        kGeometryDefineByCoordinates = 11,
        kGeometryDefineByImportedAssembly = 12,
        kGeometryDefineByAnalysisPly = 13,
        kGeometryDefineByContactRegion = 14
    } DSGeometryDefineByType;

    typedef enum {
        kRigid = 0,
        kDeformable = 1,
        kBeamLB = 2,
        kCoupledLB = 3
    } DSLoadBehavior;

    typedef enum {
        kCircularCS = 0
    } DSCrossSectionType;

    typedef enum {
        kApplied_UnknownAttachment = 0,
        kApplied_DirectAttachment = 1,
        kApplied_RemoteAttachment = 2
    } DSRemoteApplicationType;

    typedef enum {
        DISPID_BeamToolGeometrySelection = 10,
        DISPID_BeamToolHasValidGeoSelection = 11,
        DISPID_BeamToolComments = 14,
        DISPID_BeamToolFigures = 15,
        DISPID_BeamToolAddFigure = 16,
        DISPID_BeamToolAddComment = 17,
        DISPID_BeamToolAddResult = 18,
        DISPID_BeamToolResults = 19,
        DISPID_BeamToolScope = 20,
        DISPID_BeamToolImages = 21,
        DISPID_BeamToolAddImage = 22
    } kDispId_BeamTool;

    [
      odl,
      uuid(6DFC75D3-DF29-40C9-AA65-065517174929),
      helpstring("IDSBeamToolAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSBeamToolAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x0000000a), propput, helpstring("property GeometrySelection")]
        HRESULT GeometrySelection([in] IDispatch* rhs);
        [id(0x0000000b), propget, helpstring("property HasValidGeoSelection")]
        HRESULT HasValidGeoSelection([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000000e), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x0000000f), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x00000011), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x00000010), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x00000012), helpstring("method AddResult")]
        HRESULT AddResult(
                        [in] IDispatch* piSelectMgr, 
                        [in] unsigned int resType, 
                        [out, retval] IDispatch** ppVal);
        [id(0x00000013), propget, helpstring("property Results")]
        HRESULT Results([out, retval] IDispatch** pVal);
        [id(0x00000014), propget, helpstring("property Scope")]
        HRESULT Scope([out, retval] BSTR* pVal);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
        [id(0x00000015), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000016), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
    };

    typedef enum {
        DISPID_FractureToolComments = 10,
        DISPID_FractureToolFigures = 11,
        DISPID_FractureToolAddComment = 12,
        DISPID_FractureToolAddFigure = 13,
        DISPID_FractureToolImages = 14,
        DISPID_FractureToolAddImage = 15,
        DISPID_FractureToolAddResult = 16,
        DISPID_FractureToolScopeType = 17,
        DISPID_FractureToolCrackSelection = 18,
        DISPID_FractureToolSuppressed = 19
    } kDispId_FractureTool;

    [
      odl,
      uuid(51F3B076-CCE5-406A-83CF-A4409F12AD7F),
      helpstring("IDSFractureToolAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSFractureToolAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x0000000a), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x0000000b), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x0000000c), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x0000000d), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x0000000e), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x0000000f), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00000010), helpstring("method AddResult")]
        HRESULT AddResult(
                        [in] unsigned int resType, 
                        [out, retval] IUnknown** ppVal);
        [id(0x00000011), propget, helpstring("property ScopeType")]
        HRESULT ScopeType([out, retval] unsigned int* pVal);
        [id(0x00000012), propget, helpstring("property CrackSelection")]
        HRESULT CrackSelection([out, retval] unsigned int* pVal);
        [id(0x00000012), propput, helpstring("property CrackSelection")]
        HRESULT CrackSelection([in] unsigned int pVal);
        [id(0x00000013), propget, helpstring("property Suppressed")]
        HRESULT Suppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000013), propput, helpstring("property Suppressed")]
        HRESULT Suppressed([in] VARIANT_BOOL pVal);
    };

    typedef enum {
        DISPID_BodyGroupPrototypes = 10,
        DISPID_BodyGroupSuppressed = 11,
        DISPID_BodyGroupHidden = 12,
        DISPID_BodyGroupMaterialIndex = 13,
        DISPID_BodyGroupMaterialName = 14,
        DISPID_BodyGroupMaterial = 15,
        DISPID_BodyGroupBoundingBoxLengthX = 16,
        DISPID_BodyGroupBoundingBoxLengthY = 17,
        DISPID_BodyGroupBoundingBoxLengthZ = 18,
        DISPID_BodyGroupVolume = 19,
        DISPID_BodyGroupMass = 20,
        DISPID_BodyGroupComments = 21,
        DISPID_BodyGroupFigures = 22,
        DISPID_BodyGroupSheetSurfaceArea = 23,
        DISPID_BodyGroupNodes = 24,
        DISPID_BodyGroupElements = 25,
        DISPID_BodyGroupPart = 26,
        DISPID_BodyGroupCoordinateSystemSelection = 27,
        DISPID_BodyGroupImages = 28,
        DISPID_BodyGroupMassCentroidX = 29,
        DISPID_BodyGroupMassCentroidY = 30,
        DISPID_BodyGroupMassCentroidZ = 31,
        DISPID_BodyGroupMassMomentOfInertiaP1 = 32,
        DISPID_BodyGroupMassMomentOfInertiaP2 = 33,
        DISPID_BodyGroupMassMomentOfInertiaP3 = 34,
        DISPID_BodyGroupGeometryType = 35,
        DISPID_BodyGroupAddComment = 60,
        DISPID_BodyGroupAddFigure = 61,
        DSIPID_BodyGroupEverHadGenBodies = 62,
        DISPID_BodyGroupMaterialFromEDA = 63,
        DISPID_BodyGroupRemoveMaterialIfNotUsed = 64,
        DISPID_BodyGroupAddImage = 65,
        DISPID_BodyGroupMeshMetric = 66,
        DISPID_BodyGroupMeshMetricMin = 67,
        DISPID_BodyGroupMeshMetricMax = 68,
        DISPID_BodyGroupMeshMetricAverage = 69,
        DISPID_BodyGroupMeshMetricSTDV = 70,
        DISPID_BodyGroupAddVirtualBody = 71,
        DISPID_BodyGroupVirtualBody = 72
    } kDispId_BodyGroup;

    [
      odl,
      uuid(91D440F8-DE65-4FC0-861B-04902555FF3B),
      helpstring("IDSBodyGroupAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSBodyGroupAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x0000000a), propget, helpstring("property Prototypes")]
        HRESULT Prototypes([out, retval] IDispatch** ppDisp);
        [id(0x0000000c), propget, helpstring("property Hidden")]
        HRESULT Hidden([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000000c), propput, helpstring("property Hidden")]
        HRESULT Hidden([in] VARIANT_BOOL pVal);
        [id(0x0000000b), propget, helpstring("property Suppressed")]
        HRESULT Suppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000000b), propput, helpstring("property Suppressed")]
        HRESULT Suppressed([in] VARIANT_BOOL pVal);
        [id(0x0000000e), propget, helpstring("property MaterialName")]
        HRESULT MaterialName([out, retval] BSTR* pVal);
        [id(0x0000000e), propput, helpstring("property MaterialName")]
        HRESULT MaterialName([in] BSTR pVal);
        [id(0x0000001b), propget, helpstring("property CoordinateSystemSelection")]
        HRESULT CoordinateSystemSelection([out, retval] int* pVal);
        [id(0x0000001b), propput, helpstring("property CoordinateSystemSelection")]
        HRESULT CoordinateSystemSelection([in] int pVal);
        [id(0x00000010), propget, helpstring("property BoundingBoxLengthX")]
        HRESULT BoundingBoxLengthX([out, retval] double* pVal);
        [id(0x00000011), propget, helpstring("property BoundingBoxLengthY")]
        HRESULT BoundingBoxLengthY([out, retval] double* pVal);
        [id(0x00000012), propget, helpstring("property BoundingBoxLengthZ")]
        HRESULT BoundingBoxLengthZ([out, retval] double* pVal);
        [id(0x00000013), propget, helpstring("property Volume")]
        HRESULT Volume([out, retval] double* pVal);
        [id(0x00000014), propget, helpstring("property Mass")]
        HRESULT Mass([out, retval] double* pVal);
        [id(0x0000001d), propget, helpstring("property MassCentroidX")]
        HRESULT MassCentroidX([out, retval] double* pVal);
        [id(0x0000001e), propget, helpstring("property MassCentroidY")]
        HRESULT MassCentroidY([out, retval] double* pVal);
        [id(0x0000001f), propget, helpstring("property MassCentroidZ")]
        HRESULT MassCentroidZ([out, retval] double* pVal);
        [id(0x00000020), propget, helpstring("property MassMomentOfInertiaP1")]
        HRESULT MassMomentOfInertiaP1([out, retval] double* pVal);
        [id(0x00000021), propget, helpstring("property MassMomentOfInertiaP2")]
        HRESULT MassMomentOfInertiaP2([out, retval] double* pVal);
        [id(0x00000022), propget, helpstring("property MassMomentOfInertiaP3")]
        HRESULT MassMomentOfInertiaP3([out, retval] double* pVal);
        [id(0x00000023), propget, helpstring("property GeometryType")]
        HRESULT GeometryType([out, retval] DSGeometryType* pVal);
        [id(0x00000015), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x00000016), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x00000017), propget, helpstring("property SheetSurfaceArea")]
        HRESULT SheetSurfaceArea([out, retval] double* pVal);
        [id(0x0000003c), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x0000003d), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x00000018), propget, helpstring("property Nodes")]
        HRESULT Nodes([out, retval] int* pVal);
        [id(0x00000019), propget, helpstring("property Elements")]
        HRESULT Elements([out, retval] int* pVal);
        [id(0x0000001a), propget, helpstring("property Part")]
        HRESULT part([out, retval] IDispatch** ppVal);
        [id(0x0000003e), propget, helpstring("property EverHadGenBodies")]
        HRESULT EverHadGenBodies([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000003f), propput, helpstring("property MaterialFromEDA")]
        HRESULT MaterialFromEDA([in] IDispatch* rhs);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
        [id(0x0000001c), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000041), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00000042), propget, helpstring("property MeshMetric")]
        HRESULT MeshMetric([out, retval] int* pVal);
        [id(0x00000043), propget, helpstring("property MeshMetricMin")]
        HRESULT MeshMetricMin([out, retval] double* pVal);
        [id(0x00000044), propget, helpstring("property MeshMetricMax")]
        HRESULT MeshMetricMax([out, retval] double* pVal);
        [id(0x00000045), propget, helpstring("property MeshMetricAverage")]
        HRESULT MeshMetricAverage([out, retval] double* pVal);
        [id(0x00000046), propget, helpstring("property MeshMetricSTDV")]
        HRESULT MeshMetricSTDV([out, retval] double* pVal);
        [id(0x00000047), helpstring("method AddVirtualBody")]
        HRESULT AddVirtualBody([out, retval] IDispatch** ppVal);
        [id(0x00000048), propget, helpstring("method IsVirtualBody: return 1 if this body group was created for assembly meshing (and is not a real topology)")]
        HRESULT IsVirtualBodyGroup([out, retval] int* piVal);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
    };

    typedef enum {
        kSolidGeometry = 0,
        kSheetGeometry = 1,
        kMixedGeometry = 2,
        kWireGeometry = 3,
        kEmptyGeometry = 4,
        kLightweightGeometry = 5,
        kUnknownGeometry = 6
    } DSGeometryType;

    [
      odl,
      uuid(9B3C500A-827F-43C5-B8B5-8A7DA5BE028C),
      helpstring("IDSBranchAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSBranchAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Project")]
        HRESULT Project([out, retval] IDispatch** ppVal);
        [id(0x00000002), propget, helpstring("property Model")]
        HRESULT Model([out, retval] IDispatch** ppVal);
        [id(0x00000003), propget, helpstring("property PrototypeGroup")]
        HRESULT PrototypeGroup([out, retval] IDispatch** ppVal);
        [id(0x00000004), propget, helpstring("property Prototypes")]
        HRESULT Prototypes([out, retval] IDispatch** ppVal);
        [id(0x00000005), propget, helpstring("property ContactGroup")]
        HRESULT ContactGroup([out, retval] IDispatch** ppVal);
        [id(0x00000006), propget, helpstring("property ContactRegions")]
        HRESULT ContactRegions([out, retval] IDispatch** ppVal);
        [id(0x00000007), propget, helpstring("property MeshControlGroup")]
        HRESULT MeshControlGroup([out, retval] IDispatch** ppVal);
        [id(0x00000008), propget, helpstring("property MeshControls")]
        HRESULT MeshControls([out, retval] IDispatch** ppVal);
        [id(0x00000009), propget, helpstring("property Environment")]
        HRESULT Environment([out, retval] IDispatch** ppVal);
        [id(0x0000000a), propget, helpstring("property Loads")]
        HRESULT Loads([out, retval] IDispatch** ppVal);
        [id(0x0000000b), propget, helpstring("property Supports")]
        HRESULT Supports([out, retval] IDispatch** ppVal);
        [id(0x0000000c), propget, helpstring("property AnswerSet")]
        HRESULT AnswerSet([out, retval] IDispatch** ppVal);
        [id(0x0000000d), propget, helpstring("property Results")]
        HRESULT Results([out, retval] IDispatch** ppVal);
        [id(0x0000000e), propget, helpstring("property Materials")]
        HRESULT Materials([out, retval] IDispatch** ppVal);
        [id(0x0000000f), propget, helpstring("property Convections")]
        HRESULT Convections([out, retval] IDispatch** ppVal);
        [id(0x00000010), propget, helpstring("property Assembly")]
        HRESULT Assembly([out, retval] IDispatch** ppVal);
        [id(0x00000011), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** ppVal);
        [id(0x00000012), helpstring("method UpdateWithParameters")]
        HRESULT UpdateWithParameters();
        [id(0x00000013), propget, helpstring("property Alerts")]
        HRESULT Alerts([out, retval] IDispatch** ppVal);
        [id(0x00000014), propget, helpstring("property Convergences")]
        HRESULT Convergences([out, retval] IDispatch** ppVal);
        [id(0x00000015), propget, helpstring("property ResultCharts")]
        HRESULT ResultCharts([out, retval] IDispatch** ppVal);
        [id(0x00000016), propget, helpstring("property ComponentGroup")]
        HRESULT ComponentGroup([out, retval] IDispatch** ppVal);
        [id(0x00000017), propget, helpstring("property Components")]
        HRESULT Components([out, retval] IDispatch** ppVal);
        [id(0x00000018), propget, helpstring("property VirtualCellGroup")]
        HRESULT VirtualCellGroup([out, retval] IDispatch** ppVal);
        [id(0x00000019), propget, helpstring("property VirtualCells")]
        HRESULT VirtualCells([out, retval] IDispatch** ppVal);
        [id(0x0000001a), propget, helpstring("property CoordinateSystemGroup")]
        HRESULT CoordinateSystemGroup([out, retval] IDispatch** ppVal);
        [id(0x0000001b), propget, helpstring("property CoordinateSystems")]
        HRESULT CoordinateSystems([out, retval] IDispatch** ppVal);
        [id(0x0000001c), propget, helpstring("property SolutionCombinations")]
        HRESULT SolutionCombinations([out, retval] IDispatch** ppVal);
        [id(0x0000001d), propget, helpstring("property ResultTables")]
        HRESULT ResultTables([out, retval] IDispatch** ppVal);
        [id(0x0000001e), propget, helpstring("property SolutionStepsGroup")]
        HRESULT SolutionStepsGroup([out, retval] IDispatch** ppVal);
        [id(0x0000001f), propget, helpstring("property LoadGroups")]
        HRESULT LoadGroups([out, retval] IDispatch** ppVal);
        [id(0x00000020), propget, helpstring("property PointMasses")]
        HRESULT PointMasses([out, retval] IDispatch** ppVal);
        [id(0x00000021), propget, helpstring("property SymmetryGroups")]
        HRESULT SymmetryGroups([out, retval] IDispatch** ppVal);
        [id(0x00000022), propget, helpstring("property GeneralizedPlaneStrain")]
        HRESULT GeneralizedPlaneStrain([out, retval] IDispatch** ppVal);
        [id(0x00000023), propget, helpstring("property Joints")]
        HRESULT Joints([out, retval] IDispatch** ppVal);
        [id(0x00000024), propget, helpstring("property Springs")]
        HRESULT Springs([out, retval] IDispatch** ppVal);
        [id(0x00000025), propget, helpstring("property JointConditions")]
        HRESULT JointConditions([out, retval] IDispatch** ppVal);
        [id(0x00000026), propget, helpstring("property ResultProbes")]
        HRESULT ResultProbes([out, retval] IDispatch** ppVal);
        [id(0x00000027), propget, helpstring("property RemotePointGroup")]
        HRESULT RemotePointGroup([out, retval] IDispatch** ppVal);
        [id(0x00000028), propget, helpstring("property RemotePoints")]
        HRESULT RemotePoints([out, retval] IDispatch** ppVal);
        [id(0x00000029), propget, helpstring("property ExternalLoads")]
        HRESULT ExternalLoads([out, retval] IDispatch** ppVal);
        [id(0x0000002a), propget, helpstring("property BeamConnections")]
        HRESULT BeamConnections([out, retval] IDispatch** ppVal);
        [id(0x0000002b), propget, helpstring("property MeshConnections")]
        HRESULT MeshConnections([out, retval] IDispatch** ppVal);
        [id(0x0000002c), propget, helpstring("property Thicknesses")]
        HRESULT Thicknesses([out, retval] IDispatch** ppVal);
        [id(0x0000002d), propget, helpstring("property ConnectionGroups")]
        HRESULT ConnectionGroups([out, retval] IDispatch** ppVal);
        [id(0x0000002e), propget, helpstring("property ExternalThicknesses")]
        HRESULT ExternalThicknesses([out, retval] IDispatch** ppVal);
        [id(0x0000002f), propget, helpstring("property FractureGroup")]
        HRESULT FractureGroup([out, retval] IDispatch** ppVal);
        [id(0x00000030), propget, helpstring("property Cracks")]
        HRESULT Cracks([out, retval] IDispatch** ppVal);
        [id(0x00000031), propget, helpstring("property CondensedGeometry")]
        HRESULT CondensedGeometry([out, retval] IDispatch** ppVal);
        [id(0x00000032), propget, helpstring("property CondensedParts")]
        HRESULT CondensedParts([out, retval] IDispatch** ppVal);
        [id(0x00000033), propget, helpstring("property MeshConnectionsParent")]
        HRESULT MeshConnectionsParent([out, retval] IDispatch** ppVal);
        [id(0x00000034), propget, helpstring("property MeshConnectionsGroups")]
        HRESULT MeshConnectionsGroups([out, retval] IDispatch** ppVal);
        [id(0x00000035), propget, helpstring("property AnalysisPly")]
        HRESULT AnalysisPly([out, retval] IDispatch** ppVal);
        [id(0x00000036), propget, helpstring("property CompositeFailureCriteriaGroup")]
        HRESULT CompositeFailureCriteriaGroup([out, retval] IDispatch** ppVal);
        [id(0x00000037), propget, helpstring("property CompositeFailureCriteria")]
        HRESULT CompositeFailureCriteria([out, retval] IDispatch** ppVal);
        [id(0x00000038), propget, helpstring("property ElementOrientations")]
        HRESULT ElementOrientations([out, retval] IDispatch** ppVal);
        [id(0x00000039), propget, helpstring("property BeamEndReleases")]
        HRESULT BeamEndReleases([out, retval] IDispatch** ppVal);
    };

    typedef enum {
        DISPID_ChartScope = 10,
        DISPID_ChartIndependentAxisKey = 11,
        DISPID_ChartFilterForId = 12,
        DISPID_ChartXAxisLabel = 13,
        DISPID_ChartYAxisLabel = 14,
        DISPID_ChartReportContent = 15,
        DISPID_ChartReportCaption = 16,
        DISPID_ChartSuppressed = 17,
        DISPID_ChartModalType = 18,
        DISPID_ChartScale = 19,
        DISPID_ChartPlotStyle = 20,
        DISPID_ChartGridlines = 21
    } kDispId_Chart;

    [
      odl,
      uuid(D1166BF5-345F-4B5B-B4C5-715241BC8B5B),
      helpstring("IDSChartAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSChartAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x0000000a), propget, helpstring("property Scope")]
        HRESULT Scope([out, retval] IDispatch** ppIAnsEnumULONGsDisp);
        [id(0x0000000a), propput, helpstring("property Scope")]
        HRESULT Scope([in] IDispatch* ppIAnsEnumULONGsDisp);
        [id(0x0000000b), propget, helpstring("property IndependentAxisKey")]
        HRESULT IndependentAxisKey([out, retval] unsigned int* ulKey);
        [id(0x0000000b), propput, helpstring("property IndependentAxisKey")]
        HRESULT IndependentAxisKey([in] unsigned int ulKey);
        [id(0x0000000c), propget]
        HRESULT FilterForId(
                        [in] int lDSId, 
                        [out, retval] unsigned int* plFilter);
        [id(0x0000000c), propput]
        HRESULT FilterForId(
                        [in] int lDSId, 
                        [in] unsigned int plFilter);
        [id(0x0000000d), propget, helpstring("property XAxisLabel")]
        HRESULT XAxisLabel([out, retval] BSTR* pbsXAxisLabel);
        [id(0x0000000d), propput, helpstring("property XAxisLabel")]
        HRESULT XAxisLabel([in] BSTR pbsXAxisLabel);
        [id(0x0000000e), propget, helpstring("property YAxisLabel")]
        HRESULT YAxisLabel([out, retval] BSTR* pbsYAxisLabel);
        [id(0x0000000e), propput, helpstring("property YAxisLabel")]
        HRESULT YAxisLabel([in] BSTR pbsYAxisLabel);
        [id(0x0000000f), propget, helpstring("property ReportContent")]
        HRESULT ReportContent([out, retval] eChartReportType* plReportContent);
        [id(0x0000000f), propput, helpstring("property ReportContent")]
        HRESULT ReportContent([in] eChartReportType plReportContent);
        [id(0x00000010), propget, helpstring("property ReportCaption")]
        HRESULT ReportCaption([out, retval] BSTR* pbsReportCaption);
        [id(0x00000010), propput, helpstring("property ReportCaption")]
        HRESULT ReportCaption([in] BSTR pbsReportCaption);
        [id(0x60020014), propget]
        HRESULT CanAddId(
                        [in] int lDSId, 
                        [out, retval] VARIANT_BOOL* pvbCanAdd);
        [id(0x60020015), propget]
        HRESULT Label(
                        [in] unsigned int lDSId, 
                        [in] unsigned int lComponent, 
                        [out, retval] BSTR* pbsLabel);
        [id(0x60020016), propget]
        HRESULT LegendPrefix(
                        [in] unsigned int lDSId, 
                        [in] unsigned int lComponent, 
                        [out, retval] BSTR* pbsPrefix);
        [id(0x60020017), propget]
        HRESULT NumComponentsForId(
                        [in] unsigned int lDSId, 
                        [out, retval] unsigned int* plNumComponents);
        [id(0x60020018), propget]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x60020019), propget]
        HRESULT IdListForChart([out, retval] IAnsUINTColl** ppIAnsUINTColl);
        [id(0x6002001a), propget]
        HRESULT IsInput(
                        [in] unsigned int ulId, 
                        [out, retval] VARIANT_BOOL* pvbIsInput);
        [id(0x6002001b), propget]
        HRESULT IndependentAxisId([out, retval] int* plId);
        [id(0x6002001c), propget]
        HRESULT IndependentAxisComponent([out, retval] int* plComponent);
        [id(0x6002001d)]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x6002001e)]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x6002001f)]
        HRESULT GetIndependentAxisData(
                        [out] int* plId, 
                        [out] int* plComponent);
        [id(0x60020020)]
        HRESULT SetIndependentAxisData(
                        [in] int lId, 
                        [in] int lComponent);
        [id(0x60020021)]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00000011), propget]
        HRESULT Suppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000011), propput]
        HRESULT Suppressed([in] VARIANT_BOOL pVal);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x60020025), propget]
        HRESULT ValidInfo([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000012), propget, helpstring("property ChartModalType")]
        HRESULT ChartModalType([out, retval] eChartModalType* plModalType);
        [id(0x00000012), propput, helpstring("property ChartModalType")]
        HRESULT ChartModalType([in] eChartModalType plModalType);
        [id(0x00000013), propget, helpstring("property Scale")]
        HRESULT Scale([out, retval] DSChartScale* pScale);
        [id(0x00000013), propput, helpstring("property Scale")]
        HRESULT Scale([in] DSChartScale pScale);
        [id(0x00000014), propget, helpstring("property PlotStyle")]
        HRESULT PlotStyle([out, retval] DSChartPlotStyle* pPlotStyle);
        [id(0x00000014), propput, helpstring("property PlotStyle")]
        HRESULT PlotStyle([in] DSChartPlotStyle pPlotStyle);
        [id(0x00000015), propget, helpstring("property Gridlines")]
        HRESULT Gridlines([out, retval] DSChartGridlines* pGridlines);
        [id(0x00000015), propput, helpstring("property Gridlines")]
        HRESULT Gridlines([in] DSChartGridlines pGridlines);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
    };

    typedef enum {
        kChartReportTabularDataOnly = 1,
        kChartReportChartOnly = 2,
        kChartReportChartAndTabularData = 3,
        kChartReportNone = 4
    } eChartReportType;

    [
      odl,
      uuid(17B6F2A0-A205-4306-B8F2-A62695D3F9E1),
      helpstring("IAnsUINTColl Interface"),
      dual,
      nonextensible,
      oleautomation
    ]
    interface IAnsUINTColl : IDispatch {
        [id(0x00000001), propget, helpstring("property Count")]
        HRESULT Count([out, retval] unsigned int* plCount);
        [id(00000000), propget, helpstring("property Item")]
        HRESULT Item(
                        [in] unsigned int lNum, 
                        [out, retval] unsigned int* pdVal);
        [id(0xfffffffc), propget, helpstring("property NewEnum")]
        HRESULT _NewEnum([out, retval] IUnknown** ppunkEnum);
        [id(0x00000002), helpstring("method Add")]
        HRESULT Add([in] unsigned int iNewVal);
        [id(0x00000003), propget, helpstring("Returns index of first match from collection")]
        HRESULT FindItem(
                        [in] unsigned int bszItem, 
                        [out, retval] unsigned int* pVal);
        [id(0x00000004), helpstring("method Clear")]
        HRESULT Clear();
    };

    typedef enum {
        kChartModalBar = 1,
        kChartModalRootLocus = 2
    } eChartModalType;

    typedef enum {
        kChartScaleLinear = 0,
        kChartScaleSemiLogX = 1,
        kChartScaleSemiLogY = 2,
        kChartScaleLogLog = 3
    } DSChartScale;

    typedef enum {
        kChartLines = 0,
        kChartPoints = 1,
        kChartBoth = 2
    } DSChartPlotStyle;

    typedef enum {
        kChartBothAxis = 0,
        kChartXAxis = 1,
        kChartYAxis = 2,
        kChartNoAxis = 3
    } DSChartGridlines;

    typedef enum {
        DISPID_CommandEditorText = 10,
        DISPID_CommandEditorSnippetFilePath = 11,
        DISPID_CommandEditorSnippetFileStatus = 12,
        DISPID_CommandEditorSuppressed = 13,
        DISPID_CommandEditorSaveTo = 14,
        DISPID_CommandEditorImportTextFromFile = 15,
        DISPID_CommandEditorComments = 16,
        DISPID_CommandEditorAddComment = 17,
        DISPID_CommandEditorOutputSearchPrefix = 18,
        DISPID_CommandEditorFoundCommandParameterByIndex = 19,
        DISPID_CommandEditorRefresh = 20,
        DISPID_TotalNumOfParameters = 21,
        DISPID_ReturnedParameterValue = 22,
        DISPID_DoesParamValueExist = 23,
        DISPID_AreResultsValid = 24,
        DISPID_CommandEditorInputArgument1 = 25,
        DISPID_CommandEditorInputArgument2 = 26,
        DISPID_CommandEditorInputArgument3 = 27,
        DISPID_CommandEditorInputArgument4 = 28,
        DISPID_CommandEditorInputArgument5 = 29,
        DISPID_CommandEditorInputArgument6 = 30,
        DISPID_CommandEditorInputArgument7 = 31,
        DISPID_CommandEditorInputArgument8 = 32,
        DISPID_CommandEditorInputArgument9 = 33,
        DISPID_CommandEditorSequenceNumber = 35,
        DISPID_CommandEditorSequenceSelectionMode = 36,
        DISPID_CommandEditorIsTextDefault = 37,
        DISPID_CommandEditorParsedParameters = 38,
        DISPID_CommandEditorAdvancedPostOutputs = 39,
        DISPID_CommandEditorGetDefaultParameterValue = 40,
        DISPID_CommandEditorInputParameters = 41,
        DISPID_CommandEditorUnitSystemAtTimeObjectCreated = 42,
        DISPID_CommandEditorRealParam = 43,
        DISPID_CommandEditorAddFigure = 44,
        DISPID_CommandEditorFigures = 45,
        DISPID_CommandEditorImages = 46,
        DISPID_CommandEditorAddImage = 47,
        DISPID_CommandEditorUnitTypeByDispid = 48,
        DISPID_CommandEditorUnitStringByDispid = 49,
        DISPID_CommandEditorParamNameByDispid = 50,
        DISPID_CommandEditorSolverTarget = 51,
        DISPID_CommandEditorInput = 52,
        DISPID_CommandEditorTreeScope = 53,
        DISPID_CommandEditorPostInvalidateSolution = 54,
        DISPID_CommandEditorContext = 55
    } kDispId_CommandEditor;

    [
      odl,
      uuid(BDA391E1-6A26-43AD-9C9E-0AD8DD802E9D),
      helpstring("IDSCommandEditorAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSCommandEditorAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x0000000a), propget, helpstring("property Text")]
        HRESULT Text([out, retval] BSTR* pVal);
        [id(0x0000000a), propput, helpstring("property Text")]
        HRESULT Text([in] BSTR pVal);
        [id(0x0000000b), propget, helpstring("property SnippetFilePath")]
        HRESULT SnippetFilePath([out, retval] BSTR* pVal);
        [id(0x0000000c), propget, helpstring("property SnippetFileStatus")]
        HRESULT SnippetFileStatus([out, retval] int* pVal);
        [id(0x0000000d), propget, helpstring("property Suppressed")]
        HRESULT Suppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000000d), propput, helpstring("property Suppressed")]
        HRESULT Suppressed([in] VARIANT_BOOL pVal);
        [id(0x0000000e), helpstring("method SaveTo")]
        HRESULT SaveTo([in] BSTR filePath);
        [id(0x0000000f), helpstring("method ImportTextFromFile")]
        HRESULT ImportTextFromFile([in] BSTR bsFile);
        [id(0x00000010), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x00000011), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x00000012), propget, helpstring("property OutputSearchPrefix")]
        HRESULT OutputSearchPrefix([out, retval] BSTR* pVal);
        [id(0x00000012), propput, helpstring("property OutputSearchPrefix")]
        HRESULT OutputSearchPrefix([in] BSTR pVal);
        [id(0x00000013), propget, helpstring("property FoundCommandParameterByIndex")]
        HRESULT FoundCommandParameterByIndex(
                        [in] int iVal, 
                        [out, retval] BSTR* pVal);
        [id(0x00000014), helpstring("method Refresh")]
        HRESULT Refresh();
        [id(0x00000015), propget, helpstring("property TotalNumOfParameters")]
        HRESULT TotalNumOfParameters([out, retval] int* iVal);
        [id(0x00000016), propget, helpstring("property ReturnedParameterValue")]
        HRESULT ReturnedParameterValue(
                        [in] int iVal, 
                        [out, retval] double* dVal);
        [id(0x00000017), propget, helpstring("property DoesParamValueExist")]
        HRESULT DoesParamValueExist(
                        [in] int iVal, 
                        [out, retval] VARIANT_BOOL* bFlag);
        [id(0x00000018), propget, helpstring("property AreResultsValid")]
        HRESULT AreResultsValid([out, retval] VARIANT_BOOL* bFlag);
        [id(0x00000019), propget, helpstring("property InputArgument1")]
        HRESULT InputArgument1([out, retval] VARIANT* pVal);
        [id(0x00000019), propput, helpstring("property InputArgument1")]
        HRESULT InputArgument1([in] VARIANT pVal);
        [id(0x0000001a), propget, helpstring("property InputArgument2")]
        HRESULT InputArgument2([out, retval] VARIANT* pVal);
        [id(0x0000001a), propput, helpstring("property InputArgument2")]
        HRESULT InputArgument2([in] VARIANT pVal);
        [id(0x0000001b), propget, helpstring("property InputArgument3")]
        HRESULT InputArgument3([out, retval] VARIANT* pVal);
        [id(0x0000001b), propput, helpstring("property InputArgument3")]
        HRESULT InputArgument3([in] VARIANT pVal);
        [id(0x0000001c), propget, helpstring("property InputArgument4")]
        HRESULT InputArgument4([out, retval] VARIANT* pVal);
        [id(0x0000001c), propput, helpstring("property InputArgument4")]
        HRESULT InputArgument4([in] VARIANT pVal);
        [id(0x0000001d), propget, helpstring("property InputArgument5")]
        HRESULT InputArgument5([out, retval] VARIANT* pVal);
        [id(0x0000001d), propput, helpstring("property InputArgument5")]
        HRESULT InputArgument5([in] VARIANT pVal);
        [id(0x0000001e), propget, helpstring("property InputArgument6")]
        HRESULT InputArgument6([out, retval] VARIANT* pVal);
        [id(0x0000001e), propput, helpstring("property InputArgument6")]
        HRESULT InputArgument6([in] VARIANT pVal);
        [id(0x0000001f), propget, helpstring("property InputArgument7")]
        HRESULT InputArgument7([out, retval] VARIANT* pVal);
        [id(0x0000001f), propput, helpstring("property InputArgument7")]
        HRESULT InputArgument7([in] VARIANT pVal);
        [id(0x00000020), propget, helpstring("property InputArgument8")]
        HRESULT InputArgument8([out, retval] VARIANT* pVal);
        [id(0x00000020), propput, helpstring("property InputArgument8")]
        HRESULT InputArgument8([in] VARIANT pVal);
        [id(0x00000021), propget, helpstring("property InputArgument9")]
        HRESULT InputArgument9([out, retval] VARIANT* pVal);
        [id(0x00000021), propput, helpstring("property InputArgument9")]
        HRESULT InputArgument9([in] VARIANT pVal);
        [id(0x00000024), propget, helpstring("property SequenceSelectionMode")]
        HRESULT SequenceSelectionMode([out, retval] int* pVal);
        [id(0x00000024), propput, helpstring("property SequenceSelectionMode")]
        HRESULT SequenceSelectionMode([in] int pVal);
        [id(0x00000023), propget, helpstring("property SequenceNumber")]
        HRESULT SequenceNumber([out, retval] int* iVal);
        [id(0x00000023), propput, helpstring("property SequenceNumber")]
        HRESULT SequenceNumber([in] int iVal);
        [id(0x00000025), propget, helpstring("property IsTextDefault")]
        HRESULT IsTextDefault([out, retval] VARIANT_BOOL* bFlag);
        [id(0x00000026), propget, helpstring("property ParsedParameters")]
        HRESULT ParsedParameters([out, retval] IDispatch** ppDisp);
        [id(0x00000027), propget, helpstring("property AdvancedPostOutputs")]
        HRESULT AdvancedPostOutputs([out, retval] IDispatch** ppDisp);
        [id(0x00000028), helpstring("method GetDefaultParameterValue")]
        HRESULT GetDefaultParameterValue(
                        [in] int index, 
                        [out, retval] VARIANT* pValue);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** __MIDL__IDSCommandEditorAuto0000);
        [id(0x00000029), propget, helpstring("property InputParameters")]
        HRESULT InputParameters([out, retval] IDispatch** __MIDL__IDSCommandEditorAuto0001);
        [id(0x0000002a), propget, helpstring("property UnitSystemAtTimeObjectCreated")]
        HRESULT UnitSystemAtTimeObjectCreated([out, retval] WBUnitSystemType* pVal);
        [id(0x0000002b), helpstring("method GetDBID")]
        HRESULT GetCommandEditorParamDBID(
                        [in] IDispatch* __MIDL__IDSCommandEditorAuto0002, 
                        [out, retval] IDispatch** __MIDL__IDSCommandEditorAuto0003);
        [id(0x0000002d), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x0000002c), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x0000002e), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x0000002f), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00000030), propget, helpstring("property UnitTypeByDispid")]
        HRESULT UnitTypeByDispid(
                        [in] int dispid, 
                        [out, retval] int* unitType);
        [id(0x00000031), propget, helpstring("property UnitStringByDispid")]
        HRESULT UnitStringByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* unitString);
        [id(0x00000032), propget, helpstring("property ParamNameByDispid")]
        HRESULT ParamNameByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* paramName);
        [id(0x00000033), propget, helpstring("property CommandEditorSolverTarget")]
        HRESULT SolverTarget([out, retval] DSCommandEditorTarget* pVal);
        [id(0x00000033), propput, helpstring("property CommandEditorSolverTarget")]
        HRESULT SolverTarget([in] DSCommandEditorTarget pVal);
        [id(0x00000034), propget, helpstring("property CommandEditorInput")]
        HRESULT Input([out, retval] BSTR* pVal);
        [id(0x00000034), propput, helpstring("property CommandEditorInput")]
        HRESULT Input([in] BSTR pVal);
        [id(0x00000035), propget, helpstring("property TreeScope")]
        HRESULT TreeScope([out, retval] BSTR* pVal);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x6002004a), propget, helpstring("property ReadOnly")]
        HRESULT ReadOnly([out, retval] VARIANT_BOOL* vbVal);
        [id(0x00000037), propget, helpstring("property Context")]
        HRESULT Context([out, retval] DSCommandEditorContext* pVal);
    };

    typedef enum {
        WBUST_Undefined = 0xffffffff,
        WBUST_StandardMKS = 0,
        WBUST_StandardCGS = 1,
        WBUST_StandardNMM = 2,
        WBUST_StandardBFT = 3,
        WBUST_StandardBIN = 4,
        WBUST_StandardUMKS = 9,
        WBUST_StandardCUST = 12,
        WBUST_StandardNMMton = 13,
        WBUST_StandardNMMdat = 14,
        WBUST_ConsistentCGS = 5,
        WBUST_ConsistentNMM = 6,
        WBUST_ConsistentBFT = 7,
        WBUST_ConsistentBIN = 8,
        WBUST_ConsistentUMKS = 10,
        WBUST_ConsistentMKS = 11,
        WBUST_NoUnitSystem = 15
    } WBUnitSystemType;

    typedef enum {
        kCommandsTargetUNKNOWN = 0,
        kCommandsTargetANSYS = 1,
        kCommandsTargetMBD = 2,
        kCommandsTargetLSDYNA = 3,
        kCommandsTargetSAMCEF = 4,
        kCommandsTargetABAQUS = 5
    } DSCommandEditorTarget;

    typedef enum {
        kCommandsUnknown = 0,
        kCommandsSolver = 1,
        kCommandsPost = 2,
        kCommandsContact = 3,
        kCommandsMaterial = 4,
        kCommandsBody = 5,
        kCommandsSpring = 6,
        kCommandsJoint = 7,
        kCommandsRemotePoint = 8,
        kCommandsBeam = 9,
        kCommandsInitialConditions = 10,
        kCommandsCrack = 11,
        kCommandsDelamination = 12,
        kCommandsBearing = 13,
        kCommandsCondense = 14
    } DSCommandEditorContext;

    typedef enum {
        DISPID_CommentCommentOwner = 10,
        DISPID_CommentText = 11
    } kDispId_Comment;

    [
      odl,
      uuid(D67C1671-7C09-43CE-9E9E-006E73AD9FA7),
      helpstring("IDSCommentAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSCommentAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x0000000a), propget, helpstring("property CommentOwner")]
        HRESULT CommentOwner([out, retval] BSTR* pVal);
        [id(0x0000000a), propput, helpstring("property CommentOwner")]
        HRESULT CommentOwner([in] BSTR pVal);
        [id(0x0000000b), propget, helpstring("property Text")]
        HRESULT Text([out, retval] BSTR* pVal);
        [id(0x0000000b), propput, helpstring("property Text")]
        HRESULT Text([in] BSTR pVal);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
    };

    typedef enum {
        DISPID_ConstraintEquationComments = 10,
        DISPID_ConstraintEquationFigures = 11,
        DISPID_ConstraintEquationAddComment = 12,
        DISPID_ConstraintEquationAddFigure = 13,
        DISPID_ConstraintEquationConstantValue = 14,
        DISPID_ConstraintEquationAddEquationTerm = 15,
        DISPID_ConstraintEquationNumTerms = 16,
        DISPID_ConstraintEquationCoefficient = 17,
        DISPID_ConstraintEquationRemotePoint = 18,
        DISPID_ConstraintEquationDOF = 19,
        DISPID_ConstraintEquationDeleteEquationTerm = 20,
        DISPID_ConstraintEquationUnitsForCoefficient = 21,
        DISPID_ConstraintEquationParamNameByDispid = 22,
        DISPID_ConstraintEquationUnitTypeByDispid = 23,
        DISPID_ConstraintEquationUnitStringByDispid = 24,
        DISPID_ConstraintEquationSuppressed = 25,
        DISPID_ConstraintEquationIsMBD = 26,
        DISPID_ConstraintEquationJointCondition = 27,
        DISPID_ConstraintEquationIsJointDOFValid = 28
    } kDispId_ConstraintEquation;

    [
      odl,
      uuid(F24E0B5E-29C6-43A8-B42F-27C3537AFC8A),
      helpstring("IDSConstraintEquationAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSConstraintEquationAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x0000000b), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x0000000a), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x0000000c), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x0000000d), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x0000000e), propget, helpstring("property ConstantValue")]
        HRESULT ConstantValue([out, retval] double* pVal);
        [id(0x0000000e), propput, helpstring("property ConstantValue")]
        HRESULT ConstantValue([in] double pVal);
        [id(0x0000000f), helpstring("method AddEquationTerm")]
        HRESULT AddEquationTerm();
        [id(0x00000010), propget, helpstring("property NumTerms")]
        HRESULT NumTerms([out, retval] int* pVal);
        [id(0x00000011), propget, helpstring("property Coefficient")]
        HRESULT Coefficient(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000011), propput, helpstring("property Coefficient")]
        HRESULT Coefficient(
                        [in] int index, 
                        [in] double pVal);
        [id(0x00000012), propget, helpstring("property RemotePoint")]
        HRESULT RemotePoint(
                        [in] int index, 
                        [out, retval] dsid* pVal);
        [id(0x00000012), propput, helpstring("property RemotePoint")]
        HRESULT RemotePoint(
                        [in] int index, 
                        [in] dsid pVal);
        [id(0x00000013), propget, helpstring("property DOF")]
        HRESULT DOF(
                        [in] int index, 
                        [out, retval] DSKinematicDOF* pVal);
        [id(0x00000013), propput, helpstring("property DOF")]
        HRESULT DOF(
                        [in] int index, 
                        [in] DSKinematicDOF pVal);
        [id(0x00000014), helpstring("method DeleteEquationTerm")]
        HRESULT DeleteEquationTerm([in] int index);
        [id(0x00000015), propget, helpstring("property UnitsForCoefficient")]
        HRESULT UnitsForCoefficient(
                        [in] int index, 
                        [out, retval] WBUnitCategoryType* pVal);
        [id(0x00000016), propget, helpstring("property ParamNameByDispid")]
        HRESULT ParamNameByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* paramName);
        [id(0x00000017), propget, helpstring("property UnitTypeByDispid")]
        HRESULT UnitTypeByDispid(
                        [in] int dispid, 
                        [out, retval] int* unitType);
        [id(0x00000018), propget, helpstring("property UnitStringByDispid")]
        HRESULT UnitStringByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* unitString);
        [id(0x00000019), propget, helpstring("property Suppressed")]
        HRESULT Suppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000019), propput, helpstring("property Suppressed")]
        HRESULT Suppressed([in] VARIANT_BOOL pVal);
        [id(0x0000001a), propget, helpstring("property IsMBD")]
        HRESULT IsMBD([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000001b), propget, helpstring("property JointCondition")]
        HRESULT JointCondition([out, retval] DSJointCondition* pVal);
        [id(0x0000001b), propput, helpstring("property JointCondition")]
        HRESULT JointCondition([in] DSJointCondition pVal);
        [id(0x0000001c), propget, helpstring("property IsJointDOFValid")]
        HRESULT IsJointDOFValid(
                        [in] dsid jointId, 
                        [in] DSKinematicDOF DOF, 
                        [out, retval] VARIANT_BOOL* pVal);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
    };

    typedef enum {
        kKinematicDOFUnknown = 0,
        kKinematicDOFX = 1,
        kKinematicDOFY = 2,
        kKinematicDOFZ = 3,
        kKinematicDOFRotX = 4,
        kKinematicDOFRotY = 5,
        kKinematicDOFRotZ = 6
    } DSKinematicDOF;

    typedef enum {
        WBUCT_NoType = 0xfffffffe,
        WBUCT_Undefined = 0xffffffff,
        WBUCT_Acceleration = 0,
        WBUCT_Angle = 1,
        WBUCT_AngularVelocity = 2,
        WBUCT_Area = 3,
        WBUCT_Capacitance = 4,
        WBUCT_Charge = 5,
        WBUCT_ChargeDensity = 6,
        WBUCT_Conductivity = 7,
        WBUCT_Current = 8,
        WBUCT_CurrentDensity = 9,
        WBUCT_Density = 10,
        WBUCT_Displacement = 11,
        WBUCT_ElectricConductivity = 12,
        WBUCT_ElectricField = 13,
        WBUCT_ElectricFluxDensity = 14,
        WBUCT_ElectricResistivity = 15,
        WBUCT_Energy = 16,
        WBUCT_FilmCoeff = 17,
        WBUCT_Force = 18,
        WBUCT_ForceIntensity = 19,
        WBUCT_Frequency = 20,
        WBUCT_HeatFlux = 21,
        WBUCT_HeatGeneration = 22,
        WBUCT_HeatTransferRate = 23,
        WBUCT_Inductance = 24,
        WBUCT_InverseStress = 25,
        WBUCT_Length = 26,
        WBUCT_MagneticFieldIntensity = 27,
        WBUCT_MagneticFlux = 28,
        WBUCT_MagneticFluxDensity = 29,
        WBUCT_Mass = 30,
        WBUCT_Moment = 31,
        WBUCT_MomentInertia = 32,
        WBUCT_Permeability = 33,
        WBUCT_Permittivity = 34,
        WBUCT_Poisson = 35,
        WBUCT_Power = 36,
        WBUCT_Pressure = 37,
        WBUCT_RelativePermeability = 38,
        WBUCT_RelativePermittivity = 39,
        WBUCT_SectionModulus = 40,
        WBUCT_SpecificHeat = 41,
        WBUCT_SpecificWeight = 42,
        WBUCT_ShearStrain = 43,
        WBUCT_Stiffness = 44,
        WBUCT_Strain = 45,
        WBUCT_Stress = 46,
        WBUCT_Strength = 47,
        WBUCT_ThermalExpansion = 48,
        WBUCT_Temperature = 49,
        WBUCT_Time = 50,
        WBUCT_Velocity = 51,
        WBUCT_Voltage = 52,
        WBUCT_Volume = 53,
        WBUCT_GasketStiffness = 54,
        WBUCT_MomentInertiaMass = 55,
        WBUCT_PSDAcceleration = 56,
        WBUCT_PSDAccelerationGrav = 57,
        WBUCT_PSDDisplacement = 58,
        WBUCT_PSDVelocity = 59,
        WBUCT_RotationalDamping = 60,
        WBUCT_RotationalStiffness = 61,
        WBUCT_TranslationalDamping = 62,
        WBUCT_AngularAcceleration = 63,
        WBUCT_SeebeckCoefficient = 64,
        WBUCT_DecayConstant = 65,
        WBUCT_FractureEnergy = 66,
        WBUCT_ShockVelocity = 67,
        WBUCT_EnergyDensityMass = 68,
        WBUCT_ElectricConductancePerUnitArea = 69,
        WBUCT_PSDStress = 70,
        WBUCT_PSDStrain = 71,
        WBUCT_PSDForce = 72,
        WBUCT_PSDMoment = 73,
        WBUCT_PSDPressure = 74,
        WBUCT_ForcePerAngularUnit = 75,
        WBUCT_Impulse = 76,
        WBUCT_ImpulsePerAngularUnit = 77,
        WBUCT_TemperatureDifference = 78,
        WBUCT_MaterialImpedance = 79,
        WBUCT_RSAcceleration = 80,
        WBUCT_RSAccelerationGrav = 81,
        WBUCT_RSDisplacement = 82,
        WBUCT_RSVelocity = 83,
        WBUCT_WarpingFactor = 84,
        WBUCT_ThermalConductance = 85,
        WBUCT_InverseLength = 86,
        WBUCT_InverseAngle = 87,
        WBUCT_ThermalCapacitance = 88,
        WBUCT_NormalizedValue = 89,
        WBUCT_MassFlowRate = 90,
        WBUCT_Unitless = 91,
        WBUCT_StressIntensityFactor = 92,
        WBUCT_SquareRootOfLength = 93,
        WBUCT_EnergyPerVolume = 94,
        WBUCT_ThermalGradient = 95,
        WBUCT_MassMoment = 96,
        WBUCT_MassPerArea = 97,
        WBUCT_FractureEnergyRate = 98,
        WBUCT_ShearRate = 99,
        WBUCT_Viscosity = 100,
        WBUCT_ENDOFUNITTYPELIST = 101
    } WBUnitCategoryType;

    typedef enum {
        kJointConditionVelocity = 0,
        kJointConditionAcceleration = 1
    } DSJointCondition;

    typedef enum {
        DISPID_NodalRotationComment = 10,
        DISPID_NodalRotationSuppressed = 11,
        DISPID_NodalRotationGeometryDefineBy = 12,
        DISPID_NodalRotationGeometrySelection = 13,
        DISPID_NodalRotationComponentSelection = 14,
        DISPID_NodalRotationLocalCoordinates = 16,
        DISPID_NodalRotationAddComment = 61,
        DISPID_NodalRotationAddFigure = 62,
        DISPID_NodalRotationHasValidGeoSelection = 63,
        DISPID_NodalRotationImages = 64,
        DISPID_NodalRotationAddImage = 65
    } kDispId_NodalRotation;

    [
      odl,
      uuid(3EF934F1-1B60-4D59-B2E2-88E3D6C9ECDC),
      helpstring("IDSNodalRotationAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSNodalRotationAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x0000000a), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x0000000c), propget, helpstring("property GeometryDefineBy")]
        HRESULT GeometryDefineBy([out, retval] DSGeometryDefineByType* pVal);
        [id(0x0000000c), propput, helpstring("property GeometryDefineBy")]
        HRESULT GeometryDefineBy([in] DSGeometryDefineByType pVal);
        [id(0x0000000d), propput, helpstring("property GeometrySelection")]
        HRESULT GeometrySelection([in] IDispatch* rhs);
        [id(0x0000000e), propget, helpstring("property ComponentSelection")]
        HRESULT ComponentSelection([out, retval] int* pVal);
        [id(0x0000000e), propput, helpstring("property ComponentSelection")]
        HRESULT ComponentSelection([in] int pVal);
        [id(0x00000010), propget, helpstring("property LocalCoordinates")]
        HRESULT LocalCoordinates([out, retval] int* pVal);
        [id(0x00000010), propput, helpstring("property LocalCoordinates")]
        HRESULT LocalCoordinates([in] int pVal);
        [id(0x0000000b), propget, helpstring("property Suppressed")]
        HRESULT Suppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000000b), propput, helpstring("property Suppressed")]
        HRESULT Suppressed([in] VARIANT_BOOL pVal);
        [id(0x0000003d), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x0000003e), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x0000003f), propget, helpstring("property HasValidGeoSelection")]
        HRESULT HasValidGeoSelection([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000040), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000041), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
    };

    typedef enum {
        DISPID_ComponentComments = 10,
        DISPID_ComponentGeometrySelection = 11,
        DISPID_ComponentNumInSelection = 12,
        DISPID_ComponentNumSuppressedItems = 13,
        DISPID_ComponentNumHiddenItems = 14,
        DISPID_ComponentScopedType = 15,
        DISPID_ComponentImportedFromCAD = 16,
        DISPID_ComponentGeometrySelectionString = 17,
        DISPID_ComponentSendToSolver = 18,
        DISPID_ComponentVisible = 19,
        DISPID_ComponentIncludePCInflation = 20,
        DISPID_ComponentWorksheetMeshing = 21,
        DISPID_ToleranceType = 22,
        DISPID_ZeroTolerance = 23,
        DISPID_RelativeTolerance = 24,
        DISPID_ComponentAddComment = 30,
        DISPID_ComponentGetAllSelectedPrototypes = 31,
        DISPID_ComponentAddFigure = 32,
        DISPID_ComponentFixName = 40,
        DISPID_ComponentFigure = 41,
        DISPID_ComponentNodeForPart = 42,
        DISPID_ComponentNodeCountForPart = 43,
        DISPID_ComponentGetUnsuppressedPartTopoPair = 44,
        DISPID_ComponentSetWasImportedFromCAD = 45,
        DISPID_ComponentGetUnsuppressedRef = 46,
        DISPID_ComponentImages = 47,
        DISPID_ComponentAddImage = 48,
        DISPID_ComponentSetHiddenFaces = 49,
        DISPID_ComponentGeometryDefineBy = 50,
        DISPID_ComponentAddCriteriaData = 51,
        DISPID_ComponentDeleteCriteriaData = 52,
        DISPID_ComponentAction = 53,
        DISPID_ComponentGeometryType = 54,
        DISPID_ComponentCriterion = 55,
        DISPID_ComponentOperator = 56,
        DISPID_ComponentValue = 57,
        DISPID_ComponentLowerBound = 58,
        DISPID_ComponentUpperBound = 59,
        DISPID_ComponentNumCriteriaEntries = 60,
        DISPID_ComponentGenerateFromCriteria = 61,
        DISPID_ComponentInsertCriteriaData = 62,
        DISPID_ComponentUnitTypeForCriteriaData = 63,
        DISPID_ComponentSetCriteriaFromSelectionMgr = 64,
        DISPID_ComponentCoordinateSystemSelection = 65,
        DISPID_ComponentStringValue = 66,
        DISPID_ComponentNodeScoping = 67,
        DISPID_ComponentNodeScopingIds = 68,
        DISPID_ComponentCreateTabbedFile = 69,
        DISPID_ComponentPrototypeScoped = 70,
        DISPID_ComponentCriterionActive = 71,
        DISPID_ComponentIsHiddenFacesObject = 72,
        DISPID_ComponentDuplicateCriteriaData = 73,
        DISPID_ComponentSolverName = 74,
        DISPID_ComponentImportedFromCADString = 75,
        DISPID_ComponentNumInSelectionString = 76,
        DISPID_ComponentIsSolutionInfoChild = 77,
        DISPID_ComponentScopeBasedType = 78,
        DISPID_ComponentLengthOfScopedEdges = 79,
        DISPID_ComponentAreaOfScopedFaces = 80,
        DISPID_ComponentUnitTypeByDispid = 81,
        DISPID_ComponentUnitStringByDispid = 82,
        DISPID_ComponentParamNameByDispid = 83,
        DISPID_ComponentExportNamedSelectionToCDBFile = 84,
        DISPID_ComponentWorksheetEntriesEnMasse = 85
    } kDispId_Component;

    [
      odl,
      uuid(1DDE972E-3E21-4F17-B3A8-B7DE1D11D80E),
      helpstring("IDSComponentAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSComponentAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x0000000a), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x0000000b), propput, helpstring("property GeometrySelection")]
        HRESULT GeometrySelection([in] IDispatch* rhs);
        [id(0x00000010), propget, helpstring("property ImportedFromCAD")]
        HRESULT ImportedFromCAD([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000000c), propget, helpstring("property NumInSelection")]
        HRESULT NumInSelection([out, retval] int* pVal);
        [id(0x0000000d), propget, helpstring("property NumSuppressedItems")]
        HRESULT NumSuppressedItems([out, retval] int* pVal);
        [id(0x0000000e), propget, helpstring("property NumHiddenItems")]
        HRESULT NumHiddenItems([out, retval] int* pVal);
        [id(0x0000000f), propget, helpstring("property ScopedType")]
        HRESULT ScopedType([out, retval] DSScopingType* type);
        [id(0x0000001e), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x0000001f), helpstring("method GetAllSelectedPrototypes")]
        HRESULT GetAllSelectedPrototypes([out, retval] IDispatch** ppSelList);
        [id(0x00000020), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x00000028), helpstring("method FixName")]
        HRESULT FixName();
        [id(0x00000029), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x0000002a), propget, helpstring("property NodeForPart")]
        HRESULT NodeForPart(
                        int partIndex, 
                        int index, 
                        [out, retval] VARIANT* pVal);
        [id(0x0000002b), propget, helpstring("property NodeCountForPart")]
        HRESULT NodeCountForPart(
                        int partIndex, 
                        [out, retval] VARIANT* pVal);
        [id(0x0000002c), helpstring("method GetUnsuppressedPartTopoPair")]
        HRESULT GetUnsuppressedPartTopoPair(
                        [in] int referenceIndex, 
                        [out, retval] BSTR* pVal);
        [id(0x0000002d), helpstring("method SetWasImportedFromCAD")]
        HRESULT SetWasImportedFromCAD();
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
        [id(0x0000002e), helpstring("method GetUnsuppressedPartTopoPair")]
        HRESULT GetUnsuppressedRef(
                        [in] int index, 
                        [out, retval] int* piRefId);
        [id(0x0000002f), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000030), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00000011), propget, helpstring("property GeometrySelectionString")]
        HRESULT GeometrySelectionString([out, retval] BSTR* pVal);
        [id(0x00000012), propget, helpstring("property SendToSolver")]
        HRESULT SendToSolver([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000012), propput, helpstring("property SendToSolver")]
        HRESULT SendToSolver([in] VARIANT_BOOL pVal);
        [id(0x00000013), propget, helpstring("property Visible")]
        HRESULT Visible([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000013), propput, helpstring("property Visible")]
        HRESULT Visible([in] VARIANT_BOOL pVal);
        [id(0x60020021), helpstring("method GetReferences")]
        HRESULT GetReferences(
                        int subset, 
                        VARIANT_BOOL vbIncludeSuppressed, 
                        [out, retval] IAnsReferenceColl** ppRefs);
        [id(0x00000014), propget, helpstring("property IncludePCInflation")]
        HRESULT IncludePCInflation([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000014), propput, helpstring("property IncludePCInflation")]
        HRESULT IncludePCInflation([in] VARIANT_BOOL pVal);
        [id(0x00000031), helpstring("method SetHiddenFaces")]
        HRESULT SetHiddenFaces();
        [id(0x00000032), propget, helpstring("property GeometryDefineBy")]
        HRESULT GeometryDefineBy([out, retval] DSGeometryDefineByType* pVal);
        [id(0x00000032), propput, helpstring("property GeometryDefineBy")]
        HRESULT GeometryDefineBy([in] DSGeometryDefineByType pVal);
        [id(0x00000033), helpstring("method AddCriteriaData")]
        HRESULT AddCriteriaData();
        [id(0x00000034), helpstring("method DeleteCriteriaData")]
        HRESULT DeleteCriteriaData(int index);
        [id(0x00000049), helpstring("method DuplicateCriteriaData")]
        HRESULT DuplicateCriteriaData(
                        int fromIndex, 
                        int toIndex);
        [id(0x00000015), propget, helpstring("property WorksheetMeshing")]
        HRESULT WorksheetMeshing([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000015), propput, helpstring("property WorksheetMeshing")]
        HRESULT WorksheetMeshing([in] VARIANT_BOOL pVal);
        [id(0x00000035), propget, helpstring("property Action")]
        HRESULT Action(
                        [in] int index, 
                        [out, retval] DS_NSAction* eAction);
        [id(0x00000035), propput, helpstring("property Action")]
        HRESULT Action(
                        [in] int index, 
                        [in] DS_NSAction eAction);
        [id(0x00000036), propget, helpstring("property GeometryType")]
        HRESULT GeometryType(
                        [in] int index, 
                        [out, retval] DS_NSGeometryType* pVal);
        [id(0x00000036), propput, helpstring("property GeometryType")]
        HRESULT GeometryType(
                        [in] int index, 
                        [in] DS_NSGeometryType pVal);
        [id(0x00000037), propget, helpstring("property Criterion")]
        HRESULT Criterion(
                        [in] int index, 
                        [out, retval] DS_NSCriterion* pVal);
        [id(0x00000037), propput, helpstring("property Criterion")]
        HRESULT Criterion(
                        [in] int index, 
                        [in] DS_NSCriterion pVal);
        [id(0x00000038), propget, helpstring("property Operator")]
        HRESULT Operator(
                        [in] int index, 
                        [out, retval] DS_NSOperator* pVal);
        [id(0x00000038), propput, helpstring("property Operator")]
        HRESULT Operator(
                        [in] int index, 
                        [in] DS_NSOperator pVal);
        [id(0x00000039), propget, helpstring("property Value")]
        HRESULT Value(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000039), propput, helpstring("property Value")]
        HRESULT Value(
                        [in] int index, 
                        [in] double pVal);
        [id(0x0000003a), propget, helpstring("property LowerBound")]
        HRESULT LowerBound(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x0000003a), propput, helpstring("property LowerBound")]
        HRESULT LowerBound(
                        [in] int index, 
                        [in] double pVal);
        [id(0x0000003b), propget, helpstring("property UpperBound")]
        HRESULT UpperBound(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x0000003b), propput, helpstring("property UpperBound")]
        HRESULT UpperBound(
                        [in] int index, 
                        [in] double pVal);
        [id(0x0000003c), propget, helpstring("property NumCriteriaEntries")]
        HRESULT NumCriteriaEntries([out, retval] int* pVal);
        [id(0x0000003d), helpstring("method GenerateFromCriteria")]
        HRESULT GenerateFromCriteria();
        [id(0x0000003e), helpstring("method InsertCriteriaData")]
        HRESULT InsertCriteriaData(int index);
        [id(0x0000003f), propget, helpstring("property UnitTypeForCriteriaData")]
        HRESULT UnitTypeForCriteriaData(
                        [in] int index, 
                        [out, retval] WBUnitCategoryType* pVal);
        [id(0x00000040), helpstring("method SetCriteriaFromSelectionMgr")]
        HRESULT SetCriteriaFromSelectionMgr(
                        [in] DS_NSMultiCriterion criteriaType, 
                        [in] IDispatch* piSelectMgr);
        [id(0x00000041), propget, helpstring("property CoordinateSystemSelection")]
        HRESULT CoordinateSystemSelection(
                        [in] int index, 
                        [out, retval] dsid* pVal);
        [id(0x00000041), propput, helpstring("property CoordinateSystemSelection")]
        HRESULT CoordinateSystemSelection(
                        [in] int index, 
                        [in] dsid pVal);
        [id(0x00000042), propget, helpstring("property StringValue")]
        HRESULT StringValue(
                        [in] int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00000042), propput, helpstring("property StringValue")]
        HRESULT StringValue(
                        [in] int index, 
                        [in] BSTR pVal);
        [id(0x00000043), propget, helpstring("property NodeScoping")]
        HRESULT NodeScoping([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000044), propget, helpstring("property NodeScopingIds")]
        HRESULT NodeScopingIds(
                        [in, out] int* pCount, 
                        [in, out] int** pIds);
        [id(0x00000016), propget, helpstring("property ToleranceType")]
        HRESULT ToleranceType([out, retval] DSToleranceType* pVal);
        [id(0x00000016), propput, helpstring("property ToleranceType")]
        HRESULT ToleranceType([in] DSToleranceType pVal);
        [id(0x00000017), propget, helpstring("property ZeroTolerance")]
        HRESULT ZeroTolerance([out, retval] double* pVal);
        [id(0x00000017), propput, helpstring("property ZeroTolerance")]
        HRESULT ZeroTolerance([in] double pVal);
        [id(0x00000018), propget, helpstring("property RelativeTolerance")]
        HRESULT RelativeTolerance([out, retval] double* pVal);
        [id(0x00000018), propput, helpstring("property RelativeTolerance")]
        HRESULT RelativeTolerance([in] double pVal);
        [id(0x00000045), helpstring("method CreateTabbedFile")]
        HRESULT CreateTabbedFile(
                        [in] BSTR filePath, 
                        [out, retval] BSTR* fileText);
        [id(0x00000054), helpstring("method ExportNamedSelectionToCDBFile")]
        HRESULT ExportNamedSelectionToCDBFile(
                        [in] BSTR filePath, 
                        [out, retval] BSTR* fileText);
        [id(0x00000046), helpstring("method CheckPrototypeScoped")]
        HRESULT CheckPrototypeScoped(
                        [in] dsid protoId, 
                        [out] VARIANT_BOOL* bScoped, 
                        [out] VARIANT_BOOL* bPlanar);
        [id(0x00000047), propget, helpstring("property CriterionActive")]
        HRESULT CriterionActive(
                        [in] int index, 
                        [out, retval] VARIANT_BOOL* pVal);
        [id(0x00000047), propput, helpstring("property CriterionActive")]
        HRESULT CriterionActive(
                        [in] int index, 
                        [in] VARIANT_BOOL pVal);
        [id(0x00000048), propget, helpstring("property IsHiddenFacesObject")]
        HRESULT IsHiddenFacesObject([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000004a), propget, helpstring("property SolverName")]
        HRESULT SolverName([out, retval] BSTR* pVal);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x0000004b), propget, helpstring("property ImportedFromCADString")]
        HRESULT ImportedFromCADString([out, retval] BSTR* pVal);
        [id(0x0000004c), propget, helpstring("property NumInSelectionString")]
        HRESULT NumInSelectionString([out, retval] BSTR* pVal);
        [id(0x0000004d), propget, helpstring("property IsSolutionInfoChild")]
        HRESULT IsSolutionInfoChild([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000004e), propget, helpstring("property ScopeBasedType")]
        HRESULT ScopeBasedType([out, retval] DS_NSScopeBasedType* pVal);
        [id(0x00000051), propget, helpstring("property UnitTypeByDispid")]
        HRESULT UnitTypeByDispid(
                        [in] int dispid, 
                        [out, retval] int* unitType);
        [id(0x00000052), propget, helpstring("property UnitStringByDispid")]
        HRESULT UnitStringByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* unitString);
        [id(0x00000053), propget, helpstring("property ParamNameByDispid")]
        HRESULT ParamNameByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* paramName);
        [id(0x0000004f), propget, helpstring("LengthOfScopedEdges")]
        HRESULT LengthOfScopedEdges([out, retval] double* pVal);
        [id(0x00000050), propget, helpstring("AreaOfScopedFaces")]
        HRESULT AreaOfScopedFaces([out, retval] double* pVal);
        [id(0x00000055), helpstring("method WorksheetEntriesEnMasse")]
        HRESULT WorksheetEntriesEnMasse(
                        [in] BSTR newVal, 
                        [in] DSSelectNodesElementsByIdType pVal);
    };

    typedef enum {
        TYPE_ASSEMBLY_SCOPING = 0,
        TYPE_PART_SCOPING = 1,
        TYPE_SURFACE_SCOPING = 2,
        TYPE_UNKNOWN_SCOPING = 3,
        TYPE_VERTEX_SCOPING = 4,
        TYPE_EDGE_SCOPING = 5,
        TYPE_COMPONENT_SCOPING = 6,
        TYPE_NODAL_SCOPING = 7,
        TYPE_ELEMENT_SCOPING = 8
    } DSScopingType;

    [
      odl,
      uuid(2C1E8F37-1560-4BB4-8391-7DB360B63F20),
      dual,
      oleautomation
    ]
    interface IAnsReferenceColl : IDispatch {
        [id(0x00000001), propget, helpstring("property Count")]
        HRESULT Count([out, retval] unsigned int* plCount);
        [id(0x00000002), helpstring("method Add")]
        HRESULT AddReference(IAnsReference* piReference);
        [id(00000000), propget, helpstring("property Item")]
        HRESULT Item(
                        [in] unsigned int lNum, 
                        [out, retval] IAnsReference** ppiItem);
        [id(0xfffffffc), propget, helpstring("property NewEnum")]
        HRESULT _NewEnum([out, retval] IUnknown** ppunkEnum);
        [id(0x00000003), helpstring("method Clone")]
        HRESULT Clone([out, retval] IAnsReferenceColl** ppClone);
    };

    [
      odl,
      uuid(FC2FB19C-D63D-472C-83E8-58BD58B296FF),
      helpstring("IAnsReference Interface"),
      dual,
      oleautomation
    ]
    interface IAnsReference : IDispatch {
        [id(0x00000001), propget, helpstring("property PartId")]
        HRESULT partId([out, retval] unsigned int* pulPartId);
        [id(0x00000001), propput, helpstring("property PartId")]
        HRESULT partId([in] unsigned int pulPartId);
        [id(0x00000002), propget, helpstring("property GeomReferenceId")]
        HRESULT GeomReferenceId([out, retval] unsigned int* plReferenceId);
        [id(0x00000002), propput, helpstring("property GeomReferenceId")]
        HRESULT GeomReferenceId([in] unsigned int plReferenceId);
        [id(0x00000003), propget, helpstring("property GeomReferenceType")]
        HRESULT GeomReferenceType([out, retval] unsigned int* plReferenceType);
        [id(0x00000003), propput, helpstring("property GeomReferenceType")]
        HRESULT GeomReferenceType([in] unsigned int plReferenceType);
        [id(0x00000004), propget, helpstring("property Version")]
        HRESULT Version([out, retval] unsigned int* plVersion);
        [id(0x00000005), propget, helpstring("property AssemblyId")]
        HRESULT AssemblyId([out, retval] unsigned int* pulAssemblyId);
        [id(0x00000005), propput, helpstring("property AssemblyId")]
        HRESULT AssemblyId([in] unsigned int pulAssemblyId);
        [id(0x00000007)]
        HRESULT SaveData([in] IAnsMultiplatformStream* pMPStream);
        [id(0x00000008)]
        HRESULT LoadData([in] IAnsMultiplatformStream* pMPStream);
        [id(0x00000006), helpstring("method Clone")]
        HRESULT Clone([out, retval] IAnsReference** ppClone);
    };

    [
      odl,
      uuid(2EB2D791-2811-4C7D-928D-780B4A57601F),
      helpstring("IAnsMultiplatformStream Interface"),
      dual,
      oleautomation
    ]
    interface IAnsMultiplatformStream : IDispatch {
        [id(0x00000001)]
        HRESULT PutDSStreamAsLONG(LONG_PTR st);
        [id(0x00000002)]
        HRESULT GetDSStreamAsLONG(LONG_PTR* pSt);
        [id(0x00000003)]
        HRESULT Init(
                        [in] BSTR bsFilename, 
                        [in] _eAnsStreamType eStreamType);
        [id(0x00000004)]
        HRESULT Commit();
        [id(0x00000005), propput]
        HRESULT HeaderStreamName([in] BSTR rhs);
        [id(0x00000006), propput]
        HRESULT BodyStreamName([in] BSTR rhs);
        [id(0x00000007)]
        HRESULT readBSTR([out, retval] BSTR* pVal);
        [id(0x00000008)]
        HRESULT writeBSTR([in] BSTR val);
        [id(0x00000009)]
        HRESULT readCHAR([out, retval] char* pVal);
        [id(0x0000000a)]
        HRESULT writeCHAR([in] char val);
        [id(0x0000000b)]
        HRESULT readUCHAR([out, retval] unsigned char* pVal);
        [id(0x0000000c)]
        HRESULT writeUCHAR([in] unsigned char val);
        [id(0x0000000d)]
        HRESULT readSHORT([out, retval] short* pVal);
        [id(0x0000000e)]
        HRESULT writeSHORT([in] short val);
        [id(0x0000000f)]
        HRESULT readUSHORT([out, retval] unsigned short* pVal);
        [id(0x00000010)]
        HRESULT writeUSHORT([in] unsigned short val);
        [id(0x00000011)]
        HRESULT readINT([out, retval] int* pVal);
        [id(0x00000012)]
        HRESULT writeINT([in] int val);
        [id(0x00000013)]
        HRESULT readUINT([out, retval] unsigned int* pVal);
        [id(0x00000014)]
        HRESULT writeUINT([in] unsigned int val);
        [id(0x00000015)]
        HRESULT readLONG([out, retval] int* pVal);
        [id(0x00000016)]
        HRESULT writeLONG([in] int val);
        [id(0x00000017)]
        HRESULT readULONG([out, retval] unsigned int* pVal);
        [id(0x00000018)]
        HRESULT writeULONG([in] unsigned int val);
        [id(0x00000019)]
        HRESULT readFLOAT([out, retval] single* pVal);
        [id(0x0000001a)]
        HRESULT writeFLOAT([in] single val);
        [id(0x0000001b)]
        HRESULT readDOUBLE([out, retval] double* pVal);
        [id(0x0000001c)]
        HRESULT writeDOUBLE([in] double val);
        [id(0x0000001d)]
        HRESULT readVARIANT([out, retval] VARIANT* pVal);
        [id(0x0000001e)]
        HRESULT writeVARIANT([in] VARIANT val);
        [id(0x0000001f)]
        HRESULT readBSTRS(
                        [in] BSTR* pVal, 
                        [in] int iCount);
        [id(0x00000020)]
        HRESULT writeBSTRS(
                        [in] BSTR* pVal, 
                        [in] int iCount);
        [id(0x00000021)]
        HRESULT readCHARS(
                        [in] char* pVal, 
                        [in] int iCount);
        [id(0x00000022)]
        HRESULT writeCHARS(
                        [in] char* pVal, 
                        [in] int iCount);
        [id(0x00000023)]
        HRESULT readUCHARS(
                        [in] unsigned char* pVal, 
                        [in] int iCount);
        [id(0x00000024)]
        HRESULT writeUCHARS(
                        [in] unsigned char* pVal, 
                        [in] int iCount);
        [id(0x00000025)]
        HRESULT readSHORTS(
                        [in] short* pVal, 
                        [in] int iCount);
        [id(0x00000026)]
        HRESULT writeSHORTS(
                        [in] short* pVal, 
                        [in] int iCount);
        [id(0x00000027)]
        HRESULT readUSHORTS(
                        [in] unsigned short* pVal, 
                        [in] int iCount);
        [id(0x00000028)]
        HRESULT writeUSHORTS(
                        [in] unsigned short* pVal, 
                        [in] int iCount);
        [id(0x00000029)]
        HRESULT readINTS(
                        [in] int* pVal, 
                        [in] int iCount);
        [id(0x0000002a)]
        HRESULT writeINTS(
                        [in] int* pVal, 
                        [in] int iCount);
        [id(0x0000002b)]
        HRESULT readUINTS(
                        [in] unsigned int* pVal, 
                        [in] int iCount);
        [id(0x0000002c)]
        HRESULT writeUINTS(
                        [in] unsigned int* pVal, 
                        [in] int iCount);
        [id(0x0000002d)]
        HRESULT readLONGS(
                        [in] int* pVal, 
                        [in] int iCount);
        [id(0x0000002e)]
        HRESULT writeLONGS(
                        [in] int* pVal, 
                        [in] int iCount);
        [id(0x0000002f)]
        HRESULT readULONGS(
                        [in] unsigned int* pVal, 
                        [in] int iCount);
        [id(0x00000030)]
        HRESULT writeULONGS(
                        [in] unsigned int* pVal, 
                        [in] int iCount);
        [id(0x00000031)]
        HRESULT readFLOATS(
                        [in] single* pVal, 
                        [in] int iCount);
        [id(0x00000032)]
        HRESULT writeFLOATS(
                        [in] single* pVal, 
                        [in] int iCount);
        [id(0x00000033)]
        HRESULT readDOUBLES(
                        [in] double* pVal, 
                        [in] int iCount);
        [id(0x00000034)]
        HRESULT writeDOUBLES(
                        [in] double* pVal, 
                        [in] int iCount);
        [id(0x00000035)]
        HRESULT readVARIANTS(
                        [in] VARIANT* pVal, 
                        [in] int iCount);
        [id(0x00000036)]
        HRESULT writeVARIANTS(
                        [in] VARIANT* pVal, 
                        [in] int iCount);
        [id(0x00000037)]
        HRESULT Init2(
                        [in] IStream* piStream, 
                        [in] _eAnsStreamType eStreamType);
        [id(0x00000038), propget]
        HRESULT Storage([out, retval] IUnknown** piStorage);
        [id(0x00000038), propput]
        HRESULT Storage([in] IUnknown* piStorage);
        [id(0x00000039)]
        HRESULT InitForSectioning(
                        [in] IStorage* piStorage, 
                        [in] VARIANT_BOOL bForSave, 
                        [in] VARIANT_BOOL bCompressed);
        [id(0x0000003a)]
        HRESULT Init3(
                        [in] IStream* piStream, 
                        [in] _eAnsStreamType eStreamType);
        [id(0x0000003b)]
        HRESULT CleanupForSectioning();
        [id(0x0000003c)]
        HRESULT readUINT64([out, retval] uint64* pVal);
        [id(0x0000003d)]
        HRESULT writeUINT64([in] uint64 val);
        [id(0x0000003e)]
        HRESULT readLONGS2(
                        [in] int* pVal, 
                        [in] uint64 iCount);
        [id(0x0000003f)]
        HRESULT writeLONGS2(
                        [in] int* pVal, 
                        [in] uint64 iCount);
    };

    typedef enum {
        kStreamTypeUnknown = 0,
        kStreamTypeForRead = 1,
        kStreamTypeForWrite = 2
    } _eAnsStreamType;

    [
      odl,
      uuid(0000000C-0000-0000-C000-000000000046)
    ]
    interface IStream : ISequentialStream {
        HRESULT _stdcall RemoteSeek(
                        [in] _LARGE_INTEGER dlibMove, 
                        [in] unsigned long dwOrigin, 
                        [out] _ULARGE_INTEGER* plibNewPosition);
        HRESULT _stdcall SetSize([in] _ULARGE_INTEGER libNewSize);
        HRESULT _stdcall RemoteCopyTo(
                        [in] IStream* pstm, 
                        [in] _ULARGE_INTEGER cb, 
                        [out] _ULARGE_INTEGER* pcbRead, 
                        [out] _ULARGE_INTEGER* pcbWritten);
        HRESULT _stdcall Commit([in] unsigned long grfCommitFlags);
        HRESULT _stdcall Revert();
        HRESULT _stdcall LockRegion(
                        [in] _ULARGE_INTEGER libOffset, 
                        [in] _ULARGE_INTEGER cb, 
                        [in] unsigned long dwLockType);
        HRESULT _stdcall UnlockRegion(
                        [in] _ULARGE_INTEGER libOffset, 
                        [in] _ULARGE_INTEGER cb, 
                        [in] unsigned long dwLockType);
        HRESULT _stdcall Stat(
                        [out] tagSTATSTG* pstatstg, 
                        [in] unsigned long grfStatFlag);
        HRESULT _stdcall Clone([out] IStream** ppstm);
    };

    [
      odl,
      uuid(0C733A30-2A1C-11CE-ADE5-00AA0044773D)
    ]
    interface ISequentialStream : IUnknown {
        HRESULT _stdcall RemoteRead(
                        [out] unsigned char* pv, 
                        [in] unsigned long cb, 
                        [out] unsigned long* pcbRead);
        HRESULT _stdcall RemoteWrite(
                        [in] unsigned char* pv, 
                        [in] unsigned long cb, 
                        [out] unsigned long* pcbWritten);
    };

    typedef struct tag_LARGE_INTEGER {
                
int64 QuadPart;
    } _LARGE_INTEGER;

    typedef struct tag_ULARGE_INTEGER {
                
uint64 QuadPart;
    } _ULARGE_INTEGER;

    typedef struct tagtagSTATSTG {
                
LPWSTR pwcsName;
                
unsigned long type;
                
_ULARGE_INTEGER cbSize;
                
_FILETIME mtime;
                
_FILETIME ctime;
                
_FILETIME atime;
                
unsigned long grfMode;
                
unsigned long grfLocksSupported;
                
GUID clsid;
                
unsigned long grfStateBits;
                
unsigned long reserved;
    } tagSTATSTG;

    typedef struct tag_FILETIME {
                
unsigned long dwLowDateTime;
                
unsigned long dwHighDateTime;
    } _FILETIME;

    [
      odl,
      uuid(0000000B-0000-0000-C000-000000000046)
    ]
    interface IStorage : IUnknown {
        HRESULT _stdcall CreateStream(
                        [in] LPWSTR pwcsName, 
                        [in] unsigned long grfMode, 
                        [in] unsigned long reserved1, 
                        [in] unsigned long reserved2, 
                        [out] IStream** ppstm);
        HRESULT _stdcall RemoteOpenStream(
                        [in] LPWSTR pwcsName, 
                        [in] unsigned long cbReserved1, 
                        [in] unsigned char* reserved1, 
                        [in] unsigned long grfMode, 
                        [in] unsigned long reserved2, 
                        [out] IStream** ppstm);
        HRESULT _stdcall CreateStorage(
                        [in] LPWSTR pwcsName, 
                        [in] unsigned long grfMode, 
                        [in] unsigned long reserved1, 
                        [in] unsigned long reserved2, 
                        [out] IStorage** ppstg);
        HRESULT _stdcall OpenStorage(
                        [in] LPWSTR pwcsName, 
                        [in] IStorage* pstgPriority, 
                        [in] unsigned long grfMode, 
                        [in] wireSNB snbExclude, 
                        [in] unsigned long reserved, 
                        [out] IStorage** ppstg);
        HRESULT _stdcall RemoteCopyTo(
                        [in] unsigned long ciidExclude, 
                        [in] GUID* rgiidExclude, 
                        [in] wireSNB snbExclude, 
                        [in] IStorage* pstgDest);
        HRESULT _stdcall MoveElementTo(
                        [in] LPWSTR pwcsName, 
                        [in] IStorage* pstgDest, 
                        [in] LPWSTR pwcsNewName, 
                        [in] unsigned long grfFlags);
        HRESULT _stdcall Commit([in] unsigned long grfCommitFlags);
        HRESULT _stdcall Revert();
        HRESULT _stdcall RemoteEnumElements(
                        [in] unsigned long reserved1, 
                        [in] unsigned long cbReserved2, 
                        [in] unsigned char* reserved2, 
                        [in] unsigned long reserved3, 
                        [out] IEnumSTATSTG** ppenum);
        HRESULT _stdcall DestroyElement([in] LPWSTR pwcsName);
        HRESULT _stdcall RenameElement(
                        [in] LPWSTR pwcsOldName, 
                        [in] LPWSTR pwcsNewName);
        HRESULT _stdcall SetElementTimes(
                        [in] LPWSTR pwcsName, 
                        [in] _FILETIME* pctime, 
                        [in] _FILETIME* patime, 
                        [in] _FILETIME* pmtime);
        HRESULT _stdcall SetClass([in] GUID* clsid);
        HRESULT _stdcall SetStateBits(
                        [in] unsigned long grfStateBits, 
                        [in] unsigned long grfMask);
        HRESULT _stdcall Stat(
                        [out] tagSTATSTG* pstatstg, 
                        [in] unsigned long grfStatFlag);
    };

    typedef [public]
    tagRemSNB* wireSNB;

    typedef struct tagtagRemSNB {
                
unsigned long ulCntStr;
                
unsigned long ulCntChar;
                
unsigned short* rgString;
    } tagRemSNB;

    [
      odl,
      uuid(0000000D-0000-0000-C000-000000000046)
    ]
    interface IEnumSTATSTG : IUnknown {
        HRESULT _stdcall RemoteNext(
                        [in] unsigned long celt, 
                        [out] tagSTATSTG* rgelt, 
                        [out] unsigned long* pceltFetched);
        HRESULT _stdcall Skip([in] unsigned long celt);
        HRESULT _stdcall Reset();
        HRESULT _stdcall Clone([out] IEnumSTATSTG** ppenum);
    };

    typedef enum {
        NS_UnknownAction = 0,
        NS_Filter = 1,
        NS_Remove = 2,
        NS_Invert = 3,
        NS_Add = 4,
        NS_Convert = 5
    } DS_NSAction;

    typedef enum {
        NS_UnknownGeomertyType = 0,
        NS_Body = 1,
        NS_Face = 2,
        NS_Edge = 3,
        NS_Vertex = 4,
        NS_MeshNode = 5,
        NS_MeshElement = 6
    } DS_NSGeometryType;

    typedef enum {
        NS_UnknownCriterion = 0,
        NS_Size = 1,
        NS_Type = 2,
        NS_Location_X = 3,
        NS_Location_Y = 4,
        NS_Location_Z = 5,
        NS_FaceConnections = 6,
        NS_CADAttribute = 7,
        NS_Radius = 8,
        NS_NamedSelection = 9,
        NS_NodeNumber = 10,
        NS_MaterialName = 11,
        NS_SurfaceBodyThickness = 12,
        NS_SurfaceBodyOffsetMode = 13,
        NS_Distance = 14,
        NS_ElementNumber = 15,
        NS_ElementQuality = 16,
        NS_AnyNode = 17,
        NS_AllNodes = 18,
        NS_AspectRatio = 19,
        NS_JacobianRatio = 20,
        NS_WarpingFactor = 21,
        NS_ParallelDeviation = 22,
        NS_Skewness = 23,
        NS_OrthogonalQuality = 24,
        NS_Volume = 25,
        NS_Area = 26,
        NS_AnalysisPly = 27,
        NS_SharedAcrossParts = 28,
        NS_NameProperty = 29,
        NS_ElementConnections = 30,
        NS_EdgeConnections = 31,
        NS_AnyVertex = 32,
        NS_AllVertices = 33,
        NS_AnyEdge = 34,
        NS_AllEdges = 35,
        NS_ImportedTrace = 36,
        NS_SharedAcrossBodies = 37
    } DS_NSCriterion;

    typedef enum {
        NS_UnknownOperator = 0,
        NS_Equal = 1,
        NS_NotEqual = 2,
        NS_LessThan = 3,
        NS_LessThanEqual = 4,
        NS_GreaterThan = 5,
        NS_GreaterThanEqual = 6,
        NS_RangeExclude = 7,
        NS_RangeInclude = 8,
        NS_Smallest = 9,
        NS_Largest = 10,
        NS_Yes = 11,
        NS_No = 12,
        NS_Contains = 13
    } DS_NSOperator;

    typedef enum {
        NS_UnknownMultiCriterion = 0,
        NS_MSize = 1,
        NS_MType = 2,
        NS_MLocation_X = 4,
        NS_MLocation_Y = 8,
        NS_MLocation_Z = 16,
        NS_MeshNodeFlag = 32,
        NS_MNamedSelection = 64,
        NS_MAnalysisPly = 128
    } DS_NSMultiCriterion;

    typedef enum {
        k_ToleranceType_ProgramControlled = 0,
        k_ToleranceType_Manual = 1
    } DSToleranceType;

    typedef enum {
        NS_AllBased = 0,
        NS_GeometryBased = 1,
        NS_MeshBased = 2,
        NS_PlyBased = 4,
        NS_ImportedTraceBased = 8
    } DS_NSScopeBasedType;

    typedef enum {
        DSSelectNodesElementsByIdTypeUnknown = 0,
        DSSelectNodesElementsByIdTypeNodes = 1,
        DSSelectNodesElementsByIdTypeElements = 2
    } DSSelectNodesElementsByIdType;

    typedef enum {
        DISPID_ComponentGroupAddComment = 9,
        DISPID_ComponentGroupAddComponent = 10,
        DISPID_ComponentGroupAddFigure = 11,
        DISPID_ComponentGroupAddComponentFromSelectedItemsInTree = 12,
        DISPID_ComponentGroupFigure = 30,
        DISPID_ComponentGroupComments = 31,
        DISPID_ComponentGroupComponents = 32,
        DISPID_ComponentGroupImages = 33,
        DISPID_ComponentGroupAddImage = 34,
        DISPID_ComponentGroupGenerateOnRefresh = 35,
        DISPID_ComponentGroupGenerateComponents = 36,
        DISPID_ComponentGroupAddHiddenFacesComponent = 37,
        DISPID_ComponentGroupGenerateOnRemesh = 38,
        DISPID_ComponentGroupShowAnnotations = 39,
        DISPID_ComponentGroupRandomColors = 40,
        DISPID_ComponentGroupNSCriteriaGenerated = 41,
        DISPID_ComponentGroupAddNamedSelectionByElementIDsUsingNDFile = 42,
        DISPID_ComponentGroupAddComponentFromAnalysisPly = 43,
        DISPID_ComponentGroupAddComponentFromSharedNodesAcrossParts = 44,
        DISPID_ComponentGroupAddMultipleNamedSelectionsFromSelectedItemsInTree = 45,
        DISPID_ComponentGroupImportNamedSelectionFromCDBFile = 46,
        DISPID_ComponentGroupExportNamedSelectionToCDBFileFromCompGroup = 47
    } kDispId_ComponentGroup;

    [
      odl,
      uuid(6989202A-B9B2-478F-B399-7B68C95CA620),
      helpstring("IDSComponentGroupAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSComponentGroupAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x00000009), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x0000000a), helpstring("method AddComponent")]
        HRESULT AddComponent(
                        [in] IDispatch* piSelectMgr, 
                        [out, retval] IDispatch** ppDisp);
        [id(0x0000000b), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x0000000c), helpstring("method AddComponentFromSelectedItemsInTree")]
        HRESULT AddComponentFromSelectedItemsInTree([out, retval] IDispatch** pDisp);
        [id(0x0000001e), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x0000001f), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x00000020), propget, helpstring("property Components")]
        HRESULT Components([out, retval] IDispatch** ppDisp);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
        [id(0x00000021), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000022), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00000023), propget, helpstring("property GenerateOnRefresh")]
        HRESULT GenerateOnRefresh([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000023), propput, helpstring("property GenerateOnRefresh")]
        HRESULT GenerateOnRefresh([in] VARIANT_BOOL pVal);
        [id(0x00000024), helpstring("method GenerateComponents")]
        HRESULT GenerateComponents(DS_NSScopeBasedType ScopeBasedType);
        [id(0x00000025), helpstring("method AddHiddenFacesComponent")]
        HRESULT AddHiddenFacesComponent(
                        [in] IDispatch* piSelectMgr, 
                        [out, retval] IDispatch** ppDisp);
        [id(0x00000026), propget, helpstring("property GenerateOnRemesh")]
        HRESULT GenerateOnRemesh([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000026), propput, helpstring("property GenerateOnRemesh")]
        HRESULT GenerateOnRemesh([in] VARIANT_BOOL pVal);
        [id(0x00000027), propget, helpstring("property ShowAnnotations")]
        HRESULT ShowAnnotations([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000027), propput, helpstring("property ShowAnnotations")]
        HRESULT ShowAnnotations([in] VARIANT_BOOL pVal);
        [id(0x00000028), propget, helpstring("property RandomColors")]
        HRESULT RandomColors([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000028), propput, helpstring("property RandomColors")]
        HRESULT RandomColors([in] VARIANT_BOOL pVal);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x0000002a), helpstring("method addNamedSelectionByElementIDsUsingNDFile")]
        HRESULT addNamedSelectionByElementIDsUsingNDFile(
                        BSTR filePath, 
                        dsid solutionInfoId);
        [id(0x0000002b), helpstring("method AddComponentFromAnalysisPly")]
        HRESULT AddComponentFromAnalysisPly(
                        [in] IAnsUINTColl* AnalysisPlyColl, 
                        [out, retval] IDispatch** ppDisp);
        [id(0x0000002c), helpstring("method AddComponentFromSharedNodesAcrossParts")]
        HRESULT AddComponentFromSharedNodesAcrossParts([out, retval] IDispatch** ppDisp);
        [id(0x0000002d), helpstring("method AddMultipleNamedSelectionsFromSelectedItemsInTree")]
        HRESULT AddMultipleNamedSelectionsFromSelectedItemsInTree([out, retval] IDispatch** pDisp);
        [id(0x0000002e), helpstring("method ImportNamedSelectionFromCDBFile")]
        HRESULT ImportNamedSelectionFromCDBFile(
                        BSTR filePath, 
                        [out, retval] IDispatch** ppDisp);
        [id(0x0000002f), helpstring("method ExportNamedSelectionToCDBFileFromCompGroup")]
        HRESULT ExportNamedSelectionToCDBFileFromCompGroup(
                        [in] BSTR filePath, 
                        [out, retval] BSTR* fileText);
    };

    typedef enum {
        DISPID_ContactGroupDetectionMode = 10,
        DISPID_ContactGroupDetectionTolerance = 11,
        DISPID_ContactGroupComment = 12,
        DISPID_ContactGroupContactRegion = 13,
        DISPID_ContactGroupFigure = 14,
        DISPID_ContactGroupAutoContact = 15,
        DISPID_ContactGroupAddContactRegion = 16,
        DISPID_ContactGroupAddComment = 17,
        DISPID_ContactGroupAddFigure = 18,
        DISPID_ContactGroupUseAutoAsymmetricContact = 19,
        DISPID_ContactGroupCreateNamedSelections = 20,
        DISPID_ContactGroupUseFaceFace = 21,
        DISPID_ContactGroupUseFaceEdge = 22,
        DISPID_ContactGroupUseEdgeEdge = 23,
        DISPID_ContactGroupTransparencyEnabled = 24,
        DISPID_ContactGroupText = 25,
        DISPID_ContactGroupFaceEdgePriority = 26,
        DISPID_ContactGroupToleranceType = 27,
        DISPID_ContactGroupToleranceValue = 28,
        DISPID_ContactGroupUnsuppressedContactRegions = 29,
        DISPID_ContactGroupAddContactTool = 30,
        DISPID_ContactGroupDetermineContactInitialStatus = 31,
        DISPID_ContactGroupRefreshOutputText = 32,
        DISPID_ContactGroupAddContactInfoTool = 33,
        DISPID_ContactGroupDeterminingInitialContact = 34,
        DISPID_ContactGroupMergeContactOnSameBody = 35,
        DISPID_ContactGroupJoints = 36,
        DISPID_ContactGroupAddJoint = 37,
        DISPID_ContactGroupIsSolving = 38,
        DISPID_ContactGroupAutoJointDetection = 39,
        DISPID_RefreshedContactObjectChildren = 40,
        DISPID_ContactGroupSprings = 41,
        DISPID_ContactGroupAddSpring = 42,
        DISPID_ContactGroupAutoSpringDetection = 43,
        DISPID_ContactGroupImages = 44,
        DISPID_ContactGroupAddImage = 45,
        DISPID_ContactGroupSolverFilesDirectory = 46,
        DISPID_ContactGroupRegenerateMesh = 47,
        DISPID_ContactGroupRevoluteJoints = 48,
        DISPID_ContactGroupFixedJoints = 49,
        DISPID_ContactGroupAutoSpringRefresh = 50,
        DISPID_ContactGroupSearchWithinMultibodyParts = 51,
        DISPID_ContactGroupAddBeamConnection = 52,
        DISPID_ContactGroupGroupingType = 53,
        DISPID_ContactGroupContactSearchingType = 54,
        DISPID_ContactGroupAddBodyInteraction = 60,
        DISPID_ContactGroupAddMeshConnection = 61,
        DISPID_ContactGroupAddConnectionGroup = 62,
        DISPID_ContactGroupAddBeamEndRelease = 63,
        DISPID_ContactGroupScratchSolverFilesDirectory = 70,
        DISPID_ContactGroupThicknessScaleFactor = 72,
        DISPID_ContactGroupMeshConnection = 73,
        DISPID_ContactGroupSearchMeshConsWithCommonMaster = 74,
        DISPID_ContactGroupAutoConnectionsDetection = 75,
        DISPID_ContactGroupSearchConnectionsForDuplicatePairs = 76,
        DISPID_ContactGroupUpdateConnectionGroupName = 77,
        DISPID_ContactGroupConnectionGroups = 78,
        DISPID_ContactGroupBearings = 80,
        DISPID_ContactGroupAddBearing = 81,
        DISPID_ContactGroupBeamConnections = 82,
        DISPID_ContactGroupAddContactToolWithWorksheetScoping = 83,
        DISPID_ContactGroupGetJSON = 84
    } kDispId_ContactGroup;

    [
      odl,
      uuid(2AFF017B-BEFF-4D7F-A0BF-3FEF3048182E),
      helpstring("IDSContactGroupAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSContactGroupAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x0000000a), propget, helpstring("property DetectionMode")]
        HRESULT DetectionMode([out, retval] DSAutoOrMan* pVal);
        [id(0x0000000a), propput, helpstring("property DetectionMode")]
        HRESULT DetectionMode([in] DSAutoOrMan pVal);
        [id(0x0000001b), propget, helpstring("property ToleranceType")]
        HRESULT ToleranceType([out, retval] DSContactToleranceType* pVal);
        [id(0x0000001b), propput, helpstring("property ToleranceType")]
        HRESULT ToleranceType([in] DSContactToleranceType pVal);
        [id(0x0000000b), propget, helpstring("property DetectionTolerance")]
        HRESULT DetectionTolerance([out, retval] int* pVal);
        [id(0x0000000b), propput, helpstring("property DetectionTolerance")]
        HRESULT DetectionTolerance([in] int pVal);
        [id(0x0000001c), propget, helpstring("property ToleranceValue")]
        HRESULT ToleranceValue([out, retval] double* pVal);
        [id(0x0000001c), propput, helpstring("property ToleranceValue")]
        HRESULT ToleranceValue([in] double pVal);
        [id(0x0000000f), helpstring("method AutoContact")]
        HRESULT AutoContact(DSAutoDetectionType eAutoDetectType);
        [id(0x00000010), helpstring("method AddContactRegion")]
        HRESULT AddContactRegion(
                        [in] IDispatch* piSelectMgr, 
                        [in] DSContactType cType, 
                        [out, retval] IDispatch** pDisp);
        [id(0x00000011), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x0000000c), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x0000000d), propget, helpstring("property ContactRegions")]
        HRESULT ContactRegions([out, retval] IDispatch** ppDisp);
        [id(0x0000000e), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x00000012), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x00000014), helpstring("method CreateNamedSelections")]
        HRESULT CreateNamedSelections();
        [id(0x00000015), propget, helpstring("property UseFaceFace")]
        HRESULT UseFaceFace([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000015), propput, helpstring("property UseFaceFace")]
        HRESULT UseFaceFace([in] VARIANT_BOOL pVal);
        [id(0x00000016), propget, helpstring("property UseFaceEdge")]
        HRESULT UseFaceEdge([out, retval] DSContactFaceEdgeOption* pVal);
        [id(0x00000016), propput, helpstring("property UseFaceEdge")]
        HRESULT UseFaceEdge([in] DSContactFaceEdgeOption pVal);
        [id(0x00000017), propget, helpstring("property UseEdgeEdge")]
        HRESULT UseEdgeEdge([out, retval] DSContactEdgeEdgeOption* pVal);
        [id(0x00000017), propput, helpstring("property UseEdgeEdge")]
        HRESULT UseEdgeEdge([in] DSContactEdgeEdgeOption pVal);
        [id(0x00000018), propget, helpstring("property TransparencyEnabled")]
        HRESULT TransparencyEnabled([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000018), propput, helpstring("property TransparencyEnabled")]
        HRESULT TransparencyEnabled([in] VARIANT_BOOL pVal);
        [id(0x0000001a), propget, helpstring("property FaceEdgePriority")]
        HRESULT FaceEdgePriority([out, retval] DSContactFaceEdgePriority* pVal);
        [id(0x0000001a), propput, helpstring("property FaceEdgePriority")]
        HRESULT FaceEdgePriority([in] DSContactFaceEdgePriority pVal);
        [id(0x0000001d), propget, helpstring("property UnsuppressedContactRegions")]
        HRESULT UnsuppressedContactRegions([out, retval] IDispatch** pDisp);
        [id(0x0000001e), helpstring("method AddContactTool")]
        HRESULT AddContactTool(
                        [in] IDispatch* piSelectMgr, 
                        [out, retval] IDispatch** pDisp);
        [id(0x0000001f), helpstring("method DetermineContactInitialStatus")]
        HRESULT DetermineContactInitialStatus([in] IAnsProgress* piProgress);
        [id(0x00000020), helpstring("method RefreshOutputText")]
        HRESULT RefreshOutputText();
        [id(0x00000019), propget, helpstring("property Text")]
        HRESULT Text([out, retval] BSTR* bsVal);
        [id(0x00000021), helpstring("method AddContactInfoTool")]
        HRESULT AddContactInfoTool([out, retval] IDispatch** pDisp);
        [id(0x00000022), propget, helpstring("property DeterminingInitialContact")]
        HRESULT DeterminingInitialContact([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000023), propget, helpstring("property deprecated - use BodyGrouping property")]
        HRESULT MergeContactOnSameBody([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000023), propput, helpstring("property deprecated - use BodyGrouping property")]
        HRESULT MergeContactOnSameBody([in] VARIANT_BOOL pVal);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
        [id(0x00000024), propget, helpstring("property Joints")]
        HRESULT Joints([out, retval] IDispatch** ppDisp);
        [id(0x00000025), helpstring("method AddJoint")]
        HRESULT AddJoint(
                        [in] IDispatch* piSelectMgr, 
                        [in] DSJointType cType, 
                        [in] DSJointScopingType ScopeType, 
                        [out, retval] IDispatch** pDisp);
        [id(0x00000026), propget, helpstring("property IsSolving")]
        HRESULT IsSolving([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000027), helpstring("method AutoJointDetection")]
        HRESULT AutoJointDetection(IDispatch* selectionMgr);
        [id(0x00000029), propget, helpstring("property Springs")]
        HRESULT Springs([out, retval] IDispatch** ppDisp);
        [id(0x0000002a), helpstring("method AddSpring")]
        HRESULT AddSpring(
                        [in] IDispatch* piSelectMgr, 
                        DSSpringScopingType ScopingType, 
                        [out, retval] IDispatch** pDisp);
        [id(0x0000002b), helpstring("method AutoSpringDetection")]
        HRESULT AutoSpringDetection(IDispatch* selectionMgr);
        [id(0x00000032), helpstring("method AutoSpringRefresh")]
        HRESULT AutoSpringRefresh();
        [id(0x0000002c), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x0000002d), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x0000002e), propget, helpstring("property SolverFilesDirectory")]
        HRESULT SolverFilesDirectory([out, retval] BSTR* pbsSolverDir);
        [id(0x0000002e), propput, helpstring("property SolverFilesDirectory")]
        HRESULT SolverFilesDirectory([in] BSTR pbsSolverDir);
        [id(0x0000002f), helpstring("method Regenerate Connection Mesh")]
        HRESULT RegenerateConnectionMesh();
        [id(0x00000030), propget, helpstring("property RevoluteJoints")]
        HRESULT RevoluteJoints([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000030), propput, helpstring("property RevoluteJoints")]
        HRESULT RevoluteJoints([in] VARIANT_BOOL pVal);
        [id(0x00000031), propget, helpstring("property FixedJoints")]
        HRESULT FixedJoints([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000031), propput, helpstring("property FixedJoints")]
        HRESULT FixedJoints([in] VARIANT_BOOL pVal);
        [id(0x0000003c), helpstring("method AddContactTool")]
        HRESULT AddBodyInteraction(
                        [in] IDispatch* piSelectMgr, 
                        [out, retval] IDispatch** pDisp);
        [id(0x0000003d), helpstring("method AddMeshConnection")]
        HRESULT AddMeshConnection(
                        [in] IDispatch* piSelectMgr, 
                        [out, retval] IDispatch** pDisp);
        [id(0x00000033), propget, helpstring("property SearchWithinMultibodyParts")]
        HRESULT SearchWithinMultibodyParts([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000033), propput, helpstring("property SearchWithinMultibodyParts")]
        HRESULT SearchWithinMultibodyParts([in] VARIANT_BOOL pVal);
        [id(0x00000034), helpstring("method AddBeamConnection")]
        HRESULT AddBeamConnection(
                        [in] IDispatch* piSelectMgr, 
                        DSSpringScopingType ScopingType, 
                        [out, retval] IDispatch** pDisp);
        [id(0x00000035), propget, helpstring("property GroupingType")]
        HRESULT GroupingType([out, retval] DSContactGroupingType* pVal);
        [id(0x00000035), propput, helpstring("property GroupingType")]
        HRESULT GroupingType([in] DSContactGroupingType pVal);
        [id(0x00000036), propget, helpstring("property ContactSearchingType")]
        HRESULT ContactSearchingType([out, retval] DSContactSearchingType* pVal);
        [id(0x00000036), propput, helpstring("property ContactSearchingType")]
        HRESULT ContactSearchingType([in] DSContactSearchingType pVal);
        [id(0x00000046), propget, helpstring("property ScratchSolverFilesDirectory")]
        HRESULT ScratchSolverFilesDirectory([out, retval] BSTR* pbsSolverDir);
        [id(0x00000046), propput, helpstring("property ScratchSolverFilesDirectory")]
        HRESULT ScratchSolverFilesDirectory([in] BSTR pbsSolverDir);
        [id(0x00000048), propget, helpstring("property ThicknessScaleFactor")]
        HRESULT ThicknessScaleFactor([out, retval] double* pVal);
        [id(0x00000048), propput, helpstring("property ThicknessScaleFactor")]
        HRESULT ThicknessScaleFactor([in] double pVal);
        [id(0x00000049), propget, helpstring("property MeshConnections")]
        HRESULT MeshConnections([out, retval] IDispatch** ppDisp);
        [id(0x0000004a), helpstring("method SearchMeshConnectionsWithCommonMaster")]
        HRESULT SearchMeshConnectionsWithCommonMaster();
        [id(0x0000003e), helpstring("method AddConnectionGroup")]
        HRESULT AddConnectionGroup(
                        [in] IDispatch* piSelectMgr, 
                        [out, retval] IDispatch** pDisp);
        [id(0x0000004b), helpstring("method AutoConnectionsDetection")]
        HRESULT AutoConnectionsDetection(
                        [in] VARIANT_BOOL vbExcludeIntraAssembly, 
                        [in] VARIANT_BOOL vbExcludeImported, 
                        IAnsProgress* piProgress);
        [id(0x0000003f), helpstring("method AddBeamEndRelease")]
        HRESULT AddBeamEndRelease(
                        [in] IDispatch* piSelectMgr, 
                        [out, retval] IDispatch** pDisp);
        [id(0x0000004c), helpstring("method SearchConnectionsForDuplicatePairs")]
        HRESULT SearchConnectionsForDuplicatePairs();
        [id(0x00000050), propget, helpstring("property Bearings")]
        HRESULT Bearings([out, retval] IDispatch** ppDisp);
        [id(0x00000051), helpstring("method AddBearing")]
        HRESULT AddBearing(
                        [in] IDispatch* piSelectMgr, 
                        DSConnectionScopingType eScopingType, 
                        [out, retval] IDispatch** pDisp);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x0000004d), helpstring("method UpdateConnectionGroupName")]
        HRESULT UpdateConnectionGroupName(
                        [in] dsid idConnectionGroup, 
                        [in] unsigned int uiConnectionType, 
                        [out, retval] VARIANT_BOOL* pVal);
        [id(0x00000052), propget, helpstring("property Beam Connections")]
        HRESULT BeamConnections([out, retval] IDispatch** ppDisp);
        [id(0x00000053), helpstring("method AddContactToolWithWorksheetScoping")]
        HRESULT AddContactToolWithWorksheetScoping([out, retval] IDispatch** pDisp);
        [id(0x0000004e), propget, helpstring("property Connection Groups")]
        HRESULT ConnectionGroups([out, retval] IDispatch** ppDisp);
        [id(0x00000054), helpstring("method GetJSON")]
        HRESULT GetJSON([out, retval] BSTR* pVal);
    };

    typedef enum {
        Manual = 0,
        Automatic = 1
    } DSAutoOrMan;

    typedef enum {
        kToleranceSlider = 0,
        kToleranceValue = 1,
        kToleranceSheetThickness = 2
    } DSContactToleranceType;

    typedef enum {
        kContactDetection = 0,
        kMeshConnectionDetection = 1,
        kJointDetection = 2
    } DSAutoDetectionType;

    typedef enum {
        UNKNOWN_CONTACT = 0,
        BONDED_CONTACT = 1,
        FRICTIONLESS_CONTACT = 2,
        FRICTIONAL_CONTACT = 3,
        ROUGH_CONTACT = 4,
        NO_SEPARATION_CONTACT = 5,
        SPOT_WELD_CONTACT = 6,
        GENERAL_WELD_CONTACT = 7,
        NO_SEPARATION_SLIDING_CONTACT = 8,
        BONDED_INITIAL_CONTACT = 9,
        REINFORCEMENT_CONTACT = 10,
        FORCED_FRICTIONAL_SLIDING_CONTACT = 11
    } DSContactType;

    typedef enum {
        kFaceEdgeNo = 0,
        kFaceEdgeYes = 1,
        kFaceEdgeOnlySolidEdges = 2,
        kFaceEdgeOnlySurfaceEdges = 3,
        kFaceEdgeIfNoFaceFace = 4
    } DSContactFaceEdgeOption;

    typedef enum {
        kEdgeEdgeNo = 0,
        kEdgeEdgeYes = 1,
        kEdgeEdgeIfNoEdgeFace = 2
    } DSContactEdgeEdgeOption;

    typedef enum {
        kIncludeAll = 0,
        kFaceOverEdge = 1,
        kEdgeOverFace = 2
    } DSContactFaceEdgePriority;

    typedef enum {
        kJOINT_FIXED = 0,
        kJOINT_REVOLUTE = 1,
        kJOINT_TRANSLATIONAL = 2,
        kJOINT_SLOT = 3,
        kJOINT_CYLINDRICAL = 4,
        kJOINT_UNIVERSAL = 5,
        kJOINT_SPHERICAL = 6,
        kJOINT_PLANAR = 7,
        kJOINT_GENERAL = 8,
        kJOINT_BUSHING = 9,
        kJOINT_POINTONCURVE = 10,
        kJOINT_PlaneRadialGap = 11,
        kJOINT_SPHERICALGAP = 12,
        kJOINT_3DRADIALGAP = 13,
        kJOINT_BUSHING_SAMCEF = 14,
        kJOINT_GENERAL_SAMCEF = 15
    } DSJointType;

    typedef enum {
        kJointScopingTypeBodyToBody = 0,
        kJointScopingTypeBodyToGround = 1
    } DSJointScopingType;

    typedef enum {
        kContactGroupingNone = 0,
        kContactGroupingByBodies = 1,
        kContactGroupingByParts = 2,
        kContactGroupingByFaces = 3
    } DSContactGroupingType;

    typedef enum {
        kContactSearchAcrossBodies = 0,
        kContactSearchAcrossParts = 1,
        kContactSearchAnywhere = 2,
        kContactSearchAcrossAssemblies = 3
    } DSContactSearchingType;

    typedef enum {
        kScopingTypeBodyToBody = 0,
        kScopingTypeBodyToGround = 1
    } DSConnectionScopingType;

    typedef enum {
        DISPID_ConnectionGroupConnectionType = 10,
        DISPID_ConnectionGroupGeometryDefineBy = 11,
        DISPID_ConnectionGroupGeometrySelection = 12,
        DISPID_ConnectionGroupComponentSelection = 13,
        DISPID_ConnectionGroupToleranceType = 14,
        DISPID_ConnectionGroupToleranceSlider = 15,
        DISPID_ConnectionGroupToleranceValue = 16,
        DISPID_ConnectionGroupThicknessScaleFactor = 17,
        DISPID_ConnectionGroupUseFaceFace = 18,
        DISPID_ConnectionGroupUseFaceEdge = 19,
        DISPID_ConnectionGroupUseEdgeEdge = 20,
        DISPID_ConnectionGroupFaceEdgePriority = 21,
        DISPID_ConnectionGroupGroupingType = 22,
        DISPID_ConnectionGroupSearchingType = 23,
        DISPID_ConnectionGroupAutoFixedJoints = 24,
        DISPID_ConnectionGroupAutoRevoluteJoints = 25,
        DISPID_ConnectionGroupSuppressed = 26,
        DISPID_ConnectionGroupContactRegions = 50,
        DISPID_ConnectionGroupMeshConnections = 51,
        DISPID_ConnectionGroupJoints = 52,
        DISPID_ConnectionGroupSprings = 53,
        DISPID_ConnectionGroupComment = 90,
        DISPID_ConnectionGroupFigure = 91,
        DISPID_ConnectionGroupImages = 92,
        DISPID_ConnectionGroupAddComment = 93,
        DISPID_ConnectionGroupAddFigure = 94,
        DISPID_ConnectionGroupAddImage = 95,
        DISPID_ConnectionGroupUseRange = 96,
        DISPID_ConnectionGroupMinDistanceSlider = 97,
        DISPID_ConnectionGroupMinDistanceValue = 98,
        DISPID_ConnectionGroupAddMeshConnection = 99,
        DISPID_ConnectionGroupCopyOldConnectionGrpIntoMeshConnectionGrpObject = 100,
        DISPID_ConnectionGroupSourceAssemblySelection = 101,
        DISPID_ConnectionGroupMeshConnectionFaceAngleTolerance = 102,
        DISPID_ConnectionGroupMeshConnectionEdgeOverlapTolerance = 103,
        DISPID_MeshConnectionGroupGenerateConnections = 104,
        DISPID_MeshConnectionGroupGetMeshConnectionControls = 105,
        DISPID_ConnectionGroupBeamConnections = 106,
        DISPID_MeshConnectionGroupType = 107,
        DISPID_ConnectionGroupNodeMergeMethod = 108,
        DISPID_ConnectionGroupNumChildren = 109,
        DISPID_ConnectionGroupNumActiveChildren = 110,
        DISPID_ConnectionGroupVlidChildren = 111,
        DISPID_ConnectionGroupHasValidChildObject = 112,
        DISPID_ConnectionGroupDetectCylindricalFaces = 113,
        DISPID_ConnectionGroupDetectVertexFace = 114
    } kDispId_ConnectionGroup;

    [
      odl,
      uuid(7F0819EE-71AF-4A2D-B64B-66C94B8ACC1B),
      helpstring("IDSConnectionGroupAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSConnectionGroupAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x0000000a), propget, helpstring("property ConnectionType")]
        HRESULT ConnectionType([out, retval] unsigned int* pVal);
        [id(0x0000000a), propput, helpstring("property ConnectionType")]
        HRESULT ConnectionType([in] unsigned int pVal);
        [id(0x0000000b), propget, helpstring("property GeometryDefineBy")]
        HRESULT GeometryDefineBy([out, retval] DSGeometryDefineByType* pVal);
        [id(0x0000000b), propput, helpstring("property GeometryDefineBy")]
        HRESULT GeometryDefineBy([in] DSGeometryDefineByType pVal);
        [id(0x0000000c), propput, helpstring("property GeometrySelection")]
        HRESULT GeometrySelection([in] IDispatch* rhs);
        [id(0x0000000d), propget, helpstring("property ComponentSelection")]
        HRESULT ComponentSelection([out, retval] int* pVal);
        [id(0x0000000d), propput, helpstring("property ComponentSelection")]
        HRESULT ComponentSelection([in] int pVal);
        [id(0x0000000e), propget, helpstring("property ToleranceType")]
        HRESULT ToleranceType([out, retval] DSContactToleranceType* pVal);
        [id(0x0000000e), propput, helpstring("property ToleranceType")]
        HRESULT ToleranceType([in] DSContactToleranceType pVal);
        [id(0x0000000f), propget, helpstring("property ToleranceSlider")]
        HRESULT ToleranceSlider([out, retval] int* pVal);
        [id(0x0000000f), propput, helpstring("property ToleranceSlider")]
        HRESULT ToleranceSlider([in] int pVal);
        [id(0x00000010), propget, helpstring("property ToleranceValue")]
        HRESULT ToleranceValue([out, retval] double* pVal);
        [id(0x00000010), propput, helpstring("property ToleranceValue")]
        HRESULT ToleranceValue([in] double pVal);
        [id(0x00000011), propget, helpstring("property ThicknessScaleFactor")]
        HRESULT ThicknessScaleFactor([out, retval] double* pVal);
        [id(0x00000011), propput, helpstring("property ThicknessScaleFactor")]
        HRESULT ThicknessScaleFactor([in] double pVal);
        [id(0x00000012), propget, helpstring("property UseFaceFace")]
        HRESULT UseFaceFace([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000012), propput, helpstring("property UseFaceFace")]
        HRESULT UseFaceFace([in] VARIANT_BOOL pVal);
        [id(0x00000013), propget, helpstring("property UseFaceEdge")]
        HRESULT UseFaceEdge([out, retval] DSContactFaceEdgeOption* pVal);
        [id(0x00000013), propput, helpstring("property UseFaceEdge")]
        HRESULT UseFaceEdge([in] DSContactFaceEdgeOption pVal);
        [id(0x00000014), propget, helpstring("property UseEdgeEdge")]
        HRESULT UseEdgeEdge([out, retval] DSContactEdgeEdgeOption* pVal);
        [id(0x00000014), propput, helpstring("property UseEdgeEdge")]
        HRESULT UseEdgeEdge([in] DSContactEdgeEdgeOption pVal);
        [id(0x00000015), propget, helpstring("property FaceEdgePriority")]
        HRESULT FaceEdgePriority([out, retval] DSContactFaceEdgePriority* pVal);
        [id(0x00000015), propput, helpstring("property FaceEdgePriority")]
        HRESULT FaceEdgePriority([in] DSContactFaceEdgePriority pVal);
        [id(0x00000016), propget, helpstring("property GroupingType")]
        HRESULT GroupingType([out, retval] DSContactGroupingType* pVal);
        [id(0x00000016), propput, helpstring("property GroupingType")]
        HRESULT GroupingType([in] DSContactGroupingType pVal);
        [id(0x00000017), propget, helpstring("property SearchingType")]
        HRESULT SearchingType([out, retval] DSContactSearchingType* pVal);
        [id(0x00000017), propput, helpstring("property SearchingType")]
        HRESULT SearchingType([in] DSContactSearchingType pVal);
        [id(0x00000018), propget, helpstring("property AutoFixedJoints")]
        HRESULT AutoFixedJoints([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000018), propput, helpstring("property AutoFixedJoints")]
        HRESULT AutoFixedJoints([in] VARIANT_BOOL pVal);
        [id(0x00000019), propget, helpstring("property AutoRevoluteJoints")]
        HRESULT AutoRevoluteJoints([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000019), propput, helpstring("property AutoRevoluteJoints")]
        HRESULT AutoRevoluteJoints([in] VARIANT_BOOL pVal);
        [id(0x0000005a), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x0000005b), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x0000005c), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x0000005d), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x0000005e), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x0000005f), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x0000001a), propget, helpstring("property Suppressed")]
        HRESULT Suppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000001a), propput, helpstring("property Suppressed")]
        HRESULT Suppressed([in] VARIANT_BOOL pVal);
        [id(0x00000032), propget, helpstring("property ContactRegions")]
        HRESULT ContactRegions([out, retval] IDispatch** ppDisp);
        [id(0x00000033), propget, helpstring("property MeshConnections")]
        HRESULT MeshConnections([out, retval] IDispatch** ppDisp);
        [id(0x00000034), propget, helpstring("property Joints")]
        HRESULT Joints([out, retval] IDispatch** ppDisp);
        [id(0x00000035), propget, helpstring("property Springs")]
        HRESULT Springs([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x00000060), propget, helpstring("property UseRange")]
        HRESULT UseRange([out, retval] int* pVal);
        [id(0x00000060), propput, helpstring("property UseRange")]
        HRESULT UseRange([in] int pVal);
        [id(0x00000061), propget, helpstring("property MinDistanceSlider")]
        HRESULT MinDistanceSlider([out, retval] int* pVal);
        [id(0x00000061), propput, helpstring("property MinDistanceSlider")]
        HRESULT MinDistanceSlider([in] int pVal);
        [id(0x00000062), propget, helpstring("property MinDistanceValue")]
        HRESULT MinDistanceValue([out, retval] double* pVal);
        [id(0x00000062), propput, helpstring("property MinDistanceValue")]
        HRESULT MinDistanceValue([in] double pVal);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x00000063), helpstring("method AddMeshConnection")]
        HRESULT AddMeshConnection(
                        [in] IDispatch* piSelectMgr, 
                        [in] int ConnectionType, 
                        [out, retval] IDispatch** pDisp);
        [id(0x00000064), helpstring("method CopyOldConnectionGrpIntoMeshConnectionGrpObject")]
        HRESULT CopyOldConnectionGrpIntoMeshConnectionGrpObject([in] dsid oldObjId);
        [id(0x00000065), propget, helpstring("property SourceAssemblySelection")]
        HRESULT SourceAssemblySelection([out, retval] BSTR* pbsVal);
        [id(0x00000065), propput, helpstring("property SourceAssemblySelection")]
        HRESULT SourceAssemblySelection([in] BSTR pbsVal);
        [id(0x00000066), propget, helpstring("property MeshConnection FaceAngleTolerance")]
        HRESULT MeshConnectionFaceAngleTolerance([out, retval] double* pVal);
        [id(0x00000066), propput, helpstring("property MeshConnection FaceAngleTolerance")]
        HRESULT MeshConnectionFaceAngleTolerance([in] double pVal);
        [id(0x00000067), propget, helpstring("property MeshConnectionEdgeOverlapTolerance")]
        HRESULT MeshConnectionEdgeOverlapTolerance([out, retval] double* pVal);
        [id(0x00000067), propput, helpstring("property MeshConnectionEdgeOverlapTolerance")]
        HRESULT MeshConnectionEdgeOverlapTolerance([in] double pVal);
        [id(0x00000068), helpstring("method GenerateMeshConnections")]
        HRESULT GenerateMeshConnections(IAnsProgress* piProgress);
        [id(0x0000006a), propget, helpstring("property Beam Connections")]
        HRESULT BeamConnections([out, retval] IDispatch** ppDisp);
        [id(0x0000006b), propget, helpstring("property MeshConnectionGroupType")]
        HRESULT MeshConnectionGroupType([out, retval] int* pVal);
        [id(0x0000006b), propput, helpstring("property MeshConnectionGroupType")]
        HRESULT MeshConnectionGroupType([in] int pVal);
        [id(0x0000006c), propget, helpstring("property MeshConnectionNodeMergeMethod")]
        HRESULT MeshConnectionNodeMergeMethod([out, retval] int* pVal);
        [id(0x0000006c), propput, helpstring("property MeshConnectionNodeMergeMethod")]
        HRESULT MeshConnectionNodeMergeMethod([in] int pVal);
        [id(0x0000006d), propget, helpstring("property ConnectionGroupNumChildren")]
        HRESULT ConnectionGroupNumChildren([out, retval] unsigned int* pVal);
        [id(0x0000006e), propget, helpstring("property ConnectionGroupNumActiveChildren")]
        HRESULT ConnectionGroupNumActiveChildren([out, retval] unsigned int* pVal);
        [id(0x0000006f), propput, helpstring("property VlidChildren")]
        HRESULT ValidChildren([in] unsigned int rhs);
        [id(0x00000070), helpstring("method HasValidChildObject")]
        HRESULT HasValidChildObject([out, retval] VARIANT_BOOL* vbVal);
        [id(0x00000071), propget, helpstring("property DetectCylindricalFacesType")]
        HRESULT DetectCylindricalFacesType([out, retval] DSContactDetectCylindricalFacesType* pVal);
        [id(0x00000071), propput, helpstring("property DetectCylindricalFacesType")]
        HRESULT DetectCylindricalFacesType([in] DSContactDetectCylindricalFacesType pVal);
        [id(0x00000072), propget, helpstring("property DetectVertexFace")]
        HRESULT DetectVertexFace([out, retval] DSContactDetectVertexFace* pVal);
        [id(0x00000072), propput, helpstring("property DetectVertexFace")]
        HRESULT DetectVertexFace([in] DSContactDetectVertexFace pVal);
    };

    typedef enum {
        kContactDetectCylindricalFacesYes = 0,
        kContactDetectCylindricalFacesNo = 1,
        kContactDetectCylindricalFacesOnly = 2
    } DSContactDetectCylindricalFacesType;

    typedef enum {
        kContactDetectVertexFaceYes = 0,
        kContactDetectVertexFaceNo = 1
    } DSContactDetectVertexFace;

    typedef enum {
        DISPID_CondensedPartInfoToolAddComment = 10,
        DISPID_CondensedPartInfoToolComments = 11,
        DISPID_CondensedPartInfoToolImages = 12,
        DISPID_CondensedPartInfoToolAddImage = 13,
        DISPID_CondensedPartInfoToolUpdateInterval = 14,
        DISPID_CondensedPartInfoToolRefreshOutputText = 15,
        DISPID_CondensedPartInfoToolIsSolving = 16,
        DISPID_CondensedPartInfoToolText = 17,
        DISPID_CondensedPartInfoToolSource = 18,
        DISPID_CondensedPartInfoToolSourceCondensedPart = 19
    } kDispId_CondensedPartInfoTool;

    [
      odl,
      uuid(53BC1362-93AC-4C59-9840-D4677F50E12F),
      helpstring("IDSCondensedPartInfoToolAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSCondensedPartInfoToolAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
        [id(0x0000000a), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x0000000b), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x0000000c), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x0000000d), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x0000000e), propget, helpstring("method UpdateInterval")]
        HRESULT UpdateInterval([out, retval] double* pVal);
        [id(0x0000000e), propput, helpstring("method UpdateInterval")]
        HRESULT UpdateInterval([in] double pVal);
        [id(0x0000000f), helpstring("method RefreshOutputText")]
        HRESULT RefreshOutputText();
        [id(0x00000010), propget, helpstring("method IsSolving")]
        HRESULT IsSolving([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000010), propput, helpstring("method IsSolving")]
        HRESULT IsSolving([in] VARIANT_BOOL pVal);
        [id(0x00000011), propget, helpstring("property Text")]
        HRESULT Text([out, retval] BSTR* bsVal);
        [id(0x00000012), propget, helpstring("property Source")]
        HRESULT Source([out, retval] dsid* pVal);
        [id(0x00000012), propput, helpstring("property Source")]
        HRESULT Source([in] dsid pVal);
        [id(0x00000013), propget, helpstring("property SourceCondensedPart")]
        HRESULT SourceCondensedPart([out, retval] dsid* pVal);
        [id(0x00000013), propput, helpstring("property SourceCondensedPart")]
        HRESULT SourceCondensedPart([in] dsid pVal);
    };

    typedef enum {
        DISPID_ContactInfoToolAddComment = 10,
        DISPID_ContactInfoToolComments = 11,
        DISPID_ContactInfoToolUpdateInterval = 12,
        DISPID_ContactInfoToolImages = 13,
        DISPID_ContactInfoToolAddImage = 14
    } kDispId_ContactInfoTool;

    [
      odl,
      uuid(60EC8FDF-887B-4C71-85C1-08E928C47C0E),
      helpstring("IDSContactInfoToolAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSContactInfoToolAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x0000000b), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x0000000a), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x0000000c), propget, helpstring("method UpdateInterval")]
        HRESULT UpdateInterval([out, retval] double* pVal);
        [id(0x0000000c), propput, helpstring("method UpdateInterval")]
        HRESULT UpdateInterval([in] double pVal);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
        [id(0x0000000d), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x0000000e), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
    };

    typedef enum {
        DISPID_ContactRegionPrototypes = 10,
        DISPID_ContactRegionNodeForSide1 = 11,
        DISPID_ContactRegionNodeCountForSide1 = 12,
        DISPID_ContactRegionNodeForSide2 = 13,
        DISPID_ContactRegionNodeCountForSide2 = 14,
        DISPID_ContactRegionNodeForPart = 15,
        DISPID_ContactRegionNodeCountForPart = 16,
        DISPID_ContactRegionSourceGeometry = 17,
        DISPID_ContactRegionTargetGeometry = 18,
        DISPID_ContactRegionContactType = 19,
        DISPID_ContactRegionMode = 20,
        DISPID_ContactRegionSource = 21,
        DISPID_ContactRegionTarget = 22,
        DISPID_ContactRegionFrictionCoeff = 23,
        DISPID_ContactRegionComment = 24,
        DISPID_ContactRegionFigure = 25,
        DISPID_ContactRegionAttachedNodes = 26,
        DISPID_ContactRegionAddComment = 27,
        DISPID_ContactRegionAddFigure = 28,
        DISPID_ContactRegionSourceName = 29,
        DISPID_ContactRegionTargetName = 30,
        DISPID_ContactRegionSuppressed = 31,
        DISPID_ContactRegionNormalStiffness = 32,
        DISPID_ContactRegionSymmetricContact = 33,
        DISPID_ContactRegionUseAutoNormalStiffness = 34,
        DISPID_ContactRegionContactFormulation = 35,
        DISPID_ContactRegionInitialEffect = 36,
        DISPID_ContactRegionUserOffset = 37,
        DISPID_ContactRegionUseAutoThermalConductance = 38,
        DISPID_ContactRegionThermalConductance = 39,
        DISPID_ContactRegionPinballType = 40,
        DISPID_ContactRegionPinballFactor = 41,
        DISPID_ContactRegionPinballRadius = 42,
        DISPID_ContactRegionAutoDetectionValue = 43,
        DISPID_ContactRegionShellThicknessEffect = 44,
        DISPID_ContactRegionSourceGeometryType = 45,
        DISPID_ContactRegionTargetGeometryType = 46,
        DISPID_ContactRegionExpandEdgesAsFaces = 47,
        DISPID_ContactRegionSearchDirection = 64,
        DISPID_ContactRegionSourceGeometryScopeType = 65,
        DISPID_ContactRegionTargetGeometryScopeType = 66,
        DISPID_ContactRegionSuppressedForSolve = 67,
        DISPID_ContactRegionPrototypesForSubset = 68,
        DISPID_ContactRegionNumFaces = 69,
        DISPID_ContactRegionNumVertices = 70,
        DISPID_ContactRegionGetUnsuppressedPartFaceTopoPair = 71,
        DISPID_ContactRegionGetUnsuppressedPartVertexTopoPair = 72,
        DISPID_ContactRegionFlipSourceTargetSurfaces = 73,
        DISPID_ContactRegionUpdateContactStiffness = 74,
        DISPID_ContactRegionPenetrationTolerance = 75,
        DISPID_ContactRegionUseAutoPenetrationTolerance = 76,
        DISPID_ContactRegionTrimContact = 77,
        DISPID_ContactRegionAddCommandEditor = 78,
        DISPID_ContactRegionGeometryDefineBy = 79,
        DISPID_ContactRegionSourceComponentSelection = 80,
        DISPID_ContactRegionTargetComponentSelection = 81,
        DISPID_ContactRegionAddToSourceGeometry = 82,
        DISPID_ContactRegionAddToTargetGeometry = 83,
        DISPID_ContactRegionResetDefaults = 84,
        DISPID_ContactRegionGetUnsuppressedPartEdgeTopoPair = 85,
        DISPID_ContactRegionSaveXML = 86,
        DISPID_ContactRegionLoadXML = 87,
        DISPID_ContactCommandEditors = 88,
        DISPID_ContactRegionImages = 89,
        DISPID_ContactRegionAddImage = 90,
        DISPID_ContactRegionUnitTypeByDispid = 91,
        DISPID_ContactRegionUnitStringByDispid = 92,
        DISPID_ContactRegionTimeStepControl = 93,
        DISPID_ContactRegionParamNameByDispid = 94,
        DISPID_ContactRegionUseAutoElectricConductance = 95,
        DISPID_ContactRegionElectricConductance = 96,
        DISPID_ContactRegionContactShellFaceEnum = 97,
        DISPID_ContactRegionTargetShellFaceEnum = 98,
        DISPID_ContactRegionBondedMaximumOffset = 99,
        DISPID_ContactRegionBondedBreakable = 100,
        DISPID_ContactRegionNormalForceLimit = 101,
        DISPID_ContactRegionNormalForceExponent = 102,
        DISPID_ContactRegionShearForceLimit = 103,
        DISPID_ContactRegionShearForceExponent = 104,
        DISPID_ContactRegionNormalStressLimit = 105,
        DISPID_ContactRegionNormalStressExponent = 106,
        DISPID_ContactRegionShearStressLimit = 107,
        DISPID_ContactRegionShearStressExponent = 108,
        DISPID_ContactRegionStaticFrictionCoefficient = 109,
        DISPID_ContactRegionDynamicFrictionCoefficient = 110,
        DISPID_ContactRegionDecayFrictionConstant = 111,
        DISPID_ContactRegionRestitutionFactor = 112,
        DISPID_ContactRegionConstraintType = 113,
        DISPID_ContactRegionBondEffectiveDiameter = 114,
        DISPID_ContactRegionIsEdgeToEdge = 117,
        DISPID_ContactRegionIsFaceToEdge = 118,
        DISPID_ContactRegionObjectsShareGeomsList = 119,
        DISPID_ContactRegionDampingFactor = 120,
        DISPID_ContactRegionDetectionMethod = 121,
        DISPID_ContactRegionUseAutoElasticSlipTol = 122,
        DISPID_ContactRegionElasticSlipTolerance = 123,
        DISPID_ContactRegionTrimTolerance = 124,
        DISPID_ContactRegionPenetrationToleranceFactor = 125,
        DISPID_ContactRegionElasticSlipToleranceFactor = 126,
        DISPID_ContactRegionContactCorrection = 127,
        DISPID_ContactRegionBoltDiameter = 128,
        DISPID_ContactRegionBoltPitch = 129,
        DISPID_ContactRegionBoltAngle = 130,
        DISPID_ContactRegionBoltThreadType = 131,
        DISPID_ContactRegionBoltThreadHand = 132,
        DISPID_ContactRegionContactOrientation = 133,
        DISPID_ContactRegionContactStartingPoint = 134,
        DISPID_ContactRegionContactEndingPoint = 135,
        DISPID_ContactRegionContactCenterPoint = 136,
        DISPID_ContactRegionTargetCorrection = 137,
        DISPID_ContactRegionTargetOrientation = 138,
        DISPID_ContactRegionTargetStartingPoint = 139,
        DISPID_ContactRegionTargetEndingPoint = 140,
        DISPID_ContactRegionTargetCenterPoint = 141,
        DISPID_ContactRegionPregeneratedInterface = 142,
        DISPID_ContactRegionNumEdges = 143,
        DISPID_ContactRegionBeamMaterialName = 144,
        DISPID_ContactRegionBeamEDAMaterialTransferId = 145,
        DISPID_ContactRegionBeamRadius = 146,
        DISPID_ContactRegionGetDistanceWithoutUnitConversion = 148,
        DISPID_ContactRegionSetDistanceWithoutUnitConversion = 149,
        DISPID_ContactRegionRBDContactDetection = 150
    } kDispId_ContactRegion;

    [
      odl,
      uuid(D240D1EE-A57F-4C74-975E-9B61D27531D0),
      helpstring("IDSContactRegionAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSContactRegionAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x0000000a), propget, helpstring("property Prototypes")]
        HRESULT Prototypes([out, retval] VARIANT* pVal);
        [id(0x0000000b), propget, helpstring("property NodeCountForSide1")]
        HRESULT NodeCountForSide1(
                        int partIndex, 
                        [out, retval] VARIANT* pVal);
        [id(0x0000000c), propget, helpstring("property NodeForSide1")]
        HRESULT NodeForSide1(
                        int partIndex, 
                        int index, 
                        [out, retval] VARIANT* pVal);
        [id(0x0000000d), propget, helpstring("property NodeCountForSide2")]
        HRESULT NodeCountForSide2(
                        int partIndex, 
                        [out, retval] VARIANT* pVal);
        [id(0x0000000e), propget, helpstring("property NodeForSide2")]
        HRESULT NodeForSide2(
                        int partIndex, 
                        int index, 
                        [out, retval] VARIANT* pVal);
        [id(0x0000000f), propget, helpstring("property NodeForPart")]
        HRESULT NodeForPart(
                        int partIndex, 
                        int index, 
                        [out, retval] VARIANT* pVal);
        [id(0x00000010), propget, helpstring("property NodeCountForPart")]
        HRESULT NodeCountForPart(
                        int partIndex, 
                        [out, retval] VARIANT* pVal);
        [id(0x0000004f), propget, helpstring("property GeometryDefineBy")]
        HRESULT GeometryDefineBy([out, retval] DSGeometryDefineByType* pVal);
        [id(0x0000004f), propput, helpstring("property GeometryDefineBy")]
        HRESULT GeometryDefineBy([in] DSGeometryDefineByType pVal);
        [id(0x00000050), propget, helpstring("property SourceComponentSelection")]
        HRESULT SourceComponentSelection([out, retval] int* pVal);
        [id(0x00000050), propput, helpstring("property SourceComponentSelection")]
        HRESULT SourceComponentSelection([in] int pVal);
        [id(0x00000051), propget, helpstring("property TargetComponentSelection")]
        HRESULT TargetComponentSelection([out, retval] int* pVal);
        [id(0x00000051), propput, helpstring("property TargetComponentSelection")]
        HRESULT TargetComponentSelection([in] int pVal);
        [id(0x00000011), propput, helpstring("property SourceGeometry")]
        HRESULT SourceGeometry([in] IDispatch* rhs);
        [id(0x00000012), propput, helpstring("property TargetGeometry")]
        HRESULT TargetGeometry([in] IDispatch* rhs);
        [id(0x00000013), propget, helpstring("property ContactType")]
        HRESULT ContactType([out, retval] DSContactType* pVal);
        [id(0x00000013), propput, helpstring("property ContactType")]
        HRESULT ContactType([in] DSContactType pVal);
        [id(0x00000017), propget, helpstring("property FrictionCoeff")]
        HRESULT FrictionCoeff([out, retval] double* pVal);
        [id(0x00000017), propput, helpstring("property FrictionCoeff")]
        HRESULT FrictionCoeff([in] double pVal);
        [id(0x00000014), propget, helpstring("property Mode")]
        HRESULT Mode([out, retval] DSAutoOrMan* pVal);
        [id(0x00000014), propput, helpstring("property Mode")]
        HRESULT Mode([in] DSAutoOrMan pVal);
        [id(0x00000021), propget, helpstring("property SymmetricContact")]
        HRESULT SymmetricContact([out, retval] DSContactBehavior* pVal);
        [id(0x00000021), propput, helpstring("property SymmetricContact")]
        HRESULT SymmetricContact([in] DSContactBehavior pVal);
        [id(0x0000004d), propget, helpstring("property TrimContact")]
        HRESULT TrimContact([out, retval] DSContactTrimContactType* pVal);
        [id(0x0000004d), propput, helpstring("property TrimContact")]
        HRESULT TrimContact([in] DSContactTrimContactType pVal);
        [id(0x00000015), propget, helpstring("property NumSource")]
        HRESULT NumSource([out, retval] int* pVal);
        [id(0x00000016), propget, helpstring("property NumTarget")]
        HRESULT NumTarget([out, retval] int* pVal);
        [id(0x0000001b), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x00000018), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x00000019), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x0000001c), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x0000001a), propget, helpstring("property AttachedNodes")]
        HRESULT AttachedNodes([out, retval] IDispatch** pDisp);
        [id(0x0000001d), propget, helpstring("property SourceName")]
        HRESULT SourceName([out, retval] BSTR* pVal);
        [id(0x0000001e), propget, helpstring("property TargetName")]
        HRESULT TargetName([out, retval] BSTR* pVal);
        [id(0x0000001f), propget, helpstring("property Suppressed")]
        HRESULT Suppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000001f), propput, helpstring("property Suppressed")]
        HRESULT Suppressed([in] VARIANT_BOOL pVal);
        [id(0x00000023), propget, helpstring("property ContactFormulation")]
        HRESULT ContactFormulation([out, retval] DSContactFormulation* pVal);
        [id(0x00000023), propput, helpstring("property ContactFormulation")]
        HRESULT ContactFormulation([in] DSContactFormulation pVal);
        [id(0x0000004c), propget, helpstring("property UseAutoPenetrationTolerance")]
        HRESULT UseAutoPenetrationTolerance([out, retval] DSContactPenetrationToleranceType* pVal);
        [id(0x0000004c), propput, helpstring("property UseAutoPenetrationTolerance")]
        HRESULT UseAutoPenetrationTolerance([in] DSContactPenetrationToleranceType pVal);
        [id(0x0000004b), propget, helpstring("property PenetrationTolerance")]
        HRESULT PenetrationTolerance([out, retval] double* pVal);
        [id(0x0000004b), propput, helpstring("property PenetrationTolerance")]
        HRESULT PenetrationTolerance([in] double pVal);
        [id(0x00000024), propget, helpstring("property InitialEffect")]
        HRESULT InitialEffect([out, retval] DSContactInitialEffect* pVal);
        [id(0x00000024), propput, helpstring("property InitialEffect")]
        HRESULT InitialEffect([in] DSContactInitialEffect pVal);
        [id(0x00000025), propget, helpstring("property UserOffset")]
        HRESULT UserOffset([out, retval] double* pVal);
        [id(0x00000025), propput, helpstring("property UserOffset")]
        HRESULT UserOffset([in] double pVal);
        [id(0x00000022), propget, helpstring("property UseAutoNormalStiffness")]
        HRESULT UseAutoNormalStiffness([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000022), propput, helpstring("property UseAutoNormalStiffness")]
        HRESULT UseAutoNormalStiffness([in] VARIANT_BOOL pVal);
        [id(0x00000020), propget, helpstring("property NormalStiffness")]
        HRESULT NormalStiffness([out, retval] double* pVal);
        [id(0x00000020), propput, helpstring("property NormalStiffness")]
        HRESULT NormalStiffness([in] double pVal);
        [id(0x0000004a), propget, helpstring("property UpdateContactStiffness")]
        HRESULT UpdateContactStiffness([out, retval] DSUpdateContactStiffness* pVal);
        [id(0x0000004a), propput, helpstring("property UpdateContactStiffness")]
        HRESULT UpdateContactStiffness([in] DSUpdateContactStiffness pVal);
        [id(0x00000026), propget, helpstring("property UseAutoThermalConductance")]
        HRESULT UseAutoThermalConductance([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000026), propput, helpstring("property UseAutoThermalConductance")]
        HRESULT UseAutoThermalConductance([in] VARIANT_BOOL pVal);
        [id(0x00000027), propget, helpstring("property ThermalConductance")]
        HRESULT ThermalConductance([out, retval] double* pVal);
        [id(0x00000027), propput, helpstring("property ThermalConductance")]
        HRESULT ThermalConductance([in] double pVal);
        [id(0x00000028), propget, helpstring("property PinballType")]
        HRESULT PinballType([out, retval] DSContactPinballType* pVal);
        [id(0x00000028), propput, helpstring("property PinballType")]
        HRESULT PinballType([in] DSContactPinballType pVal);
        [id(0x00000029), propget, helpstring("property PinballFactor")]
        HRESULT PinballFactor([out, retval] double* pVal);
        [id(0x00000029), propput, helpstring("property PinballFactor")]
        HRESULT PinballFactor([in] double pVal);
        [id(0x0000002a), propget, helpstring("property PinballRadius")]
        HRESULT PinballRadius([out, retval] double* pVal);
        [id(0x0000002a), propput, helpstring("property PinballRadius")]
        HRESULT PinballRadius([in] double pVal);
        [id(0x0000002d), propget, helpstring("property SourceGeometryType")]
        HRESULT SourceGeometryType([out, retval] DSScopingType* pVal);
        [id(0x0000002e), propget, helpstring("property TargetGeometryType")]
        HRESULT TargetGeometryType([out, retval] DSScopingType* pVal);
        [id(0x0000002f), propget, helpstring("property ExpandEdgesAsFaces")]
        HRESULT ExpandEdgesAsFaces([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000002f), propput, helpstring("property ExpandEdgesAsFaces")]
        HRESULT ExpandEdgesAsFaces([in] VARIANT_BOOL pVal);
        [id(0x00000040), propget, helpstring("property SearchDirection")]
        HRESULT SearchDirection([out, retval] DSContactSearchDirection* pVal);
        [id(0x00000040), propput, helpstring("property SearchDirection")]
        HRESULT SearchDirection([in] DSContactSearchDirection pVal);
        [id(0x00000041), propget, helpstring("property SourceGeometryScopeType")]
        HRESULT SourceGeometryScopeType([out, retval] unsigned int* pVal);
        [id(0x00000042), propget, helpstring("property TargetGeometryScopeType")]
        HRESULT TargetGeometryScopeType([out, retval] unsigned int* pVal);
        [id(0x00000043), propget, helpstring("property SuppressedForSolve")]
        HRESULT SuppressedForSolve([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000044), propget, helpstring("property PrototypesForSubset")]
        HRESULT PrototypesForSubset(
                        [in] int subset, 
                        [out, retval] VARIANT* pVal);
        [id(0x00000045), propget, helpstring("property NumFaces")]
        HRESULT NumFaces([out, retval] int* pVal);
        [id(0x0000008f), propget, helpstring("property NumEdges")]
        HRESULT NumEdges([out, retval] int* pVal);
        [id(0x00000046), propget, helpstring("property NumVertices")]
        HRESULT NumVertices([out, retval] int* pVal);
        [id(0x00000047), helpstring("method GetUnsuppressedPartFaceTopoPair")]
        HRESULT GetUnsuppressedPartFaceTopoPair(
                        [in] int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00000055), helpstring("method GetUnsuppressedPartEdgeTopoPair")]
        HRESULT GetUnsuppressedPartEdgeTopoPair(
                        [in] int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00000048), helpstring("method GetUnsuppressedPartVertexTopoPair")]
        HRESULT GetUnsuppressedPartVertexTopoPair(
                        [in] int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00000049), helpstring("method FlipSourceTargetSurfaces")]
        HRESULT FlipSourceTargetSurfaces();
        [id(0x0000004e), helpstring("method AddCommandEditor")]
        HRESULT AddCommandEditor([out, retval] IDispatch** ppVal);
        [id(0x00000052), helpstring("method AddToSourceGeometry")]
        HRESULT AddToSourceGeometry(
                        [in] unsigned int partId, 
                        [in] unsigned int topoId);
        [id(0x00000053), helpstring("method AddToTargetGeometry")]
        HRESULT AddToTargetGeometry(
                        [in] unsigned int partId, 
                        [in] unsigned int topoId);
        [id(0x00000054), helpstring("method ResetDefaults")]
        HRESULT ResetDefaults();
        [id(0x00000056), helpstring("method SaveXML")]
        HRESULT SaveXML([in] BSTR url);
        [id(0x00000057), helpstring("method LoadXML")]
        HRESULT LoadXML([in] BSTR url);
        [id(0x00000058), propget, helpstring("property CommandEditors")]
        HRESULT CommandEditors([out, retval] IDispatch** ppDisp);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** __MIDL__IDSContactRegionAuto0000);
        [id(0x00000059), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x0000005a), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x0000005b), propget, helpstring("property UnitTypeByDispid")]
        HRESULT UnitTypeByDispid(
                        [in] int dispid, 
                        [out, retval] int* unitType);
        [id(0x0000005c), propget, helpstring("property UnitStringByDispid")]
        HRESULT UnitStringByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* unitString);
        [id(0x0000005d), propget, helpstring("property TimeStepControl")]
        HRESULT TimeStepControl([out, retval] DSContactTimeStepControl* pVal);
        [id(0x0000005d), propput, helpstring("property TimeStepControl")]
        HRESULT TimeStepControl([in] DSContactTimeStepControl pVal);
        [id(0x0000005e), propget, helpstring("property ParamNameByDispid")]
        HRESULT ParamNameByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* paramName);
        [id(0x0000005f), propget, helpstring("property UseAutoElectricConductance")]
        HRESULT UseAutoElectricConductance([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000005f), propput, helpstring("property UseAutoElectricConductance")]
        HRESULT UseAutoElectricConductance([in] VARIANT_BOOL pVal);
        [id(0x00000060), propget, helpstring("property ElectricConductance")]
        HRESULT ElectricConductance([out, retval] double* pVal);
        [id(0x00000060), propput, helpstring("property ElectricConductance")]
        HRESULT ElectricConductance([in] double pVal);
        [id(0x00000061), propget, helpstring("method ContactShellFaceEnum")]
        HRESULT ContactShellFaceEnum([out, retval] DSShellFaceEnum* pShellFace);
        [id(0x00000061), propput, helpstring("method ContactShellFaceEnum")]
        HRESULT ContactShellFaceEnum([in] DSShellFaceEnum pShellFace);
        [id(0x00000062), propget, helpstring("method TargetShellFaceEnum")]
        HRESULT TargetShellFaceEnum([out, retval] DSShellFaceEnum* pShellFace);
        [id(0x00000062), propput, helpstring("method TargetShellFaceEnum")]
        HRESULT TargetShellFaceEnum([in] DSShellFaceEnum pShellFace);
        [id(0x00000063), propget, helpstring("property BondedMaximumOffset")]
        HRESULT BondedMaximumOffset([out, retval] double* pVal);
        [id(0x00000063), propput, helpstring("property BondedMaximumOffset")]
        HRESULT BondedMaximumOffset([in] double pVal);
        [id(0x00000064), propget, helpstring("property BondedBreakable")]
        HRESULT BondedBreakable([out, retval] DSBondedBreakable* pVal);
        [id(0x00000064), propput, helpstring("property BondedBreakable")]
        HRESULT BondedBreakable([in] DSBondedBreakable pVal);
        [id(0x00000065), propget, helpstring("property NormalForceLimit")]
        HRESULT NormalForceLimit([out, retval] double* pVal);
        [id(0x00000065), propput, helpstring("property NormalForceLimit")]
        HRESULT NormalForceLimit([in] double pVal);
        [id(0x00000066), propget, helpstring("property NormalForceExponent")]
        HRESULT NormalForceExponent([out, retval] double* pVal);
        [id(0x00000066), propput, helpstring("property NormalForceExponent")]
        HRESULT NormalForceExponent([in] double pVal);
        [id(0x00000067), propget, helpstring("property ShearForceLimit")]
        HRESULT ShearForceLimit([out, retval] double* pVal);
        [id(0x00000067), propput, helpstring("property ShearForceLimit")]
        HRESULT ShearForceLimit([in] double pVal);
        [id(0x00000068), propget, helpstring("property ShearForceExponent")]
        HRESULT ShearForceExponent([out, retval] double* pVal);
        [id(0x00000068), propput, helpstring("property ShearForceExponent")]
        HRESULT ShearForceExponent([in] double pVal);
        [id(0x00000069), propget, helpstring("property NormalStressLimit")]
        HRESULT NormalStressLimit([out, retval] double* pVal);
        [id(0x00000069), propput, helpstring("property NormalStressLimit")]
        HRESULT NormalStressLimit([in] double pVal);
        [id(0x0000006a), propget, helpstring("property NormalStressExponent")]
        HRESULT NormalStressExponent([out, retval] double* pVal);
        [id(0x0000006a), propput, helpstring("property NormalStressExponent")]
        HRESULT NormalStressExponent([in] double pVal);
        [id(0x0000006b), propget, helpstring("property ShearStressLimit")]
        HRESULT ShearStressLimit([out, retval] double* pVal);
        [id(0x0000006b), propput, helpstring("property ShearStressLimit")]
        HRESULT ShearStressLimit([in] double pVal);
        [id(0x0000006c), propget, helpstring("property ShearStressExponent")]
        HRESULT ShearStressExponent([out, retval] double* pVal);
        [id(0x0000006c), propput, helpstring("property ShearStressExponent")]
        HRESULT ShearStressExponent([in] double pVal);
        [id(0x0000006d), propget, helpstring("property StaticFrictionCoefficient")]
        HRESULT StaticFrictionCoefficient([out, retval] double* pVal);
        [id(0x0000006d), propput, helpstring("property StaticFrictionCoefficient")]
        HRESULT StaticFrictionCoefficient([in] double pVal);
        [id(0x0000006e), propget, helpstring("property DynamicFrictionCoefficient")]
        HRESULT DynamicFrictionCoefficient([out, retval] double* pVal);
        [id(0x0000006e), propput, helpstring("property DynamicFrictionCoefficient")]
        HRESULT DynamicFrictionCoefficient([in] double pVal);
        [id(0x0000006f), propget, helpstring("property DecayFrictionConstant")]
        HRESULT DecayFrictionConstant([out, retval] double* pVal);
        [id(0x0000006f), propput, helpstring("property DecayFrictionConstant")]
        HRESULT DecayFrictionConstant([in] double pVal);
        [id(0x00000070), propget, helpstring("property RestitutionFactor")]
        HRESULT RestitutionFactor([out, retval] double* pVal);
        [id(0x00000070), propput, helpstring("property RestitutionFactor")]
        HRESULT RestitutionFactor([in] double pVal);
        [id(0x00000071), propget, helpstring("property ConstraintType")]
        HRESULT ConstraintType([out, retval] DSContactConstraintType* pVal);
        [id(0x00000071), propput, helpstring("property ConstraintType")]
        HRESULT ConstraintType([in] DSContactConstraintType pVal);
        [id(0x00000072), propget, helpstring("property BondEffectiveDiameter")]
        HRESULT BondEffectiveDiameter([out, retval] double* pVal);
        [id(0x00000072), propput, helpstring("property BondEffectiveDiameter")]
        HRESULT BondEffectiveDiameter([in] double pVal);
        [id(0x00000075), propget, helpstring("method IsEdgeToEdge")]
        HRESULT IsEdgeToEdge([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000076), propget, helpstring("method IsFaceToEdge")]
        HRESULT IsFaceToEdge([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000077), propget, helpstring("method ObjectsShareGeometriesList")]
        HRESULT ObjectsShareGeometriesList([out, retval] VARIANT* pVal);
        [id(0x0000002b), propget, helpstring("property AutoDetectionValue")]
        HRESULT AutoDetectionValue([out, retval] double* pVal);
        [id(0x00000078), propget, helpstring("property DampingFactor")]
        HRESULT DampingFactor([out, retval] double* pVal);
        [id(0x00000078), propput, helpstring("property DampingFactor")]
        HRESULT DampingFactor([in] double pVal);
        [id(0x00000079), propget, helpstring("property DetectionMethod")]
        HRESULT DetectionMethod([out, retval] DSContactDetectionPoint* pVal);
        [id(0x00000079), propput, helpstring("property DetectionMethod")]
        HRESULT DetectionMethod([in] DSContactDetectionPoint pVal);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x0000007a), propget, helpstring("property UseAutoElasticSlipTolerance")]
        HRESULT UseAutoElasticSlipTolerance([out, retval] DSContactElasticSlipToleranceType* pVal);
        [id(0x0000007a), propput, helpstring("property UseAutoElasticSlipTolerance")]
        HRESULT UseAutoElasticSlipTolerance([in] DSContactElasticSlipToleranceType pVal);
        [id(0x0000007b), propget, helpstring("property ElasticSlipTolerance")]
        HRESULT ElasticSlipTolerance([out, retval] double* pVal);
        [id(0x0000007b), propput, helpstring("property ElasticSlipTolerance")]
        HRESULT ElasticSlipTolerance([in] double pVal);
        [id(0x0000002c), propget, helpstring("property ShellThicknessEffect")]
        HRESULT ShellThicknessEffect([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000002c), propput, helpstring("property ShellThicknessEffect")]
        HRESULT ShellThicknessEffect([in] VARIANT_BOOL pVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x0000007c), propget, helpstring("property TrimTolerance")]
        HRESULT TrimTolerance([out, retval] double* pVal);
        [id(0x0000007c), propput, helpstring("property TrimTolerance")]
        HRESULT TrimTolerance([in] double pVal);
        [id(0x0000007d), propget, helpstring("property PenetrationToleranceFactor")]
        HRESULT PenetrationToleranceFactor([out, retval] double* pVal);
        [id(0x0000007d), propput, helpstring("property PenetrationToleranceFactor")]
        HRESULT PenetrationToleranceFactor([in] double pVal);
        [id(0x0000007e), propget, helpstring("property ElasticSlipToleranceFactor")]
        HRESULT ElasticSlipToleranceFactor([out, retval] double* pVal);
        [id(0x0000007e), propput, helpstring("property ElasticSlipToleranceFactor")]
        HRESULT ElasticSlipToleranceFactor([in] double pVal);
        [id(0x0000007f), propget, helpstring("property ContactCorrection")]
        HRESULT ContactCorrection([out, retval] DSContactCorrection* pVal);
        [id(0x0000007f), propput, helpstring("property ContactCorrection")]
        HRESULT ContactCorrection([in] DSContactCorrection pVal);
        [id(0x00000080), propget, helpstring("property BoltDiameter")]
        HRESULT BoltDiameter([out, retval] double* pVal);
        [id(0x00000080), propput, helpstring("property BoltDiameter")]
        HRESULT BoltDiameter([in] double pVal);
        [id(0x00000081), propget, helpstring("property BoltPitch")]
        HRESULT BoltPitch([out, retval] double* pVal);
        [id(0x00000081), propput, helpstring("property BoltPitch")]
        HRESULT BoltPitch([in] double pVal);
        [id(0x00000082), propget, helpstring("property BoltAngle")]
        HRESULT BoltAngle([out, retval] double* pVal);
        [id(0x00000082), propput, helpstring("property BoltAngle")]
        HRESULT BoltAngle([in] double pVal);
        [id(0x00000083), propget, helpstring("property BoltThreadType")]
        HRESULT BoltThreadType([out, retval] DSContactBoltThreadType* pVal);
        [id(0x00000083), propput, helpstring("property BoltThreadType")]
        HRESULT BoltThreadType([in] DSContactBoltThreadType pVal);
        [id(0x00000084), propget, helpstring("property BoltThreadHand")]
        HRESULT BoltThreadHand([out, retval] DSContactBoltThreadHand* pVal);
        [id(0x00000084), propput, helpstring("property BoltThreadHand")]
        HRESULT BoltThreadHand([in] DSContactBoltThreadHand pVal);
        [id(0x00000085), propget, helpstring("property ContactOrientation")]
        HRESULT ContactOrientation([out, retval] DSContactOrientation* pVal);
        [id(0x00000085), propput, helpstring("property ContactOrientation")]
        HRESULT ContactOrientation([in] DSContactOrientation pVal);
        [id(0x00000086), propget, helpstring("property ContactStartingPoint")]
        HRESULT ContactStartingPoint([out, retval] int* pVal);
        [id(0x00000086), propput, helpstring("property ContactStartingPoint")]
        HRESULT ContactStartingPoint([in] int pVal);
        [id(0x00000087), propget, helpstring("property ContactEndingPoint")]
        HRESULT ContactEndingPoint([out, retval] int* pVal);
        [id(0x00000087), propput, helpstring("property ContactEndingPoint")]
        HRESULT ContactEndingPoint([in] int pVal);
        [id(0x00000088), propget, helpstring("property ContactCenterPoint")]
        HRESULT ContactCenterPoint([out, retval] int* pVal);
        [id(0x00000088), propput, helpstring("property ContactCenterPoint")]
        HRESULT ContactCenterPoint([in] int pVal);
        [id(0x00000089), propget, helpstring("property TargetCorrection")]
        HRESULT TargetCorrection([out, retval] DSTargetCorrection* pVal);
        [id(0x00000089), propput, helpstring("property TargetCorrection")]
        HRESULT TargetCorrection([in] DSTargetCorrection pVal);
        [id(0x0000008a), propget, helpstring("property TargetOrientation")]
        HRESULT TargetOrientation([out, retval] DSTargetOrientation* pVal);
        [id(0x0000008a), propput, helpstring("property TargetOrientation")]
        HRESULT TargetOrientation([in] DSTargetOrientation pVal);
        [id(0x0000008b), propget, helpstring("property TargetStartingPoint")]
        HRESULT TargetStartingPoint([out, retval] int* pVal);
        [id(0x0000008b), propput, helpstring("property TargetStartingPoint")]
        HRESULT TargetStartingPoint([in] int pVal);
        [id(0x0000008c), propget, helpstring("property TargetEndingPoint")]
        HRESULT TargetEndingPoint([out, retval] int* pVal);
        [id(0x0000008c), propput, helpstring("property TargetEndingPoint")]
        HRESULT TargetEndingPoint([in] int pVal);
        [id(0x0000008d), propget, helpstring("property TargetCenterPoint")]
        HRESULT TargetCenterPoint([out, retval] int* pVal);
        [id(0x0000008d), propput, helpstring("property TargetCenterPoint")]
        HRESULT TargetCenterPoint([in] int pVal);
        [id(0x0000008e), propget, helpstring("property PregeneratedInterface")]
        HRESULT PregeneratedInterface([out, retval] BSTR* pbsVal);
        [id(0x0000008e), propput, helpstring("property PregeneratedInterface")]
        HRESULT PregeneratedInterface([in] BSTR pbsVal);
        [id(0x00000090), propget, helpstring("property BeamMaterialName")]
        HRESULT BeamMaterialName([out, retval] BSTR* pVal);
        [id(0x00000090), propput, helpstring("property BeamMaterialName")]
        HRESULT BeamMaterialName([in] BSTR pVal);
        [id(0x00000092), propget, helpstring("property BeamRadius")]
        HRESULT BeamRadius([out, retval] double* dVal);
        [id(0x00000092), propput, helpstring("property BeamRadius")]
        HRESULT BeamRadius([in] double dVal);
        [id(0x00000094), helpstring("property GetDistanceWithoutUnitConversion")]
        HRESULT GetDistanceWithoutUnitConversion([out, retval] double* pVal);
        [id(0x00000095), helpstring("property SetDistanceWithoutUnitConversion")]
        HRESULT SetDistanceWithoutUnitConversion([in] double newVal);
        [id(0x00000096), propget, helpstring("property RBDContactDetection")]
        HRESULT RBDContactDetection([out, retval] DSRBDContactDetection* pVal);
        [id(0x00000096), propput, helpstring("property RBDContactDetection")]
        HRESULT RBDContactDetection([in] DSRBDContactDetection pVal);
    };

    typedef enum {
        ASYMMETRIC = 0,
        SYMMETRIC = 1,
        AUTOASYMMETRIC = 2,
        PROGRAM_CONTROLLED = 3
    } DSContactBehavior;

    typedef enum {
        kTRIM_CONTACT_PROGRAM_CHOOSES = 0,
        kTRIM_CONTACT_ON = 1,
        kTRIM_CONTACT_OFF = 2,
        kTRIM_CONTACT_AGGRESSIVE = 3
    } DSContactTrimContactType;

    typedef enum {
        cfAUGMENTED_LAGRANGE = 0,
        cfPURE_PENALTY = 1,
        cfMPC = 2,
        cfLAGRANGE = 3,
        cfBEAM = 4,
        cfPURE_LAGRANGE = 5,
        cfPROGRAM_CONTROLLED = 6
    } DSContactFormulation;

    typedef enum {
        kPENETRATION_TOLERANCE_PROGRAM_CHOOSES = 0,
        kPENETRATION_TOLERANCE_VALUE = 1,
        kPENETRATION_TOLERANCE_FACTOR = 2
    } DSContactPenetrationToleranceType;

    typedef enum {
        cifINCLUDE_GAP_PENE_OFFSET_RAMPED = 0,
        cifINCLUDE_NONE = 1,
        cifINCLUDE_OFFSET = 2,
        cifINCLUDE_OFFSET_RAMPED = 3,
        cifINCLUDE_GAP_PENE_OFFSET_NO_RAMP = 4,
        cifINCLUDE_GAP_PENE_OFFSET = 5
    } DSContactInitialEffect;

    typedef enum {
        ucsNEVER = 0,
        ucsEACH_EQUILIBRIUM_ITERATION = 1,
        ucsEACH_SUBSTEP = 2,
        ucsEACH_EQUILIBRIUM_ITERATION_AGGRESSIVE = 3,
        ucsPROGRAM_CONTROLLED = 4
    } DSUpdateContactStiffness;

    typedef enum {
        kPROGRAM_CONTROLLED = 0,
        kPINBALL_RADIUS = 1,
        kPINBALL_FACTOR = 2,
        kPINBALL_AUTO_DETECTION_VALUE = 3
    } DSContactPinballType;

    typedef enum {
        kTargetNormal = 0,
        kInsidePinball = 1
    } DSContactSearchDirection;

    typedef enum {
        kNoPrediction = 0,
        kAutomaticBisection = 1,
        kPredictForImpact = 2,
        kUseImpactConstraints = 3
    } DSContactTimeStepControl;

    typedef enum {
        kTopShellFace = 0,
        kBottomShellFace = 1,
        kTopAndBottemShellFace = 2,
        kMiddleShellFace = 3,
        kBendingShellFace = 4,
        kProgramControlledShellFace = 5
    } DSShellFaceEnum;

    typedef enum {
        bbNO = 0,
        bbFORCE_CRITERIA = 1,
        bbSTRESS_CRITERIA = 2
    } DSBondedBreakable;

    typedef enum {
        kContactConstraintDistributedAllDirections = 0,
        kContactConstraintDistributedInsidePinball = 1,
        kContactConstraintProjectedUncoupleUtoROT = 2,
        kContactConstraintProgramControlled = 3,
        kContactConstraintProjectedDisplacementOnly = 4,
        kContactConstraintDistributedNormalOnly = 5
    } DSContactConstraintType;

    typedef enum {
        kDetactProgramControlled = 0,
        kDetactOnGaussPoint = 1,
        kDetactNodalNormalFromContact = 2,
        kDetactNodalNormalToTarget = 3,
        kDetactNodalProjectedNormalFromContact = 4
    } DSContactDetectionPoint;

    typedef enum {
        kELASTIC_SLIP_TOL_PROGRAM_CHOOSES = 0,
        kELASTIC_SLIP_TOL_VALUE = 1,
        kELASTIC_SLIP_TOL_FACTOR = 2
    } DSContactElasticSlipToleranceType;

    typedef enum {
        kCNoCorrection = 0,
        kCSmoothingCorrection = 1,
        kCBoltCorrection = 2
    } DSContactCorrection;

    typedef enum {
        kSingleThread = 0,
        kDoubleThread = 1,
        kTripleThread = 2
    } DSContactBoltThreadType;

    typedef enum {
        kRightHand = 0,
        kLeftHand = 1
    } DSContactBoltThreadHand;

    typedef enum {
        kCProgramControlledOrientation = 0,
        kCManualCircleOrientation = 1,
        kCManualSphereOrientation = 2,
        kCManualCylinderOrientation = 3
    } DSContactOrientation;

    typedef enum {
        kTNoCorrection = 0,
        kTSmoothingCorrection = 1
    } DSTargetCorrection;

    typedef enum {
        kTProgramControlledOrientation = 0,
        kTManualCircleOrientation = 1,
        kTManualSphereOrientation = 2,
        kTManualCylinderOrientation = 3
    } DSTargetOrientation;

    typedef enum {
        kCDProgramControlled = 0,
        kCDGeometryBased = 1,
        kCDMeshBased = 2
    } DSRBDContactDetection;

    typedef enum {
        DISPID_MeshConnectionGeometryDefineBy = 10,
        DISPID_MeshConnectionMasterComponentSelection = 11,
        DISPID_MeshConnectionSlaveComponentSelection = 12,
        DISPID_MeshConnectionMasterGeometry = 13,
        DISPID_MeshConnectionSlaveGeometry = 14,
        DISPID_MeshConnectionMasterName = 15,
        DISPID_MeshConnectionSlaveName = 16,
        DISPID_MeshConnectionMode = 17,
        DISPID_MeshConnectionSuppressed = 18,
        DISPID_MeshConnectionToleranceValue = 19,
        DISPID_MeshConnectionFlipMasterSlaveGeometries = 20,
        DISPID_MeshConnectionMasterGeometryType = 21,
        DISPID_MeshConnectionSlaveGeometryType = 22,
        DISPID_MeshConnectionPrototypes = 23,
        DISPID_MeshConnectionNumMaster = 24,
        DISPID_MeshConnectionNumSlave = 25,
        DISPID_MeshConnectionToleranceType = 26,
        DISPID_MeshConnectionDetectionTolerance = 27,
        DISPID_MeshConnectionThicknessScaleFactor = 28,
        DISPID_MeshConnectionMasterGeometryScopeType = 29,
        DISPID_MeshConnectionSlaveGeometryScopeType = 30,
        DISPID_MeshConnectionSuppressedForSolve = 31,
        DISPID_MeshConnectionlList = 40,
        DISPID_MeshConnectionMeshConnectionsShareMaster = 41,
        DISPID_MeshConnectionComment = 50,
        DISPID_MeshConnectionFigure = 51,
        DISPID_MeshConnectionImages = 52,
        DISPID_MeshConnectionAddComment = 53,
        DISPID_MeshConnectionAddFigure = 54,
        DISPID_MeshConnectionAddImage = 55,
        DISPID_MeshConnectionGetUnsuppressedPartFaceTopoPair = 56,
        DISPID_MeshConnectionGetUnsuppressedPartEdgeTopoPair = 57,
        DISPID_MeshConnectionAddToMasterGeometry = 58,
        DISPID_MeshConnectionAddToSlaveGeometry = 59,
        DISPID_MeshConnectionSearchMeshConsWithCommonMaster = 60,
        DISPID_MeshConnectionObjectsShareGeomsList = 61,
        DISPID_MeshConnectionSnapBoundary = 62,
        DISPID_MeshConnectionSnapDefinedBy = 63,
        DISPID_MeshConnectionSnapTolerance = 64,
        DISPID_MeshConnectionSnapESizeFactor = 65,
        DISPID_MeshConnectionForSubset = 66,
        DISPID_MeshConnectionGenerateConnection = 67,
        DISPID_MeshConnectionType = 68,
        DISPID_MeshConnectionMessageProperty = 69,
        DISPID_DisplayMeshConnectionControlMessages = 70,
        DISPID_MeshConnectionCanFlipMasterSlaveGeometries = 71,
        DISPID_MeshConnectionContactRegion = 72
    } kDispId_MeshConnection;

    [
      odl,
      uuid(E1EFCD55-72DA-4F58-9300-B91714880D00),
      helpstring("IDSMeshConnectionAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSMeshConnectionAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x0000000a), propget, helpstring("property GeometryDefineBy")]
        HRESULT GeometryDefineBy([out, retval] DSGeometryDefineByType* pVal);
        [id(0x0000000a), propput, helpstring("property GeometryDefineBy")]
        HRESULT GeometryDefineBy([in] DSGeometryDefineByType pVal);
        [id(0x0000000b), propget, helpstring("property MasterComponentSelection")]
        HRESULT MasterComponentSelection([out, retval] int* pVal);
        [id(0x0000000b), propput, helpstring("property MasterComponentSelection")]
        HRESULT MasterComponentSelection([in] int pVal);
        [id(0x0000000c), propget, helpstring("property SlaveComponentSelection")]
        HRESULT SlaveComponentSelection([out, retval] int* pVal);
        [id(0x0000000c), propput, helpstring("property SlaveComponentSelection")]
        HRESULT SlaveComponentSelection([in] int pVal);
        [id(0x0000000f), propget, helpstring("property MasterName")]
        HRESULT MasterName([out, retval] BSTR* pVal);
        [id(0x00000010), propget, helpstring("property SlaveName")]
        HRESULT SlaveName([out, retval] BSTR* pVal);
        [id(0x0000000d), propput, helpstring("property MasterGeometry")]
        HRESULT MasterGeometry([in] IDispatch* rhs);
        [id(0x0000000e), propput, helpstring("property SlaveGeometry")]
        HRESULT SlaveGeometry([in] IDispatch* rhs);
        [id(0x00000011), propget, helpstring("property Mode")]
        HRESULT Mode([out, retval] DSAutoOrMan* pVal);
        [id(0x00000011), propput, helpstring("property Mode")]
        HRESULT Mode([in] DSAutoOrMan pVal);
        [id(0x00000013), propget, helpstring("property ToleranceValue")]
        HRESULT ToleranceValue([out, retval] double* pVal);
        [id(0x00000013), propput, helpstring("property ToleranceValue")]
        HRESULT ToleranceValue([in] double pVal);
        [id(0x00000012), propget, helpstring("property Suppressed")]
        HRESULT Suppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000012), propput, helpstring("property Suppressed")]
        HRESULT Suppressed([in] VARIANT_BOOL pVal);
        [id(0x00000014), helpstring("method FlipMasterSlaveGeometries")]
        HRESULT FlipMasterSlaveGeometries();
        [id(0x00000015), propget, helpstring("property MasterGeometryType")]
        HRESULT MasterGeometryType([out, retval] DSScopingType* pVal);
        [id(0x00000016), propget, helpstring("property SlaveGeometryType")]
        HRESULT SlaveGeometryType([out, retval] DSScopingType* pVal);
        [id(0x00000017), propget, helpstring("property Prototypes")]
        HRESULT Prototypes([out, retval] VARIANT* pVal);
        [id(0x00000018), propget, helpstring("property NumMaster")]
        HRESULT NumMaster([out, retval] int* pVal);
        [id(0x00000019), propget, helpstring("property NumSlave")]
        HRESULT NumSlave([out, retval] int* pVal);
        [id(0x0000001d), propget, helpstring("property MasterGeometryScopeType")]
        HRESULT MasterGeometryScopeType([out, retval] unsigned int* pVal);
        [id(0x0000001e), propget, helpstring("property SlaveGeometryScopeType")]
        HRESULT SlaveGeometryScopeType([out, retval] unsigned int* pVal);
        [id(0x0000001f), propget, helpstring("property SuppressedForSolve")]
        HRESULT SuppressedForSolve([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000001a), propget, helpstring("property ToleranceType")]
        HRESULT ToleranceType([out, retval] DSContactToleranceType* pVal);
        [id(0x0000001a), propput, helpstring("property ToleranceType")]
        HRESULT ToleranceType([in] DSContactToleranceType pVal);
        [id(0x0000001b), propget, helpstring("property DetectionTolerance")]
        HRESULT DetectionTolerance([out, retval] int* pVal);
        [id(0x0000001b), propput, helpstring("property DetectionTolerance")]
        HRESULT DetectionTolerance([in] int pVal);
        [id(0x0000001c), propget, helpstring("property ThicknessScaleFactor")]
        HRESULT ThicknessScaleFactor([out, retval] double* pVal);
        [id(0x0000001c), propput, helpstring("property ThicknessScaleFactor")]
        HRESULT ThicknessScaleFactor([in] double pVal);
        [id(0x00000032), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x00000033), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x00000034), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000035), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x00000036), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x00000037), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00000038), helpstring("method GetUnsuppressedPartFaceTopoPair")]
        HRESULT GetUnsuppressedPartFaceTopoPair(
                        [in] int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00000039), helpstring("method GetUnsuppressedPartEdgeTopoPair")]
        HRESULT GetUnsuppressedPartEdgeTopoPair(
                        [in] int index, 
                        [out, retval] BSTR* pVal);
        [id(0x0000003a), helpstring("method AddToMasterGeometry")]
        HRESULT AddToMasterGeometry(
                        [in] unsigned int partId, 
                        [in] unsigned int topoId);
        [id(0x0000003b), helpstring("method AddToSlaveGeometry")]
        HRESULT AddToSlaveGeometry(
                        [in] unsigned int partId, 
                        [in] unsigned int topoId);
        [id(0x00000029), propget, helpstring("property MeshConnectionsShareMaster")]
        HRESULT MeshConnectionsShareMaster([out, retval] VARIANT* pVal);
        [id(0x0000003c), helpstring("method SearchMeshConnectionsWithCommonMaster")]
        HRESULT SearchMeshConnectionsWithCommonMaster();
        [id(0x0000003d), propget, helpstring("property ObjectsShareGeometriesList")]
        HRESULT ObjectsShareGeometriesList([out, retval] VARIANT* pVal);
        [id(0x0000003e), propget, helpstring("property SnapBoundary")]
        HRESULT SnapBoundary([out, retval] int* pVal);
        [id(0x0000003e), propput, helpstring("property SnapBoundary")]
        HRESULT SnapBoundary([in] int pVal);
        [id(0x0000003f), propget, helpstring("property SnapDefinedBy")]
        HRESULT SnapDefinedBy([out, retval] int* pVal);
        [id(0x0000003f), propput, helpstring("property SnapDefinedBy")]
        HRESULT SnapDefinedBy([in] int pVal);
        [id(0x00000040), propget, helpstring("property SnapTolerance")]
        HRESULT SnapTolerance([out, retval] double* pVal);
        [id(0x00000040), propput, helpstring("property SnapTolerance")]
        HRESULT SnapTolerance([in] double pVal);
        [id(0x00000041), propget, helpstring("property SnapESizeFactor")]
        HRESULT SnapESizeFactor([out, retval] double* pVal);
        [id(0x00000041), propput, helpstring("property SnapESizeFactor")]
        HRESULT SnapESizeFactor([in] double pVal);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x00000042), propget, helpstring("property PrototypesForSubset")]
        HRESULT PrototypesForSubset(
                        [in] int subset, 
                        [out, retval] VARIANT* pVal);
        [id(0x00000043), helpstring("method GenerateMeshConnections")]
        HRESULT GenerateMeshConnection(IAnsProgress* piProgress);
        [id(0x00000044), propget, helpstring("property MeshConnectionType")]
        HRESULT MeshConnectionType([out, retval] int* pVal);
        [id(0x00000044), propput, helpstring("property MeshConnectionType")]
        HRESULT MeshConnectionType([in] int pVal);
        [id(0x00000045), propget, helpstring("property ConnectionMessageProperty")]
        HRESULT ConnectionMessageProperty([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000046), helpstring("method DisplayMeshConnectionControlMessages")]
        HRESULT DisplayMeshConnectionControlMessages();
        [id(0x00000047), helpstring("method CanFlipMasterSlaveGeometries")]
        HRESULT CanFlipMasterSlaveGeometries([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000048), propget, helpstring("property ContactRegion")]
        HRESULT ContactRegion([out, retval] int* plVal);
        [id(0x00000048), propput, helpstring("property ContactRegion")]
        HRESULT ContactRegion([in] int plVal);
    };

    typedef enum {
        DISPID_BeamEndReleaseGeometryDefineBy = 10,
        DISPID_BeamEndReleaseEdgeGeometrySelection = 11,
        DISPID_BeamEndReleaseVertexGeometrySelection = 12,
        DISPID_BeamEndReleaseEdgeComponentSelection = 13,
        DISPID_BeamEndReleaseVertexComponentSelection = 14,
        DISPID_BeamEndReleaseCoordinateSystemSelection = 15,
        DISPID_BeamEndReleaseTranslationX = 16,
        DISPID_BeamEndReleaseTranslationY = 17,
        DISPID_BeamEndReleaseTranslationZ = 18,
        DISPID_BeamEndReleaseRotationX = 19,
        DISPID_BeamEndReleaseRotationY = 20,
        DISPID_BeamEndReleaseRotationZ = 21,
        DISPID_BeamEndReleaseConnectionBehavior = 22,
        DISPID_BeamEndReleaseSuppressed = 23,
        DISPID_BeamEndReleaseIndependentEdges = 24,
        DISPID_BeamEndReleaseNumEdges = 25,
        DISPID_BeamEndReleaseComment = 50,
        DISPID_BeamEndReleaseFigure = 51,
        DISPID_BeamEndReleaseImages = 52,
        DISPID_BeamEndReleaseAddComment = 53,
        DISPID_BeamEndReleaseAddFigure = 54,
        DISPID_BeamEndReleaseAddImage = 55
    } kDispId_BeamEndRelease;

    [
      odl,
      uuid(446AEF19-349D-46AF-82F8-EE3A6A3B5DA8),
      helpstring("IDSBeamEndReleaseAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSBeamEndReleaseAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x0000000a), propget, helpstring("property GeometryDefineBy")]
        HRESULT GeometryDefineBy([out, retval] DSGeometryDefineByType* pVal);
        [id(0x0000000a), propput, helpstring("property GeometryDefineBy")]
        HRESULT GeometryDefineBy([in] DSGeometryDefineByType pVal);
        [id(0x0000000b), propput, helpstring("property EdgeGeometrySelection")]
        HRESULT EdgeGeometrySelection([in] IDispatch* rhs);
        [id(0x0000000c), propput, helpstring("property VertexGeometrySelection")]
        HRESULT VertexGeometrySelection([in] IDispatch* rhs);
        [id(0x0000000d), propget, helpstring("property EdgeComponentSelection")]
        HRESULT EdgeComponentSelection([out, retval] int* pVal);
        [id(0x0000000d), propput, helpstring("property EdgeComponentSelection")]
        HRESULT EdgeComponentSelection([in] int pVal);
        [id(0x0000000e), propget, helpstring("property VertexComponentSelection")]
        HRESULT VertexComponentSelection([out, retval] int* pVal);
        [id(0x0000000e), propput, helpstring("property VertexComponentSelection")]
        HRESULT VertexComponentSelection([in] int pVal);
        [id(0x0000000f), propget, helpstring("property CoordinateSystemSelection")]
        HRESULT CoordinateSystemSelection([out, retval] dsid* pVal);
        [id(0x0000000f), propput, helpstring("property CoordinateSystemSelection")]
        HRESULT CoordinateSystemSelection([in] dsid pVal);
        [id(0x00000010), propget, helpstring("property TranslationX")]
        HRESULT TranslationX([out, retval] FixedOrFree* pVal);
        [id(0x00000010), propput, helpstring("property TranslationX")]
        HRESULT TranslationX([in] FixedOrFree pVal);
        [id(0x00000011), propget, helpstring("property TranslationY")]
        HRESULT TranslationY([out, retval] FixedOrFree* pVal);
        [id(0x00000011), propput, helpstring("property TranslationY")]
        HRESULT TranslationY([in] FixedOrFree pVal);
        [id(0x00000012), propget, helpstring("property TranslationZ")]
        HRESULT TranslationZ([out, retval] FixedOrFree* pVal);
        [id(0x00000012), propput, helpstring("property TranslationZ")]
        HRESULT TranslationZ([in] FixedOrFree pVal);
        [id(0x00000013), propget, helpstring("property RotationX")]
        HRESULT RotationX([out, retval] FixedOrFree* pVal);
        [id(0x00000013), propput, helpstring("property RotationX")]
        HRESULT RotationX([in] FixedOrFree pVal);
        [id(0x00000014), propget, helpstring("property RotationY")]
        HRESULT RotationY([out, retval] FixedOrFree* pVal);
        [id(0x00000014), propput, helpstring("property RotationY")]
        HRESULT RotationY([in] FixedOrFree pVal);
        [id(0x00000015), propget, helpstring("property RotationZ")]
        HRESULT RotationZ([out, retval] FixedOrFree* pVal);
        [id(0x00000015), propput, helpstring("property RotationZ")]
        HRESULT RotationZ([in] FixedOrFree pVal);
        [id(0x00000016), propget, helpstring("property ConnectionBehavior")]
        HRESULT ConnectionBehavior([out, retval] DSBeamEndReleaseBehavior* pVal);
        [id(0x00000016), propput, helpstring("property ConnectionBehavior")]
        HRESULT ConnectionBehavior([in] DSBeamEndReleaseBehavior pVal);
        [id(0x00000017), propget, helpstring("property Suppressed")]
        HRESULT Suppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000017), propput, helpstring("property Suppressed")]
        HRESULT Suppressed([in] VARIANT_BOOL pVal);
        [id(0x00000018), propget, helpstring("property IndependentEdges")]
        HRESULT IndependentEdges([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000018), propput, helpstring("property IndependentEdges")]
        HRESULT IndependentEdges([in] VARIANT_BOOL pVal);
        [id(0x00000019), propget, helpstring("property NumEdges")]
        HRESULT NumEdges([out, retval] int* NumberOfEntries);
        [id(0x00000032), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x00000033), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x00000034), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000035), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x00000036), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x00000037), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
    };

    typedef enum {
        kFixed = 0,
        kFree = 1,
        kMixedConstraints = 2
    } FixedOrFree;

    typedef enum {
        kBeamEndReleaseCoupled = 0,
        kBeamEndReleaseJoint = 1,
        kBeamEndReleaseCE = 2
    } DSBeamEndReleaseBehavior;

    typedef enum {
        DISPID_BoltToolAddComment = 10,
        DISPID_BoltToolAddResult = 11,
        DISPID_BoltToolAddFigure = 12,
        DISPID_BoltToolComment = 13,
        DISPID_BoltToolFigure = 14,
        DISPID_BoltToolResult = 15,
        DISPID_BoltToolResultChart = 16,
        DISPID_BoltToolAddResultChart = 17,
        DISPID_BoltToolResultTable = 18,
        DISPID_BoltToolAddResultTable = 19,
        DISPID_BoltToolScopingMethod = 20,
        DISPID_BoltToolGeometrySelection = 30,
        DISPID_BoltToolNumScopingBolts = 240,
        DISPID_BoltToolGetScopingBolt = 245,
        DISPID_BoltToolScopedBoltActive = 250,
        DISPID_BoltToolAddScopedBolt = 255,
        DISPID_BoltToolRemoveScopedBolt = 256,
        DISPID_BoltToolOperateOnSelection = 302,
        DISPID_BoltToolApplyDefaultScoping = 303,
        DISPID_BoltToolVerifyToolScoping = 304,
        DISPID_BoltToolOperateOnBoltList = 305,
        DISPID_BoltToolImages = 306,
        DISPID_BoltToolAddImage = 307
    } kDispId_BoltTool;

    [
      odl,
      uuid(5DB57520-5D55-47E2-A530-CBF725F534F2),
      helpstring("IDSBoltToolAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSBoltToolAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x0000000a), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x0000000b), helpstring("method AddResult")]
        HRESULT AddResult(
                        [in] IDispatch* piSelectMgr, 
                        [in] unsigned int resType, 
                        [out, retval] IDispatch** ppVal);
        [id(0x00000011), helpstring("method AddResultChart")]
        HRESULT AddResultChart(
                        [in] IDispatch* piSelectMgr, 
                        [in] unsigned int resType, 
                        [in] int responseType, 
                        [out, retval] IDispatch** ppVal);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x0000000c), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x0000000d), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x0000000e), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x0000000f), propget, helpstring("property Results")]
        HRESULT Results([out, retval] IDispatch** ppDisp);
        [id(0x00000010), propget, helpstring("property ResultCharts")]
        HRESULT ResultCharts([out, retval] IDispatch** ppDisp);
        [id(0x00000014), propput, helpstring("property ScopingMethod")]
        HRESULT ScopingMethod([in] DSGeometryDefineByType Method);
        [id(0x00000014), propget, helpstring("property ScopingMethod")]
        HRESULT ScopingMethod([out, retval] DSGeometryDefineByType* Method);
        [id(0x0000001e), propput, helpstring("property GeometrySelection")]
        HRESULT GeometrySelection([in] IDispatch* rhs);
        [id(0x00000012), propget, helpstring("property ResultTables")]
        HRESULT ResultTables([out, retval] IDispatch** ppDisp);
        [id(0x00000013), helpstring("method AddResultTable")]
        HRESULT AddResultTable(
                        [in] IDispatch* piSelectMgr, 
                        [in] unsigned int resTableType, 
                        [out, retval] IDispatch** ppVal);
        [id(0x000000f0), propget, helpstring("property NumScopingBolts")]
        HRESULT NumScopingBolts([out, retval] int* NumberOfEntries);
        [id(0x000000f5), helpstring("method GetScopingBolt")]
        HRESULT GetScopingBolt(
                        [in] int index, 
                        [out, retval] unsigned int* pValue);
        [id(0x000000fa), propget, helpstring("property ScopedBoltActive")]
        HRESULT ScopedBoltActive(
                        [in] unsigned int BoltId, 
                        [out, retval] VARIANT_BOOL* pVal);
        [id(0x000000fa), propput, helpstring("property ScopedBoltActive")]
        HRESULT ScopedBoltActive(
                        [in] unsigned int BoltId, 
                        [in] VARIANT_BOOL pVal);
        [id(0x000000ff), helpstring("method AddScopedBolt")]
        HRESULT AddScopedBolt([in] unsigned int BoltId);
        [id(0x00000100), helpstring("method RemoveScopedBolt")]
        HRESULT RemoveScopedBolt([in] unsigned int BoltId);
        [id(0x0000012e), helpstring("method OperateOnSelection")]
        HRESULT OperateOnSelection(
                        [in] IDispatch* pSelection, 
                        [in] DSToolScopingOperation Operation);
        [id(0x0000012f), helpstring("method ApplyDefaultScoping")]
        HRESULT ApplyDefaultScoping();
        [id(0x00000130), helpstring("method VerifyToolScoping")]
        HRESULT VerifyToolScoping();
        [id(0x00000131), helpstring("method OperateOnBoltList")]
        HRESULT OperateOnBoltList(
                        [in] BSTR BoltList, 
                        [in] DSToolScopingOperation Operation);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
        [id(0x00000132), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000133), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
    };

    typedef enum {
        kToolScopingOpUnknown = 0,
        kToolScopingOpAdd = 1,
        kToolScopingOpRemove = 2,
        kToolScopingOpActivate = 3,
        kToolScopingOpDeactivate = 4
    } DSToolScopingOperation;

    typedef enum {
        DISPID_ContactToolAddComment = 10,
        DISPID_ContactToolAddResult = 11,
        DISPID_ContactToolAddFigure = 12,
        DISPID_ContactToolComment = 13,
        DISPID_ContactToolFigure = 14,
        DISPID_ContactToolResult = 15,
        DISPID_ContactToolResultChart = 16,
        DISPID_ContactToolAddResultChart = 17,
        DISPID_ContactToolResultTable = 18,
        DISPID_ContactToolAddResultTable = 19,
        DISPID_ContactToolScopingMethod = 20,
        DISPID_ContactToolGeometrySelection = 30,
        DISPID_ContactToolContactSideScoping = 35,
        DISPID_ContactToolNumScopingContacts = 240,
        DISPID_ContactToolGetScopingContact = 245,
        DISPID_ContactToolScopedContactActive = 250,
        DISPID_ContactToolAddScopedContact = 255,
        DISPID_ContactToolRemoveScopedContact = 256,
        DISPID_ContactToolScopedContactSide = 270,
        DISPID_ContactToolOperateOnSelection = 302,
        DISPID_ContactToolApplyDefaultScoping = 303,
        DISPID_ContactToolVerifyToolScoping = 304,
        DISPID_ContactToolOperateOnContactList = 305,
        DISPID_ContactToolImages = 306,
        DISPID_ContactToolAddImage = 307
    } kDispId_ContactTool;

    [
      odl,
      uuid(D7979239-341D-4518-BC0E-0C1CCFCF3CAA),
      helpstring("IDSContactToolAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSContactToolAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x0000000a), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x0000000b), helpstring("method AddResult")]
        HRESULT AddResult(
                        [in] IDispatch* piSelectMgr, 
                        [in] unsigned int resType, 
                        [out, retval] IDispatch** ppVal);
        [id(0x00000011), helpstring("method AddResultChart")]
        HRESULT AddResultChart(
                        [in] IDispatch* piSelectMgr, 
                        [in] unsigned int resType, 
                        [in] int responseType, 
                        [out, retval] IDispatch** ppVal);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x0000000c), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x0000000d), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x0000000e), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x0000000f), propget, helpstring("property Results")]
        HRESULT Results([out, retval] IDispatch** ppDisp);
        [id(0x00000010), propget, helpstring("property ResultCharts")]
        HRESULT ResultCharts([out, retval] IDispatch** ppDisp);
        [id(0x00000014), propput, helpstring("property ScopingMethod")]
        HRESULT ScopingMethod([in] DSGeometryDefineByType Method);
        [id(0x00000014), propget, helpstring("property ScopingMethod")]
        HRESULT ScopingMethod([out, retval] DSGeometryDefineByType* Method);
        [id(0x0000001e), propput, helpstring("property GeometrySelection")]
        HRESULT GeometrySelection([in] IDispatch* rhs);
        [id(0x00000023), propput, helpstring("property ContactSideScoping")]
        HRESULT ContactSideScoping([in] DSContactSideScoping Method);
        [id(0x00000023), propget, helpstring("property ContactSideScoping")]
        HRESULT ContactSideScoping([out, retval] DSContactSideScoping* Method);
        [id(0x00000012), propget, helpstring("property ResultTables")]
        HRESULT ResultTables([out, retval] IDispatch** ppDisp);
        [id(0x00000013), helpstring("method AddResultTable")]
        HRESULT AddResultTable(
                        [in] IDispatch* piSelectMgr, 
                        [in] unsigned int resTableType, 
                        [out, retval] IDispatch** ppVal);
        [id(0x000000f0), propget, helpstring("property NumScopingContacts")]
        HRESULT NumScopingContacts([out, retval] int* NumberOfEntries);
        [id(0x000000f5), helpstring("method GetScopingContact")]
        HRESULT GetScopingContact(
                        [in] int index, 
                        [out, retval] unsigned int* pValue);
        [id(0x000000fa), propget, helpstring("property ScopedContactActive")]
        HRESULT ScopedContactActive(
                        [in] unsigned int ContactId, 
                        [out, retval] VARIANT_BOOL* pVal);
        [id(0x000000fa), propput, helpstring("property ScopedContactActive")]
        HRESULT ScopedContactActive(
                        [in] unsigned int ContactId, 
                        [in] VARIANT_BOOL pVal);
        [id(0x0000010e), propget, helpstring("property ScopedContactSide")]
        HRESULT ScopedContactSide(
                        [in] unsigned int ContactId, 
                        [out, retval] DSContactSideScoping* pVal);
        [id(0x0000010e), propput, helpstring("property ScopedContactSide")]
        HRESULT ScopedContactSide(
                        [in] unsigned int ContactId, 
                        [in] DSContactSideScoping pVal);
        [id(0x000000ff), helpstring("method AddScopedContact")]
        HRESULT AddScopedContact([in] unsigned int ContactId);
        [id(0x00000100), helpstring("method RemoveScopedContact")]
        HRESULT RemoveScopedContact([in] unsigned int ContactId);
        [id(0x0000012e), helpstring("method OperateOnSelection")]
        HRESULT OperateOnSelection(
                        [in] IDispatch* pSelection, 
                        [in] DSToolScopingOperation Operation);
        [id(0x0000012f), helpstring("method ApplyDefaultScoping")]
        HRESULT ApplyDefaultScoping();
        [id(0x00000130), helpstring("method VerifyToolScoping")]
        HRESULT VerifyToolScoping();
        [id(0x00000131), helpstring("method OperateOnContactList")]
        HRESULT OperateOnContactList(
                        [in] BSTR contactList, 
                        [in] DSToolScopingOperation Operation);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
        [id(0x00000132), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000133), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
    };

    typedef enum {
        kContactSideScopingUnknown = 0,
        kContactSideScopingSource = 1,
        kContactSideScopingTarget = 2,
        kContactSideScopingBoth = 3,
        kContactSideScopingActive = 4,
        kContactSideScopingSourceContactForces = 5
    } DSContactSideScoping;

    typedef enum {
        DISPID_ContactToolSelectionFilterSuppression = 1,
        DISPID_ContactToolSelectionSuppressed = 2,
        DISPID_ContactToolSelectionFilterContactType = 3,
        DISPID_ContactToolSelectionContactType = 4,
        DISPID_ContactToolSelectionFilterContactSetting = 5,
        DISPID_ContactToolSelectionContactSetting = 6,
        DISPID_ContactToolSelectionFilterContactFormulation = 7,
        DISPID_ContactToolSelectionContactFormulation = 8,
        DISPID_ContactToolSelectionFilterContactInitialEffect = 9,
        DISPID_ContactToolSelectionContactInitialEffect = 10
    } kDispId_ContactToolSelection;

    [
      odl,
      uuid(E851CE1D-44B4-48E3-BB2A-33CD48EE01D4),
      helpstring("IDSContactToolSelection Interface"),
      dual,
      oleautomation
    ]
    interface IDSContactToolSelection : IDispatch {
        [id(0x00000001), propget, helpstring("property FilterSuppression")]
        HRESULT FilterSuppression([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000001), propput, helpstring("property FilterSuppression")]
        HRESULT FilterSuppression([in] VARIANT_BOOL pVal);
        [id(0x00000002), propget, helpstring("property Suppressed")]
        HRESULT Suppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000002), propput, helpstring("property Suppressed")]
        HRESULT Suppressed([in] VARIANT_BOOL pVal);
        [id(0x00000003), propget, helpstring("property FilterContactType")]
        HRESULT FilterContactType([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000003), propput, helpstring("property FilterContactType")]
        HRESULT FilterContactType([in] VARIANT_BOOL pVal);
        [id(0x00000004), propget, helpstring("property ContactType")]
        HRESULT ContactType([out, retval] DSContactType* pVal);
        [id(0x00000004), propput, helpstring("property ContactType")]
        HRESULT ContactType([in] DSContactType pVal);
        [id(0x00000005), propget, helpstring("property FilterContactSetting")]
        HRESULT FilterContactSetting([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000005), propput, helpstring("property FilterContactSetting")]
        HRESULT FilterContactSetting([in] VARIANT_BOOL pVal);
        [id(0x00000006), propget, helpstring("property ContactSetting - Manual or Automatic")]
        HRESULT ContactSetting([out, retval] DSContactSetting* pVal);
        [id(0x00000006), propput, helpstring("property ContactSetting - Manual or Automatic")]
        HRESULT ContactSetting([in] DSContactSetting pVal);
        [id(0x00000007), propget, helpstring("property FilterContactFormulation")]
        HRESULT FilterContactFormulation([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000007), propput, helpstring("property FilterContactFormulation")]
        HRESULT FilterContactFormulation([in] VARIANT_BOOL pVal);
        [id(0x00000008), propget, helpstring("property ContactFormulation")]
        HRESULT ContactFormulation([out, retval] DSContactFormulation* pVal);
        [id(0x00000008), propput, helpstring("property ContactFormulation")]
        HRESULT ContactFormulation([in] DSContactFormulation pVal);
        [id(0x00000009), propget, helpstring("property FilterContactInitialEffect")]
        HRESULT FilterContactInitialEffect([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000009), propput, helpstring("property FilterContactInitialEffect")]
        HRESULT FilterContactInitialEffect([in] VARIANT_BOOL pVal);
        [id(0x0000000a), propget, helpstring("property ContactInitialEffect")]
        HRESULT ContactInitialEffect([out, retval] DSContactInitialEffect* pVal);
        [id(0x0000000a), propput, helpstring("property ContactInitialEffect")]
        HRESULT ContactInitialEffect([in] DSContactInitialEffect pVal);
    };

    typedef enum {
        kManualGeneration = 0,
        kAutomaticGeneration = 1
    } DSContactSetting;

    [
      odl,
      uuid(C3442989-8A23-4013-A41C-8217E80AA8E5),
      helpstring("IDSCollectionAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSCollectionAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Count")]
        HRESULT Count([out, retval] int* pVal);
        [id(00000000), propget, helpstring("property Item")]
        HRESULT Item(
                        int index, 
                        [out, retval] VARIANT* pVal);
        [id(0xfffffffc), propget, helpstring("property _NewEnum")]
        HRESULT _NewEnum([out, retval] IUnknown** pVal);
    };

    [
      odl,
      uuid(9D205DB1-91C4-4EB0-90BB-BEF808A361A7),
      helpstring("IDSConvectionAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSConvectionAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000009), propget, helpstring("property Description")]
        HRESULT Description([out, retval] BSTR* pVal);
        [id(0x00000009), propput, helpstring("property Description")]
        HRESULT Description([in] BSTR pVal);
        [id(0x0000000a), propget, helpstring("property EvaluationType")]
        HRESULT EvaluationType([out, retval] COEFFICIENT_EVAL_TYPE* pVal);
        [id(0x0000000a), propput, helpstring("property EvaluationType")]
        HRESULT EvaluationType([in] COEFFICIENT_EVAL_TYPE pVal);
        [id(0x0000000b), propget, helpstring("property FilmCoefficient")]
        HRESULT FilmCoefficient([out, retval] double* pVal);
        [id(0x0000000b), propput, helpstring("property FilmCoefficient")]
        HRESULT FilmCoefficient([in] double pVal);
        [id(0x0000000c), propget, helpstring("property FilmCoefficientTable")]
        HRESULT FilmCoefficientTable([out, retval] IDispatch** ppIDisp);
        [id(0x00000032), propget, helpstring("property FileName")]
        HRESULT filename([out, retval] BSTR* pVal);
        [id(0x00000033), helpstring("method LinkTo")]
        HRESULT LinkTo([in] BSTR filePath);
        [id(0x00000034), helpstring("method SaveTo")]
        HRESULT SaveTo([in] BSTR filePath);
        [id(0x00000035), helpstring("method Save")]
        HRESULT Save();
        [id(0x00000036), helpstring("method Refresh")]
        HRESULT Refresh();
        [id(0x00000037), propget, helpstring("property FileStatus")]
        HRESULT FileStatus([out, retval] int* pVal);
        [id(0x00000038), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x00000096), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x00000097), propget, helpstring("property MemberDataHandeler")]
        HRESULT MemberDataHandeler([out, retval] IDispatch** pMat);
        [id(0x00000010), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000011), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
    };

    typedef enum {
        AVERAGE_FILM_TEMPERATURE = 0,
        SURFACE_TEMPERATURE = 1,
        BULK_TEMPERATURE = 2,
        DIFFERENCE_SURFACE_BULK = 3
    } COEFFICIENT_EVAL_TYPE;

    [
      odl,
      uuid(264F699C-FE2E-4723-A815-EE0DD256CA7F),
      helpstring("IDSConvectionLoadAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSConvectionLoadAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property ID")]
        HRESULT ID([out, retval] VARIANT* pVal);
        [id(0x00000002), propget, helpstring("property Name")]
        HRESULT Name([out, retval] VARIANT* pVal);
        [id(0x00000002), propput, helpstring("property Name")]
        HRESULT Name([in] VARIANT pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
    };

    typedef enum {
        DISPID_ConvergenceCriteria = 10,
        DISPID_ConvergenceTargetChange = 11,
        DISPID_ConvergenceLastChange = 12,
        DISPID_ConvergenceIsConverged = 13,
        DISPID_ConvergenceDataSet = 14,
        DISPID_ConvergenceComment = 15,
        DISPID_ConvergenceAddComment = 16,
        DISPID_ConvergenceNodeElemDataSet = 17,
        DISPID_ConvergenceImages = 18,
        DISPID_ConvergenceAddImage = 19,
        DISPID_ConvergenceUnitString = 20
    } kDispId_Convergence;

    [
      odl,
      uuid(F70AEC74-757A-4F0F-A899-833CF4E25C1D),
      helpstring("IDSConvergenceAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSConvergenceAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x0000000a), propget, helpstring("property Criteria")]
        HRESULT Criteria([out, retval] DSConvergence* pVal);
        [id(0x0000000a), propput, helpstring("property Criteria")]
        HRESULT Criteria([in] DSConvergence pVal);
        [id(0x0000000b), propget, helpstring("property TargetChange")]
        HRESULT TargetChange([out, retval] double* pVal);
        [id(0x0000000b), propput, helpstring("property TargetChange")]
        HRESULT TargetChange([in] double pVal);
        [id(0x0000000c), propget, helpstring("property LastChange")]
        HRESULT LastChange([out, retval] double* pVal);
        [id(0x0000000d), propget, helpstring("property IsConverged")]
        HRESULT IsConverged([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000000e), propget, helpstring("property DataSet")]
        HRESULT DataSet([out, retval] VARIANT* pVal);
        [id(0x00000010), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x0000000f), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x00000011), propget, helpstring("property NodeElemDataSet")]
        HRESULT NodeElemDataSet([out, retval] VARIANT* pVal);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
        [id(0x00000012), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000013), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00000014), propget, helpstring("property UnitString")]
        HRESULT unitString([out, retval] BSTR* pVal);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
    };

    typedef enum {
        CN_MIN = 0,
        CN_MAX = 1,
        CN_SUM = 2,
        CN_TRQ = 3,
        CN_FRQ = 4
    } DSConvergence;

    [
      odl,
      uuid(4008EDFB-1416-459E-B9BB-4A87FB66F7AB),
      helpstring("IDSCSysTransformsHelper Interface"),
      dual,
      oleautomation
    ]
    interface IDSCSysTransformsHelper : IDispatch {
        [id(0x60020000), propget, helpstring("property Count")]
        HRESULT Count([out, retval] unsigned int* pVal);
        [id(0x60020001), propget, helpstring("property TransformType")]
        HRESULT TransformType(
                        [in] unsigned int index, 
                        [out, retval] eAnsTransformType* pVal);
        [id(0x60020002), propget, helpstring("property TransformAxis")]
        HRESULT TransformAxis(
                        [in] unsigned int index, 
                        [out, retval] eAnsCSysData* pVal);
        [id(0x60020003), propget, helpstring("property TransformValue")]
        HRESULT TransformValue(
                        [in] unsigned int index, 
                        [out, retval] VARIANT* pVal);
        [id(0x60020003), propput, helpstring("property TransformValue")]
        HRESULT TransformValue(
                        [in] unsigned int index, 
                        [in] VARIANT pVal);
        [id(0x60020005), propget, helpstring("property TransformValueDisplayString")]
        HRESULT TransformValueDisplayString(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x60020006), helpstring("method AddTransform")]
        HRESULT AddTransform(
                        [in] eAnsTransformType eType, 
                        [in] eAnsCSysData eAxis);
        [id(0x60020007), helpstring("method RemoveTransform")]
        HRESULT RemoveTransform([in] unsigned int index);
        [id(0x60020008), helpstring("method MoveTransformUp")]
        HRESULT MoveTransformUp([in] unsigned int index);
        [id(0x60020009), helpstring("method MoveTransformUp")]
        HRESULT MoveTransformDown([in] unsigned int index);
        [id(0x6002000a), propget, helpstring("property TransformedOriginDisplayString")]
        HRESULT TransformedOriginDisplayString([out, retval] BSTR* pVal);
    };

    typedef enum {
        kAnsTransformTypeCustom = 0,
        kAnsTransformTypeOffset = 1,
        kAnsTransformTypeRotation = 2,
        kAnsTransformTypeFlip = 3
    } eAnsTransformType;

    typedef enum {
        kAnsCSysOrigin = 0,
        kAnsCSysXAxis = 1,
        kAnsCSysYAxis = 2,
        kAnsCSysZAxis = 3,
        kAnsCSysNegXAxis = 4,
        kAnsCSysNegYAxis = 5,
        kAnsCSysNegZAxis = 6
    } eAnsCSysData;

    typedef enum {
        DISPID_ConstructionGeometryGroupComments = 10,
        DISPID_ConstructionGeometryGroupFigures = 11,
        DISPID_ConstructionGeometryGroupImages = 12,
        DISPID_ConstructionGeometryGroupAddComment = 20,
        DISPID_ConstructionGeometryGroupAddFigure = 21,
        DISPID_ConstructionGeometryGroupAddImage = 22,
        DISPID_ConstructionGeometryGroupAddPath = 23,
        DISPID_ConstructionGeometryGroupAddSurface = 24,
        DISPID_ConstructionGeometryShowMesh = 25,
        DISPID_ConstructionGeometryPaths = 26,
        DISPID_ConstructionGeometryGroupAddPathFromResult = 27
    } kDispId_ConstructionGeometryGroup;

    [
      odl,
      uuid(F31EE502-BCC3-4408-B45D-44F7EA837489),
      helpstring("IDSConstructionGeometryGroupAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSConstructionGeometryGroupAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
        [id(0x0000000a), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x0000000b), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x0000000c), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000014), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x00000015), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x00000016), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00000017), helpstring("method AddPath")]
        HRESULT AddPath(
                        [in] IDispatch* piSelectMgr, 
                        [out, retval] IDispatch** pDisp);
        [id(0x0000001b), helpstring("method AddPathFromResult")]
        HRESULT AddPathFromResult(
                        [in] unsigned int resultId, 
                        [out, retval] IDispatch** pDisp);
        [id(0x00000018), helpstring("method AddSurface")]
        HRESULT AddSurface(
                        [in] IDispatch* piSelectMgr, 
                        [out, retval] IDispatch** pDisp);
        [id(0x00000019), propget, helpstring("property ShowMesh")]
        HRESULT ShowMesh([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000019), propput, helpstring("property ShowMesh")]
        HRESULT ShowMesh([in] VARIANT_BOOL pVal);
        [id(0x0000001a), propget, helpstring("property Paths")]
        HRESULT Paths([out, retval] IDispatch** ppDisp);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
    };

    typedef enum {
        DISPID_CoordinateSystemComments = 10,
        DISPID_CoordinateSystemFigures = 11,
        DISPID_CoordinateSystemOriginSelection = 12,
        DISPID_CoordinateSystemXDirectionSelection = 13,
        DISPID_CoordinateSystemYDirectionSelection = 14,
        DISPID_CoordinateSystemIsGlobal = 15,
        DISPID_CoordinateSystemCoordinateSystemType = 16,
        DISPID_CoordinateSystemOriginXLocation = 17,
        DISPID_CoordinateSystemOriginYLocation = 18,
        DISPID_CoordinateSystemOriginZLocation = 19,
        DISPID_CoordinateSystemXDirectionXValue = 20,
        DISPID_CoordinateSystemXDirectionYValue = 21,
        DISPID_CoordinateSystemXDirectionZValue = 22,
        DISPID_CoordinateSystemYDirectionXValue = 23,
        DISPID_CoordinateSystemYDirectionYValue = 24,
        DISPID_CoordinateSystemYDirectionZValue = 25,
        DISPID_CoordinateSystemZDirectionXValue = 26,
        DISPID_CoordinateSystemZDirectionYValue = 27,
        DISPID_CoordinateSystemZDirectionZValue = 28,
        DISPID_CoordinateSystemZDirectionSelection = 29,
        DISPID_CoordinateSystemEulerAngleXY = 30,
        DISPID_CoordinateSystemEulerAngleYZ = 31,
        DISPID_CoordinateSystemEulerAngleZX = 32,
        DISPID_CoordinateSystemAnsysSystemAuto = 33,
        DISPID_CoordinateSystemAnsysSystemNumber = 34,
        DISPID_CoordinateSystemScopeMode = 35,
        DISPID_CoordinateSystemImages = 36,
        DISPID_CoordinateSystemGloballyAvailable = 37,
        DISPID_CoordinateSystemSuppressed = 38,
        DISPID_CoordinateSystemShowGloballyAvailableUnderCSGroup = 39,
        DISPID_CoordinateSystemAddComment = 40,
        DISPID_CoordinateSystemAddFigure = 41,
        DISPID_CoordinateSystemAddImage = 42,
        DISPID_CoordinateSystemOriginAssociativity = 50,
        DISPID_CoordinateSystemXDirectionAssociativity = 51,
        DISPID_CoordinateSystemYDirectionAssociativity = 52,
        DISPID_CoordinateSystemZDirectionAssociativity = 53,
        DISPID_CoordinateSystemOriginString = 60,
        DISPID_CoordinateSystemXDirectionString = 61,
        DISPID_CoordinateSystemYDirectionString = 62,
        DISPID_CoordinateSystemZDirectionString = 63,
        DISPID_CoordinateSystemAxisPriority = 70,
        DISPID_CoordinateSystemTransforms = 80,
        DISPID_CoordinateSystemPrimaryAxis = 81,
        DISPID_CoordinateSystemSecondaryAxis = 82,
        DISPID_CoordinateSystemPrimaryAxisSelection = 83,
        DISPID_CoordinateSystemSecondaryAxisSelection = 84,
        DISPID_CoordinateSystemPrimaryAxisAlignment = 85,
        DISPID_CoordinateSystemSecondaryAxisAlignment = 86,
        DISPID_CoordinateSystemOriginAlignment = 87,
        DISPID_CoordinateSystemInitialOriginXLocation = 90,
        DISPID_CoordinateSystemInitialOriginYLocation = 91,
        DISPID_CoordinateSystemInitialOriginZLocation = 92,
        DISPID_CoordinateSystemOriginLocationSelection = 93,
        DISPID_CoordinateSystemOriginComponentSelection = 94,
        DISPID_CoordinateSystemTransformsHelper = 100,
        DISPID_CoordinateSystemTransformIndex = 101,
        DISPID_CoordinateSystemReadOnly = 102,
        DISPID_CoordinateSystemAnsTransformableCoordinateSystemData = 103,
        DISPID_CoordinateSystemPrimaryAxisHitPointNormal = 104,
        DISPID_CoordinateSystemOnHitPoint = 105,
        DISPID_CoordinateSytemAttachedTo = 106
    } kDispId_CoordinateSystem;

    [
      odl,
      uuid(98B93511-A984-4B4D-8DBD-ADD79B259951),
      helpstring("IDSCoordinateSystemAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSCoordinateSystemAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x0000000a), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x0000000b), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x00000023), propget, helpstring("property ScopeMode")]
        HRESULT ScopeMode([out, retval] DSAutoOrMan* pVal);
        [id(0x00000010), propget, helpstring("property CoordinateSystemType")]
        HRESULT CoordinateSystemType([out, retval] DSCoordinateSystemType* pVal);
        [id(0x00000010), propput, helpstring("property CoordinateSystemType")]
        HRESULT CoordinateSystemType([in] DSCoordinateSystemType pVal);
        [id(0x00000057), propget, helpstring("property OriginAlignment")]
        HRESULT OriginAlignment([out, retval] eAnsCSysAlignType* pVal);
        [id(0x00000057), propput, helpstring("property OriginAlignment")]
        HRESULT OriginAlignment(eAnsCSysAlignType pVal);
        [id(0x0000000c), propput, helpstring("property OriginSelection")]
        HRESULT OriginSelection([in] IDispatch* rhs);
        [id(0x00000011), propget, helpstring("property OriginXLocation")]
        HRESULT OriginXLocation([out, retval] double* pVal);
        [id(0x00000011), propput, helpstring("property OriginXLocation")]
        HRESULT OriginXLocation([in] double pVal);
        [id(0x00000012), propget, helpstring("property OriginYLocation")]
        HRESULT OriginYLocation([out, retval] double* pVal);
        [id(0x00000012), propput, helpstring("property OriginYLocation")]
        HRESULT OriginYLocation([in] double pVal);
        [id(0x00000013), propget, helpstring("property OriginZLocation")]
        HRESULT OriginZLocation([out, retval] double* pVal);
        [id(0x00000013), propput, helpstring("property OriginZLocation")]
        HRESULT OriginZLocation([in] double pVal);
        [id(0x0000000f), propget, helpstring("property IsGlobal")]
        HRESULT IsGlobal([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000014), propget, helpstring("property XDirectionXValue")]
        HRESULT XDirectionXValue([out, retval] double* pVal);
        [id(0x00000015), propget, helpstring("property XDirectionYValue")]
        HRESULT XDirectionYValue([out, retval] double* pVal);
        [id(0x00000016), propget, helpstring("property XDirectionZValue")]
        HRESULT XDirectionZValue([out, retval] double* pVal);
        [id(0x00000017), propget, helpstring("property YDirectionXValue")]
        HRESULT YDirectionXValue([out, retval] double* pVal);
        [id(0x00000018), propget, helpstring("property YDirectionYValue")]
        HRESULT YDirectionYValue([out, retval] double* pVal);
        [id(0x00000019), propget, helpstring("property YDirectionZValue")]
        HRESULT YDirectionZValue([out, retval] double* pVal);
        [id(0x0000001a), propget, helpstring("property ZDirectionXValue")]
        HRESULT ZDirectionXValue([out, retval] double* pVal);
        [id(0x0000001b), propget, helpstring("property ZDirectionYValue")]
        HRESULT ZDirectionYValue([out, retval] double* pVal);
        [id(0x0000001c), propget, helpstring("property ZDirectionZValue")]
        HRESULT ZDirectionZValue([out, retval] double* pVal);
        [id(0x00000028), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x00000029), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x0000001e), propget, helpstring("property EulerAngleXY")]
        HRESULT EulerAngleXY([out, retval] double* pVal);
        [id(0x0000001f), propget, helpstring("property EulerAngleYZ")]
        HRESULT EulerAngleYZ([out, retval] double* pVal);
        [id(0x00000020), propget, helpstring("property EulerAngleZX")]
        HRESULT EulerAngleZX([out, retval] double* pVal);
        [id(0x00000021), propget, helpstring("property AnsysSystemAuto")]
        HRESULT AnsysSystemAuto([out, retval] DSAutoOrMan* pVal);
        [id(0x00000021), propput, helpstring("property AnsysSystemAuto")]
        HRESULT AnsysSystemAuto([in] DSAutoOrMan pVal);
        [id(0x00000022), propget, helpstring("property AnsysSystemNumber")]
        HRESULT AnsysSystemNumber([out, retval] int* pVal);
        [id(0x00000022), propput, helpstring("property AnsysSystemNumber")]
        HRESULT AnsysSystemNumber([in] int pVal);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
        [id(0x00000024), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x0000002a), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00000025), propget, helpstring("property GloballyAvailable")]
        HRESULT GloballyAvailable([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000025), propput, helpstring("property GloballyAvailable")]
        HRESULT GloballyAvailable([in] VARIANT_BOOL pVal);
        [id(0x00000032), propget, helpstring("property OriginAssociativity")]
        HRESULT OriginAssociativity([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000032), propput, helpstring("property OriginAssociativity")]
        HRESULT OriginAssociativity([in] VARIANT_BOOL pVal);
        [id(0x0000003c), propget, helpstring("property OriginString")]
        HRESULT OriginString([out, retval] BSTR* pVal);
        [id(0x00000033), propget, helpstring("property XDirectionAssociativity")]
        HRESULT XDirectionAssociativity([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000033), propput, helpstring("property XDirectionAssociativity")]
        HRESULT XDirectionAssociativity([in] VARIANT_BOOL pVal);
        [id(0x00000034), propget, helpstring("property YDirectionAssociativity")]
        HRESULT YDirectionAssociativity([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000034), propput, helpstring("property YDirectionAssociativity")]
        HRESULT YDirectionAssociativity([in] VARIANT_BOOL pVal);
        [id(0x00000035), propget, helpstring("property ZDirectionAssociativity")]
        HRESULT ZDirectionAssociativity([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000035), propput, helpstring("property ZDirectionAssociativity")]
        HRESULT ZDirectionAssociativity([in] VARIANT_BOOL pVal);
        [id(0x00000046), propget, helpstring("property AxisPriority")]
        HRESULT AxisPriority([out, retval] int* pDisp);
        [id(0x00000046), propput, helpstring("property AxisPriority")]
        HRESULT AxisPriority([in] int pDisp);
        [id(0x00000051), propget, helpstring("property PrimaryAxis")]
        HRESULT PrimaryAxis([out, retval] eAnsCSysData* pVal);
        [id(0x00000051), propput, helpstring("property PrimaryAxis")]
        HRESULT PrimaryAxis(eAnsCSysData pVal);
        [id(0x00000052), propget, helpstring("property SecondaryAxis")]
        HRESULT SecondaryAxis([out, retval] eAnsCSysData* pVal);
        [id(0x00000052), propput, helpstring("property SecondaryAxis")]
        HRESULT SecondaryAxis(eAnsCSysData pVal);
        [id(0x00000055), propget, helpstring("property PrimaryAxis")]
        HRESULT PrimaryAxisAlignment([out, retval] eAnsCSysAlignType* pVal);
        [id(0x00000055), propput, helpstring("property PrimaryAxis")]
        HRESULT PrimaryAxisAlignment(eAnsCSysAlignType pVal);
        [id(0x00000056), propget, helpstring("property PrimaryAxis")]
        HRESULT SecondaryAxisAlignment([out, retval] eAnsCSysAlignType* pVal);
        [id(0x00000056), propput, helpstring("property PrimaryAxis")]
        HRESULT SecondaryAxisAlignment(eAnsCSysAlignType pVal);
        [id(0x00000053), propput, helpstring("property PrimaryAxisSelection")]
        HRESULT PrimaryAxisSelection([in] IDispatch* rhs);
        [id(0x00000054), propput, helpstring("property SecondaryAxisSelection")]
        HRESULT SecondaryAxisSelection([in] IDispatch* rhs);
        [id(0x0000005a), propget, helpstring("property InitialOriginXLocation")]
        HRESULT InitialOriginXLocation([out, retval] double* pVal);
        [id(0x0000005a), propput, helpstring("property InitialOriginXLocation")]
        HRESULT InitialOriginXLocation([in] double pVal);
        [id(0x0000005b), propget, helpstring("property InitialOriginYLocation")]
        HRESULT InitialOriginYLocation([out, retval] double* pVal);
        [id(0x0000005b), propput, helpstring("property InitialOriginYLocation")]
        HRESULT InitialOriginYLocation([in] double pVal);
        [id(0x0000005c), propget, helpstring("property InitialOriginZLocation")]
        HRESULT InitialOriginZLocation([out, retval] double* pVal);
        [id(0x0000005c), propput, helpstring("property InitialOriginZLocation")]
        HRESULT InitialOriginZLocation([in] double pVal);
        [id(0x00000064), propget, helpstring("property TransformsHelper")]
        HRESULT TransformsHelper([out, retval] IDSCSysTransformsHelper** pVal);
        [id(0x000000c8), propget, helpstring("property XDirectionString")]
        HRESULT XDirectionString([out, retval] BSTR* pVal);
        [id(0x000000c9), propget, helpstring("property YDirectionString")]
        HRESULT YDirectionString([out, retval] BSTR* pVal);
        [id(0x000000ca), propget, helpstring("property ZDirectionString")]
        HRESULT ZDirectionString([out, retval] BSTR* pVal);
        [id(0x0000000d), propput, helpstring("property XDirectionSelection")]
        HRESULT XDirectionSelection([in] IDispatch* rhs);
        [id(0x0000000e), propput, helpstring("property YDirectionSelection")]
        HRESULT YDirectionSelection([in] IDispatch* rhs);
        [id(0x0000001d), propput, helpstring("property ZDirectionSelection")]
        HRESULT ZDirectionSelection([in] IDispatch* rhs);
        [id(0x00000065), propget, helpstring("property TransformIndex")]
        HRESULT TransformIndex([out, retval] int* pVal);
        [id(0x00000065), propput, helpstring("property TransformIndex")]
        HRESULT TransformIndex([in] int pVal);
        [id(0x00000066), propget, helpstring("property ReadOnly")]
        HRESULT ReadOnly([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000067), propput, helpstring("method setAnsTransformableCoordinateSystemData")]
        HRESULT AnsTransformableCoordinateSystemData([in] IAnsTransformableCoordinateSystem* pVal);
        [id(0x00000067), propget, helpstring("method setAnsTransformableCoordinateSystemData")]
        HRESULT AnsTransformableCoordinateSystemData([out, retval] IAnsTransformableCoordinateSystem** pVal);
        [id(0x0000005d), propput, helpstring("property OriginLocationSelection")]
        HRESULT OriginLocationSelection([in] IDispatch* rhs);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x0000005e), propget, helpstring("property OriginComponentSelection")]
        HRESULT OriginComponentSelection([out, retval] int* pVal);
        [id(0x0000005e), propput, helpstring("property OriginComponentSelection")]
        HRESULT OriginComponentSelection([in] int pVal);
        [id(0x00000068), propput, helpstring("property HitPointNormalSelection")]
        HRESULT HitPointNormalSelection([in] IDispatch* rhs);
        [id(0x00000069), helpstring("method InsertCoordinateSystemOnHitPoint")]
        HRESULT InsertCoordinateSystemOnHitPoint(
                        [in] IDispatch* pDisp, 
                        int coordSystemID);
        [id(0x00000026), propget, helpstring("property Suppressed")]
        HRESULT Suppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000026), propput, helpstring("property Suppressed")]
        HRESULT Suppressed([in] VARIANT_BOOL pVal);
        [id(0x0000006a), propget, helpstring("property AttachedTo")]
        HRESULT AttachedTo([out, retval] DSCoordinateSystemAttachedTo* pVal);
        [id(0x00000027), propget, helpstring("property ShowGloballyAvailableUnderCSGroup")]
        HRESULT ShowGloballyAvailableUnderCSGroup([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000027), propput, helpstring("property ShowGloballyAvailableUnderCSGroup")]
        HRESULT ShowGloballyAvailableUnderCSGroup([in] VARIANT_BOOL pVal);
    };

    typedef enum {
        kCartesian = 0,
        kCylindrical = 1,
        kSpherical = 2
    } DSCoordinateSystemType;

    typedef enum {
        kAnsCSysAlignTypeFixed = 0,
        kAnsCSysAlignTypeAssociative = 1,
        kAnsCSysAlignTypeGlobalX = 2,
        kAnsCSysAlignTypeGlobalY = 3,
        kAnsCSysAlignTypeGlobalZ = 4,
        kAnsCSysAlignTypeFree = 5,
        kAnsCSysAlignTypeComponent = 6,
        kAnsCSysAlignTypeHitPoint = 7
    } eAnsCSysAlignType;

    [
      odl,
      uuid(68D88B15-E789-4368-ACB4-70D83B8A87F0),
      helpstring("IAnsTransformableCoordinateSystem Interface"),
      dual,
      oleautomation
    ]
    interface IAnsTransformableCoordinateSystem : IDispatch {
        [id(0x00000001), propget, helpstring("property BaseCoordinateSystem")]
        HRESULT BaseCoordinateSystem([out, retval] IAnsCoordinateSystem** pVal);
        [id(0x00000001), propput, helpstring("property BaseCoordinateSystem")]
        HRESULT BaseCoordinateSystem([in] IAnsCoordinateSystem* pVal);
        [id(0x00000002), propget, helpstring("property TransformedCoordinateSystem")]
        HRESULT TransformedCoordinateSystem([out, retval] IAnsCoordinateSystem** pVal);
        [id(0x00000003), propget, helpstring("property Transforms")]
        HRESULT Transforms([out, retval] IAnsTransformColl** pVal);
        [id(0x00000004), helpstring("method TransformCoordinateSystem")]
        HRESULT TransformCoordinateSystem(
                        [in] unsigned int iNumTransformsToApply, 
                        [out, retval] IAnsCoordinateSystem** pVal);
        [id(0x00000005)]
        HRESULT Clone([out, retval] IAnsTransformableCoordinateSystem** ppiNewCSys);
    };

    [
      odl,
      uuid(D1BBB32F-E9EE-4D09-9EA9-10850B575646),
      helpstring("IAnsCoordinateSystem Interface"),
      dual,
      oleautomation
    ]
    interface IAnsCoordinateSystem : IDispatch {
        [id(0x00000001), propget]
        HRESULT ID([out, retval] unsigned int* pVal);
        [id(0x00000002), propget]
        HRESULT Label([out, retval] BSTR* pVal);
        [id(0x00000003), propget]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000003), propput]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000005), propput]
        HRESULT Visible([in] VARIANT_BOOL bVisible);
        [id(0x00000005), propget]
        HRESULT Visible([out, retval] VARIANT_BOOL* bVisible);
        [id(0x00000006), propget]
        HRESULT PersistType([out, retval] eAnsCSysPersistType* pVal);
        [id(0x00000006), propput]
        HRESULT PersistType([in] eAnsCSysPersistType pVal);
        [id(0x00000007), propget]
        HRESULT type([out, retval] eAnsCSysType* pVal);
        [id(0x00000007), propput]
        HRESULT type([in] eAnsCSysType pVal);
        [id(0x00000008), propget]
        HRESULT CSysAsColl([out, retval] IAnsDoubleColl** pVal);
        [id(0x00000008), propput]
        HRESULT CSysAsColl([in] IAnsDoubleColl* pVal);
        [id(0x00000009), propget]
        HRESULT Origin([out, retval] IAnsXYZ** ppiPoint);
        [id(0x00000009), propput]
        HRESULT Origin([in] IAnsXYZ* ppiPoint);
        [id(0x0000000a), propget]
        HRESULT XDirection([out, retval] IAnsXYZ** ppiPoint);
        [id(0x0000000a), propput]
        HRESULT XDirection([in] IAnsXYZ* ppiPoint);
        [id(0x0000000b), propget]
        HRESULT YDirection([out, retval] IAnsXYZ** ppiPoint);
        [id(0x0000000b), propput]
        HRESULT YDirection([in] IAnsXYZ* ppiPoint);
        [id(0x0000000c), propget]
        HRESULT ZDirection([out, retval] IAnsXYZ** ppiPoint);
        [id(0x0000000c), propput]
        HRESULT ZDirection([in] IAnsXYZ* ppiPoint);
        [id(0x0000000e), propget]
        HRESULT OriginXLocation([out, retval] double* pVal);
        [id(0x0000000e), propput]
        HRESULT OriginXLocation([in] double pVal);
        [id(0x0000000f), propget]
        HRESULT OriginYLocation([out, retval] double* pVal);
        [id(0x0000000f), propput]
        HRESULT OriginYLocation([in] double pVal);
        [id(0x00000010), propget]
        HRESULT OriginZLocation([out, retval] double* pVal);
        [id(0x00000010), propput]
        HRESULT OriginZLocation([in] double pVal);
        [id(0x00000012), propget]
        HRESULT XDirectionXValue([out, retval] double* pVal);
        [id(0x00000013), propget]
        HRESULT XDirectionYValue([out, retval] double* pVal);
        [id(0x00000014), propget]
        HRESULT XDirectionZValue([out, retval] double* pVal);
        [id(0x00000015), propget]
        HRESULT YDirectionXValue([out, retval] double* pVal);
        [id(0x00000016), propget]
        HRESULT YDirectionYValue([out, retval] double* pVal);
        [id(0x00000017), propget]
        HRESULT YDirectionZValue([out, retval] double* pVal);
        [id(0x00000018), propget]
        HRESULT ZDirectionXValue([out, retval] double* pVal);
        [id(0x00000019), propget]
        HRESULT ZDirectionYValue([out, retval] double* pVal);
        [id(0x0000001a), propget]
        HRESULT ZDirectionZValue([out, retval] double* pVal);
        [id(0x00000024)]
        HRESULT GetCopy([out, retval] IAnsCoordinateSystem** ppiNewCSys);
        [id(0x00000065), helpstring("method to set either origin or an axis data")]
        HRESULT SetDataSet(
                        [in] eAnsCSysData dataItem, 
                        [in] IAnsXYZ* pVector, 
                        [in] IAnsReferenceColl* piRefs);
        [id(0x00000066), helpstring("Removes reference to data item and sets type if no refs exist on CSys")]
        HRESULT BreakReference([in] eAnsCSysData dataItem);
        [id(0x00000067), helpstring("Removes reference to all data item")]
        HRESULT BreakAllReferences();
        [id(0x00000068), helpstring("Inverts the priority of the first and second axial selections")]
        HRESULT FlipAxialPriority();
        [id(0x00000069), helpstring("Returns CSys to intial configuration")]
        HRESULT Initialize();
    };

    typedef enum {
        kAnsCSysPersistTypeUnknown = 0,
        kAnsCSysPersistTypeReferenced = 1,
        kAnsCSysPersistTypeUserDefined = 2,
        kAnsCSysPersistTypeConstant = 3
    } eAnsCSysPersistType;

    typedef enum {
        kAnsCSysCartesian = 0,
        kAnsCSysCylindrical = 1,
        kAnsCSysSpherical = 2
    } eAnsCSysType;

    [
      odl,
      uuid(CE17F643-DD9B-4AA5-AC47-05CE65207907),
      helpstring("IAnsXYZ Interface"),
      dual,
      oleautomation
    ]
    interface IAnsXYZ : IDispatch {
        [id(0x00000001), propget]
        HRESULT X([out, retval] double* pVal);
        [id(0x00000001), propput]
        HRESULT X([in] double pVal);
        [id(0x00000002), propget]
        HRESULT Y([out, retval] double* pVal);
        [id(0x00000002), propput]
        HRESULT Y([in] double pVal);
        [id(0x00000003), propget]
        HRESULT Z([out, retval] double* pVal);
        [id(0x00000003), propput]
        HRESULT Z([in] double pVal);
        [id(0x00000004), helpstring("Gets x, y, z as array")]
        HRESULT GetAsArray(double XYZ[3]);
        [id(0x00000005), helpstring("Puts x, y, z as array")]
        HRESULT PutAsArray(double XYZ[3]);
    };

    [
      odl,
      uuid(D510A8FF-10B9-485C-AD03-8CCA74A617B5),
      dual,
      oleautomation
    ]
    interface IAnsTransformColl : IDispatch {
        [id(0x00000001), propget, helpstring("property Count")]
        HRESULT Count([out, retval] unsigned int* plCount);
        [id(0x00000002), helpstring("method Add")]
        HRESULT AddTransform(IAnsTransform* piReference);
        [id(00000000), propget, helpstring("property Item")]
        HRESULT Item(
                        [in] unsigned int lNum, 
                        [out, retval] IAnsTransform** ppiItem);
        [id(0xfffffffc), propget, helpstring("property NewEnum")]
        HRESULT _NewEnum([out, retval] IUnknown** ppunkEnum);
        [id(0x0000000a), helpstring("method Clear")]
        HRESULT Clear();
        [id(0x00000007), helpstring("method Remove")]
        HRESULT RemoveAt([in] unsigned int ulItemIdx);
    };

    [
      odl,
      uuid(D41DBAFC-C242-4BCF-8FB1-CBDE3A268597),
      helpstring("IAnsTransform Interface"),
      dual,
      oleautomation
    ]
    interface IAnsTransform : IDispatch {
        [id(0x00000001), propget, helpstring("property At")]
        HRESULT At(
                        [in] int row, 
                        [in] int col, 
                        [out, retval] double* pVal);
        [id(0x00000001), propput, helpstring("property At")]
        HRESULT At(
                        [in] int row, 
                        [in] int col, 
                        [in] double pVal);
        [id(0x00000002), propget, helpstring("property Doubles")]
        HRESULT Doubles([out, retval] IAnsDoubleColl** ppiColl);
        [id(0x00000003), helpstring("method transformXYZ")]
        HRESULT TransformXYZ(
                        [in] double dX, 
                        [in] double dY, 
                        [in] double dZ, 
                        [in] VARIANT_BOOL bUseTranslation, 
                        [out, retval] IAnsXYZ** ppiPoint);
        [id(0x00000004), helpstring("method PreMultiply")]
        HRESULT PreMultiply(
                        [in] IAnsTransform* piOther, 
                        [out, retval] IAnsTransform** piProduct);
        [id(0x00000005), helpstring("method PostMultiply")]
        HRESULT PostMultiply(
                        [in] IAnsTransform* piOther, 
                        [out, retval] IAnsTransform** piProduct);
        [id(0x00000006), helpstring("method InitSimpleTransform")]
        HRESULT InitSimpleTransform(
                        [in] eAnsTransformType eType, 
                        [in] eAnsCSysData eAxis, 
                        [in] VARIANT vtVal);
        [id(0x00000007), helpstring("method GetSimpleTransform")]
        HRESULT GetSimpleTransform(
                        [out] eAnsTransformType* eType, 
                        [out] eAnsCSysData* eAxis, 
                        [out] VARIANT* vtVal);
        [id(0x00000008), helpstring("method GetSimpleTransform")]
        HRESULT Clone([out, retval] IAnsTransform** pVal);
    };

    typedef enum {
        kCoordinateSystemAttachedToGlobal = 0,
        kCoordinateSystemAttachedToPrototype = 1,
        kCoordinateSystemAttachedToJoint = 2,
        kCoordinateSystemAttachedToCrack = 3
    } DSCoordinateSystemAttachedTo;

    typedef enum {
        DISPID_CoordinateSystemGroupComments = 10,
        DISPID_CoordinateSystemGroupFigures = 11,
        DISPID_CoordinateSystemGroupCoordinateSystems = 12,
        DISPID_CoordinateSystemGroupImages = 13,
        DISPID_CoordinateSystemGroupAddComment = 20,
        DISPID_CoordinateSystemGroupAddFigure = 21,
        DISPID_CoordinateSystemGroupAddCoordinateSystem = 22,
        DISPID_CoordinateSystemGroupAddImage = 23,
        DISPID_CoordinateSystemGroupAddCoordinateSystemWithName = 24
    } kDispId_CoordinateSystemGroup;

    [
      odl,
      uuid(E2E55F1E-3743-42AB-B66B-8F5983AB115B),
      helpstring("IDSCoordinateSystemGroupAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSCoordinateSystemGroupAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x0000000a), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x0000000b), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x0000000c), propget, helpstring("property CoordinateSystems")]
        HRESULT CoordinateSystems([out, retval] IDispatch** ppDisp);
        [id(0x00000014), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x00000015), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x00000016), helpstring("method AddCoordinateSystem")]
        HRESULT AddCoordinateSystem(
                        [in] IDispatch* piSelectMgr, 
                        [out, retval] IDispatch** pDisp);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
        [id(0x0000000d), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000017), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x00000018), helpstring("method AddCoordinateSystemWithName")]
        HRESULT AddCoordinateSystemWithName(
                        [in] BSTR bsName, 
                        [in] IDispatch* piSelectMgr, 
                        [out, retval] IDispatch** pDisp);
    };

    typedef enum {
        DISPID_CouplingConditionComment = 10,
        DISPID_CouplingConditionSuppressed = 11,
        DISPID_CouplingConditionGeometryDefineBy = 12,
        DISPID_CouplingConditionGeometrySelection = 13,
        DISPID_CouplingConditionComponentSelection = 14,
        DISPID_CouplingConditionDOFSelection = 15,
        DISPID_CouplingConditionLocalCoordinates = 16,
        DISPID_CouplingConditionAddComment = 61,
        DISPID_CouplingConditionAddFigure = 62,
        DISPID_CouplingConditionHasValidGeoSelection = 63,
        DISPID_CouplingConditionImages = 64,
        DISPID_CouplingConditionAddImage = 65
    } kDispId_CouplingCondition;

    [
      odl,
      uuid(BEA73B58-58A2-482F-9D90-802D74C3B8E7),
      helpstring("IDSCouplingConditionAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSCouplingConditionAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x0000000a), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x0000000c), propget, helpstring("property GeometryDefineBy")]
        HRESULT GeometryDefineBy([out, retval] DSGeometryDefineByType* pVal);
        [id(0x0000000c), propput, helpstring("property GeometryDefineBy")]
        HRESULT GeometryDefineBy([in] DSGeometryDefineByType pVal);
        [id(0x0000000d), propput, helpstring("property GeometrySelection")]
        HRESULT GeometrySelection([in] IDispatch* rhs);
        [id(0x0000000e), propget, helpstring("property ComponentSelection")]
        HRESULT ComponentSelection([out, retval] int* pVal);
        [id(0x0000000e), propput, helpstring("property ComponentSelection")]
        HRESULT ComponentSelection([in] int pVal);
        [id(0x0000000f), propget, helpstring("property DOFSelection")]
        HRESULT DOFSelection([out, retval] DSCouplingConditionDOFType* pVal);
        [id(0x0000000f), propput, helpstring("property DOFSelection")]
        HRESULT DOFSelection([in] DSCouplingConditionDOFType pVal);
        [id(0x00000010), propget, helpstring("property LocalCoordinates")]
        HRESULT LocalCoordinates([out, retval] int* pVal);
        [id(0x00000010), propput, helpstring("property LocalCoordinates")]
        HRESULT LocalCoordinates([in] int pVal);
        [id(0x0000000b), propget, helpstring("property Suppressed")]
        HRESULT Suppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000000b), propput, helpstring("property Suppressed")]
        HRESULT Suppressed([in] VARIANT_BOOL pVal);
        [id(0x0000003d), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x0000003e), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x0000003f), propget, helpstring("property HasValidGeoSelection")]
        HRESULT HasValidGeoSelection([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000040), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000041), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
    };

    typedef enum {
        kDOF_Unknown = 0,
        kDOF_UX = 1,
        kDOF_UY = 2,
        kDOF_UZ = 3,
        kDOF_ROTX = 4,
        kDOF_ROTY = 5,
        kDOF_ROTZ = 6,
        kDOF_Volt = 7,
        kDOF_Temp = 8
    } DSCouplingConditionDOFType;

    typedef enum {
        DISPID_CustomResultAddComment = 10,
        DISPID_CustomResultAddFigure = 11,
        DISPID_CustomResultAddImage = 12,
        DISPID_CustomResultGeometrySelection = 20,
        DISPID_CustomResultTypeString = 21,
        DISPID_CustomResultShellFaceEnum = 22,
        DISPID_CustomResultExpression = 23,
        DISPID_CustomResultUnitSytemForExpression = 24,
        DISPID_CustomResultIdentifier = 25,
        DISPID_CustomResultCoordinateSystemSelection = 26,
        DISPID_CustomResultDisplayTime = 27,
        DISPID_CustomResultOutputUnitType = 28,
        DISPID_CustomResultMinimum = 29,
        DISPID_CustomResultMaximum = 30,
        DISPID_CustomResultTime = 31,
        DISPID_CustomResultLoadStep = 32,
        DISPID_CustomResultSubstep = 33,
        DISPID_CustomResultIterationNumber = 34,
        DISPID_CustomResultCalculateTimeHistory = 35,
        DISPID_CustomResultSetDriver = 36,
        DISPID_CustomResultSetNumber = 37,
        DISPID_CustomResultRenameBasedOnDefinition = 38,
        DISPID_CustomResultRequestedFrequency = 39,
        DISPID_CustomResultMinimumBodyName = 40,
        DISPID_CustomResultMaximumBodyName = 41,
        DISPID_CustomResultPhaseAngle = 42,
        DISPID_CustomResultUnitTypeByDispid = 43,
        DISPID_CustomResultUnitStringByDispid = 44,
        DISPID_CustomResultParamNameByDispid = 45,
        DISPID_CustomResultLayer = 46,
        DISPID_CustomResultType = 47,
        DISPID_CustomResultComponent = 48,
        DISPID_CustomResultGeometryDefineBy = 49,
        DISPID_CustomResultPathSelection = 50,
        DISPID_CustomResultGraphControlsXAxis = 51,
        DISPID_CustomResultAveraging = 52,
        DISPID_CustomResultCreateTabbedFile = 53,
        DISPID_CustomResultMinimumOfMinimumOverTime = 54,
        DISPID_CustomResultMaximumOfMinimumOverTime = 55,
        DISPID_CustomResultMinimumOfMaximumOverTime = 56,
        DISPID_CustomResultMaximumOfMaximumOverTime = 57,
        DISPID_CustomResultAverage = 58,
        DISPID_CustomResultReadTabbedFile = 59,
        DISPID_CustomResultFlow = 60,
        DISPID_CustomResultAdjustLegend = 61,
        DISPID_CustomIsSolved = 62,
        DISPID_CustomResultCyclicMinimumOverPhase = 63,
        DISPID_CustomResultCyclicMaximumOverPhase = 64,
        DISPID_CustomResultCyclicPhaseForMinimum = 65,
        DISPID_CustomResultCyclicPhaseForMaximum = 66,
        DISPID_CustomResultCyclicHarmonicIndex = 67,
        DISPID_CustomResultCyclicPhaseAngle = 68,
        DISPID_CustomResultCyclicMode = 69,
        DISPID_CustomResultComponentSelection = 70,
        DISPID_CustomResultCyclicPhaseHistory = 71,
        DISPID_CustomResultActualFrequency = 72,
        DISPID_CustomResultExternalObject = 73,
        DISPID_CustomResultResultFileName = 74,
        DISPID_CustomResultActualStability = 75,
        DISPID_CustomResultActualModalDampingRatio = 76,
        DISPID_CustomResultActualLogarithmicDecrement = 77,
        DISPID_CustomResultSuppressed = 78,
        DISPID_CustomResultCrackID = 79,
        DISPID_CustomResultAveragingAcross = 80,
        DISPID_CustomResultIsACTResult = 81,
        DISPID_CustomResultNodalExportResults = 82,
        DISPID_CustomResultIsExternalObjectBased = 83,
        DISPID_CustomResultLoadMultiplier = 84,
        DISPID_CustomResultLegendStyle = 85,
        DISPID_CustomResultPlySelection = 86,
        DISPID_CustomResultSubScopeDefineBy = 87,
        DISPID_CustomResultCoreResultType = 88,
        DISPID_CustomResultRelativity = 89,
        DISPID_CustomResultScopeBy = 90,
        DISPID_CustomResultScaleFactor = 91,
        DISPID_CustomResultPSDProbability = 92,
        DISPID_CustomResultCalculateFreqHistory = 93
    } kDispId_CustomResult;

    [
      odl,
      uuid(B59F40F3-B8C6-4828-A84D-457AD0CF59DA),
      helpstring("IDSCustomResultAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSCustomResultAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x0000000a), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x0000000b), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x0000000c), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00000014), propput, helpstring("property GeometrySelection")]
        HRESULT GeometrySelection([in] IDispatch* rhs);
        [id(0x00000015), propget, helpstring("property TypeString")]
        HRESULT TypeString([out, retval] BSTR* pVal);
        [id(0x00000031), propget, helpstring("property GeometryDefineBy")]
        HRESULT GeometryDefineBy([out, retval] DSGeometryDefineByType* pVal);
        [id(0x00000031), propput, helpstring("property GeometryDefineBy")]
        HRESULT GeometryDefineBy([in] DSGeometryDefineByType pVal);
        [id(0x00000032), propget, helpstring("property PathSelection")]
        HRESULT PathSelection([out, retval] dsid* pVal);
        [id(0x00000032), propput, helpstring("property PathSelection")]
        HRESULT PathSelection([in] dsid pVal);
        [id(0x00000016), propget, helpstring("method ShellFaceEnum")]
        HRESULT ShellFaceEnum([out, retval] DSShellFaceEnum* pShellFace);
        [id(0x00000016), propput, helpstring("method ShellFaceEnum")]
        HRESULT ShellFaceEnum([in] DSShellFaceEnum pShellFace);
        [id(0x00000017), propget, helpstring("method Expression")]
        HRESULT Expression([out, retval] BSTR* pVal);
        [id(0x00000017), propput, helpstring("method Expression")]
        HRESULT Expression([in] BSTR pVal);
        [id(0x00000018), propget, helpstring("method UnitSytemForExpression")]
        HRESULT UnitSytemForExpression([out, retval] int* pVal);
        [id(0x0000001c), propget, helpstring("property OutputUnitType")]
        HRESULT OutputUnitType([out, retval] WBUnitCategoryType* pVal);
        [id(0x0000001c), propput, helpstring("property OutputUnitType")]
        HRESULT OutputUnitType([in] WBUnitCategoryType pVal);
        [id(0x0000001a), propget, helpstring("property CoordinateSystemSelection")]
        HRESULT CoordinateSystemSelection([out, retval] dsid* pVal);
        [id(0x0000001a), propput, helpstring("property CoordinateSystemSelection")]
        HRESULT CoordinateSystemSelection([in] dsid pVal);
        [id(0x0000001d), propget, helpstring("property Minimum")]
        HRESULT Minimum([out, retval] double* pVal);
        [id(0x0000001e), propget, helpstring("property Maximum")]
        HRESULT Maximum([out, retval] double* pVal);
        [id(0x0000001f), propget, helpstring("property Time")]
        HRESULT Time([out, retval] double* pVal);
        [id(0x00000020), propget, helpstring("property LoadStep")]
        HRESULT LoadStep([out, retval] int* pVal);
        [id(0x00000021), propget, helpstring("property Substep")]
        HRESULT Substep([out, retval] int* pVal);
        [id(0x00000022), propget, helpstring("property IterationNumber")]
        HRESULT IterationNumber([out, retval] int* pVal);
        [id(0x00000023), propget, helpstring("method CalculateTimeHistory")]
        HRESULT CalculateTimeHistory([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000023), propput, helpstring("method CalculateTimeHistory")]
        HRESULT CalculateTimeHistory([in] VARIANT_BOOL pVal);
        [id(0x00000024), propget, helpstring("method SetDriver")]
        HRESULT SetDriver([out, retval] DSSetDriverStyle* pVal);
        [id(0x00000024), propput, helpstring("method SetDriver")]
        HRESULT SetDriver([in] DSSetDriverStyle pVal);
        [id(0x00000025), propget, helpstring("method SetNumber")]
        HRESULT SetNumber([out, retval] unsigned int* pVal);
        [id(0x00000025), propput, helpstring("method SetNumber")]
        HRESULT SetNumber([in] unsigned int pVal);
        [id(0x0000001b), propget, helpstring("property DisplayTime")]
        HRESULT DisplayTime([out, retval] double* pVal);
        [id(0x0000001b), propput, helpstring("property DisplayTime")]
        HRESULT DisplayTime([in] double pVal);
        [id(0x00000027), propget, helpstring("property RequestedFrequency")]
        HRESULT RequestedFrequency([out, retval] double* pVal);
        [id(0x00000027), propput, helpstring("property RequestedFrequency")]
        HRESULT RequestedFrequency([in] double pVal);
        [id(0x00000019), propget, helpstring("method Identifier")]
        HRESULT Identifier([out, retval] BSTR* pVal);
        [id(0x00000019), propput, helpstring("method Identifier")]
        HRESULT Identifier([in] BSTR pVal);
        [id(0x00000026), helpstring("method RenameBasedOnDefinition")]
        HRESULT RenameBasedOnDefinition();
        [id(0x00000028), propget, helpstring("property MinimumBodyName")]
        HRESULT MinimumBodyName([out, retval] BSTR* pVal);
        [id(0x00000029), propget, helpstring("property MaximumBodyName")]
        HRESULT MaximumBodyName([out, retval] BSTR* pVal);
        [id(0x0000002a), propget, helpstring("property PhaseAngle")]
        HRESULT PhaseAngle([out, retval] double* pVal);
        [id(0x0000002a), propput, helpstring("property PhaseAngle")]
        HRESULT PhaseAngle([in] double pVal);
        [id(0x0000002b), propget, helpstring("property UnitTypeByDispid")]
        HRESULT UnitTypeByDispid(
                        [in] int dispid, 
                        [out, retval] int* unitType);
        [id(0x0000002c), propget, helpstring("property UnitStringByDispid")]
        HRESULT UnitStringByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* unitString);
        [id(0x0000002d), propget, helpstring("property ParamNameByDispid")]
        HRESULT ParamNameByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* paramName);
        [id(0x0000002e), propget, helpstring("property Layer")]
        HRESULT Layer([out, retval] int* pVal);
        [id(0x0000002e), propput, helpstring("property Layer")]
        HRESULT Layer([in] int pVal);
        [id(0x0000002f), propget, helpstring("method Type")]
        HRESULT type([out, retval] BSTR* pVal);
        [id(0x0000002f), propput, helpstring("method Type")]
        HRESULT type([in] BSTR pVal);
        [id(0x00000030), propget, helpstring("method Component")]
        HRESULT Component([out, retval] BSTR* pVal);
        [id(0x00000030), propput, helpstring("method Component")]
        HRESULT Component([in] BSTR pVal);
        [id(0x00000033), propget, helpstring("property GraphControlsXAxis")]
        HRESULT GraphControlsXAxis([out, retval] int* pVal);
        [id(0x00000033), propput, helpstring("property GraphControlsXAxis")]
        HRESULT GraphControlsXAxis([in] int pVal);
        [id(0x00000034), propget, helpstring("method ResultAveraging")]
        HRESULT ResultAveraging([out, retval] int* pVal);
        [id(0x00000034), propput, helpstring("method ResultAveraging")]
        HRESULT ResultAveraging([in] int pVal);
        [id(0x00000035), helpstring("method CreateTabbedFile")]
        HRESULT CreateTabbedFile(
                        [in] BSTR filePath, 
                        [out, retval] BSTR* fileText);
        [id(0x00000036), propget, helpstring("property MinimumOfMinimumOverTime")]
        HRESULT MinimumOfMinimumOverTime([out, retval] double* pVal);
        [id(0x00000037), propget, helpstring("property MaximumOfMinimumOverTime")]
        HRESULT MaximumOfMinimumOverTime([out, retval] double* pVal);
        [id(0x00000038), propget, helpstring("property MinimumOfMaximumOverTime")]
        HRESULT MinimumOfMaximumOverTime([out, retval] double* pVal);
        [id(0x00000039), propget, helpstring("property MaximumOfMaximumOverTime")]
        HRESULT MaximumOfMaximumOverTime([out, retval] double* pVal);
        [id(0x0000003a), propget, helpstring("property Average")]
        HRESULT Average([out, retval] double* pVal);
        [id(0x0000003b), helpstring("method ReadTabbedFile")]
        HRESULT ReadTabbedFile(
                        [in] BSTR fileText, 
                        [out, retval] BSTR* dummy);
        [id(0x0000003c), propget, helpstring("property Flow")]
        HRESULT Flow([out, retval] double* pVal);
        [id(0x0000003e), propget, helpstring("property IsSolved")]
        HRESULT IsSolved([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000054), propget, helpstring("property LoadMultiplier")]
        HRESULT LoadMultiplier([out, retval] double* pVal);
        [id(0x0000003f), propget, helpstring("property CyclicMinimumOverPhase")]
        HRESULT CyclicMinimumOverPhase([out, retval] double* pVal);
        [id(0x00000040), propget, helpstring("property CyclicMaximumOverPhase")]
        HRESULT CyclicMaximumOverPhase([out, retval] double* pVal);
        [id(0x00000041), propget, helpstring("property CyclicPhaseForMinimum")]
        HRESULT CyclicPhaseForMinimum([out, retval] double* pVal);
        [id(0x00000042), propget, helpstring("property CyclicPhaseForMaximum")]
        HRESULT CyclicPhaseForMaximum([out, retval] double* pVal);
        [id(0x00000043), propget, helpstring("method CyclicHarmonicIndex")]
        HRESULT CyclicHarmonicIndex([out, retval] unsigned int* pVal);
        [id(0x00000043), propput, helpstring("method CyclicHarmonicIndex")]
        HRESULT CyclicHarmonicIndex([in] unsigned int pVal);
        [id(0x00000044), propget, helpstring("method CyclicPhaseAngle")]
        HRESULT CyclicPhaseAngle([out, retval] double* pVal);
        [id(0x00000044), propput, helpstring("method CyclicPhaseAngle")]
        HRESULT CyclicPhaseAngle([in] double pVal);
        [id(0x00000045), propget, helpstring("property CyclicMode")]
        HRESULT CyclicMode([out, retval] unsigned int* pVal);
        [id(0x00000045), propput, helpstring("property CyclicMode")]
        HRESULT CyclicMode([in] unsigned int pVal);
        [id(0x00000046), propget, helpstring("property ComponentSelection")]
        HRESULT ComponentSelection([out, retval] dsid* pVal);
        [id(0x00000046), propput, helpstring("property ComponentSelection")]
        HRESULT ComponentSelection([in] dsid pVal);
        [id(0x00000047), propget, helpstring("property CyclicPhaseHistory")]
        HRESULT CyclicPhaseHistory([out, retval] unsigned int* pVal);
        [id(0x00000047), propput, helpstring("property CyclicPhaseHistory")]
        HRESULT CyclicPhaseHistory([in] unsigned int pVal);
        [id(0x00000048), propget, helpstring("property ActualFrequency")]
        HRESULT ActualFrequency([out, retval] double* pVal);
        [id(0x0000004b), propget, helpstring("property ActualStability")]
        HRESULT ActualStability([out, retval] double* pVal);
        [id(0x0000004c), propget, helpstring("property ActualModalDampingRatio")]
        HRESULT ActualModalDampingRatio([out, retval] double* pVal);
        [id(0x0000004d), propget, helpstring("property ActualLogarithmicDecrement")]
        HRESULT ActualLogarithmicDecrement([out, retval] double* pVal);
        [id(0x00000049), propget, helpstring("property ExternalObject")]
        HRESULT ExternalObject([out, retval] IDispatch** pDisp);
        [id(0x00000049), propput, helpstring("property ExternalObject")]
        HRESULT ExternalObject([in] IDispatch* pDisp);
        [id(0x0000004a), propget, helpstring("property ResultFileName")]
        HRESULT ResultFileName([out, retval] BSTR* filename);
        [id(0x0000004e), propget, helpstring("property Suppressed")]
        HRESULT Suppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000004e), propput, helpstring("property Suppressed")]
        HRESULT Suppressed([in] VARIANT_BOOL pVal);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x0000004f), propget, helpstring("property CrackID")]
        HRESULT CrackID([out, retval] int* pVal);
        [id(0x0000004f), propput, helpstring("property CrackID")]
        HRESULT CrackID([in] int pVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x00000050), propget, helpstring("method ResultAveragingAcross")]
        HRESULT ResultAveragingAcross([out, retval] int* pVal);
        [id(0x00000050), propput, helpstring("method ResultAveragingAcross")]
        HRESULT ResultAveragingAcross([in] int pVal);
        [id(0x00000051), propget, helpstring("property IsACTResult")]
        HRESULT IsACTResult([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000051), propput, helpstring("property IsACTResult")]
        HRESULT IsACTResult([in] VARIANT_BOOL pVal);
        [id(0x00000052), helpstring("method ExportNodalResults")]
        HRESULT ExportNodalResults(
                        [in] IDispatch* piSelectMgr, 
                        [out, retval] BSTR* fileText);
        [id(0x00000053), propget, helpstring("method IsExternalObjectBased")]
        HRESULT IsExternalObjectBased([out, retval] VARIANT_BOOL* isExt);
        [id(0x00000055), propget, helpstring("property ResultLegendStyle")]
        HRESULT ResultLegendStyle([out, retval] BSTR* pStyle);
        [id(0x00000055), propput, helpstring("property ResultLegendStyle")]
        HRESULT ResultLegendStyle([in] BSTR pStyle);
        [id(0x00000057), propget, helpstring("property SubScopeDefineBy")]
        HRESULT SubScopeDefineBy([out, retval] DSSubScopingDefineByType* pVal);
        [id(0x00000057), propput, helpstring("property SubScopeDefineBy")]
        HRESULT SubScopeDefineBy([in] DSSubScopingDefineByType pVal);
        [id(0x00000056), propget, helpstring("property PlySelection")]
        HRESULT PlySelection([out, retval] IDispatch** ppIAnsEnumULONGsDisp);
        [id(0x00000056), propput, helpstring("property PlySelection")]
        HRESULT PlySelection([in] IDispatch* ppIAnsEnumULONGsDisp);
        [id(0x60020072), propget]
        HRESULT CanAddId(
                        [in] int lDSId, 
                        [out, retval] VARIANT_BOOL* pvbCanAdd);
        [id(0x00000058), propget, helpstring("method CoreResultType")]
        HRESULT CoreResultType([out, retval] DSCoreResultType* pVal);
        [id(0x00000058), propput, helpstring("method CoreResultType")]
        HRESULT CoreResultType([in] DSCoreResultType pVal);
        [id(0x00000059), propget, helpstring("property ResultRelativity")]
        HRESULT ResultRelativity([out, retval] ResultRelativityType* pVal);
        [id(0x00000059), propput, helpstring("property ResultRelativity")]
        HRESULT ResultRelativity([in] ResultRelativityType pVal);
        [id(0x0000005a), propget, helpstring("property ResultScopeBy")]
        HRESULT ResultScopeBy([out, retval] ResultScopeByType* pVal);
        [id(0x0000005a), propput, helpstring("property ResultScopeBy")]
        HRESULT ResultScopeBy([in] ResultScopeByType pVal);
        [id(0x0000005b), propget, helpstring("property ResultScaleFactor")]
        HRESULT ResultScaleFactor([out, retval] double* pVal);
        [id(0x0000005b), propput, helpstring("property ResultScaleFactor")]
        HRESULT ResultScaleFactor([in] double pVal);
        [id(0x0000005c), propget, helpstring("property ResultPSDProbability")]
        HRESULT ResultPSDProbability([out, retval] double* pVal);
        [id(0x0000005c), propput, helpstring("property ResultPSDProbability")]
        HRESULT ResultPSDProbability([in] double pVal);
    };

    typedef enum {
        kSDUndefined = 0,
        kSDTime = 1,
        kSDResultSet = 2,
        kSDMaxOverTime = 3,
        kSDTimeOfMax = 4,
        kSDMaxOverPhase = 5,
        kSDPhaseOfMax = 6,
        kSDMaxOfCyclicPhase = 7,
        kSDCyclicPhaseOfMax = 8,
        kSDMaxOverModes = 9,
        kSDModeOfMax = 10
    } DSSetDriverStyle;

    typedef enum {
        kSubScopingDefineByLayer = 0,
        kSubScopingDefineByPlies = 1,
        kSubScopingDefineByEntireSection = 2
    } DSSubScopingDefineByType;

    typedef enum {
        kmUnknown = 0xffffffff,
        kmDisplacement = 0,
        kmModeShapes = 1,
        kmElasticStrain = 2,
        kmThermalStrain = 3,
        kmPlasticStrain = 4,
        kmStress = 5,
        kmTemperature = 6,
        kmFlux = 7,
        kmContactStatus = 8,
        kmContactPressure = 9,
        kmEmagB = 10,
        kmEmagH = 11,
        kmEmagF = 12,
        kmEmagV = 13,
        kmTopo = 14,
        kmStructError = 15,
        kmThermalError = 16,
        kmStructuralReactions = 17,
        kmThermalReactions = 18,
        kmResultsHistory = 19,
        kmNaturalFrequencies = 20,
        kmContactPenetration = 21,
        kmContactGap = 22,
        kmContactSlidingDistance = 23,
        kmContactFrictionalStress = 24,
        kmStructuralNodalForces = 25,
        kmStructuralNodalMoments = 26,
        kmAcceleration = 27,
        kmGeneralTimeHistory = 28,
        kmNRResidualForce = 29,
        kmNRResidualMoment = 30,
        kmNRResidualHeat = 31,
        kmStructContactData = 32,
        kmThermContactData = 33,
        kmBeamStressData = 34,
        kmStructuralReactionMoments = 35,
        kmEmagReactionCurrents = 36,
        kmInductance = 37,
        kmEmagJ = 38,
        kmVelocity = 39,
        kmVelocityPSD = 40,
        kmAccelerationPSD = 41,
        kmElementalTopo = 42,
        kmMagneticError = 43,
        kmElementalEnergy = 44,
        kmStructuralEnergy = 45,
        kmThermalEnergy = 46,
        kmStressPSD = 47,
        kmElectricV = 48,
        kmElectricJ = 49,
        kmElectricE = 50,
        kmElectricD = 51,
        kmElectricH = 52,
        kmRigidRotation = 53,
        kmAngularVelocity = 54,
        kmAngularAcceleration = 55,
        kmVelocityRS = 56,
        kmAccelerationRS = 57,
        kmMagneticCoEnergy = 58,
        kmEmagA = 59,
        kmStressRS = 60,
        kmElementalCSYS = 61,
        kmNodalCSYS = 62,
        kmAxialForceDiagram = 63,
        kmBendingMomentDiagram = 64,
        kmTorsionalMomentDiagram = 65,
        kmShearForceDiagram = 66,
        kmShearMomentDiagram = 67,
        kmGasketPressure = 68,
        kmGasketTotalClosure = 69,
        kmCreepStrain = 70,
        kmEquivalentTotalStrainRST = 71,
        kmStabilizationEnergy = 72,
        kmEffectiveStrainRST = 73,
        kmEquivalentPlasticStrainRST = 74,
        kmEquivalentCreepStrainRST = 75,
        kmShellMembraneStress = 76,
        kmShellBendingStress = 77,
        kmShellBottomPeakStress = 78,
        kmShellTopPeakStress = 79,
        kmContactFluidPressure = 80,
        kmCintJINT = 81,
        kmCintK1 = 82,
        kmCintK2 = 83,
        kmCintK3 = 84,
        kmCintG1 = 85,
        kmCintG2 = 86,
        kmCintG3 = 87,
        kmCintGT = 88,
        kmMullinsDamageVariable = 89,
        kmMullinsMaximumPreviousStrainEnergy = 90,
        kmPFCMaxFailureCriteria = 91,
        kmPFCFiberTensileFailure = 92,
        kmPFCFiberCompressiveFailure = 93,
        kmPFCMatrixTensileFailure = 94,
        kmPFCMatrixCompressiveFailure = 95,
        kmPDMGDamageStatus = 96,
        kmPDMGFiberTensileDamageVariable = 97,
        kmPDMGFiberCompressiveDamageVariable = 98,
        kmPDMGMatrixTensileDamageVariable = 99,
        kmPDMGMatrixCompressiveDamageVariable = 100,
        kmShearDamageVariable = 101,
        kmEnergyDissipatedPerUnitVolume = 102,
        kmBoltAdjustment = 103,
        kmBoltWorkLoad = 104,
        kmFluid116FlowRate = 105,
        kmFluid116HtCondRate = 106,
        kmFluid116HtTranspRate = 107,
        kmCintTSTRESS = 108,
        kmCintMFTX = 109,
        kmCintMFTY = 110,
        kmCintMFTZ = 111,
        kmCintCSTAR = 112,
        kmFlexibleRotation = 113,
        kmContactHeatFlux = 114
    } DSCoreResultType;

    typedef enum {
        kAbsolute = 0,
        kRelative = 1
    } ResultRelativityType;

    typedef enum {
        k1Sigma = 0,
        k2Sigma = 1,
        k3Sigma = 2,
        kUserDefined = 3
    } ResultScopeByType;

    [
      odl,
      uuid(FD2AC062-2046-4394-990A-C9809E6E5DDD),
      helpstring("IDSDataCurve Interface"),
      dual,
      oleautomation
    ]
    interface IDSDataCurve : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x00000019), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x00000024), helpstring("method GetTableType")]
        HRESULT GetTableType([out, retval] int* tableType);
        [id(0x00000026), propget, helpstring("property CanEdit")]
        HRESULT CanEdit(
                        [in] unsigned int objId, 
                        [out, retval] VARIANT_BOOL* pVal);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** __MIDL__IDSDataCurve0000);
    };

    [
      odl,
      uuid(E2AE13BA-F4F8-4070-B5E9-BA4BEB571171),
      helpstring("IDSDataTable Interface"),
      dual,
      oleautomation
    ]
    interface IDSDataTable : IDispatch {
        [id(0x00000001), propget, helpstring("property Count")]
        HRESULT Count([out, retval] VARIANT* pVal);
        [id(0x00000002), propget, helpstring("property Value")]
        HRESULT Value(
                        int index1, 
                        int index2, 
                        [out, retval] VARIANT* pVal);
        [id(0x00000003), propget, helpstring("property ValueDbl")]
        HRESULT ValueDbl(
                        int index1, 
                        int index2, 
                        [out, retval] double* pVal);
    };

    [
      odl,
      uuid(ED8EF51B-C151-44DD-9E0A-81C8E0B0B921),
      helpstring("IDSElementAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSElementAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property NodeIndex")]
        HRESULT NodeIndex(
                        int index, 
                        [out, retval] int* pVal);
        [id(0x00000002), propget, helpstring("property NumNodes")]
        HRESULT NumNodes([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Index")]
        HRESULT index([out, retval] int* pVal);
    };

    typedef enum {
        DISPID_EnvironmentTemperature = 10,
        DISPID_EnvironmentAnswerSet = 11,
        DISPID_EnvironmentSupports = 12,
        DISPID_EnvironmentStructuralLoads = 13,
        DISPID_EnvironmentThermalLoads = 14,
        DISPID_EnvironmentHasMesh = 15,
        DISPID_EnvironmentHasMeshBC = 16,
        DISPID_EnvironmentMeshes = 17,
        DISPID_EnvironmentMeshBCs = 18,
        DISPID_EnvironmentContactRegions = 19,
        DISPID_EnvironmentSolutionSummary = 20,
        DISPID_EnvironmentTemperatureUnits = 21,
        DISPID_EnvironmentComments = 22,
        DISPID_EnvironmentFigures = 23,
        DISPID_EnvironmentConditions = 24,
        DISPID_EnvironmentAdvancedOptions = 25,
        DISPID_EnvironmentUseInertialRelief = 26,
        DISPID_EnvironmentHarmonicLoads = 27,
        DISPID_EnvironmentWorkingDir = 28,
        DISPID_EnvironmentWeakSpringsActive = 29,
        DISPID_EnvironmentWeakSpringsReactionComponent = 30,
        DISPID_EnvironmentWeakSpringsReactionMagnitude = 31,
        DISPID_EnvironmentWeakSpringsReactionComponentX = 32,
        DISPID_EnvironmentWeakSpringsReactionComponentY = 33,
        DISPID_EnvironmentWeakSpringsReactionComponentZ = 34,
        DISPID_EnvironmentAutomaticConvectionActive = 35,
        DISPID_EnvironmentLoadGroups = 36,
        DISPID_EnvironmentEmagLoads = 37,
        DISPID_EnvironmentSpecifyUniformTemp = 38,
        DISPID_EnvironmentUniformTemperature = 39,
        DISPID_EnvironmentTimeType = 40,
        DISPID_EnvironmentSequenceSteps = 41,
        DISPID_EnvironmentCurrentSequenceStepIndex = 42,
        DISPID_EnvironmentMeshConfigurationId = 43,
        DISPID_EnvironmentAssemblyMesh = 44,
        DISPID_EnvironmentWeakSpringsReactionMagnitudeByLoadStep = 45,
        DISPID_EnvironmentWeakSpringsReactionComponentByLoadStep = 46,
        DISPID_EnvironmentSimulationType = 47,
        DISPID_EnvironmentSequenceType = 48,
        DISPID_EnvironmentLoads = 49,
        DISPID_EnvironmentGeneralLoads = 50,
        DISPID_EnvironmentInitialConditions = 51,
        DISPID_EnvironmentThermalCondition = 52,
        DISPID_EnvironmentCurrentTransientTime = 53,
        DISPID_EnvironmentPhysicsType = 54,
        DISPID_EnvironmentAnalysisType = 55,
        DISPID_EnvironmentSolverTarget = 56,
        DISPID_EnvironmentTransientThermalSettings = 57,
        DISPID_EnvironmentAnalysisSettings = 58,
        DISPID_EnvironmentImages = 59,
        DISPID_EnvironmentUnitTypeByDispid = 60,
        DISPID_EnvironmentUnitStringByDispid = 61,
        DISPID_EnvironmentParamNameByDispid = 62,
        DISPID_EnvironmentEmagCondition = 63,
        DISPID_EnvironmentCoupledPhysicsType = 64,
        DISPID_EnvironmentSetupGenerateInputFile = 65,
        DISPID_EnvironmentExternalLoadGroups = 66,
        DISPID_EnvironmentAddFigure = 70,
        DISPID_EnvironmentAddConductor = 71,
        DISPID_EnvironmentAddCommandEditor = 72,
        DISPID_EnvironmentAddGeneralLoad = 73,
        DISPID_EnvironmentCommandEditors = 74,
        DISPID_EnvironmentAddLoad = 75,
        DISPID_EnvironmentAddSupport = 76,
        DISPID_EnvironmentAddAdvancedOptions = 77,
        DISPID_EnvironmentAddCondition = 78,
        DISPID_EnvironmentAddComment = 79,
        DISPID_EnvironmentDeleteSequenceEntry = 80,
        DISPID_EnvironmentInsertSequenceEntry = 81,
        DISPID_EnvironmentSequenceEntryPasteAfter = 82,
        DISPID_EnvironmentThermalStressType = 86,
        DISPID_EnvironmentThermalStressEnvironment = 87,
        DISPID_EnvironmentThermalStressEnvironmentTime = 88,
        DISPID_EnvironmentAddPSDLoad = 90,
        DISPID_EnvironmentAddImage = 91,
        DISPID_EnvironmentAddJointCondition = 92,
        DISPID_EnvironmentJointConditions = 93,
        DISPID_EnvironmentAddCFXLoad = 94,
        DISPID_EnvironmentAddAutodynBC = 95,
        DISPID_EnvironmentAddExternalLoad = 96,
        DISPID_EnvironmentAddNewPSDLoad = 97,
        DISPID_EnvironmentAddCouplingCondition = 98,
        DISPID_EnvironmentAddInitialCondition = 99,
        DISPID_EnvironmentAddRSLoad = 100,
        DISPID_EnvironmentShowChildren = 101,
        DISPID_EnvironmentSolverTargetName = 102,
        DISPID_EnvironmentShowChildrenNoUpdate = 103,
        DISPID_EnvironmentShowChildrenRefreshEvent = 104,
        DISPID_EnvironmentAddExternalLoadGroup = 105,
        DISPID_EnvironmentMaterialForceResolve = 106,
        DISPID_EnvironmentMaterialForcePost = 107,
        DISPID_ProjectDirectoryChanged = 108,
        DISPID_EnvironmentFilterBasedOnSetup = 109,
        DISPID_EnvironmentResetSetup = 110,
        DISPID_EnvironmentClearSetup = 111,
        DISPID_EnvironmentSetSolveHandlerInfo = 112,
        DISPID_EnvironmentUpdateSetup = 113,
        DISPID_SystemCaption = 114,
        DISPID_EnvironmentCleanSetupForDuplicate = 115,
        DISPID_EnvironmentAddConstraintEquation = 116,
        DISPID_EnvironmentAddDAAttribute = 117,
        DISPID_EnvironmentGetPrerequisiteFiles = 118,
        DISPID_EnvironmentAddNodalRotation = 119,
        DISPID_EnvironmentAddFELoad = 120,
        DISPID_EnvironmentAddPipeIdealization = 121,
        DISPID_EnvironmentAddLoadGroupForExternalConxn = 122,
        DISPID_EnvironmentAddNonlinearAdaptivity = 123,
        DISPID_EnvironmentAddPhysicsRegion = 124,
        DISPID_EnvironmentIsMultiPhysics = 125,
        DISPID_EnvironmentIsMSUPTransient = 126,
        DISPID_EnvironmentSetPropertyByStep = 127,
        DISPID_EnvironmentGetJSON = 128
    } kDispId_Environment;

    [
      odl,
      uuid(5F3B89E3-3581-49A7-A03D-542AF2ACB42D),
      helpstring("IDSEnvironmentAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSEnvironmentAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000036), propget, helpstring("property PhysicsType")]
        HRESULT PhysicsType([out, retval] DSPhysicsType* pVal);
        [id(0x00000036), propput, helpstring("property PhysicsType")]
        HRESULT PhysicsType([in] DSPhysicsType pVal);
        [id(0x00000037), propget, helpstring("property AnalysisType")]
        HRESULT AnalysisType([out, retval] DSSimulationType* pVal);
        [id(0x00000037), propput, helpstring("property AnalysisType")]
        HRESULT AnalysisType([in] DSSimulationType pVal);
        [id(0x0000000a), propget, helpstring("property Temperature")]
        HRESULT Temperature([out, retval] double* pVal);
        [id(0x0000000a), propput, helpstring("property Temperature")]
        HRESULT Temperature([in] double pVal);
        [id(0x00000026), propget, helpstring("property SpecifyUniformTemp")]
        HRESULT SpecifyUniformTemp([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000026), propput, helpstring("property SpecifyUniformTemp")]
        HRESULT SpecifyUniformTemp([in] VARIANT_BOOL pVal);
        [id(0x00000027), propget, helpstring("property UniformTemperature")]
        HRESULT UniformTemperature([out, retval] double* pVal);
        [id(0x00000027), propput, helpstring("property UniformTemperature")]
        HRESULT UniformTemperature([in] double pVal);
        [id(0x0000001a), propget, helpstring("property UseInertialRelief")]
        HRESULT UseInertialRelief([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000001a), propput, helpstring("property UseInertialRelief")]
        HRESULT UseInertialRelief([in] VARIANT_BOOL pVal);
        [id(0x00000028), propget, helpstring("property TimeType")]
        HRESULT TimeType([out, retval] DSTimeType* pTimeType);
        [id(0x00000028), propput, helpstring("property TimeType")]
        HRESULT TimeType([in] DSTimeType pTimeType);
        [id(0x00000029), propget, helpstring("property SequenceSteps")]
        HRESULT SequenceSteps([out, retval] unsigned int* pVal);
        [id(0x00000029), propput, helpstring("property SequenceSteps")]
        HRESULT SequenceSteps([in] unsigned int pVal);
        [id(0x0000002a), propget, helpstring("property CurrentSequenceStepIndex")]
        HRESULT CurrentSequenceStepIndex([out, retval] unsigned int* pVal);
        [id(0x0000002a), propput, helpstring("property CurrentSequenceStepIndex")]
        HRESULT CurrentSequenceStepIndex([in] unsigned int pVal);
        [id(0x0000002f), propget, helpstring("property SimulationType")]
        HRESULT SimulationType([out, retval] DSSimulationType* pSimType);
        [id(0x0000002f), propput, helpstring("property SimulationType")]
        HRESULT SimulationType([in] DSSimulationType pSimType);
        [id(0x00000030), propget, helpstring("property SequenceType")]
        HRESULT SequenceType([out, retval] DSSimulationSequenceType* pSeqType);
        [id(0x00000030), propput, helpstring("property SequenceType")]
        HRESULT SequenceType([in] DSSimulationSequenceType pSeqType);
        [id(0x0000001e), propget, helpstring("property WeakSpringsReactionComponent")]
        HRESULT WeakSpringsReactionComponent(
                        int index, 
                        [out, retval] double* pVal);
        [id(0x0000001f), propget, helpstring("property WeakSpringsReactionMagnitude")]
        HRESULT WeakSpringsReactionMagnitude([out, retval] double* pVal);
        [id(0x00000020), propget, helpstring("property WeakSpringsReactionComponentX")]
        HRESULT WeakSpringsReactionComponentX([out, retval] double* pVal);
        [id(0x00000021), propget, helpstring("property WeakSpringsReactionComponentY")]
        HRESULT WeakSpringsReactionComponentY([out, retval] double* pVal);
        [id(0x00000022), propget, helpstring("property WeakSpringsReactionComponentZ")]
        HRESULT WeakSpringsReactionComponentZ([out, retval] double* pVal);
        [id(0x0000000b), propget, helpstring("property AnswerSet")]
        HRESULT AnswerSet([out, retval] IDispatch** pVal);
        [id(0x0000000c), propget, helpstring("property Supports")]
        HRESULT Supports([out, retval] IDispatch** pVal);
        [id(0x0000000d), propget, helpstring("property StructuralLoads")]
        HRESULT StructuralLoads([out, retval] IDispatch** pVal);
        [id(0x0000001b), propget, helpstring("property HarmonicLoads")]
        HRESULT HarmonicLoads([out, retval] IDispatch** pVal);
        [id(0x0000000e), propget, helpstring("property ThermalLoads")]
        HRESULT ThermalLoads([out, retval] IDispatch** pVal);
        [id(0x00000019), propget, helpstring("property ThermalAdvancedOptions")]
        HRESULT AdvancedOptions([out, retval] IDispatch** ppDisp);
        [id(0x0000000f), propget, helpstring("property HasMesh")]
        HRESULT HasMesh([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000010), propget, helpstring("property HasMeshBC")]
        HRESULT HasMeshBC([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000011), propget, helpstring("property Meshes")]
        HRESULT Meshes([out, retval] IDispatch** pVal);
        [id(0x00000012), propget, helpstring("property MeshBCs")]
        HRESULT MeshBCs([out, retval] IDispatch** pVal);
        [id(0x00000013), propget, helpstring("property ContactRegions")]
        HRESULT ContactRegions([out, retval] IDispatch** ppDisp);
        [id(0x00000014), propget, helpstring("property SolutionSummary")]
        HRESULT SolutionSummary([out, retval] BSTR* pVal);
        [id(0x0000001d), propget, helpstring("property WeakSpringsActive")]
        HRESULT WeakSpringsActive([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000023), propget, helpstring("property AutomaticConvectionActive")]
        HRESULT AutomaticConvectionActive([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000015), propget, helpstring("property TemperatureUnits")]
        HRESULT TemperatureUnits([out, retval] BSTR* pVal);
        [id(0x0000004b), helpstring("method AddLoad")]
        HRESULT AddLoad(
                        [in] IDispatch* piSelectMgr, 
                        [in] unsigned int loadType, 
                        [out, retval] IDispatch** ppVal);
        [id(0x0000004c), helpstring("method AddSupport")]
        HRESULT AddSupport(
                        [in] IDispatch* piSelectMgr, 
                        [in] unsigned int SupportType, 
                        [out, retval] IDispatch** ppVal);
        [id(0x0000004d), helpstring("method AddAdvancedOptions")]
        HRESULT AddAdvancedOptions([out, retval] IDispatch** ppVal);
        [id(0x0000004e), helpstring("method AddCondition")]
        HRESULT AddCondition(
                        [in] unsigned int conditionType, 
                        [out, retval] IDispatch** ppVal);
        [id(0x0000004f), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x00000016), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x00000017), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x00000018), propget, helpstring("property Conditions")]
        HRESULT Conditions([out, retval] IDispatch** ppDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x00000046), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x0000001c), propget, helpstring("property WorkingDir")]
        HRESULT WorkingDir([out, retval] BSTR* pVal);
        [id(0x00000047), helpstring("method AddConductor")]
        HRESULT AddConductor(
                        [in] IDispatch* piSelectMgr, 
                        [out, retval] IDispatch** ppVal);
        [id(0x00000048), helpstring("method AddCommandEditor")]
        HRESULT AddCommandEditor([out, retval] IDispatch** ppVal);
        [id(0x00000024), propget, helpstring("property LoadGroups")]
        HRESULT LoadGroups([out, retval] IDispatch** ppDisp);
        [id(0x00000025), propget, helpstring("property EmagLoads")]
        HRESULT EmagLoads([out, retval] IDispatch** pVal);
        [id(0x00000049), helpstring("method AddGeneralLoad")]
        HRESULT AddGeneralLoad(
                        [in] IDispatch* piSelectMgr, 
                        [out, retval] IDispatch** ppVal);
        [id(0x0000004a), propget, helpstring("property CommandEditors")]
        HRESULT CommandEditors([out, retval] IDispatch** ppDisp);
        [id(0x0000002b), propget, helpstring("property MeshConfigurationId")]
        HRESULT MeshConfigurationId([out, retval] int* pVal);
        [id(0x0000002c), propget, helpstring("property AssemblyMesh")]
        HRESULT AssemblyMesh([out, retval] IDispatch** pDisp);
        [id(0x00000050), helpstring("method DeleteSequenceEntry")]
        HRESULT DeleteSequenceEntry([in] int index);
        [id(0x00000051), helpstring("method InsertSequenceEntry")]
        HRESULT InsertSequenceEntry([in] int index);
        [id(0x00000052), helpstring("method SequenceEntryPasteAfter")]
        HRESULT SequenceEntryPasteAfter(
                        [in] int indexDest, 
                        [in] int indexSrc);
        [id(0x0000002e), propget, helpstring("property WeakSpringsReactionComponentByLoadStep")]
        HRESULT WeakSpringsReactionComponentByLoadStep(
                        int index, 
                        [in] unsigned int ulLoadStep, 
                        [out, retval] double* pVal);
        [id(0x0000002d), propget, helpstring("property WeakSpringsReactionMagnitudeByLoadStep")]
        HRESULT WeakSpringsReactionMagnitudeByLoadStep(
                        [in] unsigned int ulLoadStep, 
                        [out, retval] double* pVal);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** __MIDL__IDSEnvironmentAuto0000);
        [id(0x00000031), propget, helpstring("property Loads")]
        HRESULT Loads([out, retval] IDispatch** pVal);
        [id(0x00000033), propget, helpstring("property InitialConditions")]
        HRESULT InitialConditions([out, retval] IDispatch** pVal);
        [id(0x00000032), propget, helpstring("property GeneralLoads")]
        HRESULT GeneralLoads([out, retval] IDispatch** pVal);
        [id(0x00000034), propget, helpstring("property ThermalCondition")]
        HRESULT ThermalCondition([out, retval] IDispatch** pVal);
        [id(0x00000035), propget, helpstring("property CurrentTransientTime")]
        HRESULT CurrentTransientTime([out, retval] double* pVal);
        [id(0x00000035), propput, helpstring("property CurrentTransientTime")]
        HRESULT CurrentTransientTime([in] double pVal);
        [id(0x0000005a), helpstring("method AddPSDLoad")]
        HRESULT AddPSDLoad(
                        [in] unsigned int psdType, 
                        [out, retval] IDispatch** ppVal);
        [id(0x0000003b), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x0000005b), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x0000005c), helpstring("method AddJointCondition")]
        HRESULT AddJointCondition([out, retval] IDispatch** ppVal);
        [id(0x0000005d), propget, helpstring("property Meshes")]
        HRESULT JointConditions([out, retval] IDispatch** pVal);
        [id(0x0000003a), propget, helpstring("property AnalysisSettings")]
        HRESULT AnalysisSettings([out, retval] IDispatch** ppVal);
        [id(0x0000003c), propget, helpstring("property UnitTypeByDispid")]
        HRESULT UnitTypeByDispid(
                        [in] int dispid, 
                        [out, retval] int* unitType);
        [id(0x0000003d), propget, helpstring("property UnitStringByDispid")]
        HRESULT UnitStringByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* unitString);
        [id(0x0000005e), helpstring("method AddCFXLoad")]
        HRESULT AddCFXLoad(
                        [in] IDispatch* piSelectMgr, 
                        [in] unsigned int bcType, 
                        [out, retval] IDispatch** ppVal);
        [id(0x0000005f), helpstring("method AddAutodynBC")]
        HRESULT AddAutodynBC(
                        [in] IDispatch* piSelectMgr, 
                        [in] unsigned int bcType, 
                        [out, retval] IDispatch** ppVal);
        [id(0x0000003e), propget, helpstring("property ParamNameByDispid")]
        HRESULT ParamNameByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* paramName);
        [id(0x00000038), propget, helpstring("property SolverTarget")]
        HRESULT SolverTarget([out, retval] int* pVal);
        [id(0x00000038), propput, helpstring("property SolverTarget")]
        HRESULT SolverTarget([in] int pVal);
        [id(0x00000060), helpstring("method AddExternalLoad")]
        HRESULT AddExternalLoad(
                        [in] IDispatch* piSelectMgr, 
                        [in] DSExternalLoadType eExternalLoadType, 
                        [out, retval] IDispatch** ppVal);
        [id(0x0000003f), propget, helpstring("property EmagCondition")]
        HRESULT EmagCondition([out, retval] IDispatch** pVal);
        [id(0x00000062), helpstring("method AddCouplingCondition")]
        HRESULT AddCouplingCondition(
                        [in] IDispatch* piSelectMgr, 
                        [out, retval] IDispatch** ppVal);
        [id(0x00000066), propget, helpstring("method SolverTargetName")]
        HRESULT SolverTargetName([out, retval] BSTR* bsSolverTargetName);
        [id(0x00000066), propput, helpstring("method SolverTargetName")]
        HRESULT SolverTargetName([in] BSTR bsSolverTargetName);
        [id(0x00000063), helpstring("method AddInitialCondition")]
        HRESULT AddInitialCondition(
                        [in] unsigned int initCondType, 
                        [in] IDispatch* piSelectMgr, 
                        [out, retval] IDispatch** ppVal);
        [id(0x00000064), helpstring("method AddRSLoad")]
        HRESULT AddRSLoad(
                        [in] unsigned int rsType, 
                        [out, retval] IDispatch** ppVal);
        [id(0x00000040), propget, helpstring("property CoupledPhysicsType")]
        HRESULT CoupledPhysicsType([out, retval] DSCoupledPhysicsType* pVal);
        [id(0x00000040), propput, helpstring("property CoupledPhysicsType")]
        HRESULT CoupledPhysicsType([in] DSCoupledPhysicsType pVal);
        [id(0x00000065), propget, helpstring("property ShowChildren")]
        HRESULT ShowChildren([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000065), propput, helpstring("property ShowChildren")]
        HRESULT ShowChildren([in] VARIANT_BOOL pVal);
        [id(0x00002710), propget, helpstring("property CellId")]
        HRESULT CellId([out, retval] BSTR* pVal);
        [id(0x00002710), propput, helpstring("property CellId")]
        HRESULT CellId([in] BSTR pVal);
        [id(0x00002711), propget, helpstring("property DisplayName")]
        HRESULT DisplayName([out, retval] BSTR* pVal);
        [id(0x00000067), propput, helpstring("property ShowChildrenNoUpdate")]
        HRESULT ShowChildrenNoUpdate([in] VARIANT_BOOL rhs);
        [id(0x00000068), helpstring("method RequestFilteringEvent")]
        HRESULT RequestFilteringEvent();
        [id(0x00000069), helpstring("method AddExternalLoadGroup")]
        HRESULT AddExternalLoadGroup(
                        [in] BSTR bsSrcPhysics, 
                        [out, retval] IDispatch** ppVal);
        [id(0x00000041), propget, helpstring("property SetupGenerateInputFile")]
        HRESULT SetupGenerateInputFile([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000041), propput, helpstring("property SetupGenerateInputFile")]
        HRESULT SetupGenerateInputFile([in] VARIANT_BOOL pVal);
        [id(0x00000042), propget, helpstring("property ExternalLoadGroups")]
        HRESULT ExternalLoadGroups([out, retval] IDispatch** ppDisp);
        [id(0x0000006a), helpstring("Firing based on Material Effects")]
        HRESULT FireMaterialUpdateEvent([in] VARIANT_BOOL newVal);
        [id(0x0000006c), helpstring("Project directory has changed")]
        HRESULT ProjectDirectoryChanged([in] BSTR bsDirectory);
        [id(0x0000006d), helpstring("Enable Filtering Based On Setup")]
        HRESULT FilterBasedOnSetup();
        [id(0x0000006e), helpstring("method ResetSetup")]
        HRESULT ResetSetup();
        [id(0x0000006f), helpstring("method ClearSetup")]
        HRESULT ClearSetup();
        [id(0x00000070), helpstring("method SetSolveHandlerInfo")]
        HRESULT SetSolveHandlerInfo(
                        [in] VARIANT_BOOL isInProcess, 
                        [in] BSTR solveHandlerName);
        [id(0x00000071), helpstring("method UpdateSetup")]
        HRESULT UpdateSetup([in] IAnsProgress* piProgress);
        [id(0x00000072), propget, helpstring("property SystemCaption")]
        HRESULT SystemCaption([out, retval] BSTR* pVal);
        [id(0x00000072), propput, helpstring("property SystemCaption")]
        HRESULT SystemCaption([in] BSTR pVal);
        [id(0x00000073), helpstring("method CleanSetupForDuplicate")]
        HRESULT CleanSetupForDuplicate();
        [id(0x00000074), helpstring("method AddConstraintEquation")]
        HRESULT AddConstraintEquation(
                        [in] IDispatch* piSelectMgr, 
                        [out, retval] IDispatch** ppVal);
        [id(0x00000075), helpstring("method AddDAAttribute")]
        HRESULT AddDAAttribute([out, retval] IDispatch** pDisp);
        [id(0x00000076), helpstring("method GetPrerequisiteFiles")]
        HRESULT GetPrerequisiteFiles([out, retval] IAnsBSTRColl** pDisp);
        [id(0x00000077), helpstring("method AddNodalRotation")]
        HRESULT AddNodalRotation(
                        [in] IDispatch* piSelectMgr, 
                        [out, retval] IDispatch** ppVal);
        [id(0x00000078), helpstring("method AddFELoad")]
        HRESULT AddFELoad(
                        [in] IDispatch* piSelectMgr, 
                        [in] unsigned int loadType, 
                        [out, retval] IDispatch** ppVal);
        [id(0x00000079), helpstring("method AddPipeIdealization")]
        HRESULT AddPipeIdealization(
                        [in] IDispatch* piSelectMgr, 
                        [out, retval] IDispatch** ppVal);
        [id(0x0000007b), helpstring("method AddNonlinearAdaptivity")]
        HRESULT AddNonlinearAdaptivity(
                        [in] IDispatch* piSelectMgr, 
                        [out, retval] IDispatch** ppVal);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x0000007a), helpstring("AddLoadGroupForExternalConxn")]
        HRESULT AddLoadGroupForExternalConxn([out, retval] IDispatch** ppVal);
        [id(0x0000007c), helpstring("method AddPhysicsRegion")]
        HRESULT AddPhysicsRegion(
                        [in] IDispatch* piSelectMgr, 
                        [out, retval] IDispatch** ppVal);
        [id(0x0000007d), propget, helpstring("property IsMultiPhysics")]
        HRESULT IsMultiPhysics([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000007d), propput, helpstring("property IsMultiPhysics")]
        HRESULT IsMultiPhysics([in] VARIANT_BOOL pVal);
        [id(0x0000007e), helpstring("method IsMSUPTransient")]
        HRESULT IsMSUPTransient([out, retval] VARIANT_BOOL* vbVal);
        [id(0x0000007f), helpstring("method SetPropertyByStep")]
        HRESULT SetPropertyByStep(
                        [in] int step, 
                        [in] BSTR propertyName, 
                        [in] VARIANT newVal);
        [id(0x00000080), helpstring("method GetJSON")]
        HRESULT GetJSON([out, retval] BSTR* pVal);
    };

    typedef enum {
        kPT_Unknown = 0,
        kPT_Mechanical = 1,
        kPT_Thermal = 2,
        kPT_ElectricCond = 4,
        kPT_Electromagnetic = 8,
        kPT_ExplicitCDI = 16,
        kPT_Customizable = 32,
        kPT_All = 0x20000000
    } DSPhysicsType;

    typedef enum {
        kSIMULATION_STATIC = 0,
        kSIMULATION_HARMONIC = 1,
        kSIMULATION_TRANSIENT = 2,
        kSIMULATION_SPECTRUM = 3,
        kSIMULATION_BUCKLING = 4,
        kSIMULATION_MODAL = 5,
        kSIMULATION_INITIAL_CONTACT = 6,
        kSIMULATION_MBD = 7,
        kSIMULATION_SHAPE = 8,
        kSIMULATION_RESPONSE_SPECTRUM = 9,
        kSIMULATION_EXPLICIT = 10,
        kSIMULATION_DESIGNASSESSMENT = 11,
        kSIMULATION_CONDENSE_GEOMETRY = 12
    } DSSimulationType;

    typedef enum {
        kSIMULATION_SEQUENCE_SINGLE_STEP = 0,
        kSIMULATION_SEQUENCE_MULTI_STEP = 1
    } DSSimulationSequenceType;

    typedef enum {
        kEXTERNAL_LOAD_PRESSURE = 0,
        kEXTERNAL_LOAD_TEMPERATURE = 1,
        kEXTERNAL_LOAD_CONVECTION_COEFFICIENT = 2,
        kEXTERNAL_LOAD_THERMAL_CONDITION = 3,
        kEXTERNAL_LOAD_EMAG_CONDITION = 4,
        kEXTERNAL_LOAD_UNDEFINED = 5,
        kEXTERNAL_LOAD_THICKNESS = 6,
        kEXTERNAL_LOAD_HEAT_FLUX = 7,
        kEXTERNAL_LOAD_FORCE_DENSITY = 8,
        kEXTERNAL_LOAD_ELEMENT_ORIENTATION = 9,
        kEXTERNAL_LOAD_YARN_ANGLE = 10,
        kEXTERNAL_LOAD_WARP_WEFT_RATIO = 11,
        kEXTERNAL_LOAD_FIBER_RATIO = 12,
        kEXTERNAL_LOAD_SURFACE_FORCE_DENSITY = 13,
        kEXTERNAL_LOAD_DISPLACEMENT = 14,
        kEXTERNAL_LOAD_FORCE = 15,
        kEXTERNAL_LOAD_VELOCITY = 16,
        kEXTERNAL_LOAD_ROTATION = 17,
        kEXTERNAL_LOAD_DISPLACEMENT_AND_ROTATION = 18,
        kEXTERNAL_LOAD_STRESS = 19,
        kEXTERNAL_LOAD_STRAIN = 20,
        kEXTERNAL_LOAD_PRESSURE_NODAL = 21,
        kEXTERNAL_LOAD_STRESS_NODAL = 22,
        kEXTERNAL_LOAD_STRAIN_NODAL = 23,
        kEXTERNAL_LOAD_STRAIN_EQUIVALENT = 24,
        kEXTERNAL_LOAD_STRAIN_NODAL_EQUIVALENT = 25,
        kEXTERNAL_LOAD_METAL_FRACTION = 26,
        kEXTERNAL_LOAD_REMOTE_FORCE_MOMENT = 27,
        kEXTERNAL_LOAD_REMOTE_DISPLACEMENT_ROTATION = 28
    } DSExternalLoadType;

    typedef enum {
        kCP_Unknown = 0,
        kCP_ThermoElectric = 1
    } DSCoupledPhysicsType;

    typedef enum {
        DISPID_ExternalLoadComments = 10,
        DISPID_ExternalLoadFigures = 11,
        DISPID_ExternalLoadSuppressed = 12,
        DISPID_ExternalLoadType = 13,
        DISPID_ExternalLoadGeometryDefineBy = 14,
        DISPID_ExternalLoadGeometrySelection = 15,
        DISPID_ExternalLoadComponentSelection = 16,
        DISPID_ExternalLoadSourceLoad = 17,
        DISPID_ExternalLoadSourceOrientation = 18,
        DISPID_ExternalLoadNumSequenceEntries = 19,
        DISPID_ExternalLoadSequenceInfoCollExternalSourceReferenceByIndex = 20,
        DISPID_ExternalLoadSequenceInfoCollSourceTimeByIndex = 21,
        DISPID_ExternalLoadSequenceInfoCollScaleValueByIndex = 22,
        DISPID_ExternalLoadSequenceInfoCollOffsetValueByIndex = 23,
        DISPID_ExternalLoadExternalResultFileString = 24,
        DISPID_ExternalLoadSequenceInfoCollScale2ValueByIndex = 40,
        DISPID_ExternalLoadSequenceInfoCollOffset2ValueByIndex = 41,
        DISPID_ExternalLoadUVTargetAlignmentVertexSelectionA = 42,
        DISPID_ExternalLoadUVTargetAlignmentVertexSelectionB = 43,
        DISPID_ExternalLoadUVTargetAlignmentVertexSelectionC = 44,
        DISPID_ExternalLoadUVTargetAlignmentVertexSelectionD = 45,
        DISPID_ExternalLoadScopingType = 46,
        DISPID_ExternalLoadIsSubmodelingAnalysis = 47,
        DISPID_ExternalLoadSubmodelingKey = 48,
        DISPID_ExternalLoadSequenceInfoForIndices = 49,
        DISPID_ExternalLoadAddComment = 61,
        DISPID_ExternalLoadAddFigure = 62,
        DISPID_ExternalLoadImport = 63,
        DISPID_ExternalLoadAddSequenceEntry = 64,
        DISPID_ExternalLoadDeleteSequenceEntry = 65,
        DISPID_ExternalLoadClean = 66,
        DISPID_ExternalLoadSequenceInfoCollExternalSourceRefNameByIndex = 25,
        DISPID_ExternalLoadSequenceInfoFor = 67,
        DISPID_ExternalLoadActiveSequence = 68,
        DISPID_ExternalLoadDefineActiveSequenceBy = 69,
        DISPID_ExternalLoadActiveSequenceByValue = 111,
        DISPID_ExternalLoadSequenceInfoCollAnalysisTimeByIndex = 26,
        DISPID_ExternalLoadUnitStringByDispid = 70,
        DISPID_ExternalLoadSequenceInfoCollSourceTimeStepByIndex = 27,
        DISPID_ExternalLoadHandleMigration = 71,
        DISPID_ExternalLoadSequenceInfoCollActiveByIndex = 28,
        DISPID_ExternalLoadAttachToAllBodies = 72,
        DISPID_ExternalLoadImportFailed = 73,
        DISPID_ExternalLoadGetOutputFile = 74,
        DISPID_ShowBodyWireframe = 80,
        DISPID_ExternalLoadImages = 81,
        DISPID_ExternalLoadAddImage = 82,
        DISPID_ExternalThicknessIsAttachedToFace = 83,
        DISPID_ExternalLoadAddMappingValidation = 84,
        DISPID_ExternalLoadLoadVariationChange = 85,
        DISPID_ExternalLoadCreateTabbedFile = 86,
        DISPID_ExternalLoadShellFaceEnum = 87,
        DISPID_ExternalLoadShellThicknessFactor = 88,
        DISPID_ExternalLoadUnitTypeByDispid = 89,
        DISPID_ExternalLoadParamNameByDispid = 90,
        DISPID_ExternalLoadOverrideConstraints = 91,
        DISPID_ExternalLoadDisplayDataType = 92,
        DISPID_ExternalLoadShowVariableLoadToolbar = 93,
        DISPID_ExternalLoadDisplayDataConversionType = 94,
        DISPID_ExternalLoadDisplayRealImaginaryDataType = 95,
        DISPID_ExternalLoadDisplayComponentType = 96,
        DISPID_ExternalLoadDisplayShellFace = 97,
        DISPID_ExternalLoadDisplayLayer = 98,
        DISPID_ExternalLoadSubType = 99,
        DISPID_ExternalLoadSteppingType = 100,
        DISPID_ExternalLoadGeometrySelectionFilter = 101,
        DISPID_ExternalLoadIncludePartialElement = 102,
        DISPID_ExternalLoadGenerateRemoteLoads = 103
    } kDispId_ExternalLoad;

    [
      odl,
      uuid(2DE5CDAA-40CF-4171-AE3C-5D55C842A2A0),
      helpstring("IDSExternalLoadAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSExternalLoadAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x0000000e), propget, helpstring("property GeometryDefineBy")]
        HRESULT GeometryDefineBy([out, retval] DSGeometryDefineByType* pVal);
        [id(0x0000000e), propput, helpstring("property GeometryDefineBy")]
        HRESULT GeometryDefineBy([in] DSGeometryDefineByType pVal);
        [id(0x00000010), propget, helpstring("property ComponentSelection")]
        HRESULT ComponentSelection([out, retval] int* pVal);
        [id(0x00000010), propput, helpstring("property ComponentSelection")]
        HRESULT ComponentSelection([in] int pVal);
        [id(0x0000000f), propput, helpstring("property GeometrySelection")]
        HRESULT GeometrySelection([in] IDispatch* rhs);
        [id(0x0000002a), propput, helpstring("property UVTargetAlignmentVertexSelectionA")]
        HRESULT GeometrySelectionA([in] IDispatch* rhs);
        [id(0x0000002b), propput, helpstring("property UVTargetAlignmentVertexSelectionB")]
        HRESULT GeometrySelectionB([in] IDispatch* rhs);
        [id(0x0000002c), propput, helpstring("property UVTargetAlignmentVertexSelectionC")]
        HRESULT GeometrySelectionC([in] IDispatch* rhs);
        [id(0x0000002d), propput, helpstring("property UVTargetAlignmentVertexSelectionD")]
        HRESULT GeometrySelectionD([in] IDispatch* rhs);
        [id(0x0000000a), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x0000000b), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x0000000d), propget, helpstring("property ExternalLoadType")]
        HRESULT ExternalLoadType([out, retval] DSExternalLoadType* pVal);
        [id(0x0000000d), propput, helpstring("property ExternalLoadType")]
        HRESULT ExternalLoadType([in] DSExternalLoadType pVal);
        [id(0x00000011), propget, helpstring("property SourceLoad")]
        HRESULT SourceLoad([out, retval] int* pVal);
        [id(0x00000011), propput, helpstring("property SourceLoad")]
        HRESULT SourceLoad([in] int pVal);
        [id(0x00000012), propget, helpstring("property SourceOrientation")]
        HRESULT SourceOrientation([out, retval] int* pVal);
        [id(0x00000012), propput, helpstring("property SourceOrientation")]
        HRESULT SourceOrientation([in] int pVal);
        [id(0x0000000c), propget, helpstring("property Suppressed")]
        HRESULT Suppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000000c), propput, helpstring("property Suppressed")]
        HRESULT Suppressed([in] VARIANT_BOOL pVal);
        [id(0x0000003d), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x0000003e), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x0000003f), helpstring("method Import will import the load information from the external source")]
        HRESULT Import([in] IAnsProgress* piProgress);
        [id(0x00000013), propget, helpstring("property NumSequenceEntries")]
        HRESULT NumSequenceEntries([out, retval] unsigned int* pVal);
        [id(0x00000014), propget, helpstring("property SequenceInfoCollExternalSourceReferenceByIndex")]
        HRESULT SequenceInfoCollExternalSourceReferenceByIndex(
                        [in] int iIndexVal, 
                        [out, retval] int* pVal);
        [id(0x00000014), propput, helpstring("property SequenceInfoCollExternalSourceReferenceByIndex")]
        HRESULT SequenceInfoCollExternalSourceReferenceByIndex(
                        [in] int iIndexVal, 
                        [in] int pVal);
        [id(0x00000015), propget, helpstring("property SequenceInfoCollSourceTimeByIndex")]
        HRESULT SequenceInfoCollSourceTimeByIndex(
                        [in] int iIndexVal, 
                        [out, retval] double* pVal);
        [id(0x00000015), propput, helpstring("property SequenceInfoCollSourceTimeByIndex")]
        HRESULT SequenceInfoCollSourceTimeByIndex(
                        [in] int iIndexVal, 
                        [in] double pVal);
        [id(0x00000016), propget, helpstring("property SequenceInfoCollScaleValueByIndex")]
        HRESULT SequenceInfoCollScaleValueByIndex(
                        [in] int iIndexVal, 
                        [out, retval] double* pVal);
        [id(0x00000016), propput, helpstring("property SequenceInfoCollScaleValueByIndex")]
        HRESULT SequenceInfoCollScaleValueByIndex(
                        [in] int iIndexVal, 
                        [in] double pVal);
        [id(0x00000017), propget, helpstring("property SequenceInfoCollOffsetValueByIndex")]
        HRESULT SequenceInfoCollOffsetValueByIndex(
                        [in] int iIndexVal, 
                        [out, retval] double* pVal);
        [id(0x00000017), propput, helpstring("property SequenceInfoCollOffsetValueByIndex")]
        HRESULT SequenceInfoCollOffsetValueByIndex(
                        [in] int iIndexVal, 
                        [in] double pVal);
        [id(0x00000028), propget, helpstring("property SequenceInfoCollScale2ValueByIndex")]
        HRESULT SequenceInfoCollScale2ValueByIndex(
                        [in] int iIndexVal, 
                        [out, retval] double* pVal);
        [id(0x00000028), propput, helpstring("property SequenceInfoCollScale2ValueByIndex")]
        HRESULT SequenceInfoCollScale2ValueByIndex(
                        [in] int iIndexVal, 
                        [in] double pVal);
        [id(0x00000029), propget, helpstring("property SequenceInfoCollOffset2ValueByIndex")]
        HRESULT SequenceInfoCollOffset2ValueByIndex(
                        [in] int iIndexVal, 
                        [out, retval] double* pVal);
        [id(0x00000029), propput, helpstring("property SequenceInfoCollOffset2ValueByIndex")]
        HRESULT SequenceInfoCollOffset2ValueByIndex(
                        [in] int iIndexVal, 
                        [in] double pVal);
        [id(0x00000040), helpstring("method AddSequenceEntry")]
        HRESULT AddSequenceEntry([in] int newVal);
        [id(0x00000041), helpstring("method DeleteSequenceEntry")]
        HRESULT DeleteSequenceEntry([in] int newVal);
        [id(0x00000018), propget, helpstring("property ExternalResultFileString")]
        HRESULT ExternalResultFileString([out, retval] BSTR* pVal);
        [id(0x00000018), propput, helpstring("property ExternalResultFileString")]
        HRESULT ExternalResultFileString([in] BSTR pVal);
        [id(0x00000019), propget, helpstring("property SequenceInfoCollExternalSourceRefNameByIndex")]
        HRESULT SequenceInfoCollExternalSourceRefNameByIndex(
                        [in] int iIndexVal, 
                        [out, retval] BSTR* pVal);
        [id(0x00000019), propput, helpstring("property SequenceInfoCollExternalSourceRefNameByIndex")]
        HRESULT SequenceInfoCollExternalSourceRefNameByIndex(
                        [in] int iIndexVal, 
                        [in] BSTR pVal);
        [id(0x00000042), helpstring("method will clear an External Load of any imported data")]
        HRESULT Clean();
        [id(0x00000043), propget, helpstring("property SequenceInfoCollByIndexFor")]
        HRESULT SequenceInfoFor(
                        [in] _eSequenceInfo key, 
                        [in] int iIndexVal, 
                        [out, retval] VARIANT* pVal);
        [id(0x00000043), propput, helpstring("property SequenceInfoCollByIndexFor")]
        HRESULT SequenceInfoFor(
                        [in] _eSequenceInfo key, 
                        [in] int iIndexVal, 
                        [in] VARIANT pVal);
        [id(0x00000044), propget, helpstring("property ActiveSequence")]
        HRESULT ActiveSequence([out, retval] int* piIndexVal);
        [id(0x00000044), propput, helpstring("property ActiveSequence")]
        HRESULT ActiveSequence([in] int piIndexVal);
        [id(0x0000001a), propget, helpstring("property SequenceInfoCollAnalysisTimeByIndex")]
        HRESULT SequenceInfoCollAnalysisTimeByIndex(
                        [in] int iIndexVal, 
                        [out, retval] double* pVal);
        [id(0x0000001a), propput, helpstring("property SequenceInfoCollAnalysisTimeByIndex")]
        HRESULT SequenceInfoCollAnalysisTimeByIndex(
                        [in] int iIndexVal, 
                        [in] double pVal);
        [id(0x00000046), propget, helpstring("property UnitStringByDispid")]
        HRESULT UnitStringByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* unitString);
        [id(0x60020038), propput, helpstring("property ColumnKey")]
        HRESULT ColumnKey(
                        [in] int column, 
                        [in] int rhs);
        [id(0x60020039), propget]
        HRESULT VectorDisplay([out, retval] VARIANT_BOOL* pvbVectorDisplay);
        [id(0x0000001b), propget, helpstring("property SequenceInfoCollSourceTimeStepByIndex")]
        HRESULT SequenceInfoCollSourceTimeStepByIndex(
                        [in] int iIndexVal, 
                        [out, retval] double* pVal);
        [id(0x0000001b), propput, helpstring("property SequenceInfoCollSourceTimeStepByIndex")]
        HRESULT SequenceInfoCollSourceTimeStepByIndex(
                        [in] int iIndexVal, 
                        [in] double pVal);
        [id(0x00000047), helpstring("method will pass the migration object to the proxy")]
        HRESULT HandleMigration([in] IDispatch* pDisp);
        [id(0x0000001c), propget, helpstring("property SequenceInfoCollActiveByIndex")]
        HRESULT SequenceInfoCollActiveByIndex(
                        [in] int iIndexVal, 
                        [out, retval] VARIANT_BOOL* pVal);
        [id(0x0000001c), propput, helpstring("property SequenceInfoCollActiveByIndex")]
        HRESULT SequenceInfoCollActiveByIndex(
                        [in] int iIndexVal, 
                        [in] VARIANT_BOOL pVal);
        [id(0x00000048), helpstring("method will attach all bodies to the load")]
        HRESULT AttachToAllBodies();
        [id(0x0000004a), helpstring("method will return file with values in it")]
        HRESULT GetOutputFile([out, retval] BSTR* newVal);
        [id(0x00000050), propget, helpstring("property ShowBodyWireframe")]
        HRESULT ShowBodyWireframe([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000050), propput, helpstring("property ShowBodyWireframe")]
        HRESULT ShowBodyWireframe([in] VARIANT_BOOL pVal);
        [id(0x00000051), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000052), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00000053), propget, helpstring("property IsAttachedToReference")]
        HRESULT IsAttachedToReference(
                        [in] unsigned int faceRefId, 
                        [out, retval] VARIANT_BOOL* pVal);
        [id(0x00000054), helpstring("method AddMappingValidation")]
        HRESULT AddMappingValidation([out, retval] IDispatch** pDisp);
        [id(0x60020047), propget, helpstring("Get whether the BC is active at a step")]
        HRESULT ActiveAtLoadStep(
                        [in] unsigned int stepNumber, 
                        [out, retval] VARIANT_BOOL* bActive);
        [id(0x60020047), propput, helpstring("Get whether the BC is active at a step")]
        HRESULT ActiveAtLoadStep(
                        [in] unsigned int stepNumber, 
                        [in] VARIANT_BOOL bActive);
        [id(0x00000056), helpstring("method CreateTabbedFileForExternalLoad")]
        HRESULT CreateTabbedFile(
                        [in] BSTR filePath, 
                        [out, retval] BSTR* fileText);
        [id(0x00000057), propget, helpstring("method ShellFaceEnum")]
        HRESULT ShellFaceEnum([out, retval] DSShellFaceEnum* pShellFace);
        [id(0x00000057), propput, helpstring("method ShellFaceEnum")]
        HRESULT ShellFaceEnum([in] DSShellFaceEnum pShellFace);
        [id(0x00000058), propget, helpstring("method ShellThicknessFactor")]
        HRESULT ShellThicknessFactor([out, retval] double* pVal);
        [id(0x00000058), propput, helpstring("method ShellThicknessFactor")]
        HRESULT ShellThicknessFactor([in] double pVal);
        [id(0x00000059), propget, helpstring("property UnitTypeByDispid")]
        HRESULT UnitTypeByDispid(
                        [in] int dispid, 
                        [out, retval] int* unitType);
        [id(0x0000005a), propget, helpstring("property ParamNameByDispid")]
        HRESULT ParamNameByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* paramName);
        [id(0x0000005b), propget, helpstring("property OverrideConstraints")]
        HRESULT OverrideConstraints([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000005b), propput, helpstring("property OverrideConstraints")]
        HRESULT OverrideConstraints([in] VARIANT_BOOL pVal);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x0000005c), propget, helpstring("property DisplayDataType")]
        HRESULT DisplayDataType([out, retval] DSExternalLoadDisplayDataType* displayType);
        [id(0x0000005c), propput, helpstring("property DisplayDataType")]
        HRESULT DisplayDataType([in] DSExternalLoadDisplayDataType displayType);
        [id(0x0000005d), helpstring("query to show/hide the variable toolbar")]
        HRESULT ShowVariableLoadToolbar([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000005e), propget, helpstring("property DISPID_ExternalLoadDisplayDataConversionType")]
        HRESULT DisplayDataConversionType([out, retval] int* pVal);
        [id(0x0000005e), propput, helpstring("property DISPID_ExternalLoadDisplayDataConversionType")]
        HRESULT DisplayDataConversionType([in] int pVal);
        [id(0x0000005f), propget, helpstring("property DisplayRealImaginaryDataType")]
        HRESULT DisplayRealImaginaryDataType([out, retval] VARIANT_BOOL* displayType);
        [id(0x0000005f), propput, helpstring("property DisplayRealImaginaryDataType")]
        HRESULT DisplayRealImaginaryDataType([in] VARIANT_BOOL displayType);
        [id(0x6002005f), helpstring("method UpdateLegendMinMaxData")]
        HRESULT UpdateLegendMinMaxData([in] IAnsBSTRColl* variables);
        [id(0x00000060), propget, helpstring("property DisplayComponentType")]
        HRESULT DisplayComponentType([out, retval] DSExternalLoadDisplayComponentType* componentType);
        [id(0x00000060), propput, helpstring("property DisplayComponentType")]
        HRESULT DisplayComponentType([in] DSExternalLoadDisplayComponentType componentType);
        [id(0x00000063), propget, helpstring("property ExternalLoadSubType")]
        HRESULT ExternalLoadSubType([out, retval] DSExternalLoadSubType* pVal);
        [id(0x00000063), propput, helpstring("property ExternalLoadSubType")]
        HRESULT ExternalLoadSubType([in] DSExternalLoadSubType pVal);
        [id(0x00000064), propget, helpstring("property ExternalLoadSubType")]
        HRESULT ExternalLoadSteppingType([out, retval] DSExternalLoadSteppingType* pVal);
        [id(0x00000064), propput, helpstring("property ExternalLoadSubType")]
        HRESULT ExternalLoadSteppingType([in] DSExternalLoadSteppingType pVal);
        [id(0x0000002e), propget, helpstring("property ExternalLoadScopingType")]
        HRESULT ExternalLoadScopingType([out, retval] DSExternalLoadScopingType* pVal);
        [id(0x0000002e), propput, helpstring("property ExternalLoadScopingType")]
        HRESULT ExternalLoadScopingType([in] DSExternalLoadScopingType pVal);
        [id(0x00000066), propget, helpstring("property ExternalLoadIncludePartialElement")]
        HRESULT ExternalLoadIncludePartialElement([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000066), propput, helpstring("property ExternalLoadIncludePartialElement")]
        HRESULT ExternalLoadIncludePartialElement([in] VARIANT_BOOL pVal);
        [id(0x00000045), propget, helpstring("property DefineActiveSequenceBy")]
        HRESULT DefineActiveSequenceBy([out, retval] DSExternalLoadDefineActiveSequenceBy* ActiveSequence);
        [id(0x00000045), propput, helpstring("property DefineActiveSequenceBy")]
        HRESULT DefineActiveSequenceBy([in] DSExternalLoadDefineActiveSequenceBy ActiveSequence);
        [id(0x0000006f), propget, helpstring("property ActiveSequenceByValue")]
        HRESULT ActiveSequenceByValue([out, retval] double* dVal);
        [id(0x0000006f), propput, helpstring("property ActiveSequenceByValue")]
        HRESULT ActiveSequenceByValue([in] double dVal);
        [id(0x00000065), propget, helpstring("property GeometrySelectionFilter")]
        HRESULT GeometrySelectionFilter([out, retval] int* pVal);
        [id(0x00000065), propput, helpstring("property GeometrySelectionFilter")]
        HRESULT GeometrySelectionFilter([in] int pVal);
        [id(0x0000002f), propget, helpstring("property SubmodelingKey")]
        HRESULT IsSubmodelingAnalysis([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000030), propget, helpstring("property SubmodelingKey")]
        HRESULT SubmodelingKey([out, retval] int* pVal);
        [id(0x00000031), propput, helpstring("property SequenceInfoCollByIndexForIndices")]
        HRESULT SequenceInfoForIndices(
                        [in] _eSequenceInfo key, 
                        [in] IAnsUINTColl* piIndicesColl, 
                        [in] IAnsVARIANTColl* rhs);
    };

    typedef enum {
        kSequenceInfoExternalSourceReference = 1,
        kSequenceInfoExternalSourceReferenceName = 2,
        kSequenceInfoIndex = 3,
        kSequenceInfoSourceTime = 4,
        kSequenceInfoAnalysisTime = 5,
        kSequenceInfoScale = 6,
        kSequenceInfoScale2 = 7,
        kSequenceInfoOffset = 8,
        kSequenceInfoOffset2 = 9,
        kSequenceInfoSourceTimeStep = 10,
        kSequenceInfoActive = 11
    } _eSequenceInfo;

    typedef enum {
        kDisplayTypeUndefined = 0,
        kDisplayTypeConvectionCoefficient = 6,
        kDisplayTypeTemperature = 7,
        kDisplayTypeDisplacement = 8,
        kDisplayTypeRotation = 9,
        kDisplayTypeRotationPrincipals = 10,
        kDisplayTypeForce = 11,
        kDisplayTypePressure = 12,
        kDisplayTypeVelocity = 13,
        kDisplayTypeStress = 14,
        kDisplayTypeStrain = 15,
        kDisplayTypeHeatFlux = 16,
        kDisplayTypeHeatGeneration = 17,
        kDisplayTypeThickness = 18,
        kDisplayTypeForceDensity = 19,
        kDisplayTypeMetalFraction = 20
    } DSExternalLoadDisplayDataType;

    typedef enum {
        kDisplayComponentTypeUndefined = 0,
        kDisplayComponentTypeTotal = 1,
        kDisplayComponentTypeAll = 2,
        kDisplayComponentTypeXComponent = 3,
        kDisplayComponentTypeYComponent = 4,
        kDisplayComponentTypeZComponent = 5,
        kDisplayComponentTypeTotal2 = 6,
        kDisplayComponentTypeAll2 = 7,
        kDisplayComponentTypeXXComponent = 11,
        kDisplayComponentTypeYYComponent = 12,
        kDisplayComponentTypeZZComponent = 13,
        kDisplayComponentTypeXYComponent = 14,
        kDisplayComponentTypeYZComponent = 15,
        kDisplayComponentTypeXZComponent = 16
    } DSExternalLoadDisplayComponentType;

    typedef enum {
        kEXTERNAL_LOAD_SUB_TYPE_UNKNOWN = 0,
        kEXTERNAL_LOAD_SUB_TYPE_ELASTIC_STRAIN = 1,
        kEXTERNAL_LOAD_SUB_TYPE_PLASTIC_STRAIN = 2,
        kEXTERNAL_LOAD_SUB_TYPE_EQUIVALENT_PLASTIC_STRAIN = 3,
        kEXTERNAL_LOAD_SUB_TYPE_DISPLACEMENT = 4,
        kEXTERNAL_LOAD_SUB_TYPE_ROTATION = 5,
        kEXTERNAL_LOAD_SUB_TYPE_DISPLACEMENT_AND_ROTATION = 6
    } DSExternalLoadSubType;

    typedef enum {
        kEXTERNAL_LOAD_STEPPING_PROGRAM_CONTROLLED = 0,
        kEXTERNAL_LOAD_STEPPING_RAMPED = 1,
        kEXTERNAL_LOAD_STEPPING_STEPPED = 2,
        kEXTERNAL_LOAD_STEPPING_NOT_USED = 3
    } DSExternalLoadSteppingType;

    typedef enum {
        kEXTERNAL_LOAD_ELEMENTAL = 0,
        kEXTERNAL_LOAD_NODAL = 1
    } DSExternalLoadScopingType;

    typedef enum {
        kActiveSequenceByUndefined = 0,
        kActiveSequenceByRow = 1,
        kActiveSequenceByValue = 2
    } DSExternalLoadDefineActiveSequenceBy;

    [
      odl,
      uuid(F6E1D1AE-8788-4A94-A642-407A91E723DA),
      helpstring("IAnsVARIANTColl Interface"),
      dual,
      nonextensible,
      oleautomation
    ]
    interface IAnsVARIANTColl : IDispatch {
        [id(0x00000001), propget, helpstring("property Count")]
        HRESULT Count([out, retval] unsigned int* plCount);
        [id(00000000), propget, helpstring("property Item")]
        HRESULT Item(
                        [in] unsigned int lNum, 
                        [out, retval] VARIANT* pdVal);
        [id(00000000), propput, helpstring("property Item")]
        HRESULT Item(
                        [in] unsigned int lNum, 
                        [in] VARIANT pdVal);
        [id(0xfffffffc), propget, helpstring("property NewEnum")]
        HRESULT _NewEnum([out, retval] IUnknown** ppunkEnum);
        [id(0x00000002), helpstring("method Add")]
        HRESULT Add([in] VARIANT iNewVal);
        [id(0x00000003), helpstring("method Remove")]
        HRESULT RemoveAt(unsigned int index);
        [id(0x00000004), helpstring("method Clear")]
        HRESULT Clear();
        [id(0x00000005), helpstring("method Modify")]
        HRESULT Modify(
                        [in] unsigned int index, 
                        [in] VARIANT vntValue);
        [id(0x00000006), helpstring("method Insert")]
        HRESULT Insert(
                        [in] unsigned int index, 
                        [in] VARIANT vntValue);
    };

    typedef enum {
        DISPID_ExternalLoadGroupComments = 10,
        DISPID_ExternalLoadGroupFigures = 11,
        DISPID_ExternalLoadGroupImages = 12,
        DISPID_ExternalLoadGroupType = 13,
        DISPID_ExternalLoadGroupSourceLoad = 14,
        DISPID_ExternalLoadGroupAddinName = 15,
        DISPID_ExternalLoadGroupSuppressed = 16,
        DISPID_ExternalLoadGroupSourceIdentifier = 17,
        DISPID_ExternalLoadGroupAddComment = 40,
        DISPID_ExternalLoadGroupAddFigure = 41,
        DISPID_ExternalLoadGroupAddImage = 42,
        DISPID_ExternalLoadGroupAddExternalLinkInfo = 43,
        DISPID_ExternalLoadGroupRemoveExternalLinkInfo = 44,
        DISPID_ExternalLoadGroupExternalDataIdentifier = 45,
        DISPID_ExternalLoadGroupInitializeWithExternalLinkInfo = 46,
        DISPID_ExternalLoadGroupAddExternalLoad = 47,
        DISPID_ExternalLoadGroupAddSourceId = 48,
        DISPID_ExternalLoadGroupSourceId = 49,
        DISPID_ExternalLoadGroupSourceTransferFile = 50,
        DISPID_ExternalLoadGroupSourceResultFile = 51,
        DISPID_ExternalLoadGroupExportSetup = 52,
        DISPID_ExternalLoadGroupExportAfterSolve = 53,
        DISPID_ExternalLoadGroupExportTime = 54,
        DISPID_ExternalLoadGroupExportResults = 55,
        DISPID_ExternalLoadGroupExportFiles = 56,
        DISPID_ExternalLoadGroupSourceSolver = 57,
        DISPID_ExternalLoadGroupSecondarySuppressed = 58,
        DISPID_ExternalLoadGroupSourcePhysics = 59,
        DISPID_ExternalLoadGroupDestinationPhysics = 60,
        DISPID_ExternalLoadGroupSourceGeometryDimensions = 61,
        DISPID_ExternalLoadGroupExternalDataCellId = 62,
        DISPID_ExternalLoadGroupSourceAnalysisType = 63
    } kDispId_ExternalLoadGroup;

    [
      odl,
      uuid(5A29D78D-2859-4583-AA95-231A1C23EDD0),
      helpstring("IDSExternalLoadGroupAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSExternalLoadGroupAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
        [id(0x0000000a), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x0000000b), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x0000000c), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x0000000e), propget, helpstring("property SourceLoad")]
        HRESULT SourceLoad([out, retval] int* pVal);
        [id(0x0000000e), propput, helpstring("property SourceLoad")]
        HRESULT SourceLoad([in] int pVal);
        [id(0x00000028), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x00000029), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x0000002a), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x0000002b), helpstring("method AddExternalLinkInfo")]
        HRESULT AddExternalLinkInfo(
                        [in] BSTR bsFilename, 
                        [in] BSTR bsDataIdentifier);
        [id(0x0000002c), helpstring("method RemoveExternalLinkInfo")]
        HRESULT RemoveExternalLinkInfo();
        [id(0x0000002d), propget, helpstring("property ExternalDataIdentifier returns the stored dataidentifier")]
        HRESULT ExternalDataIdentifier([out, retval] BSTR* pVal);
        [id(0x0000003e), propput, helpstring("property ExternalDataCellId set the external data cell id")]
        HRESULT ExternalDataCellId([in] BSTR rhs);
        [id(0x0000002e), helpstring("property InitializeWithExternalLinkInfo")]
        HRESULT InitializeWithExternalLinkInfo(
                        [in] BSTR bsPhysicsType, 
                        [in] BSTR bsAnalysisType, 
                        [in] BSTR bsSolverType, 
                        [in] BSTR bsSourceDimension, 
                        [in] BSTR bsFilename, 
                        [in] BSTR bsDataIdentifier);
        [id(0x0000002f), helpstring("method AddExternalLoad")]
        HRESULT AddExternalLoad(
                        [in] IDispatch* piSelectMgr, 
                        [in] DSExternalLoadType eExternalLoadType, 
                        [out, retval] IDispatch** ppVal);
        [id(0x0000000f), propget, helpstring("property AddinName returns the stored Addin Name")]
        HRESULT AddinName([out, retval] BSTR* pVal);
        [id(0x00000030), helpstring("method AddSourceId")]
        HRESULT AddSourceId([in] int iEnvId);
        [id(0x00000031), propget, helpstring("Property SourceId")]
        HRESULT SourceId([out, retval] int* pEnvironmentId);
        [id(0x00000010), propget, helpstring("property Suppressed")]
        HRESULT Suppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000010), propput, helpstring("property Suppressed")]
        HRESULT Suppressed([in] VARIANT_BOOL pVal);
        [id(0x00000032), propget, helpstring("property SourceTransferFile")]
        HRESULT SourceTransferFile([out, retval] BSTR* pVal);
        [id(0x00000032), propput, helpstring("property SourceTransferFile")]
        HRESULT SourceTransferFile([in] BSTR pVal);
        [id(0x00000033), propget, helpstring("property SourceResultFile")]
        HRESULT SourceResultFile([out, retval] BSTR* pVal);
        [id(0x00000033), propput, helpstring("property SourceResultFile")]
        HRESULT SourceResultFile([in] BSTR pVal);
        [id(0x00000034), propget, helpstring("property ExportSetup")]
        HRESULT ExportSetup([out, retval] int* pVal);
        [id(0x00000034), propput, helpstring("property ExportSetup")]
        HRESULT ExportSetup([in] int pVal);
        [id(0x00000035), propget, helpstring("property ExportAfterSolve")]
        HRESULT ExportAfterSolve([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000035), propput, helpstring("property ExportAfterSolve")]
        HRESULT ExportAfterSolve([in] VARIANT_BOOL pVal);
        [id(0x00000036), propget, helpstring("property ExportTime")]
        HRESULT ExportTime([out, retval] double* pVal);
        [id(0x00000036), propput, helpstring("property ExportTime")]
        HRESULT ExportTime([in] double pVal);
        [id(0x00000038), propget, helpstring("property ExportFiles")]
        HRESULT ExportFiles([out, retval] IDispatch** ppExportFileColl);
        [id(0x00000037), helpstring("method ExportResults")]
        HRESULT ExportResults([in] IAnsProgress* piProgress);
        [id(0x00000039), propget, helpstring("property SourceSolver")]
        HRESULT SourceSolver([out, retval] BSTR* pVal);
        [id(0x0000003b), propget, helpstring("property SourcePhysics")]
        HRESULT SourcePhysics([out, retval] BSTR* pVal);
        [id(0x0000003c), propget, helpstring("property DestinationPhysics")]
        HRESULT DestinationPhysics([out, retval] BSTR* pVal);
        [id(0x0000003d), propget, helpstring("property SourceGeometryDimensions")]
        HRESULT SourceGeometryDimensions([out, retval] BSTR* pVal);
        [id(0x0000003d), propput, helpstring("property SourceGeometryDimensions")]
        HRESULT SourceGeometryDimensions([in] BSTR pVal);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x0000003f), propget, helpstring("property SourceAnalysisType")]
        HRESULT SourceAnalysisType([out, retval] BSTR* pVal);
    };

    [
      odl,
      uuid(D18A3A84-9058-4573-A621-1C8736E83282),
      helpstring("IDSFace Interface"),
      dual,
      oleautomation
    ]
    interface IDSFace : IDispatch {
        [id(0x00000001), propget, helpstring("property Node")]
        HRESULT Node(
                        int index, 
                        [out, retval] int* pVal);
        [id(0x00000002), propget, helpstring("property FaceID")]
        HRESULT FaceID([out, retval] BSTR* pVal);
        [id(0x00000003), propget, helpstring("property NodeCount")]
        HRESULT NodeCount([out, retval] int* pVal);
    };

    typedef enum {
        DISPID_FigureText = 10,
        DISPID_FigureAddComment = 11,
        DISPID_FigureGroupComments = 12
    } kDispId_Figure;

    [
      odl,
      uuid(41F71D36-09ED-47C7-8D7B-9377BB80E11C),
      helpstring("IDSFigureAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSFigureAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x0000000a), propget, helpstring("property Text")]
        HRESULT Text([out, retval] BSTR* pVal);
        [id(0x0000000a), propput, helpstring("property Text")]
        HRESULT Text([in] BSTR pVal);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
        [id(0x0000000b), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x0000000c), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
    };

    [
      odl,
      uuid(8069A502-2D9E-4619-9157-8DB503A2CAA3),
      helpstring("IDSForceAtPointLoadAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSForceAtPointLoadAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property ID")]
        HRESULT ID([out, retval] VARIANT* pVal);
        [id(0x00000002), propget, helpstring("property Name")]
        HRESULT Name([out, retval] VARIANT* pVal);
        [id(0x00000002), propput, helpstring("property Name")]
        HRESULT Name([in] VARIANT pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
    };

    typedef enum {
        DISPID_FrequencyGroupNumberRequested = 10,
        DISPID_FrequencyGroupRangeLimitOn = 11,
        DISPID_FrequencyGroupMinFrequency = 12,
        DISPID_FrequencyGroupMaxFrequency = 13,
        DISPID_FrequencyGroupComment = 14,
        DISPID_FrequencyGroupFigure = 15,
        DISPID_FrequencyGroupResult = 16,
        DISPID_FrequencyGroupAlert = 17,
        DISPID_FrequencyGroupAnalysisType = 18,
        DISPID_FrequencyGroupSaveFilesForPSD = 19,
        DISPID_FrequencyGroupAddAlert = 20,
        DISPID_FrequencyGroupAddComment = 21,
        DISPID_FrequencyGroupAddFigure = 22,
        DISPID_FrequencyGroupAddResult = 23,
        DISPID_FrequencyGroupImages = 24,
        DISPID_FrequencyGroupAddImage = 25
    } kDispId_FrequencyGroup;

    [
      odl,
      uuid(F95F24FE-A50F-442B-94C3-3FFE33B69385),
      helpstring("IDSFrequencyGroupAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSFrequencyGroupAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x0000000a), propget, helpstring("property NumberRequested")]
        HRESULT NumberRequested([out, retval] int* pVal);
        [id(0x0000000a), propput, helpstring("property NumberRequested")]
        HRESULT NumberRequested([in] int pVal);
        [id(0x0000000b), propget, helpstring("property RangeLimitOn")]
        HRESULT RangeLimitOn([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000000b), propput, helpstring("property RangeLimitOn")]
        HRESULT RangeLimitOn([in] VARIANT_BOOL pVal);
        [id(0x0000000c), propget, helpstring("property MinFrequency")]
        HRESULT MinFrequency([out, retval] double* pVal);
        [id(0x0000000c), propput, helpstring("property MinFrequency")]
        HRESULT MinFrequency([in] double pVal);
        [id(0x0000000d), propget, helpstring("property MaxFrequency")]
        HRESULT MaxFrequency([out, retval] double* pVal);
        [id(0x0000000d), propput, helpstring("property MaxFrequency")]
        HRESULT MaxFrequency([in] double pVal);
        [id(0x00000014), helpstring("method AddAlert")]
        HRESULT AddAlert([out, retval] IDispatch** ppVal);
        [id(0x00000015), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x00000016), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x0000000e), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x0000000f), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x00000010), propget, helpstring("property Results")]
        HRESULT Results([out, retval] IDispatch** ppDisp);
        [id(0x00000011), propget, helpstring("property Alerts")]
        HRESULT Alerts([out, retval] IDispatch** ppDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x00000012), propget, helpstring("property AnalysisType")]
        HRESULT AnalysisType([out, retval] DSAnalysisType* pVal);
        [id(0x00000017), helpstring("method AddResult")]
        HRESULT AddResult(
                        [in] IDispatch* piSelectMgr, 
                        [in] unsigned int resType, 
                        [out, retval] IDispatch** ppVal);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
        [id(0x00000013), propget, helpstring("property SaveFilesForPSD")]
        HRESULT SaveFilesForPSD([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000013), propput, helpstring("property SaveFilesForPSD")]
        HRESULT SaveFilesForPSD([in] VARIANT_BOOL pVal);
        [id(0x00000018), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000019), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
    };

    typedef enum {
        kEIGEN_MODAL = 0,
        kEIGEN_BUCKLING = 1
    } DSAnalysisType;

    typedef enum {
        DISPID_FatigueToolEnduranceFactor = 10,
        DISPID_FatigueToolLoadingType = 11,
        DISPID_FatigueToolLoadingRatio = 12,
        DISPID_FatigueToolAnalysisType = 13,
        DISPID_FatigueToolTemperatureEffects = 14,
        DISPID_FatigueToolStressComponent = 15,
        DISPID_FatigueToolLoadingHistoryItem = 16,
        DISPID_FatigueToolHistoryFileName = 17,
        DISPID_FatigueToolNumBins = 18,
        DISPID_FatigueToolUseQuickCounting = 19,
        DISPID_FatigueToolInfiniteLife = 20,
        DISPID_FatigueToolScaleFactor = 21,
        DISPID_FatigueToolComment = 22,
        DISPID_FatigueToolResult = 23,
        DISPID_FatigueToolLoadingHistorySize = 24,
        DISPID_FatigueToolAddResult = 25,
        DISPID_FatigueToolAddComment = 26,
        DISPID_FatigueToolAddImage = 27,
        DISPID_FatigueToolResultCharts = 35,
        DISPID_FatigueToolInputType = 36,
        DISPID_FatigueToolStressOrStrainInput = 37,
        DISPID_FatigueToolUserDefinedLifeUnitsValue = 38,
        DISPID_FatigueToolUserDefinedLifeUnitsText = 39,
        DISPID_FatigueToolUserDefinedLifeUnitsSelected = 40,
        DISPID_FatigueToolUserDefinedLifeUnitsUserStringText = 41,
        DISPID_FatigueToolImages = 42,
        DISPID_FatigueToolMaximumDataPoints = 43,
        DISPID_FatigueToolUnitTypeByDispid = 44,
        DISPID_FatigueToolUnitStringByDispid = 45,
        DISPID_FatigueToolTransientDisplayTime = 46,
        DISPID_FatigueToolParamNameByDispid = 47,
        DISPID_FatigueToolResultsInputType = 48
    } kDispId_FatigueTool;

    [
      odl,
      uuid(F68156DC-DE3C-42D7-8BA3-A3DF05D48129),
      helpstring("IDSFatigueToolAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSFatigueToolAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x0000000a), propget, helpstring("property EnduranceFactor")]
        HRESULT EnduranceFactor([out, retval] double* pVal);
        [id(0x0000000a), propput, helpstring("property EnduranceFactor")]
        HRESULT EnduranceFactor([in] double pVal);
        [id(0x0000000b), propget, helpstring("property LoadingType")]
        HRESULT LoadingType([out, retval] int* pVal);
        [id(0x0000000b), propput, helpstring("property LoadingType")]
        HRESULT LoadingType([in] int pVal);
        [id(0x0000002e), propget, helpstring("property TransientDisplayTime")]
        HRESULT TransientDisplayTime([out, retval] double* pVal);
        [id(0x0000002e), propput, helpstring("property TransientDisplayTime")]
        HRESULT TransientDisplayTime([in] double pVal);
        [id(0x0000000c), propget, helpstring("property LoadingRatio")]
        HRESULT LoadingRatio([out, retval] double* pVal);
        [id(0x0000000c), propput, helpstring("property LoadingRatio")]
        HRESULT LoadingRatio([in] double pVal);
        [id(0x00000025), propget, helpstring("property StressOrStrainInput")]
        HRESULT StressOrStrainInput([out, retval] DSFatigueToolAnalysisType* pVal);
        [id(0x00000025), propput, helpstring("property StressOrStrainInput")]
        HRESULT StressOrStrainInput([in] DSFatigueToolAnalysisType pVal);
        [id(0x0000000d), propget, helpstring("property AnalysisType")]
        HRESULT AnalysisType([out, retval] int* pVal);
        [id(0x0000000d), propput, helpstring("property AnalysisType")]
        HRESULT AnalysisType([in] int pVal);
        [id(0x0000000e), propget, helpstring("property TemperatureEffects")]
        HRESULT TemperatureEffects([out, retval] int* pVal);
        [id(0x0000000e), propput, helpstring("property TemperatureEffects")]
        HRESULT TemperatureEffects([in] int pVal);
        [id(0x0000000f), propget, helpstring("property StressComponent")]
        HRESULT StressComponent([out, retval] int* pVal);
        [id(0x0000000f), propput, helpstring("property StressComponent")]
        HRESULT StressComponent([in] int pVal);
        [id(0x00000010), propget, helpstring("property LoadingHistoryItem")]
        HRESULT LoadingHistoryItem(
                        [in, optional, defaultvalue(0)] int index, 
                        [out, retval] double* pVal);
        [id(0x00000010), propput, helpstring("property LoadingHistoryItem")]
        HRESULT LoadingHistoryItem(
                        [in, optional, defaultvalue(0)] int index, 
                        [in] double pVal);
        [id(0x00000018), propget, helpstring("property LoadingHistorySize")]
        HRESULT LoadingHistorySize([out, retval] double* pVal);
        [id(0x00000011), propget, helpstring("property HistoryFileName")]
        HRESULT HistoryFileName([out, retval] BSTR* pVal);
        [id(0x00000011), propput, helpstring("property HistoryFileName")]
        HRESULT HistoryFileName([in] BSTR pVal);
        [id(0x00000012), propget, helpstring("property NumBins")]
        HRESULT NumBins([out, retval] int* pVal);
        [id(0x00000012), propput, helpstring("property NumBins")]
        HRESULT NumBins([in] int pVal);
        [id(0x00000013), propget, helpstring("property UseQuickCounting")]
        HRESULT UseQuickCounting([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000013), propput, helpstring("property UseQuickCounting")]
        HRESULT UseQuickCounting([in] VARIANT_BOOL pVal);
        [id(0x00000019), helpstring("method AddResult")]
        HRESULT AddResult(
                        [in] IDispatch* piSelectMgr, 
                        [in] unsigned int resType, 
                        [out, retval] IDispatch** ppVal);
        [id(0x0000001a), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x00000014), propget, helpstring("property InfiniteLife")]
        HRESULT InfiniteLife([out, retval] double* pVal);
        [id(0x00000014), propput, helpstring("property InfiniteLife")]
        HRESULT InfiniteLife([in] double pVal);
        [id(0x00000015), propget, helpstring("property ScaleFactor")]
        HRESULT ScaleFactor([out, retval] double* pVal);
        [id(0x00000015), propput, helpstring("property ScaleFactor")]
        HRESULT ScaleFactor([in] double pVal);
        [id(0x00000016), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x00000017), propget, helpstring("property Results")]
        HRESULT Results([out, retval] IDispatch** ppDisp);
        [id(0x00000023), propget, helpstring("property ResultCharts")]
        HRESULT ResultCharts([out, retval] IDispatch** ppDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x00000024), propget, helpstring("property InputType")]
        HRESULT InputType([out, retval] int* pVal);
        [id(0x00000024), propput, helpstring("property InputType")]
        HRESULT InputType([in] int pVal);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
        [id(0x00000027), propget, helpstring("property UserDefinedLifeUnitsText")]
        HRESULT UserDefinedLifeUnitsText([out, retval] BSTR* pVal);
        [id(0x00000027), propput, helpstring("property UserDefinedLifeUnitsText")]
        HRESULT UserDefinedLifeUnitsText([in] BSTR pVal);
        [id(0x00000028), propget, helpstring("property UserDefinedLifeUnitsSelected")]
        HRESULT UserDefinedLifeUnitsSelected([out, retval] int* pVal);
        [id(0x00000028), propput, helpstring("property UserDefinedLifeUnitsSelected")]
        HRESULT UserDefinedLifeUnitsSelected([in] int pVal);
        [id(0x00000029), propget, helpstring("property UserDefinedLifeUnitsUserStringText")]
        HRESULT UserDefinedLifeUnitsUserStringText([out, retval] BSTR* pVal);
        [id(0x00000029), propput, helpstring("property UserDefinedLifeUnitsUserStringText")]
        HRESULT UserDefinedLifeUnitsUserStringText([in] BSTR pVal);
        [id(0x00000026), propget, helpstring("property UserDefinedLifeUnitsValue")]
        HRESULT UserDefinedLifeUnitsValue([out, retval] double* pVal);
        [id(0x00000026), propput, helpstring("property UserDefinedLifeUnitsValue")]
        HRESULT UserDefinedLifeUnitsValue([in] double pVal);
        [id(0x0000002a), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x0000001b), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x0000002b), propget, helpstring("property MaximumDataPoints")]
        HRESULT MaximumDataPoints([out, retval] double* pVal);
        [id(0x0000002b), propput, helpstring("property MaximumDataPoints")]
        HRESULT MaximumDataPoints([in] double pVal);
        [id(0x0000002c), propget, helpstring("property UnitTypeByDispid")]
        HRESULT UnitTypeByDispid(
                        [in] int dispid, 
                        [out, retval] int* unitType);
        [id(0x0000002d), propget, helpstring("property UnitStringByDispid")]
        HRESULT UnitStringByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* unitString);
        [id(0x0000002f), propget, helpstring("property ParamNameByDispid")]
        HRESULT ParamNameByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* paramName);
        [id(0x00000030), propget, helpstring("property ResultsInputType")]
        HRESULT ResultsInputType([out, retval] DSFatigueToolResultsInputType* pVal);
        [id(0x00000030), propput, helpstring("property ResultsInputType")]
        HRESULT ResultsInputType([in] DSFatigueToolResultsInputType pVal);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
    };

    typedef enum {
        kStressLife = 0,
        kStrainLife = 1
    } DSFatigueToolAnalysisType;

    typedef enum {
        kFatigueResultInputStress = 0,
        kFatigueResultsInputStrain = 1
    } DSFatigueToolResultsInputType;

    typedef enum {
        DISPID_GeneralLoadNumEntries = 21,
        DISPID_GeneralLoadGeometrySelection = 22,
        DISPID_GeneralLoadSuppressed = 23,
        DISPID_GeneralLoadClearEntries = 24,
        DISPID_GeneralLoadAddEntry = 25,
        DISPID_GeneralLoadEntries = 26,
        DISPID_GeneralLoadEntry0 = 27,
        DISPID_GeneralLoadEntry1 = 28,
        DISPID_GeneralLoadEntry2 = 29,
        DISPID_GeneralLoadEntry3 = 30,
        DISPID_GeneralLoadEntry4 = 31,
        DISPID_GeneralLoadEntry5 = 32,
        DISPID_GeneralLoadEntry6 = 33,
        DISPID_GeneralLoadEntry7 = 34,
        DISPID_GeneralLoadEntry8 = 35,
        DISPID_GeneralLoadEntry9 = 36,
        DISPID_GeneralLoadColor = 37,
        DISPID_GeneralLoadGeometryNum = 38,
        DISPID_GeneralLoadGeometryDefineBy = 39,
        DISPID_GeneralLoadComponentSelection = 40,
        DISPID_GeneralLoadCoordinateSystemSelection = 41,
        DISPID_GeneralLoadLinkedFile = 42,
        DISPID_GeneralLoadHasLinkedFile = 43,
        DISPID_GeneralLoadHasCoordinateSystem = 44,
        DISPID_GeneralLoadExternalObject = 45,
        DISPID_GeneralLoadType = 46,
        DISPID_GeneralLoadEntry10 = 47,
        DISPID_GeneralLoadEntry11 = 48,
        DISPID_GeneralLoadEntry12 = 49,
        DISPID_GeneralLoadEntry13 = 50,
        DISPID_GeneralLoadEntry14 = 51,
        DISPID_GeneralLoadEntry15 = 52,
        DISPID_GeneralLoadEntry16 = 53,
        DISPID_GeneralLoadEntry17 = 54,
        DISPID_GeneralLoadEntry18 = 55,
        DISPID_GeneralLoadEntry19 = 56,
        DISPID_GeneralLoadWithWorksheet = 57,
        DISPID_GeneralLoadWorksheetHTMLPage = 58,
        DISPID_GeneralLoadIsSupport = 59,
        DISPID_GeneralLoadIsLoad = 60,
        DISPID_GeneralLoadResetLoadVariations = 61,
        DISPID_GeneralLoadInitializeAnsBC = 62,
        DISPID_GeneralLoadIs2DModel = 63,
        DISPID_GeneralLoadAnsBCType = 64,
        DISPID_GeneralLoadLoadVariation = 65,
        DISPID_GeneralLoadDataViewType = 66,
        DISPID_GeneralLoadAnsBC = 67,
        DISPID_GeneralLoadOnButtonClick = 68,
        DISPID_GeneralLoadOnActivateProperty = 69,
        DISPID_GeneralLoadImport = 70,
        DISPID_GeneralLoadClean = 71,
        DISPID_GeneralLoadImportFailed = 72,
        DISPID_GeneralLoadCanGenerateData = 73,
        DISPID_GeneralLoadCanOneChildGenerateData = 74,
        DISPID_GeneralLoadImportAsResult = 75,
        DISPID_GeneralLoadAddComment = 76,
        DISPID_GeneralLoadAddFigure = 77,
        DISPID_GeneralLoadAddImage = 78,
        DISPID_GeneralLoadIsExternalObjectBased = 79,
        DISPID_GeneralLoadChangeGeometryDefineByWithoutNotification = 80
    } kDispId_GeneralLoad;

    [
      odl,
      uuid(F854C1C2-FE2B-40E4-9C93-47A7B012B9A0),
      helpstring("IDSGeneralLoadAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSGeneralLoadAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x00000027), propget, helpstring("property GeometryDefineBy")]
        HRESULT GeometryDefineBy([out, retval] DSGeometryDefineByType* pVal);
        [id(0x00000027), propput, helpstring("property GeometryDefineBy")]
        HRESULT GeometryDefineBy([in] DSGeometryDefineByType pVal);
        [id(0x00000028), propget, helpstring("property ComponentSelection")]
        HRESULT ComponentSelection([out, retval] int* pVal);
        [id(0x00000028), propput, helpstring("property ComponentSelection")]
        HRESULT ComponentSelection([in] int pVal);
        [id(0x00000016), propput, helpstring("property GeometrySelection")]
        HRESULT GeometrySelection([in] IDispatch* rhs);
        [id(0x00000015), propget, helpstring("property NumEntries")]
        HRESULT NumEntries([out, retval] int* iVal);
        [id(0x00000017), propget, helpstring("property Suppressed")]
        HRESULT Suppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000017), propput, helpstring("property Suppressed")]
        HRESULT Suppressed([in] VARIANT_BOOL pVal);
        [id(0x00000029), propget, helpstring("property CoordinateSystemSelection")]
        HRESULT CoordinateSystemSelection([out, retval] int* pVal);
        [id(0x00000029), propput, helpstring("property CoordinateSystemSelection")]
        HRESULT CoordinateSystemSelection([in] int pVal);
        [id(0x0000002a), propget, helpstring("property LinkedFile")]
        HRESULT LinkedFile([out, retval] BSTR* pVal);
        [id(0x0000002a), propput, helpstring("property LinkedFile")]
        HRESULT LinkedFile([in] BSTR pVal);
        [id(0x00000018), helpstring("method ClearEntries")]
        HRESULT ClearEntries();
        [id(0x00000019), helpstring("method AddEntry")]
        HRESULT AddEntry([in] IDispatch* iEntry);
        [id(0x0000001a), propget, helpstring("property AddEntry")]
        HRESULT Entries([out, retval] IDispatch** ppDisp);
        [id(0x0000001b), propget, helpstring("property Entry0")]
        HRESULT Entry0([out, retval] VARIANT* pVal);
        [id(0x0000001b), propput, helpstring("property Entry0")]
        HRESULT Entry0([in] VARIANT pVal);
        [id(0x0000001c), propget, helpstring("property Entry1")]
        HRESULT Entry1([out, retval] VARIANT* pVal);
        [id(0x0000001c), propput, helpstring("property Entry1")]
        HRESULT Entry1([in] VARIANT pVal);
        [id(0x0000001d), propget, helpstring("property Entry2")]
        HRESULT Entry2([out, retval] VARIANT* pVal);
        [id(0x0000001d), propput, helpstring("property Entry2")]
        HRESULT Entry2([in] VARIANT pVal);
        [id(0x0000001e), propget, helpstring("property Entry3")]
        HRESULT Entry3([out, retval] VARIANT* pVal);
        [id(0x0000001e), propput, helpstring("property Entry3")]
        HRESULT Entry3([in] VARIANT pVal);
        [id(0x0000001f), propget, helpstring("property Entry4")]
        HRESULT Entry4([out, retval] VARIANT* pVal);
        [id(0x0000001f), propput, helpstring("property Entry4")]
        HRESULT Entry4([in] VARIANT pVal);
        [id(0x00000020), propget, helpstring("property Entry5")]
        HRESULT Entry5([out, retval] VARIANT* pVal);
        [id(0x00000020), propput, helpstring("property Entry5")]
        HRESULT Entry5([in] VARIANT pVal);
        [id(0x00000021), propget, helpstring("property Entry6")]
        HRESULT Entry6([out, retval] VARIANT* pVal);
        [id(0x00000021), propput, helpstring("property Entry6")]
        HRESULT Entry6([in] VARIANT pVal);
        [id(0x00000022), propget, helpstring("property Entry7")]
        HRESULT Entry7([out, retval] VARIANT* pVal);
        [id(0x00000022), propput, helpstring("property Entry7")]
        HRESULT Entry7([in] VARIANT pVal);
        [id(0x00000023), propget, helpstring("property Entry8")]
        HRESULT Entry8([out, retval] VARIANT* pVal);
        [id(0x00000023), propput, helpstring("property Entry8")]
        HRESULT Entry8([in] VARIANT pVal);
        [id(0x00000024), propget, helpstring("property Entry9")]
        HRESULT Entry9([out, retval] VARIANT* pVal);
        [id(0x00000024), propput, helpstring("property Entry9")]
        HRESULT Entry9([in] VARIANT pVal);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** __MIDL__IDSGeneralLoadAuto0000);
        [id(0x00000025), propput, helpstring("property Color")]
        HRESULT Color([in] unsigned int xcol);
        [id(0x00000025), propget, helpstring("property Color")]
        HRESULT Color([out, retval] unsigned int* xcol);
        [id(0x00000026), propget, helpstring("property GeometryNum")]
        HRESULT GeometryNum([out, retval] int* pVal);
        [id(0x0000002b), propget, helpstring("property HasLinkedFile")]
        HRESULT HasLinkedFile([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000002b), propput, helpstring("property HasLinkedFile")]
        HRESULT HasLinkedFile([in] VARIANT_BOOL pVal);
        [id(0x0000002c), propget, helpstring("property HasCoordinateSystem")]
        HRESULT HasCoordinateSystem([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000002c), propput, helpstring("property HasCoordinateSystem")]
        HRESULT HasCoordinateSystem([in] VARIANT_BOOL pVal);
        [id(0x0000002d), propput, helpstring("property ExternalObject")]
        HRESULT ExternalObject([in] IDispatch* pDisp);
        [id(0x0000002d), propget, helpstring("property ExternalObject")]
        HRESULT ExternalObject([out, retval] IDispatch** pDisp);
        [id(0x0000002e), propput, helpstring("property LoadType")]
        HRESULT loadType([in] unsigned int type);
        [id(0x0000002e), propget, helpstring("property LoadType")]
        HRESULT loadType([out, retval] unsigned int* type);
        [id(0x0000002f), propget, helpstring("property Entry10")]
        HRESULT Entry10([out, retval] VARIANT* pVal);
        [id(0x0000002f), propput, helpstring("property Entry10")]
        HRESULT Entry10([in] VARIANT pVal);
        [id(0x00000030), propget, helpstring("property Entry11")]
        HRESULT Entry11([out, retval] VARIANT* pVal);
        [id(0x00000030), propput, helpstring("property Entry11")]
        HRESULT Entry11([in] VARIANT pVal);
        [id(0x00000031), propget, helpstring("property Entry12")]
        HRESULT Entry12([out, retval] VARIANT* pVal);
        [id(0x00000031), propput, helpstring("property Entry12")]
        HRESULT Entry12([in] VARIANT pVal);
        [id(0x00000032), propget, helpstring("property Entry13")]
        HRESULT Entry13([out, retval] VARIANT* pVal);
        [id(0x00000032), propput, helpstring("property Entry13")]
        HRESULT Entry13([in] VARIANT pVal);
        [id(0x00000033), propget, helpstring("property Entry14")]
        HRESULT Entry14([out, retval] VARIANT* pVal);
        [id(0x00000033), propput, helpstring("property Entry14")]
        HRESULT Entry14([in] VARIANT pVal);
        [id(0x00000034), propget, helpstring("property Entry15")]
        HRESULT Entry15([out, retval] VARIANT* pVal);
        [id(0x00000034), propput, helpstring("property Entry15")]
        HRESULT Entry15([in] VARIANT pVal);
        [id(0x00000035), propget, helpstring("property Entry16")]
        HRESULT Entry16([out, retval] VARIANT* pVal);
        [id(0x00000035), propput, helpstring("property Entry16")]
        HRESULT Entry16([in] VARIANT pVal);
        [id(0x00000036), propget, helpstring("property Entry17")]
        HRESULT Entry17([out, retval] VARIANT* pVal);
        [id(0x00000036), propput, helpstring("property Entry17")]
        HRESULT Entry17([in] VARIANT pVal);
        [id(0x00000037), propget, helpstring("property Entry18")]
        HRESULT Entry18([out, retval] VARIANT* pVal);
        [id(0x00000037), propput, helpstring("property Entry18")]
        HRESULT Entry18([in] VARIANT pVal);
        [id(0x00000038), propget, helpstring("property Entry19")]
        HRESULT Entry19([out, retval] VARIANT* pVal);
        [id(0x00000038), propput, helpstring("property Entry19")]
        HRESULT Entry19([in] VARIANT pVal);
        [id(0x00000039), propget, helpstring("property WithWorksheet")]
        HRESULT WithWorksheet([out, retval] VARIANT_BOOL* WithWorksheet);
        [id(0x0000003a), propget, helpstring("property WorksheetHTMLPage")]
        HRESULT WorksheetHTMLPage([out, retval] BSTR* htmlPage);
        [id(0x0000003b), propget, helpstring("property IsSupport")]
        HRESULT IsSupport([out, retval] VARIANT_BOOL* IsSupport);
        [id(0x0000003b), propput, helpstring("property IsSupport")]
        HRESULT IsSupport([in] VARIANT_BOOL IsSupport);
        [id(0x0000003c), propget, helpstring("property IsLoad")]
        HRESULT IsLoad([out, retval] VARIANT_BOOL* IsLoad);
        [id(0x0000003c), propput, helpstring("property IsLoad")]
        HRESULT IsLoad([in] VARIANT_BOOL IsLoad);
        [id(0x0000003d), helpstring("method ResetLoadVariations")]
        HRESULT ResetLoadVariations(
                        [in] IDispatch* pAnsBC, 
                        [in] eLoadVariationType LVType, 
                        [in] eLoadVariationVariableType LVVarType, 
                        [in] IDSListWrapper* pBCLVTypeList);
        [id(0x0000003e), helpstring("method ResetLoadVariations")]
        HRESULT InitializeAnsBC();
        [id(0x0000003f), propget, helpstring("property Is2DModel")]
        HRESULT Is2DModel([out] VARIANT_BOOL* pvbIs2D);
        [id(0x00000040), propget, helpstring("property AnsBCType")]
        HRESULT AnsBCType([out, retval] int* piBCType);
        [id(0x00000041), propget, helpstring("property LoadVariation")]
        HRESULT LoadVariation(
                        [in] int ComponentPosition, 
                        [out, retval] IDispatch** pDispLoadVariation);
        [id(0x00000042), propget, helpstring("property DataViewType")]
        HRESULT DataViewType(
                        [in] int iAnsBCLVType, 
                        [out, retval] int* pVal);
        [id(0x00000043), propget, helpstring("property AnsBC")]
        HRESULT AnsBC([out, retval] IDispatch** pDisp);
        [id(0x60020058), propget]
        HRESULT AddinLoadType([out, retval] int* addinCLSIDVal);
        [id(0x60020058), propput]
        HRESULT AddinLoadType([in] int addinCLSIDVal);
        [id(0x6002005a), propput]
        HRESULT TabularDataIndependentVariable([in] int rhs);
        [id(0x00000044), helpstring("method OnButtonClick")]
        HRESULT OnButtonClick(
                        [in] BSTR propName, 
                        [in] BSTR btnName, 
                        [out, retval] VARIANT_BOOL* cont);
        [id(0x00000045), helpstring("method OnActivateProperty")]
        HRESULT OnActivateProperty(
                        [in] BSTR propName, 
                        [in] VARIANT_BOOL activate, 
                        [out, retval] VARIANT_BOOL* cont);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x00000046), helpstring("method Import")]
        HRESULT Import([in] IAnsProgress* piProgress);
        [id(0x00000047), helpstring("method Clean")]
        HRESULT Clean();
        [id(0x00000049), propget, helpstring("property CanGenerateData")]
        HRESULT CanGenerateData([out, retval] VARIANT_BOOL* canGen);
        [id(0x0000004a), propget, helpstring("property CanOneChildGenerateData")]
        HRESULT CanOneChildGenerateData([out, retval] VARIANT_BOOL* canGen);
        [id(0x0000004b), helpstring("method ImportAsResult")]
        HRESULT ImportAsResult(
                        [in] unsigned int answerSetId, 
                        [in] IAnsProgress* piProgress);
        [id(0x0000004c), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x0000004d), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x0000004e), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x0000004f), propget, helpstring("method IsExternalObjectBased")]
        HRESULT IsExternalObjectBased([out, retval] VARIANT_BOOL* isExt);
        [id(0x00000050), helpstring("method ChangeGeometryDefineByWithoutNotification")]
        HRESULT ChangeGeometryDefineByWithoutNotification([in] DSGeometryDefineByType pVal);
    };

    typedef enum {
        kLoadVariationUndefined = 0,
        kLoadVariationStructural = 1,
        kLoadVariationThermal = 2,
        kLoadVariationCFX = 3,
        kLoadVariationPointMass = 4,
        kLoadVariationStructuralBegin = 100,
        kLoadVariationPressure = 101,
        kLoadVariationForce = 102,
        kLoadVariationHydrostaticPressure = 103,
        kLoadVariationLinePressure = 104,
        kLoadVariationDisplacement = 105,
        kLoadVariationMoment = 106,
        kLoadVariationElasticSupport = 107,
        kLoadVariationPretensionBoltLoad = 108,
        kLoadVariationRotationalVelocity = 109,
        kLoadVariationAcceleration = 110,
        kLoadVariationRotation = 111,
        kLoadVariationVelocity = 112,
        kLoadVariationRotationalAcceleration = 113,
        kLoadVariationForceDensity = 114,
        kLoadVariationStress = 115,
        kLoadVariationStrain = 116,
        kLoadVariationPressureNodal = 117,
        kLoadVariationStressNodal = 118,
        kLoadVariationStrainNodal = 119,
        kLoadVariationStructuralEnd = 120,
        kLoadVariationThermalBegin = 200,
        kLoadVariationHeatFlux = 201,
        kLoadVariationHeatFlow = 202,
        kLoadVariationTemperature = 203,
        kLoadVariationRadiation = 204,
        kLoadVariationHeatGeneration = 205,
        kLoadVariationConvectionCoefficient = 206,
        kLoadVariationThermalEnd = 207,
        kLoadVariationEmagBegin = 300,
        kLoadVariationVoltage = 301,
        kLoadVariationCurrent = 302,
        kLoadVariationEmagEnd = 303,
        kLoadVariationPSDBegin = 500,
        kLoadVariationPSDGAcceleration = 501,
        kLoadVariationPSDAcceleration = 502,
        kLoadVariationPSDDisplacement = 503,
        kLoadVariationPSDVelocity = 504,
        kLoadVariationPSDEnd = 505,
        kLoadVariationExternalBegin = 600,
        kLoadVariationExternal = 601,
        kLoadVariationExternalElementOrientation = 602,
        kLoadVariationMetalFraction = 603,
        kLoadVariationExternalEnd = 604,
        kLoadVariationRSBegin = 700,
        kLoadVariationRSGAcceleration = 701,
        kLoadVariationRSAcceleration = 702,
        kLoadVariationRSDisplacement = 703,
        kLoadVariationRSVelocity = 704,
        kLoadVariationRSEnd = 705,
        kLoadVariationFluidBegin = 800,
        kLoadVariationMassFlowRate = 801,
        kLoadVariationFluidEnd = 802,
        kLoadVariationShellThicknessBegin = 850,
        kLoadVariationShellThickness = 851,
        kLoadVariationShellThicknessEnd = 852,
        kLoadVariationExternalEnhancedModelBegin = 860,
        kLoadVariationExternalLayeredSection = 861,
        kLoadVariationExternaLayeredSectionOffset = 862,
        kLoadVariationExternalEnhancedModelEnd = 863,
        kLoadVariationNonlinearStiffnessBegin = 870,
        kLoadVariationSpringNonlinStiffness = 871,
        kLoadVariationBushingNonlinStiffness = 872,
        kLoadVariationNonlinearStiffnessEnd = 873,
        kLoadVariationRotatingForceBegin = 880,
        kLoadVariationRotatingForce = 881,
        kLoadVariationRotatingForceEnd = 882,
        kLoadVariationNonlinearAdaptivityBegin = 890,
        kLoadVariationNonlinearAdaptivity = 891,
        kLoadVariationNonlinearAdaptivityEnd = 892,
        kLoadVariationBearingBegin = 900,
        kLoadVariationBearing = 901,
        kLoadVariationBearingEnd = 902,
        kLoadVariationEnd = 903
    } eLoadVariationType;

    typedef enum {
        kLoadVariationVariableUndefined = 0,
        kLoadVariationVariableIndependentsBegin = 10,
        kLoadVariationVariableTime = 11,
        kLoadVariationVariableX = 12,
        kLoadVariationVariableY = 13,
        kLoadVariationVariableZ = 14,
        kLoadVariationVariableSector = 15,
        kLoadVariationVariableFrequency = 16,
        kLoadVariationVariableStep = 17,
        kLoadVariationVariablePhaseAngle = 18,
        kLoadVariationVariableEntityId = 19,
        kLoadVariationVariableElementFace = 20,
        kLoadVariationVariableElementType = 21,
        kLoadVariationVariableRefId = 22,
        kLoadVariationVariableNodeId0 = 23,
        kLoadVariationVariableNodeId1 = 24,
        kLoadVariationVariableNodeId2 = 25,
        kLoadVariationVariableNodeId3 = 26,
        kLoadVariationVariableNodeId4 = 27,
        kLoadVariationVariableNodeId5 = 28,
        kLoadVariationVariableNodeId6 = 29,
        kLoadVariationVariableNodeId7 = 30,
        kLoadVariationVariableNodeId8 = 31,
        kLoadVariationVariableNodeId9 = 32,
        kLoadVariationVariableNodeId10 = 33,
        kLoadVariationVariableNodeId11 = 34,
        kLoadVariationVariableNodeId12 = 35,
        kLoadVariationVariableNodeId13 = 36,
        kLoadVariationVariableNodeId14 = 37,
        kLoadVariationVariableNodeId15 = 38,
        kLoadVariationVariableNodeId16 = 39,
        kLoadVariationVariableNodeId17 = 40,
        kLoadVariationVariableNodeId18 = 41,
        kLoadVariationVariableNodeId19 = 42,
        kLoadVariationVariablePathLength = 43,
        kLoadVariationVariableNormalizedPathLength = 44,
        kLoadVariationVariableExtLayeredSectionID = 45,
        kLoadVariationVariableIndependentsEnd = 46,
        kLoadVariationVariableDependentsBegin = 150,
        kLoadVariationVariableComponentX = 151,
        kLoadVariationVariableComponentY = 152,
        kLoadVariationVariableComponentZ = 153,
        kLoadVariationVariableScale = 154,
        kLoadVariationVariableOffset = 155,
        kLoadVariationVariableStructuralBegin = 200,
        kLoadVariationVariableAcceleration = 201,
        kLoadVariationVariableDisplacement = 202,
        kLoadVariationVariableForce = 203,
        kLoadVariationVariableMoment = 204,
        kLoadVariationVariablePressure = 205,
        kLoadVariationVariableRotation = 206,
        kLoadVariationVariableRotationalVelocity = 207,
        kLoadVariationVariableVelocity = 208,
        kLoadVariationVariableForceIntensity = 209,
        kLoadVariationVariableFoundationStiffness = 210,
        kLoadVariationVariableDamping = 211,
        kLoadVariationVariableFriction = 212,
        kLoadVariationVariableRotationalAcceleration = 213,
        kLoadVariationVariableMass = 214,
        kLoadVariationVariableStructuralEnd = 215,
        kLoadVariationVariableThermalBegin = 300,
        kLoadVariationVariableTemperature = 301,
        kLoadVariationVariableConvectionCoefficient = 302,
        kLoadVariationVariableBulkTemperature = 303,
        kLoadVariationVariableHeatFlow = 304,
        kLoadVariationVariableHeatGenerationRate = 305,
        kLoadVariationVariableHeatFlux = 306,
        kLoadVariationVariableEmissivity = 307,
        kLoadVariationVariableCapacitance = 308,
        kLoadVariationVariableThermalEnd = 309,
        kLoadVariationVariableEMagBegin = 400,
        kLoadVariationVariableVoltage = 401,
        kLoadVariationVariableCurrent = 402,
        kLoadVariationVariableEMagEnd = 403,
        kLoadVariationVariableFluidBegin = 500,
        kLoadVariationVariableFluidDensity = 501,
        kLoadVariationVariableMassFlowRate = 502,
        kLoadVariationVariableFluidEnd = 503,
        kLoadVariationVariablePSDBegin = 550,
        kLoadVariationVariablePSDGAcceleration = 551,
        kLoadVariationVariablePSDAcceleration = 552,
        kLoadVariationVariablePSDDisplacement = 553,
        kLoadVariationVariablePSDVelocity = 554,
        kLoadVariationVariablePSDEnd = 555,
        kLoadVariationVariableBoltBegin = 575,
        kLoadVariationVariableBoltLoadDefineBy = 576,
        kLoadVariationVariablePreload = 577,
        kLoadVariationVariablePreadjustment = 578,
        kLoadVariationVariableBoltIncrement = 579,
        kLoadVariationVariableBoltEnd = 580,
        kLoadVariationVariableExternalBegin = 600,
        kLoadVariationVariableExternalRealValue = 601,
        kLoadVariationVariableExternalRealVectorI = 602,
        kLoadVariationVariableExternalRealVectorJ = 603,
        kLoadVariationVariableExternalRealVectorK = 604,
        kLoadVariationVariableExternalImagValue = 605,
        kLoadVariationVariableExternalImagVectorI = 606,
        kLoadVariationVariableExternalImagVectorJ = 607,
        kLoadVariationVariableExternalImagVectorK = 608,
        kLoadVariationVariableExternalTemperature = 609,
        kLoadVariationVariableExternalRealValueX = 610,
        kLoadVariationVariableExternalRealValueY = 611,
        kLoadVariationVariableExternalRealValueZ = 612,
        kLoadVariationVariableExternalImagValueX = 613,
        kLoadVariationVariableExternalImagValueY = 614,
        kLoadVariationVariableExternalImagValueZ = 615,
        kLoadVariationVariableExternalRealValueX2 = 616,
        kLoadVariationVariableExternalRealValueY2 = 617,
        kLoadVariationVariableExternalRealValueZ2 = 618,
        kLoadVariationVariableExternalEnd = 619,
        kLoadVariationVariableExternalEnhancedModelBegin = 650,
        kLoadVariationVariableMaterialID = 651,
        kLoadVariationVariableExtLayeredSectionOffset = 652,
        kLoadVariationVariableExternalEnhancedModelEnd = 653,
        kLoadVariationVariableIndexBegin = 675,
        kLoadVariationVariableDependentDataIndex = 676,
        kLoadVariationVariableIndexEnd = 677,
        kLoadVariationVariableDependentsEnd = 678,
        kLoadVariationVariableRSBegin = 700,
        kLoadVariationVariableRSGAcceleration = 701,
        kLoadVariationVariableRSAcceleration = 702,
        kLoadVariationVariableRSDisplacement = 703,
        kLoadVariationVariableRSVelocity = 704,
        kLoadVariationVariableRSEnd = 705,
        kLoadVariationVariableShellThickness = 750,
        kLoadVariationVariableShellThicknessEnd = 751,
        kLoadVariationVariableNonlinearStiffnessBegin = 752,
        kLoadVariationVariableSpringNonLinStiffness = 753,
        kLoadVariationVariableBushingNonlinStiffness = 754,
        kLoadVariationVariableNonlinearStiffnessEnd = 755,
        kLoadVariationVariableRotatingForceBegin = 760,
        kLoadVariationVariableUnbalancedMass = 761,
        kLoadVariationVariableUnbalancedForce = 762,
        kLoadVariationVariableSynchronousRatio = 763,
        kLoadVariationVariableAxisLocationX = 764,
        kLoadVariationVariableAxisLocationY = 765,
        kLoadVariationVariableAxisLocationZ = 766,
        kLoadVariationVariableAxisComponentX = 767,
        kLoadVariationVariableAxisComponentY = 768,
        kLoadVariationVariableAxisComponentZ = 769,
        kLoadVariationVariableRotatingRadius = 770,
        kLoadVariationVariableRotatingForceEnd = 771,
        kLoadVariationVariableBearingPropertiesBegin = 775,
        kLoadVariationVariableBearingStiffnessK11 = 776,
        kLoadVariationVariableBearingStiffnessK22 = 777,
        kLoadVariationVariableBearingStiffnessK12 = 778,
        kLoadVariationVariableBearingStiffnessK21 = 779,
        kLoadVariationVariableBearingDampingC11 = 780,
        kLoadVariationVariableBearingDampingC22 = 781,
        kLoadVariationVariableBearingDampingC12 = 782,
        kLoadVariationVariableBearingDampingC21 = 783,
        kLoadVariationVariableBearingPropertiesEnd = 784,
        kLoadVariationVariableNonlinearAdaptivityBegin = 800,
        kLoadVariationVariableNonlinearAdaptivity = 801,
        kLoadVariationVariableNonlinearAdaptivityEnd = 802,
        kLoadVariationVariableEnd = 803,
        kLoadVariationVariableGraphUndefined = 804,
        kLoadVariationVariableGraphPSDFittedValue = 805,
        kLoadVariationVariableGraphEnd = 806,
        kLoadVariationVariableBehavior = 807,
        kLoadVariationVariableValue = 808,
        kLoadVariationVariableRotationX = 809,
        kLoadVariationVariableRotationY = 810,
        kLoadVariationVariableRotationZ = 811,
        kLoadVariationVariableLocationX = 812,
        kLoadVariationVariableLocationY = 813,
        kLoadVariationVariableLocationZ = 814
    } eLoadVariationVariableType;

    [
      odl,
      uuid(40FD3D77-261F-4DDA-8189-D8730F0C6BD1),
      helpstring("lists are not real com objects and can only be used in-process")
    ]
    interface IDSListWrapper : IUnknown {
        HRESULT _stdcall type([out] IDSListType* pType);
        HRESULT _stdcall DataSize([out] unsigned int* pSize);
    };

    typedef enum {
        kDSIdList = 0,
        kDSReferenceList = 1,
        kDSTopoIdList = 2,
        kDSFullTopoIdList = 3,
        kDSParameterizedList = 4,
        kWBHitDetectRecordList = 5,
        kWBReferenceList = 6
    } IDSListType;

    [
      odl,
      uuid(B2606E0C-3553-42AC-89CF-8CA39B79F5F7),
      helpstring("IDSGeneralLoadExtended Interface")
    ]
    interface IDSGeneralLoadExtended : IDispatch {
        [propget]
        HRESULT _stdcall WithWorksheet([out, retval] VARIANT_BOOL* WithWorksheet);
        [propget]
        HRESULT _stdcall WorksheetHTMLPage([out, retval] BSTR* htmlPage);
        [propget]
        HRESULT _stdcall LoadCLSIDType([out, retval] unsigned int* uiCLSIDVal);
        [propput]
        HRESULT _stdcall LoadCLSIDType([in] unsigned int uiCLSIDVal);
        [propget]
        HRESULT _stdcall AddinLoadType([out, retval] int* addinCLSIDVal);
        [propput]
        HRESULT _stdcall AddinLoadType([in] int addinCLSIDVal);
        [propget]
        HRESULT _stdcall unitType([out, retval] int* unit);
        HRESULT _stdcall CopyExternalLoad(
                        [in] IDispatch* pGLDisp, 
                        [out, retval] IDispatch** ppDispExternalLoad);
        HRESULT _stdcall NotifyCopy([in] dsid idGL);
        [propget]
        HRESULT _stdcall canParent(
                        [in] IDispatch* pDispEnv, 
                        [out, retval] VARIANT_BOOL* vbCanParent);
        HRESULT _stdcall OnButtonClick(
                        [in] BSTR propName, 
                        [in] BSTR btnName, 
                        [out, retval] VARIANT_BOOL* cont);
        HRESULT _stdcall OnActivateProperty(
                        [in] BSTR propName, 
                        [in] VARIANT_BOOL activate, 
                        [out, retval] VARIANT_BOOL* cont);
        HRESULT _stdcall Import([in] IAnsProgress* piProgress);
        HRESULT _stdcall Clean();
        [propget]
        HRESULT _stdcall CanGenerateData([out, retval] VARIANT_BOOL* canGen);
        [propget]
        HRESULT _stdcall canDelete([out, retval] VARIANT_BOOL* vbCanDelete);
        HRESULT _stdcall UpdateAfterSimulationTypeChange([in] DSSimulationType* previousType);
        HRESULT _stdcall IsObjectValid([out, retval] VARIANT_BOOL* isValid);
    };

    [
      odl,
      uuid(820F4E8A-AE81-41E8-A115-933342B99AE5),
      helpstring("IDSCustomResultExtended Interface")
    ]
    interface IDSCustomResultExtended : IDispatch {
        [propget]
        HRESULT _stdcall ResultFileName([out, retval] BSTR* filename);
        HRESULT _stdcall NotifyCopy([in] dsid idGL);
        [propget]
        HRESULT _stdcall HasImaginary([out, retval] VARIANT_BOOL* HasImaginary);
        HRESULT _stdcall UpdateAfterSimulationTypeChange([in] DSSimulationType* previousType);
        [propget]
        HRESULT _stdcall canParent(
                        [in] IDispatch* pDispEnv, 
                        [out, retval] VARIANT_BOOL* vbCanParent);
        HRESULT _stdcall IsObjectValid([out, retval] VARIANT_BOOL* isValid);
    };

    typedef enum {
        DISPID_GeneralLoadName = 1,
        DISPID_GeneralLoadUnitType = 2,
        DISPID_GeneralLoadValue = 3,
        DISPID_GeneralLoadUnitSystem = 4
    } kDispId_GeneralLoadEntry;

    [
      odl,
      uuid(FB25DE30-B414-47F0-BDEC-A28669AEDE6B),
      helpstring("IDSGeneralLoadEntry Interface"),
      dual,
      oleautomation
    ]
    interface IDSGeneralLoadEntry : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property UnitType")]
        HRESULT unitType([out, retval] int* pVal);
        [id(0x00000002), propput, helpstring("property UnitType")]
        HRESULT unitType([in] int pVal);
        [id(0x00000003), propget, helpstring("property Value")]
        HRESULT Value([out, retval] VARIANT* pVal);
        [id(0x00000003), propput, helpstring("property Value")]
        HRESULT Value([in] VARIANT pVal);
        [id(0x00000004), propget, helpstring("property UnitSystem")]
        HRESULT UnitSystem([out, retval] int* pVal);
        [id(0x00000004), propput, helpstring("property UnitSystem")]
        HRESULT UnitSystem([in] int pVal);
    };

    typedef enum {
        DISPID_HarmonicToolForcingFrequencyMin = 10,
        DISPID_HarmonicToolForcingFrequencyMax = 11,
        DISPID_HarmonicToolSolutionIntervals = 12,
        DISPID_HarmonicToolClusterResults = 13,
        DISPID_HarmonicToolConstantDampingValue = 14,
        DISPID_HarmonicToolStepLoading = 15,
        DISPID_HarmonicToolAddComment = 16,
        DISPID_HarmonicToolAddResult = 17,
        DISPID_HarmonicToolSolutionMethod = 18,
        DISPID_HarmonicToolAddFigure = 19,
        DISPID_HarmonicToolComment = 20,
        DISPID_HarmonicToolFigure = 21,
        DISPID_HarmonicToolResult = 22,
        DISPID_HarmonicToolResultChart = 23,
        DISPID_HarmonicToolAddResultChart = 24,
        DISPID_HarmonicToolBetaDampingDefineBy = 25,
        DISPID_HarmonicToolBetaDampingBeta = 26,
        DISPID_HarmonicToolBetaDampingFrequency = 27,
        DISPID_HarmonicToolBetaDampingMeasure = 28,
        DISPID_HarmonicToolSolutionIntervalsWithClustering = 29,
        DISPID_HarmonicToolUseModalFrequencyRangeType = 30,
        DISPID_HarmonicToolUseModalFrequencyRangeMinValue = 31,
        DISPID_HarmonicToolUseModalFrequencyRangeMaxValue = 32,
        DISPID_HarmonicToolImages = 33,
        DISPID_HarmonicToolAddImage = 34,
        DISPID_HarmonicToolUnitTypeByDispid = 35,
        DISPID_HarmonicToolUnitStringByDispid = 36,
        DISPID_HarmonicToolParamNameByDispid = 37
    } kDispId_HarmonicTool;

    [
      odl,
      uuid(A4C441E1-F9F0-426C-9971-34AFD676D9B0),
      helpstring("IDSHarmonicToolAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSHarmonicToolAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x0000000a), propget, helpstring("property ForcingFrequencyMin")]
        HRESULT ForcingFrequencyMin([out, retval] double* pVal);
        [id(0x0000000a), propput, helpstring("property ForcingFrequencyMin")]
        HRESULT ForcingFrequencyMin([in] double pVal);
        [id(0x0000000b), propget, helpstring("property ForcingFrequencyMax")]
        HRESULT ForcingFrequencyMax([out, retval] double* pVal);
        [id(0x0000000b), propput, helpstring("property ForcingFrequencyMax")]
        HRESULT ForcingFrequencyMax([in] double pVal);
        [id(0x0000000c), propget, helpstring("property SolutionIntervals")]
        HRESULT SolutionIntervals([out, retval] int* pVal);
        [id(0x0000000c), propput, helpstring("property SolutionIntervals")]
        HRESULT SolutionIntervals([in] int pVal);
        [id(0x0000001d), propget, helpstring("property SolutionIntervalsWithClustering")]
        HRESULT SolutionIntervalsWithClustering([out, retval] int* pVal);
        [id(0x0000001d), propput, helpstring("property SolutionIntervalsWithClustering")]
        HRESULT SolutionIntervalsWithClustering([in] int pVal);
        [id(0x00000012), propget, helpstring("property SolutionMethod")]
        HRESULT SolutionMethod([out, retval] DSHarmonicMethod* pVal);
        [id(0x00000012), propput, helpstring("property SolutionMethod")]
        HRESULT SolutionMethod([in] DSHarmonicMethod pVal);
        [id(0x0000000d), propget, helpstring("property ClusterResults")]
        HRESULT ClusterResults([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000000d), propput, helpstring("property ClusterResults")]
        HRESULT ClusterResults([in] VARIANT_BOOL pVal);
        [id(0x0000000e), propget, helpstring("property ConstantDampingValue")]
        HRESULT ConstantDampingValue([out, retval] double* pVal);
        [id(0x0000000e), propput, helpstring("property ConstantDampingValue")]
        HRESULT ConstantDampingValue([in] double pVal);
        [id(0x0000000f), propget, helpstring("property StepLoading")]
        HRESULT StepLoading([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000000f), propput, helpstring("property StepLoading")]
        HRESULT StepLoading([in] VARIANT_BOOL pVal);
        [id(0x00000019), propget, helpstring("property BetaDampingDefineBy")]
        HRESULT BetaDampingDefineBy([out, retval] DSBetaDampingType* pVal);
        [id(0x00000019), propput, helpstring("property BetaDampingDefineBy")]
        HRESULT BetaDampingDefineBy([in] DSBetaDampingType pVal);
        [id(0x0000001b), propget, helpstring("property BetaDampingFrequency")]
        HRESULT BetaDampingFrequency([out, retval] double* pVal);
        [id(0x0000001b), propput, helpstring("property BetaDampingFrequency")]
        HRESULT BetaDampingFrequency([in] double pVal);
        [id(0x0000001c), propget, helpstring("property BetaDampingMeasure")]
        HRESULT BetaDampingMeasure([out, retval] double* pVal);
        [id(0x0000001c), propput, helpstring("property BetaDampingMeasure")]
        HRESULT BetaDampingMeasure([in] double pVal);
        [id(0x0000001a), propget, helpstring("property BetaDampingBeta")]
        HRESULT BetaDampingBeta([out, retval] double* pVal);
        [id(0x0000001a), propput, helpstring("property BetaDampingBeta")]
        HRESULT BetaDampingBeta([in] double pVal);
        [id(0x00000010), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x00000011), helpstring("method AddResult")]
        HRESULT AddResult(
                        [in] IDispatch* piSelectMgr, 
                        [in] unsigned int resType, 
                        [out, retval] IDispatch** ppVal);
        [id(0x00000018), helpstring("method AddResultChart")]
        HRESULT AddResultChart(
                        [in] IDispatch* piSelectMgr, 
                        [in] unsigned int resType, 
                        [in] int responseType, 
                        [out, retval] IDispatch** ppVal);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x00000013), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x00000014), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x00000015), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x00000016), propget, helpstring("property Results")]
        HRESULT Results([out, retval] IDispatch** ppDisp);
        [id(0x00000017), propget, helpstring("property ResultCharts")]
        HRESULT ResultCharts([out, retval] IDispatch** ppDisp);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** __MIDL__IDSHarmonicToolAuto0000);
        [id(0x0000001e), propget, helpstring("property UseModalFrequencyRangeType")]
        HRESULT UseModalFrequencyRangeType([out, retval] DSModalFrequencyRangeType* pVal);
        [id(0x0000001e), propput, helpstring("property UseModalFrequencyRangeType")]
        HRESULT UseModalFrequencyRangeType([in] DSModalFrequencyRangeType pVal);
        [id(0x0000001f), propget, helpstring("property UseModalFrequencyRangeMinValue")]
        HRESULT UseModalFrequencyRangeMinValue([out, retval] double* pVal);
        [id(0x0000001f), propput, helpstring("property UseModalFrequencyRangeMinValue")]
        HRESULT UseModalFrequencyRangeMinValue([in] double pVal);
        [id(0x00000020), propget, helpstring("property UseModalFrequencyRangeMaxValue")]
        HRESULT UseModalFrequencyRangeMaxValue([out, retval] double* pVal);
        [id(0x00000020), propput, helpstring("property UseModalFrequencyRangeMaxValue")]
        HRESULT UseModalFrequencyRangeMaxValue([in] double pVal);
        [id(0x00000021), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000022), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00000023), propget, helpstring("property UnitTypeByDispid")]
        HRESULT UnitTypeByDispid(
                        [in] int dispid, 
                        [out, retval] int* unitType);
        [id(0x00000024), propget, helpstring("property UnitStringByDispid")]
        HRESULT UnitStringByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* unitString);
        [id(0x00000025), propget, helpstring("property ParamNameByDispid")]
        HRESULT ParamNameByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* paramName);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
    };

    typedef enum {
        kHARMONIC_MODE_SUPERPOSITION = 0,
        kHARMONIC_FULL = 1
    } DSHarmonicMethod;

    typedef enum {
        kDIRECT_INPUT = 0,
        kDAMPING_VS_FREQUENCY = 1
    } DSBetaDampingType;

    typedef enum {
        kMODAL_FREQ_RANGE_PROGRAM_CHOOSES = 0,
        kMODAL_FREQ_RANGE_MANUAL = 1
    } DSModalFrequencyRangeType;

    typedef enum {
        DISPID_InitialInfoSummaryFilename = 10
    } kDispId_InitialInfoSummary;

    [
      odl,
      uuid(5BA83B7D-B4EA-4214-B014-D74B4BA3FB8F),
      helpstring("IDSInitialInfoSummaryAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSInitialInfoSummaryAuto : IDispatch {
    };

    typedef enum {
        DISPID_AnalysisSettingsSolutionSettings = 20,
        DISPID_AnalysisSettingsComments = 21,
        DISPID_AnalysisSettingsAddComment = 22,
        DISPID_AnalysisSettingsFigures = 23,
        DISPID_AnalysisSettingsAddFigure = 24,
        DISPID_AnalysisSettingsImages = 25,
        DISPID_AnalysisSettingsAddImage = 26,
        DISPID_AnalysisSettingsSetAffectedSteps = 27,
        DISPID_AnalysisSettingsConstantDampingRatio = 30,
        DISPID_AnalysisSettingsBetaDampingDefineBy = 31,
        DISPID_AnalysisSettingsBetaDampingFrequency = 32,
        DISPID_AnalysisSettingsBetaDampingConstantDampingRatio = 33,
        DISPID_AnalysisSettingsBetaDampingBeta = 34,
        DISPID_AnalysisSettingsNumericalDampingValue = 35,
        DISPID_AnalysisSettingsAlphaDampingAlpha = 36,
        DISPID_AnalysisSettingsNumericalDampingType = 37,
        DISPID_AnalysisSettingssetDefaultDampingValue = 38,
        DISPID_AnalysisSettingsConstantDampingType = 39,
        DISPID_AnalysisSettingsInitializeObjectForTypes = 40,
        DISPID_AnalysisSettingsNumberOfModesToExtract = 41,
        DISPID_AnalysisSettingsGetAnalysisSettingsAddIn = 42,
        DISPID_AnalysisSettingsSetEnvironmentId = 43,
        DISPID_AnalysisSettingsRefreshSelectedSolverUnits = 45,
        DISPID_AnalysisSettingsSolverTargetName = 46,
        DISPID_AnalysisSettingsHasValidRestartFiles = 47,
        DISPID_AnalysisSettingsReadRestartFiles = 48,
        DISPID_AnalysisSettingsGetNumberOfRestartDataPoints = 49,
        DISPID_AnalysisSettingsGetRestartDataPointsInfoByIndex = 55,
        DISPID_AnalysisSettingsRestartItemSelection = 58,
        DISPID_AnalysisSettingsRestartRetainFiles = 59,
        DISPID_AnalysisSettingsNumberOfSteps = 44,
        DISPID_AnalysisSettingsNumModesToFind = 50,
        DISPID_AnalysisSettingsRangeSearch = 51,
        DISPID_AnalysisSettingsMinFrequency = 52,
        DISPID_AnalysisSettingsMaxFrequency = 53,
        DISPID_AnalysisSettingsSaveFilesForPSD = 54,
        DISPID_AnalysisSettingsDampedSolve = 60,
        DISPID_AnalysisSettingsStoreComplexSolution = 61,
        DISPID_AnalysisSettingsBucklingLoadPattern = 62,
        DISPID_AnalysisSettingsNonLinearFormulation = 70,
        DISPID_AnalysisSettingsReformulationTolerance = 71,
        DISPID_AnalysisSettingsNumResultSets = 74,
        DISPID_AnalysisSettingsResultSet = 75,
        DISPID_AnalysisSettingsResultSets = 76,
        DISPID_AnalysisSettingsResultSetsCriteria = 77,
        DISPID_AnalysisSettingsDeleteAllResultSets = 114,
        DISPID_AnalysisSettingsDeleteResultSet = 115,
        DISPID_AnalysisSettingsAddResultSet = 116,
        DISPID_AnalysisSettingsDeleteResultSetsInRange = 117,
        DISPID_AnalysisSettingsHarmonicForcingFrequencyMin = 200,
        DISPID_AnalysisSettingsHarmonicForcingFrequencyMax = 201,
        DISPID_AnalysisSettingsHarmonicForcingFrequencyIntervals = 202,
        DISPID_AnalysisSettingsHarmonicForcingFrequencyClusterDensity = 203,
        DISPID_AnalysisSettingsHarmonicSolutionMethod = 204,
        DISPID_AnalysisSettingsHarmonicForcingFrequencyClustering = 205,
        DISPID_AnalysisSettingsHarmonicConstantDampingRatio = 206,
        DISPID_AnalysisSettingsHarmonicMSUPModalRangeType = 207,
        DISPID_AnalysisSettingsHarmonicMSUPModalFrequencyMin = 208,
        DISPID_AnalysisSettingsHarmonicMSUPModalFrequencyMax = 209,
        DISPID_AnalysisSettingsHarmonicMSUPStorage = 210,
        DISPID_AnalysisSettingsFrequencySpacingType = 211,
        DISPID_AnalysisSettingsCentralFrequency = 212,
        DISPID_AnalysisSettingsHarmonicIncludeUserForcingFrequencySteps = 213,
        DISPID_AnalysisSettingsHarmonicUserForcingFrequencySteps = 214,
        DISPID_AnalysisSettingsSolverType = 230,
        DISPID_AnalysisSettingsUseWeakSprings = 231,
        DISPID_AnalysisSettingsUseWeakSpringsStiffness = 232,
        DISPID_AnalysisSettingsUseWeakSpringsFactor = 233,
        DISPID_AnalysisSettingsUseWeakSpringsValue = 234,
        DISPID_AnalysisSettingsUseLargeDeformation = 235,
        DISPID_AnalysisSettingsUseInertialRelief = 236,
        DISPID_AnalysisSettingsMBDTimeIntegrationType = 237,
        DISPID_AnalysisSettingsMBDUseStabilization = 238,
        DISPID_AnalysisSettingsMBDDefineAlphaBeta = 239,
        DISPID_AnalysisSettingsMBDStabilAlpha = 240,
        DISPID_AnalysisSettingsMBDStabilBeta = 241,
        DISPID_AnalysisSettingsIncludeResidualVector = 242,
        DISPID_AnalysisSettingsIncludeNegativeLoadMultiplier = 243,
        DISPID_AnalysisSettingsCurrentStepNumber = 250,
        DISPID_AnalysisSettingsEndTime = 251,
        DISPID_AnalysisSettingsUseAutoTimeStepping = 252,
        DISPID_AnalysisSettingsTimeStepDefineby = 253,
        DISPID_AnalysisSettingsInitialSteps = 254,
        DISPID_AnalysisSettingsMinimumSteps = 255,
        DISPID_AnalysisSettingsMaximumSteps = 256,
        DISPID_AnalysisSettingsNumberOfSubSteps = 257,
        DISPID_AnalysisSettingsInitialTimeStep = 258,
        DISPID_AnalysisSettingsMinimumTimeStep = 259,
        DISPID_AnalysisSettingsMaximumTimeStep = 260,
        DISPID_AnalysisSettingsCarryOverTimeStep = 261,
        DISPID_AnalysisSettingsTimeStep = 262,
        DISPID_AnalysisSettingsUseTimeIntegration = 263,
        DISPID_AnalysisSettingsLoadCaseIdentifier = 264,
        DISPID_AnalysisSettingsAddStep = 280,
        DISPID_AnalysisSettingsRemoveStep = 281,
        DISPID_AnalysisSettingsGetStepEndTime = 282,
        DISPID_AnalysisSettingsSetStepEndTime = 283,
        DISPID_AnalysisSettingsAnalysisEndTime = 284,
        DISPID_AnalysisSettingsSetStepControlPointer = 285,
        DISPID_AnalysisSettingsStepNumberForTime = 286,
        DISPID_AnalysisSettingsCheckInitialTimeStep = 287,
        DISPID_AnalysisSettingsCheckInitialSubStep = 288,
        DISPID_AnalysisSettingsSetStep1SettingsSameAsStep2 = 289,
        DISPID_AnalysisSettingsGetLoadCaseIdentifierAtStep = 290,
        DISPID_AnalysisSettingsSetLoadCaseIdentifierAtStep = 291,
        DISPID_AnalysisSettingsConvergenceForceTolerance = 300,
        DISPID_AnalysisSettingsConvergenceForceToleranceValue = 301,
        DISPID_AnalysisSettingsConvergenceForceToleranceNormType = 302,
        DISPID_AnalysisSettingsConvergenceForceToleranceMinRef = 303,
        DISPID_AnalysisSettingsConvergenceMomentTolerance = 304,
        DISPID_AnalysisSettingsConvergenceMomentToleranceValue = 305,
        DISPID_AnalysisSettingsConvergenceMomentToleranceNormType = 306,
        DISPID_AnalysisSettingsConvergenceMomentToleranceMinRef = 307,
        DISPID_AnalysisSettingsConvergenceDisplacementTolerance = 308,
        DISPID_AnalysisSettingsConvergenceDisplacementToleranceValue = 309,
        DISPID_AnalysisSettingsConvergenceDisplacementToleranceNormType = 310,
        DISPID_AnalysisSettingsConvergenceDisplacementToleranceMinRef = 311,
        DISPID_AnalysisSettingsConvergenceRotationTolerance = 312,
        DISPID_AnalysisSettingsConvergenceRotationToleranceValue = 313,
        DISPID_AnalysisSettingsConvergenceRotationToleranceNormType = 314,
        DISPID_AnalysisSettingsConvergenceRotationToleranceMinRef = 315,
        DISPID_AnalysisSettingsConvergenceHeatTolerance = 316,
        DISPID_AnalysisSettingsConvergenceHeatToleranceValue = 317,
        DISPID_AnalysisSettingsConvergenceHeatToleranceNormType = 318,
        DISPID_AnalysisSettingsConvergenceHeatToleranceMinRef = 319,
        DISPID_AnalysisSettingsConvergenceTemperatureTolerance = 320,
        DISPID_AnalysisSettingsConvergenceTemperatureToleranceValue = 321,
        DISPID_AnalysisSettingsConvergenceTemperatureToleranceNormType = 322,
        DISPID_AnalysisSettingsConvergenceTemperatureToleranceMinRef = 323,
        DISPID_AnalysisSettingsConvergenceEmagCSGTolerance = 324,
        DISPID_AnalysisSettingsConvergenceEmagCSGToleranceValue = 325,
        DISPID_AnalysisSettingsConvergenceEmagCSGToleranceNormType = 326,
        DISPID_AnalysisSettingsConvergenceEmagCSGToleranceMinRef = 327,
        DISPID_AnalysisSettingsConvergenceEmagAMPSTolerance = 328,
        DISPID_AnalysisSettingsConvergenceEmagAMPSToleranceValue = 329,
        DISPID_AnalysisSettingsConvergenceEmagAMPSToleranceMinRef = 330,
        DISPID_AnalysisSettingsConvergenceEmagAMPSToleranceNormType = 331,
        DISPID_AnalysisSettingsLineSearch = 332,
        DISPID_AnalysisSettingsRelativeAssemblyTolerance = 333,
        DISPID_AnalysisSettingsRelativeAssemblyToleranceValue = 334,
        DISPID_AnalysisSettingsEnergyAccuracyTolerance = 335,
        DISPID_AnalysisSettingsEnergyAccuracyToleranceValue = 336,
        DISPID_AnalysisSettingsConvergenceForceToleranceValue2 = 337,
        DISPID_AnalysisSettingsConvergenceMomentToleranceValue2 = 338,
        DISPID_AnalysisSettingsConvergenceDisplacementToleranceValue2 = 339,
        DISPID_AnalysisSettingsConvergenceRotationToleranceValue2 = 340,
        DISPID_AnalysisSettingsConvergenceHeatToleranceValue2 = 341,
        DISPID_AnalysisSettingsConvergenceTemperatureToleranceValue2 = 342,
        DISPID_AnalysisSettingsConvergenceEmagCSGToleranceValue2 = 343,
        DISPID_AnalysisSettingsConvergenceEmagAMPSToleranceValue2 = 344,
        DISPID_AnalysisSettingsConvergenceTemperatureToleranceValueOption = 345,
        DISPID_AnalysisSettingsCalculateStress = 350,
        DISPID_AnalysisSettingsCalculateStrain = 351,
        DISPID_AnalysisSettingsCalculateContact = 352,
        DISPID_AnalysisSettingsCalculateThermalFlux = 354,
        DISPID_AnalysisSettingsCalculateMagneticFlux = 355,
        DISPID_AnalysisSettingsCalculateResultsAtTimePoints = 356,
        DISPID_AnalysisSettingsNumberOfEqaullySpacedResults = 357,
        DISPID_AnalysisSettingsCacheResultsInMemory = 358,
        DISPID_AnalysisSettingsCalculateContactByStep = 359,
        DISPID_AnalysisSettingsStoreModalResult = 360,
        DISPID_AnalysisSettingsExpandResultFrom = 361,
        DISPID_AnalysisSettingsCalculateReactions = 362,
        DISPID_AnalysisSettingsProgContrExpdResSubtype = 363,
        DISPID_AnalysisSettingscompProgContrExpandResultSubtype = 364,
        DISPID_AnalysisSettingsMaxNumberOfResultSets = 365,
        DISPID_AnalysisSettingsNodalForces = 366,
        DISPID_AnalysisSettingsGeneralMisc = 367,
        DISPID_AnalysisSettingsCalculateParticipationFactorResult = 368,
        DISPID_AnalysisSettingsCalculateVelocityAndAcceleration = 369,
        DISPID_AnalysisSettingsCreepActivation = 370,
        DISPID_AnalysisSettingsCreepActivationByStep = 371,
        DISPID_AnalysisSettingsCreepLimitRatio = 372,
        DISPID_AnalysisSettingsCreepLimitRatioByStep = 373,
        DISPID_AnalysisSettingsStabilization = 380,
        DISPID_AnalysisSettingsStabilizationMethod = 381,
        DISPID_AnalysisSettingsStabilizationEnergyDissipationRatio = 382,
        DISPID_AnalysisSettingsStabilizationDampingFactor = 383,
        DISPID_AnalysisSettingsStabilizationFirstSubstepOption = 384,
        DISPID_AnalysisSettingsStabilizationForceLimit = 385,
        DISPID_AnalysisSettingsSolverFilesDirectory = 400,
        DISPID_AnalysisSettingsFutureIntent = 401,
        DISPID_AnalysisSettingsSaveANSYSDB = 402,
        DISPID_AnalysisSettingsCleanupOptionalANSYSFiles = 403,
        DISPID_AnalysisSettingsSolverUnitsControl = 404,
        DISPID_AnalysisSettingsSelectedSolverUnitSystem = 405,
        DISPID_AnalysisSettingsEvaluateScriptLoc = 410,
        DISPID_AnalysisSettingsSolveScriptLoc = 411,
        DISPID_AnalysisSettingsEvaluateScriptTimeStamp = 412,
        DISPID_AnalysisSettingsSolveScriptTimeStamp = 413,
        DISPID_AnalysisSettingsSolverFilesRelativeDirectory = 430,
        DISPID_AnalysisSettingsSolverUnits = 431,
        DISPID_AnalysisSettingsNonLinear = 432,
        DISPID_AnalysisSettingsResultFileName = 433,
        DISPID_AnalysisSettingsAllPossibleFiles = 434,
        DISPID_AnalysisSettingsSolveHandler = 440,
        DISPID_AnalysisSettingsFilterForId = 450,
        DISPID_AnalysisSettingsLabel = 451,
        DISPID_AnalysisSettingsLegendPrefix = 452,
        DISPID_AnalysisSettingsIdListForChart = 453,
        DISPID_AnalysisSettingsNumChartComponentsForId = 454,
        DISPID_AnalysisSettingsMigratePre11Steps = 460,
        DISPID_AnalysisSettingsScratchSolverFilesDirectory = 470,
        DISPID_AnalysisSettingsRotordynCtrlsCoriolisEffect = 500,
        DISPID_AnalysisSettingsRotordynCtrlsReferenceFrameStationary = 501,
        DISPID_AnalysisSettingsRotordynCtrlsRotatingDampingEffect = 502,
        DISPID_AnalysisSettingsRotordynCtrlsCampbellDiagram = 503,
        DISPID_AnalysisSettingsModalNumberofPoints = 504,
        DISPID_AnalysisSettingsRotordynCtrlsSorting = 505,
        DISPID_AnalysisSettingsRotordynCtrlsModeReuse = 506,
        DISPID_AnalysisSettingsUseAutoTimeSteppingByStep = 1000,
        DISPID_AnalysisSettingsTimeStepDefinebyByStep = 1001,
        DISPID_AnalysisSettingsCarryOverTimeStepByStep = 1002,
        DISPID_AnalysisSettingsInitialStepsByStep = 1003,
        DISPID_AnalysisSettingsMinimumStepsByStep = 1004,
        DISPID_AnalysisSettingsMaximumStepsByStep = 1005,
        DISPID_AnalysisSettingsNumberOfSubStepsByStep = 1006,
        DISPID_AnalysisSettingsInitialTimeStepByStep = 1007,
        DISPID_AnalysisSettingsMinimumTimeStepByStep = 1008,
        DISPID_AnalysisSettingsMaximumTimeStepByStep = 1009,
        DISPID_AnalysisSettingsTimeStepByStep = 1010,
        DISPID_AnalysisSettingsUseTimeIntegrationByStep = 1011,
        DISPID_AnalysisSettingsConvergenceForceToleranceByStep = 1012,
        DISPID_AnalysisSettingsConvergenceForceToleranceValue2ByStep = 1013,
        DISPID_AnalysisSettingsConvergenceForceToleranceValueByStep = 1014,
        DISPID_AnalysisSettingsConvergenceForceToleranceMinRefByStep = 1016,
        DISPID_AnalysisSettingsConvergenceMomentToleranceByStep = 1017,
        DISPID_AnalysisSettingsConvergenceMomentToleranceValue2ByStep = 1018,
        DISPID_AnalysisSettingsConvergenceMomentToleranceValueByStep = 1019,
        DISPID_AnalysisSettingsConvergenceMomentToleranceMinRefByStep = 1021,
        DISPID_AnalysisSettingsConvergenceDisplacementToleranceByStep = 1022,
        DISPID_AnalysisSettingsConvergenceDisplacementToleranceValue2ByStep = 1023,
        DISPID_AnalysisSettingsConvergenceDisplacementToleranceValueByStep = 1025,
        DISPID_AnalysisSettingsConvergenceDisplacementToleranceMinRefByStep = 1027,
        DISPID_AnalysisSettingsConvergenceRotationToleranceByStep = 1028,
        DISPID_AnalysisSettingsConvergenceRotationToleranceValue2ByStep = 1029,
        DISPID_AnalysisSettingsConvergenceRotationToleranceValueByStep = 1030,
        DISPID_AnalysisSettingsConvergenceRotationToleranceMinRefByStep = 1031,
        DISPID_AnalysisSettingsConvergenceHeatToleranceByStep = 1032,
        DISPID_AnalysisSettingsConvergenceHeatToleranceValue2ByStep = 1033,
        DISPID_AnalysisSettingsConvergenceHeatToleranceValueByStep = 1034,
        DISPID_AnalysisSettingsConvergenceHeatToleranceMinRefByStep = 1035,
        DISPID_AnalysisSettingsConvergenceTemperatureToleranceByStep = 1036,
        DISPID_AnalysisSettingsConvergenceTemperatureToleranceValue2ByStep = 1037,
        DISPID_AnalysisSettingsConvergenceTemperatureToleranceValueByStep = 1038,
        DISPID_AnalysisSettingsConvergenceTemperatureToleranceMinRefByStep = 1039,
        DISPID_AnalysisSettingsLineSearchByStep = 1040,
        DISPID_AnalysisSettingsRelativeAssemblyToleranceByStep = 1052,
        DISPID_AnalysisSettingsRelativeAssemblyToleranceValueByStep = 1053,
        DISPID_AnalysisSettingsEnergyAccuracyToleranceByStep = 1054,
        DISPID_AnalysisSettingsEnergyAccuracyToleranceValueByStep = 1055,
        DISPID_AnalysisSettingsCalculateStressByStep = 1056,
        DISPID_AnalysisSettingsCalculateStrainByStep = 1057,
        DISPID_AnalysisSettingsCalculateThermalFluxByStep = 1059,
        DISPID_AnalysisSettingsCalculateResultsAtTimePointsByStep = 1062,
        DISPID_AnalysisSettingsNumberOfEqaullySpacedResultsByStep = 1063,
        DISPID_AnalysisSettingsNodalForcesByStep = 1064,
        DISPID_AnalysisSettingsGeneralMiscByStep = 1065,
        DISPID_AnalysisSettingsStabilizationByStep = 1070,
        DISPID_AnalysisSettingsStabilizationMethodByStep = 1071,
        DISPID_AnalysisSettingsStabilizationEnergyDissipationRatioByStep = 1072,
        DISPID_AnalysisSettingsStabilizationDampingFactorByStep = 1073,
        DISPID_AnalysisSettingsStabilizationFirstSubstepOptionByStep = 1074,
        DISPID_AnalysisSettingsStabilizationForceLimitByStep = 1075,
        DISPID_AnalysisSettingsConvergenceVoltageToleranceByStep = 1100,
        DISPID_AnalysisSettingsConvergenceVoltageToleranceValue2ByStep = 1101,
        DISPID_AnalysisSettingsConvergenceVoltageToleranceValueByStep = 1102,
        DISPID_AnalysisSettingsConvergenceVoltageToleranceMinRefByStep = 1103,
        DISPID_AnalysisSettingsConvergenceVoltageTolerance = 1104,
        DISPID_AnalysisSettingsConvergenceVoltageToleranceValue = 1105,
        DISPID_AnalysisSettingsConvergenceVoltageToleranceNormType = 1106,
        DISPID_AnalysisSettingsConvergenceVoltageToleranceMinRef = 1107,
        DISPID_AnalysisSettingsConvergenceVoltageToleranceValue2 = 1108,
        DISPID_AnalysisSettingsConvergenceCurrentToleranceByStep = 1110,
        DISPID_AnalysisSettingsConvergenceCurrentToleranceValue2ByStep = 1111,
        DISPID_AnalysisSettingsConvergenceCurrentToleranceValueByStep = 1112,
        DISPID_AnalysisSettingsConvergenceCurrentToleranceMinRefByStep = 1113,
        DISPID_AnalysisSettingsConvergenceCurrentTolerance = 1114,
        DISPID_AnalysisSettingsConvergenceCurrentToleranceValue = 1115,
        DISPID_AnalysisSettingsConvergenceCurrentToleranceNormType = 1116,
        DISPID_AnalysisSettingsConvergenceCurrentToleranceMinRef = 1117,
        DISPID_AnalysisSettingsConvergenceCurrentToleranceValue2 = 1118,
        DISPID_AnalysisSettingsFileManagementSettings = 1119,
        DISPID_AnalysisSettingsMigrate11FileManagement = 1120,
        DISPID_AnalysisSettingsModesCombinationType = 1121,
        DISPID_AnalysisSettingsSpectrumType = 1122,
        DISPID_AnalysisSettingsConvergenceEmagCSGToleranceByStep = 1123,
        DISPID_AnalysisSettingsConvergenceEmagCSGToleranceValue2ByStep = 1124,
        DISPID_AnalysisSettingsConvergenceEmagCSGToleranceValueByStep = 1125,
        DISPID_AnalysisSettingsConvergenceEmagCSGToleranceMinRefByStep = 1126,
        DISPID_AnalysisSettingsConvergenceEmagAMPSToleranceByStep = 1127,
        DISPID_AnalysisSettingsConvergenceEmagAMPSToleranceValue2ByStep = 1128,
        DISPID_AnalysisSettingsConvergenceEmagAMPSToleranceValueByStep = 1129,
        DISPID_AnalysisSettingsConvergenceEmagAMPSToleranceMinRefByStep = 1130,
        DISPID_AnalysisSettingsMissingMassEffect = 1131,
        DISPID_AnalysisSettingsRigidResponseEffect = 1132,
        DISPID_AnalysisSettingsMissingMassEffectZPA = 1133,
        DISPID_AnalysisSettingsRigidResponseEffectFreqBegin = 1134,
        DISPID_AnalysisSettingsRigidResponseEffectFreqEnd = 1135,
        DISPID_AnalysisSettingsRigidResponseEffectType = 1136,
        DISPID_AnalysisSettingsMigrateToNewSolvers = 1137,
        DISPID_AnalysisSettingsRigidResponseEffectZPA = 1138,
        DISPID_AnalysisSettingsRadiositySolverActivation = 1140,
        DISPID_AnalysisSettingsRadiosityFluxConvergence = 1141,
        DISPID_AnalysisSettingsRadiositySolverMaxIteration = 1142,
        DISPID_AnalysisSettingsRadiositySolverTolerance = 1143,
        DISPID_AnalysisSettingsRadiositySolverRelaxation = 1144,
        DISPID_AnalysisSettingsRadiosityFFHemicubeResolution = 1145,
        DISPID_AnalysisSettingsRadiosityFF2DNumDivisions = 1146,
        DISPID_AnalysisSettingsRadiosityFF2DViewHidden = 1147,
        DISPID_AnalysisSettingsRadiosityFF2DNumberZones = 1148,
        DISPID_AnalysisSettingsRadiosityDecimationReduction = 1149,
        DISPID_AnalysisSettingsRadiosityDecimationNodePlace = 1150,
        DISPID_AnalysisSettingsRadiositySymmCoordinates = 1151,
        DISPID_AnalysisSettingsRadiositySymmAxis = 1152,
        DISPID_AnalysisSettingsRadiositySymmReflections = 1153,
        DISPID_AnalysisSettingsRadiositySymmCondensation = 1154,
        DISPID_AnalysisSettingsModeCombinationSignificanceLevel = 1155,
        DISPID_AnalysisSettingsExcludeInsignificantMode = 1156,
        DISPID_AnalysisSettingsCalculateVelocity = 1157,
        DISPID_AnalysisSettingsCalculateAcceleration = 1158,
        DISPID_AnalysisSettingsCyclicSectorsNumber = 1159,
        DISPID_AnalysisSettingsCyclicActivation = 1160,
        DISPID_AnalysisSettingsCyclicHarmIndex = 1161,
        DISPID_AnalysisSettingsCyclicHarmIndexMin = 1162,
        DISPID_AnalysisSettingsCyclicHarmIndexMax = 1163,
        DISPID_AnalysisSettingsCyclicHarmIndexStep = 1164,
        DISPID_AnalysisSettingsCyclicVTAccelerator = 1165,
        DISPID_AnalysisSettingsRestartType = 1166,
        DISPID_AnalysisSettingsRestartAtLoadStep = 1167,
        DISPID_AnalysisSettingsRestartAtSubstep = 1168,
        DISPID_AnalysisSettingsRestartAtTime = 1169,
        DISPID_AnalysisSettingsRestartAction = 1200,
        DISPID_AnalysisSettingsRestartControls = 1170,
        DISPID_AnalysisSettingsSaveAtLoadStep = 1171,
        DISPID_AnalysisSettingsSaveAtSubstep = 1172,
        DISPID_AnalysisSettingsSaveSubstepFreq = 1173,
        DISPID_AnalysisSettingsSaveMaxFiles = 1174,
        DISPID_AnalysisSettingsDeleteRestartPoints = 1175,
        DISPID_AnalysisSettingsSetActiveRestartPoint = 1176,
        DISPID_AnalysisSettingsMaxRestartTimeForAuto = 1177,
        DISPID_AnalysisSettingsRestartStatus = 1178,
        DISPID_AnalysisSettingsEndStepTimeForRestart = 1179,
        DISPID_AnalysisSettingsCopyNextStepSettingsToCurrent = 1180,
        DISPID_AnalysisSettingsSplitStepOnRestartPoint = 1181,
        DISPID_AnalysisSettingsEulerianBoxData = 1182,
        DISPID_AnalysisSettingsInitializeCreepControls = 1183,
        DISPID_AnalysisSettingsCalculateFracture = 1184,
        DISPID_AnalysisSettingsCrackSolverId = 1185,
        DISPID_AnalysisSettingsFractureSolverControls = 1186,
        DISPID_AnalysisSettingsHarmonicVariationTech = 1187,
        DISPID_AnalysisSettingsResetFirstStepCarryOver = 1188,
        DISPID_AnalysisSettingsSolverPivotChecking = 1189,
        DISPID_AnalysisSettingsCombineDistResultFiles = 1190,
        DISPID_AnalysisSettingsCalculateMaterialForce = 1191,
        DISPID_AnalysisSettingsCalculateTStress = 1192,
        DISPID_AnalysisSettingsCrackSettings = 1193,
        DISPID_AnalysisSettingsCalculateSIFS = 1194,
        DISPID_AnalysisSettingsCalculateJIntegral = 1195,
        DISPID_AnalysisSettingsCalculateCStarIntegral = 1196,
        DISPID_AnalysisSettingsGUISolverFilesDirectory = 2000,
        DISPID_AnalysisSettingsUnitTypeByDispid = 3000,
        DISPID_AnalysisSettingsUnitStringByDispid = 3001,
        DISPID_AnalysisSettingsParamNameByDispid = 3002,
        DISPID_AnalysisSettingsNewtonRaphsonType = 3100,
        DISPID_AnalysisSettingsSolverCtrlsModeReuse = 3101,
        DISPID_AnalysisSettingsUseExistingModesymmFile = 3102,
        DISPID_AnalysisSettingsKeepModalResults = 3200,
        DISPID_AnalysisSettingsNLADHasMeshCriteria = 3300,
        DISPID_AnalysisSettingsNLADEdgeSplitAngle = 3303,
        DISPID_AnalysisSettingsNLADGlobalSizeRatio = 3304,
        DISPID_AnalysisSettingsNLADNumSculptedLayers = 3305,
        DISPID_AnalysisSettingsNLADLocalSizeRatio = 3313,
        DISPID_AnalysisSettingsNLADBoundaryAngle = 3315,
        DISPID_AnalysisSettingsNLADRemeshingGradient = 3316,
        DISPID_AnalysisSettingsNLADControlsByStep = 3317,
        DISPID_AnalysisSettingsSpinSoftening = 3318
    } kDispId_AnalysisSettings;

    [
      odl,
      uuid(F1D47B0A-98CF-49CA-B54C-A676EEC7B5F9),
      helpstring("IDSAnalysisSettings Interface"),
      dual,
      oleautomation
    ]
    interface IDSAnalysisSettings : IDispatch {
        [id(0x00000014), propget, helpstring("property SolutionSettings")]
        HRESULT SolutionSettings([out, retval] IDispatch** ppDisp);
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
        [id(0x00000015), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x00000016), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x00000028), helpstring("method InitializeObjectForTypes")]
        HRESULT InitializeObjectForTypes(
                        [in] DSSimulationType eSimulationType, 
                        [in] DSPhysicsType ePhysicsType, 
                        [in] BSTR bsSolverTargetName, 
                        [in] long bIsRigidDynamic);
        [id(0x00000017), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x00000018), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x00000019), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x0000001a), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x0000002a), helpstring("method GetAnalysisSettingsAddIn")]
        HRESULT GetAnalysisSettingsAddIn([out, retval] IDispatch** ppDisp);
        [id(0x0000002b), helpstring("method SetEnvironmentId")]
        HRESULT SetEnvironmentId([in] unsigned int idEnv);
        [id(0x0000001b), helpstring("method SetAffectedSteps")]
        HRESULT SetAffectedSteps([in] IDSListWrapper* pList);
        [id(0x00000cf6), propget, helpstring("property SpinSoftening")]
        HRESULT SpinSoftening([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000cf6), propput, helpstring("property SpinSoftening")]
        HRESULT SpinSoftening([in] VARIANT_BOOL pVal);
        [id(0x0000002c), propget, helpstring("property NumberOfSteps")]
        HRESULT NumberOfSteps([out, retval] unsigned int* pVal);
        [id(0x0000002c), propput, helpstring("property NumberOfSteps")]
        HRESULT NumberOfSteps([in] unsigned int pVal);
        [id(0x000000c8), propget, helpstring("property HarmonicForcingFrequencyMin")]
        HRESULT HarmonicForcingFrequencyMin([out, retval] double* pVal);
        [id(0x000000c8), propput, helpstring("property HarmonicForcingFrequencyMin")]
        HRESULT HarmonicForcingFrequencyMin([in] double pVal);
        [id(0x000000c9), propget, helpstring("property HarmonicForcingFrequencyMax")]
        HRESULT HarmonicForcingFrequencyMax([out, retval] double* pVal);
        [id(0x000000c9), propput, helpstring("property HarmonicForcingFrequencyMax")]
        HRESULT HarmonicForcingFrequencyMax([in] double pVal);
        [id(0x000000ca), propget, helpstring("property HarmonicForcingFrequencyIntervals")]
        HRESULT HarmonicForcingFrequencyIntervals([out, retval] int* pVal);
        [id(0x000000ca), propput, helpstring("property HarmonicForcingFrequencyIntervals")]
        HRESULT HarmonicForcingFrequencyIntervals([in] int pVal);
        [id(0x000000cb), propget, helpstring("property HarmonicForcingFrequencyClusterDensity")]
        HRESULT HarmonicForcingFrequencyClusterDensity([out, retval] int* pVal);
        [id(0x000000cb), propput, helpstring("property HarmonicForcingFrequencyClusterDensity")]
        HRESULT HarmonicForcingFrequencyClusterDensity([in] int pVal);
        [id(0x000000cc), propget, helpstring("property HarmonicSolutionMethod")]
        HRESULT HarmonicSolutionMethod([out, retval] DSHarmonicMethod* pVal);
        [id(0x000000cc), propput, helpstring("property HarmonicSolutionMethod")]
        HRESULT HarmonicSolutionMethod([in] DSHarmonicMethod pVal);
        [id(0x000000cd), propget, helpstring("property HarmonicForcingFrequencyClustering")]
        HRESULT HarmonicForcingFrequencyClustering([out, retval] VARIANT_BOOL* pVal);
        [id(0x000000cd), propput, helpstring("property HarmonicForcingFrequencyClustering")]
        HRESULT HarmonicForcingFrequencyClustering([in] VARIANT_BOOL pVal);
        [id(0x000000cf), propget, helpstring("property HarmonicMSUPModalRangeType")]
        HRESULT HarmonicMSUPModalRangeType([out, retval] DSModalFrequencyRangeType* pVal);
        [id(0x000000cf), propput, helpstring("property HarmonicMSUPModalRangeType")]
        HRESULT HarmonicMSUPModalRangeType([in] DSModalFrequencyRangeType pVal);
        [id(0x00000032), propget, helpstring("property NumModesToFind")]
        HRESULT NumModesToFind([out, retval] int* pVal);
        [id(0x00000032), propput, helpstring("property NumModesToFind")]
        HRESULT NumModesToFind([in] int pVal);
        [id(0x000000d0), propget, helpstring("property HarmonicMSUPModalFrequencyMin")]
        HRESULT HarmonicMSUPModalFrequencyMin([out, retval] double* pVal);
        [id(0x000000d0), propput, helpstring("property HarmonicMSUPModalFrequencyMin")]
        HRESULT HarmonicMSUPModalFrequencyMin([in] double pVal);
        [id(0x000000d1), propget, helpstring("property HarmonicMSUPModalFrequencyMax")]
        HRESULT HarmonicMSUPModalFrequencyMax([out, retval] double* pVal);
        [id(0x000000d1), propput, helpstring("property HarmonicMSUPModalFrequencyMax")]
        HRESULT HarmonicMSUPModalFrequencyMax([in] double pVal);
        [id(0x000000d2), propget, helpstring("property HarmonicMSUPStorage")]
        HRESULT HarmonicMSUPStorage([out, retval] DSHarmonicMSUPStorage* pStorageType);
        [id(0x000000d2), propput, helpstring("property HarmonicMSUPStorage")]
        HRESULT HarmonicMSUPStorage([in] DSHarmonicMSUPStorage pStorageType);
        [id(0x000000d5), propget, helpstring("property HarmonicIncludeUserForcingFrequencySteps")]
        HRESULT HarmonicIncludeUserForcingFrequencySteps([out, retval] VARIANT_BOOL* pVal);
        [id(0x000000d5), propput, helpstring("property HarmonicIncludeUserForcingFrequencySteps")]
        HRESULT HarmonicIncludeUserForcingFrequencySteps([in] VARIANT_BOOL pVal);
        [id(0x000000d6), propget, helpstring("property HarmonicUserForcingFrequencySteps")]
        HRESULT HarmonicUserForcingFrequencySteps(IDSListWrapper* pFrequencySteps);
        [id(0x00000033), propget, helpstring("property RangeSearch")]
        HRESULT RangeSearch([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000033), propput, helpstring("property RangeSearch")]
        HRESULT RangeSearch([in] VARIANT_BOOL pVal);
        [id(0x00000034), propget, helpstring("property MinFrequency")]
        HRESULT MinFrequency([out, retval] double* pVal);
        [id(0x00000034), propput, helpstring("property MinFrequency")]
        HRESULT MinFrequency([in] double pVal);
        [id(0x00000035), propget, helpstring("property MaxFrequency")]
        HRESULT MaxFrequency([out, retval] double* pVal);
        [id(0x00000035), propput, helpstring("property MaxFrequency")]
        HRESULT MaxFrequency([in] double pVal);
        [id(0x0000003c), propget, helpstring("property DampedSolve")]
        HRESULT DampedSolve([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000003c), propput, helpstring("property DampedSolve")]
        HRESULT DampedSolve([in] VARIANT_BOOL pVal);
        [id(0x0000003d), propget, helpstring("property StoreComplexSolution")]
        HRESULT StoreComplexSolution([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000003d), propput, helpstring("property StoreComplexSolution")]
        HRESULT StoreComplexSolution([in] VARIANT_BOOL pVal);
        [id(0x0000004a), propget, helpstring("property NumResultSets")]
        HRESULT NumResultSets([out, retval] unsigned int* pVal);
        [id(0x0000004a), propput, helpstring("property NumResultSets")]
        HRESULT NumResultSets([in] unsigned int pVal);
        [id(0x0000004b), propget, helpstring("property ResultSet")]
        HRESULT ResultSet(
                        [in] int index, 
                        [out, retval] VARIANT* pVal);
        [id(0x0000004b), propput, helpstring("property ResultSet")]
        HRESULT ResultSet(
                        [in] int index, 
                        [in] VARIANT pVal);
        [id(0x0000004c), propget, helpstring("property ResultSets")]
        HRESULT ResultSets([out, retval] IDSListWrapper** pResultSets);
        [id(0x0000004d), propget, helpstring("property ResultSetsCriteria")]
        HRESULT ResultSetsCriteria([out, retval] DSResultSetsType* pVal);
        [id(0x0000004d), propput, helpstring("property ResultSetsCriteria")]
        HRESULT ResultSetsCriteria([in] DSResultSetsType pVal);
        [id(0x00000074), helpstring("method AddResultSet")]
        HRESULT AddResultSet([in] double resultSetValToAdd);
        [id(0x000000e6), propget, helpstring("property SolverType")]
        HRESULT SolverType([out, retval] DSSolverType* pVal);
        [id(0x000000e6), propput, helpstring("property SolverType")]
        HRESULT SolverType([in] DSSolverType pVal);
        [id(0x000000e7), propget, helpstring("property UseWeakSprings")]
        HRESULT UseWeakSprings([out, retval] DSWeakSpringsType* pVal);
        [id(0x000000e7), propput, helpstring("property UseWeakSprings")]
        HRESULT UseWeakSprings([in] DSWeakSpringsType pVal);
        [id(0x000000e8), propget, helpstring("property UseWeakSpringsStiffness")]
        HRESULT UseWeakSpringsStiffness([out, retval] DSSpringsStiffnessType* pVal);
        [id(0x000000e8), propput, helpstring("property UseWeakSpringsStiffness")]
        HRESULT UseWeakSpringsStiffness([in] DSSpringsStiffnessType pVal);
        [id(0x000000e9), propget, helpstring("property UseWeakSpringsFactor")]
        HRESULT UseWeakSpringsFactor([out, retval] double* pVal);
        [id(0x000000e9), propput, helpstring("property UseWeakSpringsFactor")]
        HRESULT UseWeakSpringsFactor([in] double pVal);
        [id(0x000000ea), propget, helpstring("property UseWeakSpringsValue")]
        HRESULT UseWeakSpringsValue([out, retval] double* pVal);
        [id(0x000000ea), propput, helpstring("property UseWeakSpringsValue")]
        HRESULT UseWeakSpringsValue([in] double pVal);
        [id(0x000000eb), propget, helpstring("property UseLargeDeformation")]
        HRESULT UseLargeDeformation([out, retval] VARIANT_BOOL* pVal);
        [id(0x000000eb), propput, helpstring("property UseLargeDeformation")]
        HRESULT UseLargeDeformation([in] VARIANT_BOOL pVal);
        [id(0x000000ec), propget, helpstring("property UseInertialRelief")]
        HRESULT UseInertialRelief([out, retval] VARIANT_BOOL* pVal);
        [id(0x000000ec), propput, helpstring("property UseInertialRelief")]
        HRESULT UseInertialRelief([in] VARIANT_BOOL pVal);
        [id(0x000000ed), propget, helpstring("property MBDTimeIntegrationType")]
        HRESULT MBDTimeIntegrationType([out, retval] DSMBDTimeIntegrationType* newVal);
        [id(0x000000ed), propput, helpstring("property MBDTimeIntegrationType")]
        HRESULT MBDTimeIntegrationType([in] DSMBDTimeIntegrationType newVal);
        [id(0x000000ee), propget, helpstring("property UseStabilization")]
        HRESULT UseStabilization([out, retval] DSMBDStabilizationType* newVal);
        [id(0x000000ee), propput, helpstring("property UseStabilization")]
        HRESULT UseStabilization([in] DSMBDStabilizationType newVal);
        [id(0x000000f0), propget, helpstring("property MBDStabilAlpha")]
        HRESULT MBDStabilAlpha([out, retval] double* newVal);
        [id(0x000000f0), propput, helpstring("property MBDStabilAlpha")]
        HRESULT MBDStabilAlpha([in] double newVal);
        [id(0x000000f1), propget, helpstring("property MBDStabilAlpha")]
        HRESULT MBDStabilBeta([out, retval] double* newVal);
        [id(0x000000f1), propput, helpstring("property MBDStabilAlpha")]
        HRESULT MBDStabilBeta([in] double newVal);
        [id(0x000000f2), propget, helpstring("property IncludeResidualVector")]
        HRESULT IncludeResidualVector([out, retval] VARIANT_BOOL* pVal);
        [id(0x000000f2), propput, helpstring("property IncludeResidualVector")]
        HRESULT IncludeResidualVector([in] VARIANT_BOOL pVal);
        [id(0x000000f3), propget, helpstring("property IncludeNegativeLoadMultiplier")]
        HRESULT IncludeNegativeLoadMultiplier([out, retval] DSSolverCtrlsIncludeNegativeLoadMultiplier* pVal);
        [id(0x000000f3), propput, helpstring("property IncludeNegativeLoadMultiplier")]
        HRESULT IncludeNegativeLoadMultiplier([in] DSSolverCtrlsIncludeNegativeLoadMultiplier pVal);
        [id(0x000000fa), propget, helpstring("property CurrentStepNumber")]
        HRESULT CurrentStepNumber([out, retval] unsigned int* pVal);
        [id(0x000000fa), propput, helpstring("property CurrentStepNumber")]
        HRESULT CurrentStepNumber([in] unsigned int pVal);
        [id(0x000000fb), propget, helpstring("property EndTime")]
        HRESULT EndTime([out, retval] double* pVal);
        [id(0x000000fb), propput, helpstring("property EndTime")]
        HRESULT EndTime([in] double pVal);
        [id(0x000000fc), propget, helpstring("property UseAutoTimeStepping")]
        HRESULT UseAutoTimeStepping([out, retval] DSAutoTimeSteppingType* pVal);
        [id(0x000000fc), propput, helpstring("property UseAutoTimeStepping")]
        HRESULT UseAutoTimeStepping([in] DSAutoTimeSteppingType pVal);
        [id(0x000000fd), propget, helpstring("property TimeStepDefineby")]
        HRESULT TimeStepDefineby([out, retval] DSTimeStepDefineByType* pVal);
        [id(0x000000fd), propput, helpstring("property TimeStepDefineby")]
        HRESULT TimeStepDefineby([in] DSTimeStepDefineByType pVal);
        [id(0x00000105), propget, helpstring("property CarryOverTimeStep")]
        HRESULT CarryOverTimeStep([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000105), propput, helpstring("property CarryOverTimeStep")]
        HRESULT CarryOverTimeStep([in] VARIANT_BOOL pVal);
        [id(0x000000fe), propget, helpstring("property InitialSteps")]
        HRESULT InitialSteps([out, retval] unsigned int* pVal);
        [id(0x000000fe), propput, helpstring("property InitialSteps")]
        HRESULT InitialSteps([in] unsigned int pVal);
        [id(0x000000ff), propget, helpstring("property MinimumSteps")]
        HRESULT MinimumSteps([out, retval] unsigned int* pVal);
        [id(0x000000ff), propput, helpstring("property MinimumSteps")]
        HRESULT MinimumSteps([in] unsigned int pVal);
        [id(0x00000100), propget, helpstring("property MaximumSteps")]
        HRESULT MaximumSteps([out, retval] unsigned int* pVal);
        [id(0x00000100), propput, helpstring("property MaximumSteps")]
        HRESULT MaximumSteps([in] unsigned int pVal);
        [id(0x00000101), propget, helpstring("property NumberOfSubSteps")]
        HRESULT NumberOfSubSteps([out, retval] unsigned int* pVal);
        [id(0x00000101), propput, helpstring("property NumberOfSubSteps")]
        HRESULT NumberOfSubSteps([in] unsigned int pVal);
        [id(0x00000102), propget, helpstring("property InitialTimeStep")]
        HRESULT InitialTimeStep([out, retval] double* pVal);
        [id(0x00000102), propput, helpstring("property InitialTimeStep")]
        HRESULT InitialTimeStep([in] double pVal);
        [id(0x00000103), propget, helpstring("property MinimumTimeStep")]
        HRESULT MinimumTimeStep([out, retval] double* pVal);
        [id(0x00000103), propput, helpstring("property MinimumTimeStep")]
        HRESULT MinimumTimeStep([in] double pVal);
        [id(0x00000104), propget, helpstring("property MaximumTimeStep")]
        HRESULT MaximumTimeStep([out, retval] double* pVal);
        [id(0x00000104), propput, helpstring("property MaximumTimeStep")]
        HRESULT MaximumTimeStep([in] double pVal);
        [id(0x00000106), propget, helpstring("property TimeStep")]
        HRESULT TimeStep([out, retval] double* pVal);
        [id(0x00000106), propput, helpstring("property TimeStep")]
        HRESULT TimeStep([in] double pVal);
        [id(0x00000118), helpstring("method AddStep")]
        HRESULT AddStep([in] double dEndTime);
        [id(0x00000119), helpstring("method RemoveStep")]
        HRESULT RemoveStep([in] double dTime);
        [id(0x0000011a), helpstring("method GetStepEndTime")]
        HRESULT GetStepEndTime(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] double* dEndTime);
        [id(0x0000011b), helpstring("method SetStepEndTime")]
        HRESULT SetStepEndTime(
                        [in] unsigned int ulStepNumber, 
                        [in] double dEndTime);
        [id(0x0000011e), helpstring("method GetStepNumberForTime")]
        HRESULT GetStepNumberForTime(
                        [in] double dTime, 
                        [out, retval] unsigned int* pVal);
        [id(0x00000121), helpstring("method SetStep1SettingsSameAsStep2")]
        HRESULT SetStep1SettingsSameAsStep2(
                        [in] int step1, 
                        int step2);
        [id(0x00000173), propget, helpstring("property CreepByStep")]
        HRESULT CreepByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] DSCreep* pVal);
        [id(0x00000173), propput, helpstring("property CreepByStep")]
        HRESULT CreepByStep(
                        [in] unsigned int ulStepNumber, 
                        [in] DSCreep pVal);
        [id(0x00000175), propget, helpstring("property CreepLimitRatioByStep")]
        HRESULT CreepLimitRatioByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] double* dVal);
        [id(0x00000175), propput, helpstring("property CreepLimitRatioByStep")]
        HRESULT CreepLimitRatioByStep(
                        [in] unsigned int ulStepNumber, 
                        [in] double dVal);
        [id(0x0000013c), propget, helpstring("property ConvergenceHeatTolerance")]
        HRESULT ConvergenceHeatTolerance([out, retval] DSConvergenceToleranceType* pVal);
        [id(0x0000013c), propput, helpstring("property ConvergenceHeatTolerance")]
        HRESULT ConvergenceHeatTolerance([in] DSConvergenceToleranceType pVal);
        [id(0x00000140), propget, helpstring("property ConvergenceTemperatureTolerance")]
        HRESULT ConvergenceTemperatureTolerance([out, retval] DSConvergenceToleranceType* pVal);
        [id(0x00000140), propput, helpstring("property ConvergenceTemperatureTolerance")]
        HRESULT ConvergenceTemperatureTolerance([in] DSConvergenceToleranceType pVal);
        [id(0x0000014d), propget, helpstring("property RelativeAssemblyTolerance")]
        HRESULT RelativeAssemblyTolerance([out, retval] DSConvergenceToleranceType* pVal);
        [id(0x0000014d), propput, helpstring("property RelativeAssemblyTolerance")]
        HRESULT RelativeAssemblyTolerance([in] DSConvergenceToleranceType pVal);
        [id(0x0000014e), propget, helpstring("property RelativeAssemblyToleranceValue")]
        HRESULT RelativeAssemblyToleranceValue([out, retval] double* pVal);
        [id(0x0000014e), propput, helpstring("property RelativeAssemblyToleranceValue")]
        HRESULT RelativeAssemblyToleranceValue([in] double pVal);
        [id(0x0000014f), propget, helpstring("property EnergyAccuracyTolerance")]
        HRESULT EnergyAccuracyTolerance([out, retval] DSConvergenceToleranceType* pVal);
        [id(0x0000014f), propput, helpstring("property EnergyAccuracyTolerance")]
        HRESULT EnergyAccuracyTolerance([in] DSConvergenceToleranceType pVal);
        [id(0x00000150), propget, helpstring("property EnergyAccuracyToleranceValue")]
        HRESULT EnergyAccuracyToleranceValue([out, retval] double* pVal);
        [id(0x00000150), propput, helpstring("property EnergyAccuracyToleranceValue")]
        HRESULT EnergyAccuracyToleranceValue([in] double pVal);
        [id(0x0000014c), propget, helpstring("property LineSearch")]
        HRESULT LineSearch([out, retval] DSLineSearchType* pVal);
        [id(0x0000014c), propput, helpstring("property LineSearch")]
        HRESULT LineSearch([in] DSLineSearchType pVal);
        [id(0x00000046), propget, helpstring("property NonLinearFormulation")]
        HRESULT NonLinearFormulation([out, retval] DSNonlinearFormulationType* pVal);
        [id(0x00000046), propput, helpstring("property NonLinearFormulation")]
        HRESULT NonLinearFormulation([in] DSNonlinearFormulationType pVal);
        [id(0x00000047), propget, helpstring("property ReformulationTolerance")]
        HRESULT ReformulationTolerance([out, retval] double* pVal);
        [id(0x00000047), propput, helpstring("property ReformulationTolerance")]
        HRESULT ReformulationTolerance([in] double pVal);
        [id(0x0000015e), propget, helpstring("property CalculateStress")]
        HRESULT CalculateStress([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000015e), propput, helpstring("property CalculateStress")]
        HRESULT CalculateStress([in] VARIANT_BOOL pVal);
        [id(0x0000015f), propget, helpstring("property CalculateStrain")]
        HRESULT CalculateStrain([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000015f), propput, helpstring("property CalculateStrain")]
        HRESULT CalculateStrain([in] VARIANT_BOOL pVal);
        [id(0x00000160), propget, helpstring("property CalculateContact")]
        HRESULT CalculateContact([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000160), propput, helpstring("property CalculateContact")]
        HRESULT CalculateContact([in] VARIANT_BOOL pVal);
        [id(0x00000162), propget, helpstring("property CalculateThermalFlux")]
        HRESULT CalculateThermalFlux([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000162), propput, helpstring("property CalculateThermalFlux")]
        HRESULT CalculateThermalFlux([in] VARIANT_BOOL pVal);
        [id(0x00000164), propget, helpstring("property CalculateResultsAtTimePoints")]
        HRESULT CalculateResultsAtTimePoints([out, retval] DSTimePointsOptions* pVal);
        [id(0x00000164), propput, helpstring("property CalculateResultsAtTimePoints")]
        HRESULT CalculateResultsAtTimePoints([in] DSTimePointsOptions pVal);
        [id(0x00000165), propget, helpstring("property NumberOfEqaullySpacedResults")]
        HRESULT NumberOfEqaullySpacedResults([out, retval] unsigned int* pVal);
        [id(0x00000165), propput, helpstring("property NumberOfEqaullySpacedResults")]
        HRESULT NumberOfEqaullySpacedResults([in] unsigned int pVal);
        [id(0x0000001e), propget, helpstring("property ConstantDampingValue")]
        HRESULT ConstantDampingValue([out, retval] double* pVal);
        [id(0x0000001e), propput, helpstring("property ConstantDampingValue")]
        HRESULT ConstantDampingValue([in] double pVal);
        [id(0x0000001f), propget, helpstring("property BetaDampingDefineBy")]
        HRESULT BetaDampingDefineBy([out, retval] DSBetaDampingType* pVal);
        [id(0x0000001f), propput, helpstring("property BetaDampingDefineBy")]
        HRESULT BetaDampingDefineBy([in] DSBetaDampingType pVal);
        [id(0x00000020), propget, helpstring("property BetaDampingFrequency")]
        HRESULT BetaDampingFrequency([out, retval] double* pVal);
        [id(0x00000020), propput, helpstring("property BetaDampingFrequency")]
        HRESULT BetaDampingFrequency([in] double pVal);
        [id(0x00000021), propget, helpstring("property BetaDampingMeasure")]
        HRESULT BetaDampingMeasure([out, retval] double* pVal);
        [id(0x00000021), propput, helpstring("property BetaDampingMeasure")]
        HRESULT BetaDampingMeasure([in] double pVal);
        [id(0x00000022), propget, helpstring("property BetaDampingBeta")]
        HRESULT BetaDampingBeta([out, retval] double* pVal);
        [id(0x00000022), propput, helpstring("property BetaDampingBeta")]
        HRESULT BetaDampingBeta([in] double pVal);
        [id(0x00000024), propget, helpstring("property AlphaDampingAlpha")]
        HRESULT AlphaDampingAlpha([out, retval] double* pVal);
        [id(0x00000024), propput, helpstring("property AlphaDampingAlpha")]
        HRESULT AlphaDampingAlpha([in] double pVal);
        [id(0x00000190), propget, helpstring("property SolverFilesDirectory")]
        HRESULT SolverFilesDirectory([out, retval] BSTR* pVal);
        [id(0x00000190), propput, helpstring("property SolverFilesDirectory")]
        HRESULT SolverFilesDirectory([in] BSTR pVal);
        [id(0x00000191), propget, helpstring("property FutureIntent")]
        HRESULT FutureIntent([out, retval] DSFutureIntentType* pVal);
        [id(0x00000191), propput, helpstring("property FutureIntent")]
        HRESULT FutureIntent([in] DSFutureIntentType pVal);
        [id(0x00000192), propget, helpstring("property SaveANSYSDB")]
        HRESULT SaveAnsysDB([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000192), propput, helpstring("property SaveANSYSDB")]
        HRESULT SaveAnsysDB([in] VARIANT_BOOL pVal);
        [id(0x00000193), propget, helpstring("property CleanupOptionalANSYSFiles")]
        HRESULT CleanupOptionalANSYSFiles([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000193), propput, helpstring("property CleanupOptionalANSYSFiles")]
        HRESULT CleanupOptionalANSYSFiles([in] VARIANT_BOOL pVal);
        [id(0x000001af), propget, helpstring("property SolverUnits")]
        HRESULT SolverUnits([out, retval] int* pVal);
        [id(0x000001af), propput, helpstring("property SolverUnits")]
        HRESULT SolverUnits([in] int pVal);
        [id(0x000001b1), propget, helpstring("property ResultFileName")]
        HRESULT ResultFileName([out, retval] BSTR* pVal);
        [id(0x000001b1), propput, helpstring("property ResultFileName")]
        HRESULT ResultFileName([in] BSTR pVal);
        [id(0x000001b0), propget, helpstring("property NonLinear")]
        HRESULT NonLinear([out, retval] unsigned int* pVal);
        [id(0x0000011c), helpstring("method GetAnalysisEndTime")]
        HRESULT GetAnalysisEndTime([out, retval] double* dEndTime);
        [id(0x000001b8), propget, helpstring("property SolveHandler")]
        HRESULT SolveHandler([out, retval] BSTR* pVal);
        [id(0x000001b8), propput, helpstring("property SolveHandler")]
        HRESULT SolveHandler([in] BSTR pVal);
        [id(0x000001c2), propget]
        HRESULT FilterForId(
                        [in] unsigned int lDSId, 
                        [out, retval] unsigned int* plFilter);
        [id(0x000001c2), propput]
        HRESULT FilterForId(
                        [in] unsigned int lDSId, 
                        [in] unsigned int plFilter);
        [id(0x000001c3), propget]
        HRESULT Label(
                        [in] unsigned int lDSId, 
                        [in] unsigned int lComponent, 
                        [out, retval] BSTR* pbsLabel);
        [id(0x000001c4), propget]
        HRESULT LegendPrefix(
                        [in] unsigned int lDSId, 
                        [in] unsigned int lComponent, 
                        [out, retval] BSTR* pbsPrefix);
        [id(0x000001c5), propget]
        HRESULT IdListForChart([out, retval] IAnsUINTColl** ppIAnsUINTColl);
        [id(0x000001c6), propget]
        HRESULT NumChartComponentsForId(
                        [in] unsigned int lDSId, 
                        [out, retval] unsigned int* pulNumComponents);
        [id(0x000001cc), helpstring("method MigratePre11Steps")]
        HRESULT MigratePre11Steps(unsigned int ulNumSteps);
        [id(0x000003e8), propget, helpstring("property UseAutoTimeSteppingByStep")]
        HRESULT UseAutoTimeSteppingByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] DSAutoTimeSteppingType* pVal);
        [id(0x000003e9), propget, helpstring("property TimeStepDefinebyByStep")]
        HRESULT TimeStepDefinebyByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] DSTimeStepDefineByType* pVal);
        [id(0x000003ea), propget, helpstring("property CarryOverTimeStepByStep")]
        HRESULT CarryOverTimeStepByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] VARIANT_BOOL* pVal);
        [id(0x000003eb), propget, helpstring("property InitialStepsByStep")]
        HRESULT InitialStepsByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] unsigned int* pVal);
        [id(0x000003ec), propget, helpstring("property MinimumStepsByStep")]
        HRESULT MinimumStepsByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] unsigned int* pVal);
        [id(0x000003ed), propget, helpstring("property MaximumStepsByStep")]
        HRESULT MaximumStepsByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] unsigned int* pVal);
        [id(0x000003ee), propget, helpstring("property NumberOfSubStepsByStep")]
        HRESULT NumberOfSubStepsByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] unsigned int* pVal);
        [id(0x000003ef), propget, helpstring("property InitialTimeStepByStep")]
        HRESULT InitialTimeStepByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] double* pVal);
        [id(0x000003f0), propget, helpstring("property MinimumTimeStepByStep")]
        HRESULT MinimumTimeStepByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] double* pVal);
        [id(0x000003f1), propget, helpstring("property MaximumTimeStepByStep")]
        HRESULT MaximumTimeStepByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] double* pVal);
        [id(0x000003f2), propget, helpstring("property TimeStepByStep")]
        HRESULT TimeStepByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] double* pVal);
        [id(0x000003f3), propget, helpstring("property UseTimeIntegrationByStep")]
        HRESULT UseTimeIntegrationByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] VARIANT_BOOL* pVal);
        [id(0x000003f4), propget, helpstring("property ConvergenceForceToleranceByStep")]
        HRESULT ConvergenceForceToleranceByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] DSConvergenceToleranceType* pVal);
        [id(0x000003f5), propget, helpstring("property ConvergenceForceToleranceValue2ByStep")]
        HRESULT ConvergenceForceToleranceValue2ByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] double* pVal);
        [id(0x000003f6), propget, helpstring("property ConvergenceForceToleranceValueByStep")]
        HRESULT ConvergenceForceToleranceValueByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] double* pVal);
        [id(0x000003f8), propget, helpstring("property ConvergenceForceToleranceMinRefByStep")]
        HRESULT ConvergenceForceToleranceMinRefByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] double* pVal);
        [id(0x000003f9), propget, helpstring("property ConvergenceMomentToleranceByStep")]
        HRESULT ConvergenceMomentToleranceByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] DSConvergenceToleranceType* pVal);
        [id(0x000003fa), propget, helpstring("property ConvergenceMomentToleranceValue2ByStep")]
        HRESULT ConvergenceMomentToleranceValue2ByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] double* pVal);
        [id(0x000003fb), propget, helpstring("property ConvergenceMomentToleranceValueByStep")]
        HRESULT ConvergenceMomentToleranceValueByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] double* pVal);
        [id(0x000003fd), propget, helpstring("property ConvergenceMomentToleranceMinRefByStep")]
        HRESULT ConvergenceMomentToleranceMinRefByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] double* pVal);
        [id(0x000003fe), propget, helpstring("property ConvergenceDisplacementToleranceByStep")]
        HRESULT ConvergenceDisplacementToleranceByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] DSConvergenceToleranceType* pVal);
        [id(0x000003ff), propget, helpstring("property ConvergenceDisplacementToleranceValue2ByStep")]
        HRESULT ConvergenceDisplacementToleranceValue2ByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] double* pVal);
        [id(0x00000401), propget, helpstring("property ConvergenceDisplacementToleranceValueByStep")]
        HRESULT ConvergenceDisplacementToleranceValueByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] double* pVal);
        [id(0x00000403), propget, helpstring("property ConvergenceDisplacementToleranceMinRefByStep")]
        HRESULT ConvergenceDisplacementToleranceMinRefByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] double* pVal);
        [id(0x00000404), propget, helpstring("property ConvergenceRotationToleranceByStep")]
        HRESULT ConvergenceRotationToleranceByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] DSConvergenceToleranceType* pVal);
        [id(0x00000405), propget, helpstring("property ConvergenceRotationToleranceValue2ByStep")]
        HRESULT ConvergenceRotationToleranceValue2ByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] double* pVal);
        [id(0x00000406), propget, helpstring("property ConvergenceRotationToleranceValueByStep")]
        HRESULT ConvergenceRotationToleranceValueByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] double* pVal);
        [id(0x00000407), propget, helpstring("property ConvergenceRotationToleranceMinRefByStep")]
        HRESULT ConvergenceRotationToleranceMinRefByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] double* pVal);
        [id(0x00000408), propget, helpstring("property ConvergenceHeatToleranceByStep")]
        HRESULT ConvergenceHeatToleranceByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] DSConvergenceToleranceType* pVal);
        [id(0x00000409), propget, helpstring("property ConvergenceHeatToleranceValue2ByStep")]
        HRESULT ConvergenceHeatToleranceValue2ByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] double* pVal);
        [id(0x0000040a), propget, helpstring("property ConvergenceHeatToleranceValueByStep")]
        HRESULT ConvergenceHeatToleranceValueByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] double* pVal);
        [id(0x0000040b), propget, helpstring("property ConvergenceHeatToleranceMinRefByStep")]
        HRESULT ConvergenceHeatToleranceMinRefByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] double* pVal);
        [id(0x0000040c), propget, helpstring("property ConvergenceTemperatureToleranceByStep")]
        HRESULT ConvergenceTemperatureToleranceByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] DSConvergenceToleranceType* pVal);
        [id(0x0000040d), propget, helpstring("property ConvergenceTemperatureToleranceValue2ByStep")]
        HRESULT ConvergenceTemperatureToleranceValue2ByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] double* pVal);
        [id(0x0000040e), propget, helpstring("property ConvergenceTemperatureToleranceValueByStep")]
        HRESULT ConvergenceTemperatureToleranceValueByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] double* pVal);
        [id(0x0000040f), propget, helpstring("property ConvergenceTemperatureToleranceMinRefByStep")]
        HRESULT ConvergenceTemperatureToleranceMinRefByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] double* pVal);
        [id(0x0000041c), propget, helpstring("property RelativeAssemblyToleranceByStep")]
        HRESULT RelativeAssemblyToleranceByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] DSConvergenceToleranceType* pVal);
        [id(0x0000041d), propget, helpstring("property RelativeAssemblyToleranceValueByStep")]
        HRESULT RelativeAssemblyToleranceValueByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] double* pVal);
        [id(0x0000041e), propget, helpstring("property EnergyAccuracyToleranceByStep")]
        HRESULT EnergyAccuracyToleranceByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] DSConvergenceToleranceType* pVal);
        [id(0x0000041f), propget, helpstring("property EnergyAccuracyToleranceValueByStep")]
        HRESULT EnergyAccuracyToleranceValueByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] double* pVal);
        [id(0x00000420), propget, helpstring("property CalculateStressByStep")]
        HRESULT CalculateStressByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] VARIANT_BOOL* pVal);
        [id(0x00000421), propget, helpstring("property CalculateStrainByStep")]
        HRESULT CalculateStrainByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] VARIANT_BOOL* pVal);
        [id(0x00000423), propget, helpstring("property CalculateThermalFluxByStep")]
        HRESULT CalculateThermalFluxByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] VARIANT_BOOL* pVal);
        [id(0x00000426), propget, helpstring("property CalculateResultsAtTimePointsByStep")]
        HRESULT CalculateResultsAtTimePointsByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] DSTimePointsOptions* pVal);
        [id(0x00000427), propget, helpstring("property NumberOfEqaullySpacedResultsByStep")]
        HRESULT NumberOfEqaullySpacedResultsByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] unsigned int* pVal);
        [id(0x00000410), propget, helpstring("property LineSearchByStep")]
        HRESULT LineSearchByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] DSLineSearchType* pVal);
        [id(0x000003e8), propput, helpstring("property UseAutoTimeSteppingByStep")]
        HRESULT UseAutoTimeSteppingByStep(
                        [in] unsigned int ulStepNumber, 
                        [in] DSAutoTimeSteppingType pVal);
        [id(0x000003e9), propput, helpstring("property TimeStepDefinebyByStep")]
        HRESULT TimeStepDefinebyByStep(
                        [in] unsigned int ulStepNumber, 
                        [in] DSTimeStepDefineByType pVal);
        [id(0x000003ef), propput, helpstring("property InitialTimeStepByStep")]
        HRESULT InitialTimeStepByStep(
                        [in] unsigned int ulStepNumber, 
                        [in] double pVal);
        [id(0x000003f0), propput, helpstring("property MinimumTimeStepByStep")]
        HRESULT MinimumTimeStepByStep(
                        [in] unsigned int ulStepNumber, 
                        [in] double pVal);
        [id(0x000003f1), propput, helpstring("property MaximumTimeStepByStep")]
        HRESULT MaximumTimeStepByStep(
                        [in] unsigned int ulStepNumber, 
                        [in] double pVal);
        [id(0x0000044c), propget, helpstring("property ConvergenceVoltageToleranceByStep")]
        HRESULT ConvergenceVoltageToleranceByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] DSConvergenceToleranceType* pVal);
        [id(0x0000044d), propget, helpstring("property ConvergenceVoltageToleranceValue2ByStep")]
        HRESULT ConvergenceVoltageToleranceValue2ByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] double* pVal);
        [id(0x0000044e), propget, helpstring("property ConvergenceVoltageToleranceValueByStep")]
        HRESULT ConvergenceVoltageToleranceValueByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] double* pVal);
        [id(0x0000044f), propget, helpstring("property ConvergenceVoltageToleranceMinRefByStep")]
        HRESULT ConvergenceVoltageToleranceMinRefByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] double* pVal);
        [id(0x00000450), propget, helpstring("property ConvergenceVoltageTolerance")]
        HRESULT ConvergenceVoltageTolerance([out, retval] DSConvergenceToleranceType* pVal);
        [id(0x00000450), propput, helpstring("property ConvergenceVoltageTolerance")]
        HRESULT ConvergenceVoltageTolerance([in] DSConvergenceToleranceType pVal);
        [id(0x00000454), propget, helpstring("property ConvergenceVoltageToleranceValue2")]
        HRESULT ConvergenceVoltageToleranceValue2([out, retval] double* pVal);
        [id(0x00000454), propput, helpstring("property ConvergenceVoltageToleranceValue2")]
        HRESULT ConvergenceVoltageToleranceValue2([in] double pVal);
        [id(0x00000451), propget, helpstring("property ConvergenceVoltageToleranceValue")]
        HRESULT ConvergenceVoltageToleranceValue([out, retval] double* pVal);
        [id(0x00000451), propput, helpstring("property ConvergenceVoltageToleranceValue")]
        HRESULT ConvergenceVoltageToleranceValue([in] double pVal);
        [id(0x00000452), propget, helpstring("property ConvergenceVoltageToleranceNormType")]
        HRESULT ConvergenceVoltageToleranceNormType([out, retval] DSConvergenceToleranceNormType* pVal);
        [id(0x00000452), propput, helpstring("property ConvergenceVoltageToleranceNormType")]
        HRESULT ConvergenceVoltageToleranceNormType([in] DSConvergenceToleranceNormType pVal);
        [id(0x00000453), propget, helpstring("property ConvergenceVoltageToleranceMinRef")]
        HRESULT ConvergenceVoltageToleranceMinRef([out, retval] double* pVal);
        [id(0x00000453), propput, helpstring("property ConvergenceVoltageToleranceMinRef")]
        HRESULT ConvergenceVoltageToleranceMinRef([in] double pVal);
        [id(0x00000456), propget, helpstring("property ConvergenceCurrentToleranceByStep")]
        HRESULT ConvergenceCurrentToleranceByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] DSConvergenceToleranceType* pVal);
        [id(0x00000457), propget, helpstring("property ConvergenceCurrentToleranceValue2ByStep")]
        HRESULT ConvergenceCurrentToleranceValue2ByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] double* pVal);
        [id(0x00000458), propget, helpstring("property ConvergenceCurrentToleranceValueByStep")]
        HRESULT ConvergenceCurrentToleranceValueByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] double* pVal);
        [id(0x00000459), propget, helpstring("property ConvergenceCurrentToleranceMinRefByStep")]
        HRESULT ConvergenceCurrentToleranceMinRefByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] double* pVal);
        [id(0x0000045f), propget, helpstring("property FileManagementSettings")]
        HRESULT FileManagementSettings([out, retval] IDispatch** ppDisp);
        [id(0x00000460), helpstring("property Migrate11FileManagement")]
        HRESULT Migrate11FileManagement();
        [id(0x00000463), propget, helpstring("property ConvergenceEmagCSGToleranceByStep")]
        HRESULT ConvergenceEmagCSGToleranceByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] DSConvergenceToleranceType* pVal);
        [id(0x00000464), propget, helpstring("property ConvergenceEmagCSGToleranceValue2ByStep")]
        HRESULT ConvergenceEmagCSGToleranceValue2ByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] double* pVal);
        [id(0x00000465), propget, helpstring("property ConvergenceEmagCSGToleranceValueByStep")]
        HRESULT ConvergenceEmagCSGToleranceValueByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] double* pVal);
        [id(0x00000466), propget, helpstring("property ConvergenceEmagCSGToleranceMinRefByStep")]
        HRESULT ConvergenceEmagCSGToleranceMinRefByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] double* pVal);
        [id(0x00000467), propget, helpstring("property ConvergenceEmagAMPSToleranceByStep")]
        HRESULT ConvergenceEmagAMPSToleranceByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] DSConvergenceToleranceType* pVal);
        [id(0x00000468), propget, helpstring("property ConvergenceEmagAMPSToleranceValue2ByStep")]
        HRESULT ConvergenceEmagAMPSToleranceValue2ByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] double* pVal);
        [id(0x00000469), propget, helpstring("property ConvergenceEmagAMPSToleranceValueByStep")]
        HRESULT ConvergenceEmagAMPSToleranceValueByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] double* pVal);
        [id(0x0000046a), propget, helpstring("property ConvergenceEmagAMPSToleranceMinRefByStep")]
        HRESULT ConvergenceEmagAMPSToleranceMinRefByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] double* pVal);
        [id(0x00000428), propget, helpstring("property NodalForcesByStep")]
        HRESULT NodalForcesByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] DSAnalysisSettingsOutputCtrlsNodalForcesType* pVal);
        [id(0x000001f8), propget, helpstring("property ModalNumberofPoints")]
        HRESULT ModalNumberofPoints([out, retval] unsigned int* pVal);
        [id(0x000001f8), propput, helpstring("property ModalNumberofPoints")]
        HRESULT ModalNumberofPoints([in] unsigned int pVal);
        [id(0x60020114)]
        HRESULT UpdateChartData([in] VARIANT_BOOL vbUpdate);
        [id(0x00000471), helpstring("property MigrateToNewSolvers")]
        HRESULT MigrateToNewSolvers();
        [id(0x60020116)]
        HRESULT IsProxy([out, retval] VARIANT_BOOL* pvbIsProxy);
        [id(0x00000475), propget, helpstring("property RadiosityFluxConvergence")]
        HRESULT RadiosityFluxConvergence([out, retval] double* pVal);
        [id(0x00000475), propput, helpstring("property RadiosityFluxConvergence")]
        HRESULT RadiosityFluxConvergence([in] double pVal);
        [id(0x00000476), propget, helpstring("property RadiositySolverMaxIteration")]
        HRESULT RadiositySolverMaxIteration([out, retval] int* pVal);
        [id(0x00000476), propput, helpstring("property RadiositySolverMaxIteration")]
        HRESULT RadiositySolverMaxIteration([in] int pVal);
        [id(0x00000477), propget, helpstring("property RadiositySolverTolerance")]
        HRESULT RadiositySolverTolerance([out, retval] double* pVal);
        [id(0x00000477), propput, helpstring("property RadiositySolverTolerance")]
        HRESULT RadiositySolverTolerance([in] double pVal);
        [id(0x00000478), propget, helpstring("property RadiositySolverRelaxation")]
        HRESULT RadiositySolverRelaxation([out, retval] double* pVal);
        [id(0x00000478), propput, helpstring("property RadiositySolverRelaxation")]
        HRESULT RadiositySolverRelaxation([in] double pVal);
        [id(0x00000479), propget, helpstring("property RadiosityFFHemicubeResolution")]
        HRESULT RadiosityFFHemicubeResolution([out, retval] int* pVal);
        [id(0x00000479), propput, helpstring("property RadiosityFFHemicubeResolution")]
        HRESULT RadiosityFFHemicubeResolution([in] int pVal);
        [id(0x0000047b), propget, helpstring("property RadiosityFF2DViewHidden")]
        HRESULT RadiosityFF2DViewHidden([out, retval] int* pVal);
        [id(0x0000047b), propput, helpstring("property RadiosityFF2DViewHidden")]
        HRESULT RadiosityFF2DViewHidden([in] int pVal);
        [id(0x0000047c), propget, helpstring("property RadiosityFF2DNumberZones")]
        HRESULT RadiosityFF2DNumberZones([out, retval] int* pVal);
        [id(0x0000047c), propput, helpstring("property RadiosityFF2DNumberZones")]
        HRESULT RadiosityFF2DNumberZones([in] int pVal);
        [id(0x00000c80), propget, helpstring("property KeepModalResults")]
        HRESULT KeepModalResults([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000c80), propput, helpstring("property KeepModalResults")]
        HRESULT KeepModalResults([in] VARIANT_BOOL pVal);
        [id(0x00000485), propget, helpstring("property CalculateVelocity")]
        HRESULT CalculateVelocity([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000485), propput, helpstring("property CalculateVelocity")]
        HRESULT CalculateVelocity([in] VARIANT_BOOL pVal);
        [id(0x00000486), propget, helpstring("property CalculateAcceleration")]
        HRESULT CalculateAcceleration([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000486), propput, helpstring("property CalculateAcceleration")]
        HRESULT CalculateAcceleration([in] VARIANT_BOOL pVal);
        [id(0x00000194), propget, helpstring("property SolverUnitsControl")]
        HRESULT SolverUnitsControl([out, retval] DSAnalysisSettingsSolverUnitsControlType* pVal);
        [id(0x00000194), propput, helpstring("property SolverUnitsControl")]
        HRESULT SolverUnitsControl([in] DSAnalysisSettingsSolverUnitsControlType pVal);
        [id(0x00000195), propget, helpstring("property SelectedSolverUnitSystem")]
        HRESULT SelectedSolverUnitSystem([out, retval] int* pVal);
        [id(0x00000195), propput, helpstring("property SelectedSolverUnitSystem")]
        HRESULT SelectedSolverUnitSystem([in] int pVal);
        [id(0x00000487), propget, helpstring("property CyclicSectorsNumber")]
        HRESULT CyclicSectorsNumber([out, retval] int* pVal);
        [id(0x00000487), propput, helpstring("property CyclicSectorsNumber")]
        HRESULT CyclicSectorsNumber([in] int pVal);
        [id(0x00000488), propget, helpstring("property CyclicActivation")]
        HRESULT CyclicActivation([out, retval] int* pVal);
        [id(0x00000488), propput, helpstring("property CyclicActivation")]
        HRESULT CyclicActivation([in] int pVal);
        [id(0x00000489), propget, helpstring("property CyclicHarmIndex")]
        HRESULT CyclicHarmIndex([out, retval] DSCyclicHarmIndexType* pVal);
        [id(0x00000489), propput, helpstring("property CyclicHarmIndex")]
        HRESULT CyclicHarmIndex([in] DSCyclicHarmIndexType pVal);
        [id(0x0000048a), propget, helpstring("property CyclicHarmIndexMin")]
        HRESULT CyclicHarmIndexMin([out, retval] int* pVal);
        [id(0x0000048a), propput, helpstring("property CyclicHarmIndexMin")]
        HRESULT CyclicHarmIndexMin([in] int pVal);
        [id(0x0000048b), propget, helpstring("property CyclicHarmIndexMax")]
        HRESULT CyclicHarmIndexMax([out, retval] int* pVal);
        [id(0x0000048b), propput, helpstring("property CyclicHarmIndexMax")]
        HRESULT CyclicHarmIndexMax([in] int pVal);
        [id(0x0000048c), propget, helpstring("property CyclicHarmIndexStep")]
        HRESULT CyclicHarmIndexStep([out, retval] int* pVal);
        [id(0x0000048c), propput, helpstring("property CyclicHarmIndexStep")]
        HRESULT CyclicHarmIndexStep([in] int pVal);
        [id(0x000001d6), propget, helpstring("property ScratchSolverFilesDirectory")]
        HRESULT ScratchSolverFilesDirectory([out, retval] BSTR* pVal);
        [id(0x000001d6), propput, helpstring("property ScratchSolverFilesDirectory")]
        HRESULT ScratchSolverFilesDirectory([in] BSTR pVal);
        [id(0x000007d0), propget, helpstring("property GUISolverFilesDirectory")]
        HRESULT GUISolverFilesDirectory([out, retval] BSTR* pVal);
        [id(0x00000167), propget, helpstring("property CalculateContactByStep")]
        HRESULT CalculateContactByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] VARIANT_BOOL* pVal);
        [id(0x0000002e), helpstring("method GetSolverTargetName")]
        HRESULT GetSolverTargetName([out, retval] BSTR* bsSolverTargetName);
        [id(0x0000048e), propget, helpstring("property RestartType")]
        HRESULT RestartType([out, retval] DSRestartType* pVal);
        [id(0x0000048e), propput, helpstring("property RestartType")]
        HRESULT RestartType([in] DSRestartType pVal);
        [id(0x00000491), propget, helpstring("property RestartAtTime")]
        HRESULT RestartAtTime([out, retval] double* pVal);
        [id(0x0000002f), helpstring("method GetHasValidRestartFiles")]
        HRESULT GetHasValidRestartFiles(VARIANT_BOOL* vbHasValidRestartFiles);
        [id(0x00000031), helpstring("method GetNumberOfRestartDataPoints")]
        HRESULT GetNumberOfRestartDataPoints(int* pVal);
        [id(0x00000037), helpstring("method GetRestartDataPointsInfoByIndex")]
        HRESULT GetRestartDataPointsInfoByIndex(
                        int index, 
                        int* stepNum, 
                        int* subStepNum, 
                        double* Time, 
                        BSTR* pFileName);
        [id(0x0000003a), propget, helpstring("property RestartItemSelection")]
        HRESULT RestartItemSelection([out, retval] unsigned int* pVal);
        [id(0x0000003a), propput, helpstring("property RestartItemSelection")]
        HRESULT RestartItemSelection([in] unsigned int pVal);
        [id(0x00000498), helpstring("method SetActiveRestartPoint")]
        HRESULT SetActiveRestartPoint(
                        [in] int index, 
                        [in] double Time);
        [id(0x00000499), propget, helpstring("property MaxRestartTimeForAuto")]
        HRESULT MaxRestartTimeForAuto([out, retval] double* pVal);
        [id(0x00000499), propput, helpstring("property MaxRestartTimeForAuto")]
        HRESULT MaxRestartTimeForAuto([in] double pVal);
        [id(0x0000049b), propget, helpstring("property EndStepTimeForRestart")]
        HRESULT EndStepTimeForRestart([out, retval] double* pVal);
        [id(0x0000049b), propput, helpstring("property EndStepTimeForRestart")]
        HRESULT EndStepTimeForRestart([in] double pVal);
        [id(0x00000497), helpstring("method DeleteRestartPoints")]
        HRESULT DeleteRestartPoints(
                        [in] int num, 
                        [in] double* pVals);
        [id(0x0000042e), propget, helpstring("property StabilizationByStep")]
        HRESULT StabilizationByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] DSStabilizationType* pVal);
        [id(0x0000042f), propget, helpstring("property StabilizationMethodByStep")]
        HRESULT StabilizationMethodByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] DSStabilizationMethod* pVal);
        [id(0x00000430), propget, helpstring("property StabilizationEnergyDissipationRatioByStep")]
        HRESULT StabilizationEnergyDissipationRatioByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] double* pVal);
        [id(0x00000431), propget, helpstring("property StabilizationDampingFactorByStep")]
        HRESULT StabilizationDampingFactorByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] double* pVal);
        [id(0x00000432), propget, helpstring("property StabilizationFirstSubstepOptionByStep")]
        HRESULT StabilizationFirstSubstepOptionByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] DSStabilizationFirstSubstepOption* pVal);
        [id(0x00000433), propget, helpstring("property StabilizationForceLimitByStep")]
        HRESULT StabilizationForceLimitByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] double* pVal);
        [id(0x0000049c), helpstring("method CopyNextStepSettingsToCurrent")]
        HRESULT CopyNextStepSettingsToCurrent([in] double Time);
        [id(0x0000049d), helpstring("method SplitSteponRestartPoint")]
        HRESULT SplitStepOnRestartPoint([in] double dEndTime);
        [id(0x0000049e), helpstring("method GetEulerianBoxData")]
        HRESULT GetEulerianBoxData(
                        [out] double* pPoint, 
                        [out] double* pExtents, 
                        [out] int* pDivisions, 
                        [out] VARIANT_BOOL* pOnFlag);
        [id(0x0000049f), helpstring("method InitializeCreepControls")]
        HRESULT InitializeCreepControls([in] VARIANT_BOOL vbIsCreepOn);
        [id(0x00000bb8), propget, helpstring("property UnitTypeByDispid")]
        HRESULT UnitTypeByDispid(
                        [in] int dispid, 
                        [out, retval] int* unitType);
        [id(0x00000bb9), propget, helpstring("property UnitStringByDispid")]
        HRESULT UnitStringByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* unitString);
        [id(0x00000bba), propget, helpstring("property ParamNameByDispid")]
        HRESULT ParamNameByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* paramName);
        [id(0x000001f7), propget, helpstring("property CampbellDiagram")]
        HRESULT CampbellDiagram([out, retval] VARIANT_BOOL* pVal);
        [id(0x000001f7), propput, helpstring("property CampbellDiagram")]
        HRESULT CampbellDiagram([in] VARIANT_BOOL pVal);
        [id(0x0000016a), propget, helpstring("property CalculateReactions")]
        HRESULT CalculateReactions([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000016a), propput, helpstring("property CalculateReactions")]
        HRESULT CalculateReactions([in] VARIANT_BOOL pVal);
        [id(0x00000171), propget, helpstring("property CalculateVelocityAndAcceleration")]
        HRESULT CalculateVelocityAndAcceleration([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000171), propput, helpstring("property CalculateVelocityAndAcceleration")]
        HRESULT CalculateVelocityAndAcceleration([in] VARIANT_BOOL pVal);
        [id(0x000001f4), propget, helpstring("property CoriolisEffect")]
        HRESULT CoriolisEffect([out, retval] VARIANT_BOOL* pVal);
        [id(0x000001f4), propput, helpstring("property CoriolisEffect")]
        HRESULT CoriolisEffect([in] VARIANT_BOOL pVal);
        [id(0x0000016c), helpstring("method compProgControlledExpandResultSubtype")]
        HRESULT compProgControlledExpandResultSubtype();
        [id(0x00000429), propget, helpstring("property GeneralMiscByStep")]
        HRESULT GeneralMiscByStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] VARIANT_BOOL* pVal);
        [id(0x0000016e), propget, helpstring("property NodalForces")]
        HRESULT NodalForces([out, retval] DSAnalysisSettingsOutputCtrlsNodalForcesType* pVal);
        [id(0x0000016e), propput, helpstring("property NodalForces")]
        HRESULT NodalForces([in] DSAnalysisSettingsOutputCtrlsNodalForcesType pVal);
        [id(0x0000016f), propget, helpstring("property GeneralMisc")]
        HRESULT GeneralMisc([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000016f), propput, helpstring("property GeneralMisc")]
        HRESULT GeneralMisc([in] VARIANT_BOOL pVal);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x000004a1), helpstring("method getCrackSolverId")]
        HRESULT getCrackSolverId(
                        [in] unsigned int CrackID, 
                        [in] DSFractureOutputType eOutputType, 
                        [out, retval] unsigned int* pVal);
        [id(0x000004a2), propget, helpstring("property FractureSolverControls")]
        HRESULT FractureSolverControls([out, retval] VARIANT_BOOL* pVal);
        [id(0x000004a2), propput, helpstring("property FractureSolverControls")]
        HRESULT FractureSolverControls([in] VARIANT_BOOL pVal);
        [id(0x00000026), helpstring("method setDefaultDampingValue")]
        HRESULT setDefaultDampingValue();
        [id(0x60020173)]
        HRESULT UpdateNoOfSubStepsForMSUPTransient([in] unsigned int uiReferenceStepNo);
        [id(0x00000474), propget, helpstring("property RadiositySolverActivation")]
        HRESULT RadiositySolverActivation([out, retval] int* pVal);
        [id(0x00000474), propput, helpstring("property RadiositySolverActivation")]
        HRESULT RadiositySolverActivation([in] int pVal);
        [id(0x00000492), propget, helpstring("property RestartControls")]
        HRESULT RestartControls([out, retval] DSRestartControlsType* pVal);
        [id(0x00000c1c), propget, helpstring("property NewtonRaphsonType")]
        HRESULT NewtonRaphsonType([out, retval] DSNewtonRaphsonType* pVal);
        [id(0x00000c1c), propput, helpstring("property NewtonRaphsonType")]
        HRESULT NewtonRaphsonType([in] DSNewtonRaphsonType pVal);
        [id(0x000001fa), propget, helpstring("property RotordynCtrlsModeReuse")]
        HRESULT ModeReuse([out, retval] DSRotordynCtrlsModeReuse* pVal);
        [id(0x000001fa), propput, helpstring("property RotordynCtrlsModeReuse")]
        HRESULT ModeReuse([in] DSRotordynCtrlsModeReuse pVal);
        [id(0x00000c1d), propget, helpstring("property SolverCtrlsModeReuse")]
        HRESULT ModeReuseOption([out, retval] DSSolverCtrlsModeReuse* pVal);
        [id(0x00000c1d), propput, helpstring("property SolverCtrlsModeReuse")]
        HRESULT ModeReuseOption([in] DSSolverCtrlsModeReuse pVal);
        [id(0x000004a4), helpstring("method ResetFirstStepCarryOverTimeStep")]
        HRESULT ResetFirstStepCarryOverTimeStep();
        [id(0x0000003e), propget, helpstring("property KeepPreStressLoadPattern")]
        HRESULT KeepPreStressLoadPattern([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000003e), propput, helpstring("property KeepPreStressLoadPattern")]
        HRESULT KeepPreStressLoadPattern([in] VARIANT_BOOL pVal);
        [id(0x00000169), propget, helpstring("property ExpandResultFrom")]
        HRESULT ExpandResultFrom([out, retval] DSExpandResultFrom* pVal);
        [id(0x00000169), propput, helpstring("property ExpandResultFrom")]
        HRESULT ExpandResultFrom([in] DSExpandResultFrom pVal);
        [id(0x000000d3), propget, helpstring("property FrequencySpacingType")]
        HRESULT FrequencySpacingType([out, retval] DSFrequencySpacingType* pVal);
        [id(0x000000d3), propput, helpstring("property FrequencySpacingType")]
        HRESULT FrequencySpacingType([in] DSFrequencySpacingType pVal);
        [id(0x000000d4), propget, helpstring("property CentralFrequency")]
        HRESULT CentralFrequency([out, retval] double* pVal);
        [id(0x000000d4), propput, helpstring("property CentralFrequency")]
        HRESULT CentralFrequency([in] double pVal);
        [id(0x00000170), propget, helpstring("property CalculateParticipationFactorResult")]
        HRESULT CalculateParticipationFactorResult([out, retval] DSCalculateParticipationFactorResult* pVal);
        [id(0x00000ce4), propget, helpstring("property NonlinearAdaptivityHasMeshCriteria")]
        HRESULT NonlinearAdaptivityHasMeshCriteria([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000ce4), propput, helpstring("property NonlinearAdaptivityHasMeshCriteria")]
        HRESULT NonlinearAdaptivityHasMeshCriteria([in] VARIANT_BOOL pVal);
        [id(0x00000ce7), propget, helpstring("property NonlinearAdaptivityEdgeSplitAngle")]
        HRESULT NonlinearAdaptivityEdgeSplitAngle([out, retval] double* pVal);
        [id(0x00000ce7), propput, helpstring("property NonlinearAdaptivityEdgeSplitAngle")]
        HRESULT NonlinearAdaptivityEdgeSplitAngle([in] double pVal);
        [id(0x00000ce8), propget, helpstring("property NonlinearAdaptivityGlobalSizeRatio")]
        HRESULT NonlinearAdaptivityGlobalSizeRatio([out, retval] double* pVal);
        [id(0x00000ce8), propput, helpstring("property NonlinearAdaptivityGlobalSizeRatio")]
        HRESULT NonlinearAdaptivityGlobalSizeRatio([in] double pVal);
        [id(0x00000ce9), propget, helpstring("property NonlinearAdaptivityNumSculptedLayers")]
        HRESULT NonlinearAdaptivityNumSculptedLayers([out, retval] unsigned int* pVal);
        [id(0x00000ce9), propput, helpstring("property NonlinearAdaptivityNumSculptedLayers")]
        HRESULT NonlinearAdaptivityNumSculptedLayers([in] unsigned int pVal);
        [id(0x00000cf1), propget, helpstring("property NonlinearAdaptivityLocalSizeRatio")]
        HRESULT NonlinearAdaptivityLocalSizeRatio([out, retval] double* pVal);
        [id(0x00000cf1), propput, helpstring("property NonlinearAdaptivityLocalSizeRatio")]
        HRESULT NonlinearAdaptivityLocalSizeRatio([in] double pVal);
        [id(0x00000cf4), propget, helpstring("property NonlinearAdaptivityRemeshingGradient")]
        HRESULT NonlinearAdaptivityRemeshingGradient([out, retval] unsigned int* pVal);
        [id(0x00000cf4), propput, helpstring("property NonlinearAdaptivityRemeshingGradient")]
        HRESULT NonlinearAdaptivityRemeshingGradient([in] unsigned int pVal);
        [id(0x00000cf3), propget, helpstring("property NonlinearAdaptivityBoundaryAngle")]
        HRESULT NonlinearAdaptivityBoundaryAngle([out, retval] double* pVal);
        [id(0x00000cf3), propput, helpstring("property NonlinearAdaptivityBoundaryAngle")]
        HRESULT NonlinearAdaptivityBoundaryAngle([in] double pVal);
        [id(0x00000cf5), propget, helpstring("property NonlinearAdaptivityControlsByStep")]
        HRESULT NonlinearAdaptivityControlsByStep(
                        [in] DSNonlinearAdaptivityControl eNLADCtrl, 
                        [in] unsigned int ulStepNumber, 
                        [out, retval] double* pVal);
        [id(0x00000cf5), propput, helpstring("property NonlinearAdaptivityControlsByStep")]
        HRESULT NonlinearAdaptivityControlsByStep(
                        [in] DSNonlinearAdaptivityControl eNLADCtrl, 
                        [in] unsigned int ulStepNumber, 
                        [in] double pVal);
        [id(0x000004a6), propget, helpstring("property AnalysisSettingsCombineDistResultFiles")]
        HRESULT CombineDistResultFiles([out, retval] DSCombineResultFilesType* pVal);
        [id(0x00000462), propget, helpstring("property SpectrumType")]
        HRESULT SpectrumType([out, retval] SpectrumType* pVal);
        [id(0x00000461), propget, helpstring("property ModesCombinationType")]
        HRESULT ModesCombinationType([out, retval] ModesCombinationType* pVal);
        [id(0x0000017c), propget, helpstring("property Stabilization")]
        HRESULT Stabilization([out, retval] DSStabilizationType* pVal);
        [id(0x000004a7), propget, helpstring("property CalculateMaterialForce")]
        HRESULT CalculateMaterialForce([out, retval] VARIANT_BOOL* pVal);
        [id(0x000004a7), propput, helpstring("property CalculateMaterialForce")]
        HRESULT CalculateMaterialForce([in] VARIANT_BOOL pVal);
        [id(0x000004a8), propget, helpstring("property CalculateTStress")]
        HRESULT CalculateTStress([out, retval] VARIANT_BOOL* pVal);
        [id(0x000004a8), propput, helpstring("property CalculateTStress")]
        HRESULT CalculateTStress([in] VARIANT_BOOL pVal);
        [id(0x000004a9), helpstring("method updateCrackSettingsAfterResume")]
        HRESULT updateCrackSettingsAfterResume();
        [id(0x000004aa), propget, helpstring("property CalculateSIFS")]
        HRESULT CalculateSIFS([out, retval] VARIANT_BOOL* pVal);
        [id(0x000004aa), propput, helpstring("property CalculateSIFS")]
        HRESULT CalculateSIFS([in] VARIANT_BOOL pVal);
        [id(0x000004ab), propget, helpstring("property CalculateJIntegral")]
        HRESULT CalculateJIntegral([out, retval] VARIANT_BOOL* pVal);
        [id(0x000004ab), propput, helpstring("property CalculateJIntegral")]
        HRESULT CalculateJIntegral([in] VARIANT_BOOL pVal);
        [id(0x000004ac), propget, helpstring("property CalculateCStarIntegral")]
        HRESULT CalculateCStarIntegral([out, retval] VARIANT_BOOL* pVal);
        [id(0x000004ac), propput, helpstring("property CalculateCStarIntegral")]
        HRESULT CalculateCStarIntegral([in] VARIANT_BOOL pVal);
        [id(0x00000108), propget, helpstring("property LoadCaseIdentifier")]
        HRESULT LoadCaseIdentifier([out, retval] BSTR* pVal);
        [id(0x00000108), propput, helpstring("property LoadCaseIdentifier")]
        HRESULT LoadCaseIdentifier([in] BSTR pVal);
        [id(0x00000122), helpstring("method GetLoadCaseIdentifierAtStep")]
        HRESULT GetLoadCaseIdentifierAtStep(
                        [in] unsigned int ulStepNumber, 
                        [out, retval] BSTR* pVal);
        [id(0x00000123), helpstring("method SetLoadCaseIdentifierAtStep")]
        HRESULT SetLoadCaseIdentifierAtStep(
                        [in] unsigned int ulStepNumber, 
                        [in] BSTR newVal);
    };

    typedef enum {
        kDSHarmonicMSUP_StoreAtAllFrequencies = 0,
        kDSHarmonicMSUP_StoreAtSelectedFrequencies = 1
    } DSHarmonicMSUPStorage;

    typedef enum {
        kRST_Auto = 0,
        kRST_Manual = 1
    } DSResultSetsType;

    typedef enum {
        kMBDTimeInt_Unknown = 0,
        kMBDTimeInt_RK4 = 1,
        kMBDTimeInt_RK5 = 2
    } DSMBDTimeIntegrationType;

    typedef enum {
        kMBDStabilization_PROGRAM_CHOOSES = 0,
        kMBDStabilization_ON = 1,
        kMBDStabilization_OFF = 2
    } DSMBDStabilizationType;

    typedef enum {
        kDSIncludeNegativeLoadMultiplier_ProgramControlled = 0,
        kDSIncludeNegativeLoadMultiplier_Yes = 1,
        kDSIncludeNegativeLoadMultiplier_No = 2
    } DSSolverCtrlsIncludeNegativeLoadMultiplier;

    typedef enum {
        kCreepUnknown = 0,
        kCreepOn = 1,
        kCreepOff = 2
    } DSCreep;

    typedef enum {
        kCONVERGENCE_TOLERANCE_PROGRAM_CHOOSES = 0,
        kCONVERGENCE_TOLERANCE_ON = 1,
        kCONVERGENCE_TOLERANCE_OFF = 2
    } DSConvergenceToleranceType;

    typedef enum {
        kLINE_SEARCH_PROGRAM_CHOOSES = 0,
        kLINE_SEARCH_ON = 1,
        kLINE_SEARCH_OFF = 2
    } DSLineSearchType;

    typedef enum {
        kTimePointsAll = 0,
        kTimePointsLast = 1,
        kTimePointsEquallySpaced = 2,
        kTimePointsSpecified = 3
    } DSTimePointsOptions;

    typedef enum {
        kSaveNone = 0,
        kSaveFilesForPSDAnalysis = 1,
        kSaveFilesForHarmonicAnalysis = 2,
        kSaveFilesForTransientAnalysis = 3,
        kSaveFilesForPrestressedModalAnalysis = 4,
        kSaveRestartFiles = 5,
        kSaveFilesForRSAnalysis = 6,
        kSaveFilesForModeSuperpositionAnalysis = 7,
        kSaveFilesForPreStressModeSuperpositionAnalysis = 8,
        kSaveFilesForPrestressedFullHarmonicAnalysis = 9,
        kSaveFilesForRBDTransientAnalysis = 10
    } DSFutureIntentType;

    typedef enum {
        kNormInfinite = 0,
        kNormL1 = 1,
        kNormL2 = 2
    } DSConvergenceToleranceNormType;

    typedef enum {
        kDSAnalysisSettingsOutputCtrlsNodalForcesTypeNo = 0,
        kDSAnalysisSettingsOutputCtrlsNodalForcesTypeYes = 1,
        kDSAnalysisSettingsOutputCtrlsNodalForcesTypeConstrainNode = 2
    } DSAnalysisSettingsOutputCtrlsNodalForcesType;

    typedef enum {
        kASettingsSolverUnitsControlType_ActiveSystem = 0,
        kASettingsSolverUnitsControlType_Manual = 1
    } DSAnalysisSettingsSolverUnitsControlType;

    typedef enum {
        kCYCLIC_HARM_INDEX_PROGRAM_CHOOSES = 0,
        kCYCLIC_HARM_INDEX_MANUAL = 1
    } DSCyclicHarmIndexType;

    typedef enum {
        kRestartProgramChooses = 0,
        kRestartManual = 1,
        kRestartOff = 2
    } DSRestartType;

    typedef enum {
        kStabilization_Off = 0,
        kStabilization_Constant = 1,
        kStabilization_Reduce = 2
    } DSStabilizationType;

    typedef enum {
        kStabilization_Method_Energy = 0,
        kStabilization_Method_Damping = 1
    } DSStabilizationMethod;

    typedef enum {
        kStabilization_FirstSubstepOption_No = 0,
        kStabilization_FirstSubstepOption_MinTime = 1,
        kStabilization_FirstSubstepOption_Yes = 2
    } DSStabilizationFirstSubstepOption;

    typedef enum {
        DSFractureOutputUnknown = 0,
        DSFractureOutputSIFS = 1,
        DSFractureOutputJINT = 2,
        DSFractureOutputVCCT = 3,
        DSFractureOutputTSTRESS = 4,
        DSFractureOutputMFOR = 5,
        DSFractureOutputCSTAR = 6
    } DSFractureOutputType;

    typedef enum {
        kRestartControlsProgramChooses = 0,
        kRestartControlsManual = 1,
        kRestartControlsOff = 2
    } DSRestartControlsType;

    typedef enum {
        kDSNewtonRaphsonType_Unknown = 0,
        kDSNewtonRaphsonType_ProgramControlled = 1,
        kDSNewtonRaphsonType_Full = 2,
        kDSNewtonRaphsonType_Modified = 3,
        kDSNewtonRaphsonType_Unsymmetric = 4
    } DSNewtonRaphsonType;

    typedef enum {
        kModal_ModeReuse_ProgramControlled = 0,
        kModal_ModeReuse_Yes = 1,
        kModal_ModeReuse_No = 2
    } DSRotordynCtrlsModeReuse;

    typedef enum {
        kDSModeReuse_ProgramControlled = 0,
        kDSModeReuse_Yes = 1,
        kDSModeReuse_No = 2
    } DSSolverCtrlsModeReuse;

    typedef enum {
        kExpandResultFrom_ProgramControlled = 0,
        kExpandResultFrom_HarmonicSolution = 1,
        kExpandResultFrom_ModalSolution = 2,
        kExpandResultFrom_TransientSolution = 3
    } DSExpandResultFrom;

    typedef enum {
        kDSFrequencySpacing_LINEAR = 0,
        kDSFrequencySpacing_LOG = 1,
        kDSFrequencySpacing_OB1 = 2,
        kDSFrequencySpacing_OB2 = 3,
        kDSFrequencySpacing_OB3 = 4,
        kDSFrequencySpacing_OB6 = 5,
        kDSFrequencySpacing_OB12 = 6,
        kDSFrequencySpacing_OB24 = 7
    } DSFrequencySpacingType;

    typedef enum {
        kCalculateParticipationFactorResult_ProgramControlled = 0,
        kCalculateParticipationFactorResult_Yes = 1,
        kCalculateParticipationFactorResult_No = 2
    } DSCalculateParticipationFactorResult;

    typedef enum {
        kNLADCtrlUnknown = 0,
        kNLADCtrlNumSculptedLayers = 1,
        kNLADCtrlBoundaryAngle = 2,
        kNLADCtrlRemeshingGradient = 3,
        kNLADCtrlGlobalSizeRatio = 4,
        kNLADCtrlEdgeSplitAngle = 5,
        kNLADCtrlLocalSizeRatio = 6
    } DSNonlinearAdaptivityControl;

    typedef enum {
        kCombineResultFilesProgCont = 0,
        kCombineResultFilesYes = 1,
        kCombineResultFilesNo = 2
    } DSCombineResultFilesType;

    typedef enum {
        kSPECTRUM_NONE = 0,
        kSPECTRUM_SINGLE = 1,
        kSPECTRUM_MULTIPLE = 2
    } SpectrumType;

    typedef enum {
        kMODES_COMBINATION_NONE = 0,
        kMODES_COMBINATION_SRSS = 1,
        kMODES_COMBINATION_CQC = 2,
        kMODES_COMBINATION_ROSE = 3
    } ModesCombinationType;

    typedef enum {
        DISPID_ModalSettingsNumberOfModesToExtract = 21
    } kDispId_ModalSettings;

    [
      odl,
      uuid(F68E9294-128F-4DE6-831C-0ADFDAAF1FAB),
      helpstring("IDSModalSettingsAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSModalSettingsAuto : IDispatch {
        [id(0x00000015), propget, helpstring("property NumberOfModesToExtract")]
        HRESULT NumberOfModesToExtract([out, retval] int* pVal);
        [id(0x00000015), propput, helpstring("property NumberOfModesToExtract")]
        HRESULT NumberOfModesToExtract([in] int pVal);
    };

    typedef enum {
        DISPID_RSLoadComments = 31,
        DISPID_RSLoadAddComment = 32,
        DISPID_RSLoadAddFigure = 33,
        DISPID_RSLoadFigures = 34,
        DISPID_RSLoadData = 35,
        DISPID_RSLoadDirection = 36,
        DISPID_RSLoadLocation = 37,
        DISPID_RSLoadSuppressed = 38,
        DISPID_RSLoadImages = 39,
        DISPID_RSLoadAddImage = 40,
        DISPID_RSLoadBoundaryConditionSelection = 41,
        DISPID_RSMissingMassEffect = 42,
        DISPID_RSMissingMassEffectZPA = 43,
        DISPID_RSScaleFactor = 44,
        DISPID_RSRigidResponseEffect = 45,
        DISPID_RSRigidResponseEffectZPA = 46,
        DISPID_RSRigidResponseEffectFreqBegin = 47,
        DISPID_RSRigidResponseEffectFreqEnd = 48,
        DISPID_RSRigidResponseEffectType = 49,
        DISPID_RSLoadAnsBCType = 50
    } kDispId_RSLoad;

    [
      odl,
      uuid(0B9A67C6-CBED-423F-82BF-2A198B007513),
      helpstring("IDSRSLoadAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSRSLoadAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000029), propget, helpstring("property BoundaryConditionSelection")]
        HRESULT BoundaryConditionSelection([out, retval] int* pVal);
        [id(0x00000029), propput, helpstring("property BoundaryConditionSelection")]
        HRESULT BoundaryConditionSelection([in] int pVal);
        [id(0x00000023), propget, helpstring("property LoadData")]
        HRESULT LoadData([out, retval] IDispatch** pDisp);
        [id(0x00000023), propput, helpstring("property LoadData")]
        HRESULT LoadData([in] IDispatch* pDisp);
        [id(0x00000024), propget, helpstring("property Direction")]
        HRESULT Direction([out, retval] NormalOrientationType* pVal);
        [id(0x00000024), propput, helpstring("property Direction")]
        HRESULT Direction([in] NormalOrientationType pVal);
        [id(0x00000025), propget, helpstring("property Location")]
        HRESULT Location([out, retval] BSTR* pVal);
        [id(0x00000025), propput, helpstring("property Location")]
        HRESULT Location([in] BSTR pVal);
        [id(0x0000002a), propget, helpstring("property MissingMassEffect")]
        HRESULT MissingMassEffect([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000002a), propput, helpstring("property MissingMassEffect")]
        HRESULT MissingMassEffect([in] VARIANT_BOOL pVal);
        [id(0x0000002b), propget, helpstring("property MissingMassEffectZPA")]
        HRESULT MissingMassEffectZPA([out, retval] double* pVal);
        [id(0x0000002b), propput, helpstring("property MissingMassEffectZPA")]
        HRESULT MissingMassEffectZPA([in] double pVal);
        [id(0x0000002c), propget, helpstring("property ScaleFactor")]
        HRESULT ScaleFactor([out, retval] double* pVal);
        [id(0x0000002c), propput, helpstring("property ScaleFactor")]
        HRESULT ScaleFactor([in] double pVal);
        [id(0x0000002d), propget, helpstring("property RigidResponseEffect")]
        HRESULT RigidResponseEffect([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000002d), propput, helpstring("property RigidResponseEffect")]
        HRESULT RigidResponseEffect([in] VARIANT_BOOL pVal);
        [id(0x0000002e), propget, helpstring("property RigidResponseEffectZPA")]
        HRESULT RigidResponseEffectZPA([out, retval] double* pVal);
        [id(0x0000002e), propput, helpstring("property RigidResponseEffectZPA")]
        HRESULT RigidResponseEffectZPA([in] double pVal);
        [id(0x0000002f), propget, helpstring("property RigidResponseEffectFreqBegin")]
        HRESULT RigidResponseEffectFreqBegin([out, retval] double* pVal);
        [id(0x0000002f), propput, helpstring("property RigidResponseEffectFreqBegin")]
        HRESULT RigidResponseEffectFreqBegin([in] double pVal);
        [id(0x00000030), propget, helpstring("property RigidResponseEffectFreqEnd")]
        HRESULT RigidResponseEffectFreqEnd([out, retval] double* pVal);
        [id(0x00000030), propput, helpstring("property RigidResponseEffectFreqEnd")]
        HRESULT RigidResponseEffectFreqEnd([in] double pVal);
        [id(0x00000031), propget, helpstring("property RigidResponseEffectType")]
        HRESULT RigidResponseEffectType([out, retval] RigidResponseEffectType* pVal);
        [id(0x00000031), propput, helpstring("property RigidResponseEffectType")]
        HRESULT RigidResponseEffectType([in] RigidResponseEffectType pVal);
        [id(0x00000026), propget, helpstring("property Suppressed")]
        HRESULT Suppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000026), propput, helpstring("property Suppressed")]
        HRESULT Suppressed([in] VARIANT_BOOL pVal);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
        [id(0x0000001f), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x00000020), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x00000021), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x00000022), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x00000027), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000028), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x00000032), propget, helpstring("method AnsBCType")]
        HRESULT AnsBCType([out, retval] int* pVal);
    };

    typedef enum {
        kRIGID_RESPONSE_EFFECT_NONE = 0,
        kRIGID_RESPONSE_EFFECT_GUPTA = 1,
        kRIGID_RESPONSE_EFFECT_LINDLEY = 2
    } RigidResponseEffectType;

    typedef enum {
        DISPID_PSDLoadComments = 31,
        DISPID_PSDLoadAddComment = 32,
        DISPID_PSDLoadAddFigure = 33,
        DISPID_PSDLoadFigures = 34,
        DISPID_PSDLoadData = 35,
        DISPID_PSDLoadDirection = 36,
        DISPID_PSDLoadLocation = 37,
        DISPID_PSDLoadSuppressed = 38,
        DISPID_PSDLoadImages = 39,
        DISPID_PSDLoadAddImage = 40,
        DISPID_PSDLoadBoundaryConditionSelection = 41,
        DISPID_PSDLoadAnsBCType = 42,
        DISPID_PSDLoadSpringBC = 43
    } kDispId_PSDLoad;

    [
      odl,
      uuid(AF9FD062-1FF9-4C7D-8993-4EFC89DC65FC),
      helpstring("IDSPSDLoadAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSPSDLoadAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000029), propget, helpstring("property BoundaryConditionSelection")]
        HRESULT BoundaryConditionSelection([out, retval] int* pVal);
        [id(0x00000029), propput, helpstring("property BoundaryConditionSelection")]
        HRESULT BoundaryConditionSelection([in] int pVal);
        [id(0x00000023), propget, helpstring("property LoadData")]
        HRESULT LoadData([out, retval] IDispatch** pDisp);
        [id(0x00000023), propput, helpstring("property LoadData")]
        HRESULT LoadData([in] IDispatch* pDisp);
        [id(0x00000024), propget, helpstring("property Direction")]
        HRESULT Direction([out, retval] NormalOrientationType* pVal);
        [id(0x00000024), propput, helpstring("property Direction")]
        HRESULT Direction([in] NormalOrientationType pVal);
        [id(0x00000025), propget, helpstring("property Location")]
        HRESULT Location([out, retval] BSTR* pVal);
        [id(0x00000025), propput, helpstring("property Location")]
        HRESULT Location([in] BSTR pVal);
        [id(0x00000026), propget, helpstring("property Suppressed")]
        HRESULT Suppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000026), propput, helpstring("property Suppressed")]
        HRESULT Suppressed([in] VARIANT_BOOL pVal);
        [id(0x0000002a), propget, helpstring("method AnsBCType")]
        HRESULT AnsBCType([out, retval] int* pVal);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
        [id(0x0000001f), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x00000020), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x00000021), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x00000022), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x00000027), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000028), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x0000002b), propget, helpstring("property SpringBC")]
        HRESULT IsSpringBC([out, retval] VARIANT_BOOL* pVal);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
    };

    typedef enum {
        DISPID_InitialConditionsInitialTemperatureType = 10,
        DISPID_InitialConditionsInitialTemperatureValue = 11,
        DISPID_InitialConditionsTemperatureUnits = 12,
        DISPID_InitialConditionsICEnvironment = 15,
        DISPID_InitialConditionsICEnvironmentTime = 16,
        DISPID_InitialConditionsPrestressMode = 17,
        DISPID_InitialConditionsPrestressTime = 18,
        DISPID_InitialConditionsPrestressTimeStepFactor = 19,
        DISPID_InitialConditionsSuppressed = 20,
        DISPID_InitialConditionsComments = 21,
        DISPID_InitialConditionsAddComment = 22,
        DISPID_InitialConditionsFigures = 23,
        DISPID_InitialConditionsAddFigure = 24,
        DISPID_InitialConditionsImages = 25,
        DISPID_InitialConditionsAddImage = 26,
        DISPID_InitialConditionsModalMechanicalPreStressICEnvironment = 31,
        DISPID_InitialConditionsMechanicalPSDModalICEnvironment = 41,
        DISPID_InitialConditionsTransientMechanicalMechanicalICType = 51,
        DISPID_InitialConditionsGeometryDefineBy = 52,
        DISPID_InitialConditionsComponentSelection = 53,
        DISPID_InitialConditionsGeometrySelection = 54,
        DISPID_InitialConditionsTransientMechanicalInitialConditionsMag = 55,
        DISPID_InitialConditionsTransientMechanicalInitialConditionsX = 56,
        DISPID_InitialConditionsTransientMechanicalInitialConditionsY = 57,
        DISPID_InitialConditionsTransientMechanicalInitialConditionsZ = 58,
        DISPID_InitialConditionsTransientMechanicalMechanicalICEnvironment = 59,
        DISPID_InitialConditionsTransientMechanicalVectorDefineBy = 60,
        DISPID_InitialConditionsCoordinateSystemSelection = 61,
        DISPID_InitialConditionsTransientMechanicalVectorDirection = 62,
        DISPID_InitialConditionsInitialConditionsData = 63,
        DISPID_InitialConditionUnitTypeByDispid = 64,
        DISPID_InitialConditionUnitStringByDispid = 65,
        DISPID_InitialConditionParamNameByDispid = 66,
        DISPID_InitialConditionUpdateBasedOnComponent = 67,
        DISPID_InitialConditionsMechanicalRSModalICEnvironment = 68,
        DISPID_InitialConditionsMechanicalHarmonicModalICEnvironment = 69,
        DISPID_PreStressStateTimeOrStep = 70,
        DISPID_PreStressUserInputTimeValue = 71,
        DISPID_PreStressUserInputLoadStep = 72,
        DISPID_PreStressStateReportedLoadStep = 73,
        DISPID_PreStressStateReportedSubStep = 74,
        DISPID_PreStressStateReportedTime = 75,
        DISPID_InitialConditionsAddCommandEditor = 76,
        DISPID_PreStressContactStatus = 77,
        DISPID_InitialConditionsTransientMechanicalMSUPICEnvironment = 78,
        DISPID_InitialConditionsTransientMechanicalMSUPModalPreStressEnvironment = 79,
        DISPID_InitialConditionsMSUPHarmonicModalPreStressEnvironment = 80,
        DISPID_InitialConditionsMechanicalHarmonicPreStressICEnvironment = 81,
        DISPID_PreStressNewtonRaphsonOption = 82,
        DISPID_InitialConditionsPressureInitialisation = 83,
        DISPID_InitialConditionsMechanicalPSDModalPreStressEnvironment = 84,
        DISPID_InitialConditionsMechanicalRSModalPreStressEnvironment = 85
    } kDispId_InitialConditions;

    [
      odl,
      uuid(DE8CCE48-9218-4E6A-95D7-4BE33546C03D),
      helpstring("IDSInitialConditionsAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSInitialConditionsAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x0000000a), propget, helpstring("property InitialTemperatureType")]
        HRESULT InitialTemperatureType([out, retval] DSInitialConditionsInitialTempType* pInitialTempType);
        [id(0x0000000a), propput, helpstring("property InitialTemperatureType")]
        HRESULT InitialTemperatureType([in] DSInitialConditionsInitialTempType pInitialTempType);
        [id(0x0000000b), propget, helpstring("property InitialTemperatureValue")]
        HRESULT InitialTemperatureValue([out, retval] double* pInitialTempValue);
        [id(0x0000000b), propput, helpstring("property InitialTemperatureValue")]
        HRESULT InitialTemperatureValue([in] double pInitialTempValue);
        [id(0x0000000c), propget, helpstring("property TemperatureUnits")]
        HRESULT TemperatureUnits([out, retval] BSTR* pVal);
        [id(0x0000000f), propget, helpstring("property InitialEnvironment")]
        HRESULT InitialEnvironment([out, retval] dsid* pInitialTempValue);
        [id(0x0000000f), propput, helpstring("property InitialEnvironment")]
        HRESULT InitialEnvironment([in] dsid pInitialTempValue);
        [id(0x00000010), propget, helpstring("property InitialEnvironmentTime")]
        HRESULT InitialEnvironmentTime([out, retval] double* pVal);
        [id(0x00000010), propput, helpstring("property InitialEnvironmentTime")]
        HRESULT InitialEnvironmentTime([in] double pVal);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
        [id(0x00000015), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x00000016), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x00000018), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x00000017), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x00000019), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x0000001a), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00000034), propget, helpstring("property GeometryDefineBy")]
        HRESULT GeometryDefineBy([out, retval] DSGeometryDefineByType* pVal);
        [id(0x00000034), propput, helpstring("property GeometryDefineBy")]
        HRESULT GeometryDefineBy([in] DSGeometryDefineByType pVal);
        [id(0x00000035), propget, helpstring("property ComponentSelection")]
        HRESULT ComponentSelection([out, retval] int* pVal);
        [id(0x00000035), propput, helpstring("property ComponentSelection")]
        HRESULT ComponentSelection([in] int pVal);
        [id(0x00000036), propput, helpstring("property GeometrySelection")]
        HRESULT GeometrySelection([in] IDispatch* rhs);
        [id(0x0000001f), propget, helpstring("property ModalMechanicalPreStressICEnvironment")]
        HRESULT ModalMechanicalPreStressICEnvironment([out, retval] dsid* pEnvironment);
        [id(0x0000001f), propput, helpstring("property ModalMechanicalPreStressICEnvironment")]
        HRESULT ModalMechanicalPreStressICEnvironment([in] dsid pEnvironment);
        [id(0x00000029), propget, helpstring("property MechanicalPSDModalICEnvironment")]
        HRESULT MechanicalPSDModalICEnvironment([out, retval] dsid* pEnvironment);
        [id(0x00000029), propput, helpstring("property MechanicalPSDModalICEnvironment")]
        HRESULT MechanicalPSDModalICEnvironment([in] dsid pEnvironment);
        [id(0x00000033), propget, helpstring("property TransientMechanicalMechanicalICType")]
        HRESULT TransientMechanicalMechanicalICType([out, retval] DSInitialConditionsMechanical* pMechanicalInitialConditionType);
        [id(0x00000033), propput, helpstring("property TransientMechanicalMechanicalICType")]
        HRESULT TransientMechanicalMechanicalICType([in] DSInitialConditionsMechanical pMechanicalInitialConditionType);
        [id(0x0000003b), propget, helpstring("property TransientMechanicalMechanicalICEnvironment")]
        HRESULT TransientMechanicalMechanicalICEnvironment([out, retval] dsid* pEnvironment);
        [id(0x0000003b), propput, helpstring("property TransientMechanicalMechanicalICEnvironment")]
        HRESULT TransientMechanicalMechanicalICEnvironment([in] dsid pEnvironment);
        [id(0x0000003c), propget, helpstring("property VectorDefineBy")]
        HRESULT VectorDefineBy([out, retval] DefineByType* pVal);
        [id(0x0000003c), propput, helpstring("property VectorDefineBy")]
        HRESULT VectorDefineBy([in] DefineByType pVal);
        [id(0x0000003d), propget, helpstring("property CoordinateSystemSelection")]
        HRESULT CoordinateSystemSelection([out, retval] dsid* pVal);
        [id(0x0000003d), propput, helpstring("property CoordinateSystemSelection")]
        HRESULT CoordinateSystemSelection([in] dsid pVal);
        [id(0x00000037), propget, helpstring("property TransientMechanicalInitialConditionsMag")]
        HRESULT TransientMechanicalInitialConditionsMag([out, retval] double* Magnitude);
        [id(0x00000037), propput, helpstring("property TransientMechanicalInitialConditionsMag")]
        HRESULT TransientMechanicalInitialConditionsMag([in] double Magnitude);
        [id(0x00000038), propget, helpstring("property TransientMechanicalInitialConditionsX")]
        HRESULT TransientMechanicalInitialConditionsX([out, retval] double* X);
        [id(0x00000038), propput, helpstring("property TransientMechanicalInitialConditionsX")]
        HRESULT TransientMechanicalInitialConditionsX([in] double X);
        [id(0x00000039), propget, helpstring("property TransientMechanicalInitialConditionsY")]
        HRESULT TransientMechanicalInitialConditionsY([out, retval] double* Y);
        [id(0x00000039), propput, helpstring("property TransientMechanicalInitialConditionsY")]
        HRESULT TransientMechanicalInitialConditionsY([in] double Y);
        [id(0x0000003a), propget, helpstring("property TransientMechanicalInitialConditionsZ")]
        HRESULT TransientMechanicalInitialConditionsZ([out, retval] double* Z);
        [id(0x0000003a), propput, helpstring("property TransientMechanicalInitialConditionsZ")]
        HRESULT TransientMechanicalInitialConditionsZ([in] double Z);
        [id(0x0000003e), propput, helpstring("property VectorDirection")]
        HRESULT VectorDirection([in] IDispatch* rhs);
        [id(0x0000003f), propget, helpstring("property InitialConditionsData")]
        HRESULT InitialConditionsData([out, retval] IDispatch** ppDisp);
        [id(0x00000014), propget, helpstring("property Suppressed")]
        HRESULT Suppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000014), propput, helpstring("property Suppressed")]
        HRESULT Suppressed([in] VARIANT_BOOL pVal);
        [id(0x00000040), propget, helpstring("property UnitTypeByDispid")]
        HRESULT UnitTypeByDispid(
                        [in] int dispid, 
                        [out, retval] int* unitType);
        [id(0x00000041), propget, helpstring("property UnitStringByDispid")]
        HRESULT UnitStringByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* unitString);
        [id(0x00000042), propget, helpstring("property ParamNameByDispid")]
        HRESULT ParamNameByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* paramName);
        [id(0x00000043), helpstring("method updateInitialConditionBasedOnComponent")]
        HRESULT updateInitialConditionBasedOnComponent();
        [id(0x00000044), propget, helpstring("property MechanicalRSModalICEnvironment")]
        HRESULT MechanicalRSModalICEnvironment([out, retval] dsid* pEnvironment);
        [id(0x00000044), propput, helpstring("property MechanicalRSModalICEnvironment")]
        HRESULT MechanicalRSModalICEnvironment([in] dsid pEnvironment);
        [id(0x00000011), propget, helpstring("property PrestressMode")]
        HRESULT PrestressMode([out, retval] PrestressMode* pVal);
        [id(0x00000011), propput, helpstring("property PrestressMode")]
        HRESULT PrestressMode([in] PrestressMode pVal);
        [id(0x00000053), propget, helpstring("property PressureInit")]
        HRESULT PressureInit([out, retval] PressureInit* pVal);
        [id(0x00000053), propput, helpstring("property PressureInit")]
        HRESULT PressureInit([in] PressureInit pVal);
        [id(0x00000012), propget, helpstring("property PrestressTime")]
        HRESULT PrestressTime([out, retval] double* pVal);
        [id(0x00000012), propput, helpstring("property PrestressTime")]
        HRESULT PrestressTime([in] double pVal);
        [id(0x00000013), propget, helpstring("property PrestressTimeStepFactor")]
        HRESULT PrestressTimeStepFactor([out, retval] double* pVal);
        [id(0x00000013), propput, helpstring("property PrestressTimeStepFactor")]
        HRESULT PrestressTimeStepFactor([in] double pVal);
        [id(0x00000045), propget, helpstring("property MechanicalHarmonicModalICEnvironment")]
        HRESULT MechanicalHarmonicModalICEnvironment([out, retval] dsid* pEnvironment);
        [id(0x00000045), propput, helpstring("property MechanicalHarmonicModalICEnvironment")]
        HRESULT MechanicalHarmonicModalICEnvironment([in] dsid pEnvironment);
        [id(0x00000046), propget, helpstring("property PreStressStateTimeOrStep")]
        HRESULT PreStressStateTimeOrStep([out, retval] DSPreStressStateChoice* pVal);
        [id(0x00000046), propput, helpstring("property PreStressStateTimeOrStep")]
        HRESULT PreStressStateTimeOrStep([in] DSPreStressStateChoice pVal);
        [id(0x00000047), propget, helpstring("property PreStressUserInputTime")]
        HRESULT PreStressUserInputTime([out, retval] double* pVal);
        [id(0x00000047), propput, helpstring("property PreStressUserInputTime")]
        HRESULT PreStressUserInputTime([in] double pVal);
        [id(0x00000048), propget, helpstring("property PreStressUserInputLoadStep")]
        HRESULT PreStressUserInputLoadStep([out, retval] int* pVal);
        [id(0x00000048), propput, helpstring("property PreStressUserInputLoadStep")]
        HRESULT PreStressUserInputLoadStep([in] int pVal);
        [id(0x00000049), propget, helpstring("property PreStressReportedLoadStep")]
        HRESULT PreStressReportedLoadStep([out, retval] int* pVal);
        [id(0x0000004a), propget, helpstring("property PreStressReportedSubStep")]
        HRESULT PreStressReportedSubStep([out, retval] int* pVal);
        [id(0x0000004b), propget, helpstring("property PreStressReportedTime")]
        HRESULT PreStressReportedTime([out, retval] double* pVal);
        [id(0x0000004c), helpstring("method AddCommandEditor")]
        HRESULT AddCommandEditor([out, retval] IDispatch** ppVal);
        [id(0x0000004d), propget, helpstring("property PreStressContactStatus")]
        HRESULT PreStressContactStatus([out, retval] DSPreStressContactStatus* pVal);
        [id(0x0000004d), propput, helpstring("property PreStressContactStatus")]
        HRESULT PreStressContactStatus([in] DSPreStressContactStatus pVal);
        [id(0x0000004e), propget, helpstring("property TransientMechanicalMSUPICEnvironment")]
        HRESULT TransientMechanicalMSUPICEnvironment([out, retval] dsid* pEnvironment);
        [id(0x0000004e), propput, helpstring("property TransientMechanicalMSUPICEnvironment")]
        HRESULT TransientMechanicalMSUPICEnvironment([in] dsid pEnvironment);
        [id(0x0000004f), propget, helpstring("property TransientMechanicalMSUPModalPreStressEnvironment")]
        HRESULT TransientMechanicalMSUPModalPreStressEnvironment([out, retval] dsid* pEnvironment);
        [id(0x00000050), propget, helpstring("property MechanicalHarmonicMSUPModalPreStressEnvironment")]
        HRESULT MechanicalHarmonicMSUPModalPreStressEnvironment([out, retval] dsid* pEnvironment);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x00000051), propget, helpstring("property MechanicalHarmonicPreStressICEnvironment")]
        HRESULT MechanicalHarmonicPreStressICEnvironment([out, retval] dsid* pEnvironment);
        [id(0x00000051), propput, helpstring("property MechanicalHarmonicPreStressICEnvironment")]
        HRESULT MechanicalHarmonicPreStressICEnvironment([in] dsid pEnvironment);
        [id(0x00000052), propget, helpstring("property PreStressNewtonRaphsonOption")]
        HRESULT PreStressNewtonRaphsonOption([out, retval] DSNewtonRaphsonType* pVal);
        [id(0x00000052), propput, helpstring("property PreStressNewtonRaphsonOption")]
        HRESULT PreStressNewtonRaphsonOption([in] DSNewtonRaphsonType pVal);
        [id(0x00000054), propget, helpstring("property MechanicalPSDModalPreStressEnvironment")]
        HRESULT MechanicalPSDModalPreStressEnvironment([out, retval] dsid* pEnvironment);
        [id(0x00000055), propget, helpstring("property MechanicalRSModalPreStressEnvironment")]
        HRESULT MechanicalRSModalPreStressEnvironment([out, retval] dsid* pEnvironment);
    };

    typedef enum {
        kInitialConditionsInitialTempUniform = 0,
        kInitialConditionsInitialTempNonUniform = 1
    } DSInitialConditionsInitialTempType;

    typedef enum {
        kInitialConditionsMechanicalUnknown = 0,
        kInitialConditionsMechanicalAtRest = 1,
        kInitialConditionsMechanicalVelocity = 2,
        kInitialConditionsMechanicalAcceleration = 3,
        kInitialConditionsMechanicalRotationalVelocity = 4,
        kInitialConditionsMechanicalEnvironment = 5
    } DSInitialConditionsMechanical;

    typedef enum {
        kMaterialState = 0,
        kDisplacements = 1
    } PrestressMode;

    typedef enum {
        kFromDeformedState = 0,
        kFromStressTrace = 1
    } PressureInit;

    typedef enum {
        kPreStressUnknown = 0,
        kPreStressProgramControlled = 1,
        kPreStressLoadStep = 2,
        kPreStressTime = 3
    } DSPreStressStateChoice;

    typedef enum {
        kPreStressContactUnknown = 0,
        kPreStressContactTrueStatus = 1,
        kPreStressContactForceSticking = 2,
        kPreStressContactForceBonded = 3
    } DSPreStressContactStatus;

    typedef enum {
        DISPID_InitialConditionGroupComments = 20,
        DISPID_InitialConditionGroupAddComment = 21,
        DISPID_InitialConditionGroupFigures = 22,
        DISPID_InitialConditionGroupAddFigure = 23,
        DISPID_InitialConditionGroupImages = 24,
        DISPID_InitialConditionGroupAddImage = 25
    } kDispId_InitialConditionGroup;

    [
      odl,
      uuid(1691CF6D-D94E-4186-BF48-6B2E9FDBD59F),
      helpstring("IDSInitialConditionGroupAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSInitialConditionGroupAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
        [id(0x00000014), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x00000016), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x00000018), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000015), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x00000017), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x00000019), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
    };

    typedef enum {
        DISPID_BodyInteractionGroupComments = 10,
        DISPID_BodyInteractionGroupFigures = 11,
        DISPID_BodyInteractionGroupImages = 12,
        DISPID_BodyInteractionGroupFormulation = 20,
        DISPID_BodyInteractionGroupContactDetection = 21,
        DISPID_BodyInteractionGroupDetectionZoneSizeFactor = 22,
        DISPID_BodyInteractionGroupTimestepSafetyFactor = 23,
        DISPID_BodyInteractionGroupLimitingTimestepVelocity = 24,
        DISPID_BodyInteractionGroupShellThicknessFactor = 25,
        DISPID_BodyInteractionGroupUseEdgeOnEdgeContact = 26,
        DISPID_BodyInteractionGroupUseBodySelfContact = 27,
        DISPID_BodyInteractionGroupUseElementSelfContact = 28,
        DISPID_BodyInteractionGroupElementSelfContactTolerance = 29,
        DISPID_BodyInteractionGroupUseContactRegion = 30,
        DISPID_BodyInteractionGroupContactRegionXMin = 31,
        DISPID_BodyInteractionGroupContactRegionXMax = 32,
        DISPID_BodyInteractionGroupContactRegionYMin = 33,
        DISPID_BodyInteractionGroupContactRegionYMax = 34,
        DISPID_BodyInteractionGroupContactRegionZMin = 35,
        DISPID_BodyInteractionGroupContactRegionZMax = 36,
        DISPID_BodyInteractionGroupNodalShellThickness = 37,
        DISPID_BodyInteractionGroupSlidingContact = 38,
        DISPID_BodyInteractionGroupAddComment = 50,
        DISPID_BodyInteractionGroupAddFigure = 51,
        DISPID_BodyInteractionGroupAddImage = 52
    } kDispId_BodyInteractionGroup;

    [
      odl,
      uuid(D5BF8232-6689-446E-B13D-56758FA9766B),
      helpstring("IDSBodyInteractionGroupAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSBodyInteractionGroupAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
        [id(0x0000000a), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x0000000b), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x0000000c), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000015), propget, helpstring("property ContactDetection")]
        HRESULT ContactDetection([out, retval] DSContactDetection* pVal);
        [id(0x00000015), propput, helpstring("property ContactDetection")]
        HRESULT ContactDetection([in] DSContactDetection pVal);
        [id(0x00000014), propget, helpstring("property Formulation")]
        HRESULT Formulation([out, retval] DSBodyInteractionFormulation* pVal);
        [id(0x00000014), propput, helpstring("property Formulation")]
        HRESULT Formulation([in] DSBodyInteractionFormulation pVal);
        [id(0x00000019), propget, helpstring("property ShellThicknessFactor")]
        HRESULT ShellThicknessFactor([out, retval] double* pVal);
        [id(0x00000019), propput, helpstring("property ShellThicknessFactor")]
        HRESULT ShellThicknessFactor([in] double pVal);
        [id(0x00000025), propget, helpstring("property NodalShellThickness")]
        HRESULT NodalShellThickness([out, retval] DSYesNoPControlled* eVal);
        [id(0x00000025), propput, helpstring("property NodalShellThickness")]
        HRESULT NodalShellThickness([in] DSYesNoPControlled eVal);
        [id(0x00000026), propget, helpstring("property SlidingContact")]
        HRESULT SlidingContact([out, retval] DSSlidingContact* pVal);
        [id(0x00000026), propput, helpstring("property SlidingContact")]
        HRESULT SlidingContact([in] DSSlidingContact pVal);
        [id(0x00000016), propget, helpstring("property DetectionZoneSizeFactor")]
        HRESULT DetectionZoneSizeFactor([out, retval] double* pVal);
        [id(0x00000016), propput, helpstring("property DetectionZoneSizeFactor")]
        HRESULT DetectionZoneSizeFactor([in] double pVal);
        [id(0x00000017), propget, helpstring("property TimestepSafetyFactor")]
        HRESULT TimestepSafetyFactor([out, retval] double* pVal);
        [id(0x00000017), propput, helpstring("property TimestepSafetyFactor")]
        HRESULT TimestepSafetyFactor([in] double pVal);
        [id(0x00000018), propget, helpstring("property LimitingTimestepVelocity")]
        HRESULT LimitingTimestepVelocity([out, retval] double* pVal);
        [id(0x00000018), propput, helpstring("property LimitingTimestepVelocity")]
        HRESULT LimitingTimestepVelocity([in] double pVal);
        [id(0x0000001a), propget, helpstring("property UseEdgeOnEdgeContact")]
        HRESULT UseEdgeOnEdgeContact([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000001a), propput, helpstring("property UseEdgeOnEdgeContact")]
        HRESULT UseEdgeOnEdgeContact([in] VARIANT_BOOL pVal);
        [id(0x0000001b), propget, helpstring("property UseBodySelfContact")]
        HRESULT UseBodySelfContact([out, retval] DSYesNoPControlled* eVal);
        [id(0x0000001b), propput, helpstring("property UseBodySelfContact")]
        HRESULT UseBodySelfContact([in] DSYesNoPControlled eVal);
        [id(0x0000001c), propget, helpstring("property UseElementSelfContact")]
        HRESULT UseElementSelfContact([out, retval] DSYesNoPControlled* pVal);
        [id(0x0000001c), propput, helpstring("property UseElementSelfContact")]
        HRESULT UseElementSelfContact([in] DSYesNoPControlled pVal);
        [id(0x0000001d), propget, helpstring("property ElementSelfContactTolerance")]
        HRESULT ElementSelfContactTolerance([out, retval] double* pVal);
        [id(0x0000001d), propput, helpstring("property ElementSelfContactTolerance")]
        HRESULT ElementSelfContactTolerance([in] double pVal);
        [id(0x0000001e), propget, helpstring("property UseContactRegion")]
        HRESULT UseContactRegion([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000001e), propput, helpstring("property UseContactRegion")]
        HRESULT UseContactRegion([in] VARIANT_BOOL pVal);
        [id(0x0000001f), propget, helpstring("property ContactRegionXMin")]
        HRESULT ContactRegionXMin([out, retval] double* pVal);
        [id(0x0000001f), propput, helpstring("property ContactRegionXMin")]
        HRESULT ContactRegionXMin([in] double pVal);
        [id(0x00000020), propget, helpstring("property ContactRegionXMax")]
        HRESULT ContactRegionXMax([out, retval] double* pVal);
        [id(0x00000020), propput, helpstring("property ContactRegionXMax")]
        HRESULT ContactRegionXMax([in] double pVal);
        [id(0x00000021), propget, helpstring("property ContactRegionYMin")]
        HRESULT ContactRegionYMin([out, retval] double* pVal);
        [id(0x00000021), propput, helpstring("property ContactRegionYMin")]
        HRESULT ContactRegionYMin([in] double pVal);
        [id(0x00000022), propget, helpstring("property ContactRegionYMax")]
        HRESULT ContactRegionYMax([out, retval] double* pVal);
        [id(0x00000022), propput, helpstring("property ContactRegionYMax")]
        HRESULT ContactRegionYMax([in] double pVal);
        [id(0x00000023), propget, helpstring("property ContactRegionZMin")]
        HRESULT ContactRegionZMin([out, retval] double* pVal);
        [id(0x00000023), propput, helpstring("property ContactRegionZMin")]
        HRESULT ContactRegionZMin([in] double pVal);
        [id(0x00000024), propget, helpstring("property ContactRegionZMax")]
        HRESULT ContactRegionZMax([out, retval] double* pVal);
        [id(0x00000024), propput, helpstring("property ContactRegionZMax")]
        HRESULT ContactRegionZMax([in] double pVal);
        [id(0x00000032), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x00000033), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x00000034), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
    };

    typedef enum {
        cdTRAJECTORY = 0,
        cdPROXIMITY_BASED = 1
    } DSContactDetection;

    typedef enum {
        bifDECOMPOSITION_RESPONSE = 0,
        bifPENALTY = 1
    } DSBodyInteractionFormulation;

    typedef enum {
        kYNP_No = 0,
        kYNP_Yes = 1,
        kYNP_PControlled = 2
    } DSYesNoPControlled;

    typedef enum {
        scDISCRETE_SURFACE = 0,
        scCONNECTED_SURFACE = 1
    } DSSlidingContact;

    typedef enum {
        DISPID_BodyInteractionComments = 10,
        DISPID_BodyInteractionFigures = 11,
        DISPID_BodyInteractionImages = 12,
        DISPID_BodyInteractionGeometryDefineBy = 20,
        DISPID_BodyInteractionGeometrySelection = 21,
        DISPID_BodyInteractionComponentSelection = 22,
        DISPID_BodyInteractionContactType = 23,
        DISPID_BodyInteractionStaticFrictionCoefficient = 24,
        DISPID_BodyInteractionDynamicFrictionCoefficient = 25,
        DISPID_BodyInteractionDecayFrictionConstant = 26,
        DISPID_BodyInteractionBondedMaximumOffset = 27,
        DISPID_BodyInteractionBondedBreakable = 28,
        DISPID_BodyInteractionNormalForceLimit = 29,
        DISPID_BodyInteractionNormalForceExponent = 30,
        DISPID_BodyInteractionShearForceLimit = 31,
        DISPID_BodyInteractionShearForceExponent = 32,
        DISPID_BodyInteractionNormalStressLimit = 33,
        DISPID_BodyInteractionNormalStressExponent = 34,
        DISPID_BodyInteractionShearStressLimit = 35,
        DISPID_BodyInteractionShearStressExponent = 36,
        DISPID_BodyInteractionPrototypes = 37,
        DISPID_BodyInteractionSuppressed = 13,
        DISPID_BodyInteractionAddComment = 50,
        DISPID_BodyInteractionAddFigure = 51,
        DISPID_BodyInteractionAddImage = 52
    } kDispId_BodyInteraction;

    [
      odl,
      uuid(DB492003-C31E-4915-A42C-17D768734E73),
      helpstring("IDSBodyInteractionAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSBodyInteractionAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x0000000a), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x0000000b), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x0000000c), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000014), propget, helpstring("property GeometryDefineBy")]
        HRESULT GeometryDefineBy([out, retval] DSGeometryDefineByType* pVal);
        [id(0x00000014), propput, helpstring("property GeometryDefineBy")]
        HRESULT GeometryDefineBy([in] DSGeometryDefineByType pVal);
        [id(0x00000015), propput, helpstring("property GeometrySelection")]
        HRESULT GeometrySelection([in] IDispatch* rhs);
        [id(0x00000016), propget, helpstring("property ComponentSelection")]
        HRESULT ComponentSelection([out, retval] int* pVal);
        [id(0x00000016), propput, helpstring("property ComponentSelection")]
        HRESULT ComponentSelection([in] int pVal);
        [id(0x00000017), propget, helpstring("property ContactType")]
        HRESULT ContactType([out, retval] DSContactType* pVal);
        [id(0x00000017), propput, helpstring("property ContactType")]
        HRESULT ContactType([in] DSContactType pVal);
        [id(0x00000018), propget, helpstring("property StaticFrictionCoefficient")]
        HRESULT StaticFrictionCoefficient([out, retval] double* pVal);
        [id(0x00000018), propput, helpstring("property StaticFrictionCoefficient")]
        HRESULT StaticFrictionCoefficient([in] double pVal);
        [id(0x00000019), propget, helpstring("property DynamicFrictionCoefficient")]
        HRESULT DynamicFrictionCoefficient([out, retval] double* pVal);
        [id(0x00000019), propput, helpstring("property DynamicFrictionCoefficient")]
        HRESULT DynamicFrictionCoefficient([in] double pVal);
        [id(0x0000001a), propget, helpstring("property DecayFrictionConstant")]
        HRESULT DecayFrictionConstant([out, retval] double* pVal);
        [id(0x0000001a), propput, helpstring("property DecayFrictionConstant")]
        HRESULT DecayFrictionConstant([in] double pVal);
        [id(0x0000001b), propget, helpstring("property BondedMaximumOffset")]
        HRESULT BondedMaximumOffset([out, retval] double* pVal);
        [id(0x0000001b), propput, helpstring("property BondedMaximumOffset")]
        HRESULT BondedMaximumOffset([in] double pVal);
        [id(0x0000001c), propget, helpstring("property BondedBreakable")]
        HRESULT BondedBreakable([out, retval] DSBondedBreakable* pVal);
        [id(0x0000001c), propput, helpstring("property BondedBreakable")]
        HRESULT BondedBreakable([in] DSBondedBreakable pVal);
        [id(0x0000001d), propget, helpstring("property NormalForceLimit")]
        HRESULT NormalForceLimit([out, retval] double* pVal);
        [id(0x0000001d), propput, helpstring("property NormalForceLimit")]
        HRESULT NormalForceLimit([in] double pVal);
        [id(0x0000001e), propget, helpstring("property NormalForceExponent")]
        HRESULT NormalForceExponent([out, retval] double* pVal);
        [id(0x0000001e), propput, helpstring("property NormalForceExponent")]
        HRESULT NormalForceExponent([in] double pVal);
        [id(0x0000001f), propget, helpstring("property ShearForceLimit")]
        HRESULT ShearForceLimit([out, retval] double* pVal);
        [id(0x0000001f), propput, helpstring("property ShearForceLimit")]
        HRESULT ShearForceLimit([in] double pVal);
        [id(0x00000020), propget, helpstring("property ShearForceExponent")]
        HRESULT ShearForceExponent([out, retval] double* pVal);
        [id(0x00000020), propput, helpstring("property ShearForceExponent")]
        HRESULT ShearForceExponent([in] double pVal);
        [id(0x00000021), propget, helpstring("property NormalStressLimit")]
        HRESULT NormalStressLimit([out, retval] double* pVal);
        [id(0x00000021), propput, helpstring("property NormalStressLimit")]
        HRESULT NormalStressLimit([in] double pVal);
        [id(0x00000022), propget, helpstring("property NormalStressExponent")]
        HRESULT NormalStressExponent([out, retval] double* pVal);
        [id(0x00000022), propput, helpstring("property NormalStressExponent")]
        HRESULT NormalStressExponent([in] double pVal);
        [id(0x00000023), propget, helpstring("property ShearStressLimit")]
        HRESULT ShearStressLimit([out, retval] double* pVal);
        [id(0x00000023), propput, helpstring("property ShearStressLimit")]
        HRESULT ShearStressLimit([in] double pVal);
        [id(0x00000024), propget, helpstring("property ShearStressExponent")]
        HRESULT ShearStressExponent([out, retval] double* pVal);
        [id(0x00000024), propput, helpstring("property ShearStressExponent")]
        HRESULT ShearStressExponent([in] double pVal);
        [id(0x00000025), propget, helpstring("property Prototypes")]
        HRESULT Prototypes([out, retval] VARIANT* pVal);
        [id(0x0000000d), propget, helpstring("property Suppressed")]
        HRESULT Suppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000000d), propput, helpstring("property Suppressed")]
        HRESULT Suppressed([in] VARIANT_BOOL pVal);
        [id(0x00000032), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x00000033), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x00000034), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
    };

    typedef enum {
        DISPID_JointType = 10,
        DISPID_JointSuppressed = 11,
        DISPID_JointReferenceSet = 12,
        DISPID_JointMobileSet = 13,
        DISPID_JointReferenceCoordinateSystemSelection = 14,
        DISPID_JointComments = 15,
        DISPID_JointPrototypes = 16,
        DISPID_JointTranslationXFixedOrFree = 17,
        DISPID_JointTranslationYFixedOrFree = 18,
        DISPID_JointTranslationZFixedOrFree = 19,
        DISPID_JointRotationXFixedOrFree = 20,
        DISPID_JointRotationYFixedOrFree = 21,
        DISPID_JointRotationZFixedOrFree = 22,
        DISPID_JointReferenceBodyName = 23,
        DISPID_JointMobileBodyName = 24,
        DISPID_JointFigures = 25,
        DISPID_JointScopingType = 26,
        DISPID_JointMobileCoordinateSystemSelection = 29,
        DISPID_JointReferenceSetString = 30,
        DISPID_JointMobileSetString = 31,
        DISPID_JointFlipReferenceMobileSurfaces = 32,
        DISPID_JointReferenceGeometryDefineBy = 33,
        DISPID_JointReferenceComponent = 34,
        DISPID_JointMobileComponent = 35,
        DISPID_JointImages = 36,
        DISPID_JointMobileGeometryDefineBy = 37,
        DISPID_JointCapability = 38,
        DISPID_JointInitialPosition = 39,
        DISPID_JointHasValidGeoSelection = 40,
        DISPID_JointElementReference = 41,
        DISPID_JointCommandEditors = 42,
        DISPID_JointStopsXMin = 43,
        DISPID_JointStopsXMinType = 44,
        DISPID_JointStopsXMax = 45,
        DISPID_JointStopsXMaxType = 46,
        DISPID_JointStopsYMin = 48,
        DISPID_JointStopsYMinType = 49,
        DISPID_JointStopsYMax = 50,
        DISPID_JointStopsYMaxType = 51,
        DISPID_JointStopsZMin = 53,
        DISPID_JointStopsZMinType = 54,
        DISPID_JointStopsZMax = 55,
        DISPID_JointStopsZMaxType = 56,
        DISPID_JointStopsRXMin = 58,
        DISPID_JointStopsRXMinType = 59,
        DISPID_JointStopsRXMax = 60,
        DISPID_JointStopsRXMaxType = 61,
        DISPID_JointStopsRYMin = 63,
        DISPID_JointStopsRYMinType = 64,
        DISPID_JointStopsRYMax = 65,
        DISPID_JointStopsRYMaxType = 66,
        DISPID_JointStopsRZMin = 68,
        DISPID_JointStopsRZMinType = 69,
        DISPID_JointStopsRZMax = 70,
        DISPID_JointStopsRZMaxType = 71,
        DISPID_JointStopsRestitution = 72,
        DISPID_JointReferenceRemotePointSelection = 73,
        DISPID_JointMobileRemotePointSelection = 74,
        DISPID_JointUnitTypeByDispid = 75,
        DISPID_JointUnitStringByDispid = 76,
        DISPID_JointParamNameByDispid = 77,
        DISPID_JointBehaviorReference = 100,
        DISPID_JointBehaviorMobile = 101,
        DISPID_JointPinballSizeReference = 102,
        DISPID_JointPinballSizeMobile = 103,
        DISPID_JointAddComment = 80,
        DISPID_JointAddFigure = 81,
        DISPID_JointAddImage = 82,
        DISPID_JointAddCommandEditor = 83,
        DISPID_JointRotationDOF = 84,
        DISPID_JointBushingType = 85,
        DISPID_JointBushingStiffnessCoefficients = 86,
        DISPID_JointBushingDampingCoefficients = 87,
        DISPID_JointBushingStiffnessPerUnitX = 88,
        DISPID_JointBushingStiffnessPerUnitY = 89,
        DISPID_JointBushingStiffnessPerUnitZ = 90,
        DISPID_JointBushingStiffnessPerThetaUnitX = 91,
        DISPID_JointBushingStiffnessPerThetaUnitY = 92,
        DISPID_JointBushingStiffnessPerThetaUnitZ = 93,
        DISPID_JointBushingDampingPerUnitX = 94,
        DISPID_JointBushingDampingPerUnitY = 95,
        DISPID_JointBushingDampingPerUnitZ = 96,
        DISPID_JointBushingDampingPerThetaUnitX = 97,
        DISPID_JointBushingDampingPerThetaUnitY = 98,
        DISPID_JointBushingDampingPerThetaUnitZ = 99,
        DISPID_JointGeometryDefineBy = 104,
        DISPID_JointTorsStiffness = 105,
        DISPID_JointTorsDamping = 106,
        DISPID_JointIsEditableMatrixEntry = 107,
        DISPID_JointIsApplicableMatrixEntry = 108,
        DISPID_JointMatrixEntry = 109,
        DISPID_JointDOFMask = 110,
        DISPID_JointPromoteRemotePoint = 113,
        DISPID_JointSuppressedForSolve = 114,
        DISPID_JointObjectsShareGeomsList = 115,
        DISPID_JointNumReference = 116,
        DISPID_JointNumMobile = 117,
        DISPID_JointReferenceEdgeSurfaceSelection = 118,
        DISPID_JointRadialGapType = 119,
        DISPID_JointRadialGapInnerDiameter = 120,
        DISPID_JointRadialGapOuterDiameter = 121,
        DISPID_JointRadialGapHeight = 122,
        DISPID_JointNonlLongStiffness = 123,
        DISPID_JointAnsBCType = 124,
        DISPID_JointLoadVariation = 125,
        DISPID_JointDataViewType = 126,
        DISPID_JointNonlinearCell = 127,
        DISPID_JointActiveNonlinearCell = 128,
        DISPID_JointIsThisCellNolinear = 129,
        DISPID_JointIsSolutionRBD = 130,
        DISPID_JointPrototypesForSubset = 131,
        DISPID_JointReferenceAppliedBy = 132,
        DISPID_JointMobileAppliedBy = 133,
        DISPID_JointSolverElementType = 134,
        DISPID_JointReferenceBeamMaterialName = 135,
        DISPID_JointReferenceBeamRadius = 136,
        DISPID_JointMobileBeamMaterialName = 137,
        DISPID_JointMobileBeamRadius = 138,
        DISPID_JointUncheckRemotePointRelatedParameters = 139,
        DISPID_JointIsNolinearCellDataValid = 140,
        DISPID_JointDynamicFrictionCoefficient = 141,
        DISPID_JointFrictionRadius = 142
    } kDispId_Joint;

    [
      odl,
      uuid(A6B45128-4703-44CE-AC0D-943CC016550F),
      helpstring("IDSJointAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSJointAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x0000001a), propget, helpstring("property JointScopingType")]
        HRESULT JointScopingType([out, retval] DSJointScopingType* pVal);
        [id(0x0000001a), propput, helpstring("property JointScopingType")]
        HRESULT JointScopingType([in] DSJointScopingType pVal);
        [id(0x00000021), propget, helpstring("property ReferenceGeometryDefineBy")]
        HRESULT ReferenceGeometryDefineBy([out, retval] DSGeometryDefineByType* pVal);
        [id(0x00000021), propput, helpstring("property ReferenceGeometryDefineBy")]
        HRESULT ReferenceGeometryDefineBy([in] DSGeometryDefineByType pVal);
        [id(0x00000022), propget, helpstring("property ReferenceComponent")]
        HRESULT ReferenceComponent([out, retval] int* pVal);
        [id(0x00000022), propput, helpstring("property ReferenceComponent")]
        HRESULT ReferenceComponent([in] int pVal);
        [id(0x00000049), propget, helpstring("property ReferenceRemotePointSelection")]
        HRESULT ReferenceRemotePointSelection([out, retval] dsid* pVal);
        [id(0x00000049), propput, helpstring("property ReferenceRemotePointSelection")]
        HRESULT ReferenceRemotePointSelection([in] dsid pVal);
        [id(0x0000000c), propput, helpstring("property ReferenceSet")]
        HRESULT ReferenceSet([in] IDispatch* rhs);
        [id(0x00000017), propget, helpstring("property ReferenceBodyName")]
        HRESULT ReferenceBodyName([out, retval] BSTR* pVal);
        [id(0x0000000e), propget, helpstring("property ReferenceCoordinateSystemSelection")]
        HRESULT ReferenceCoordinateSystemSelection([out, retval] int* pVal);
        [id(0x0000000e), propput, helpstring("property ReferenceCoordinateSystemSelection")]
        HRESULT ReferenceCoordinateSystemSelection([in] int pVal);
        [id(0x00000025), propget, helpstring("property MobileGeometryDefineBy")]
        HRESULT MobileGeometryDefineBy([out, retval] DSGeometryDefineByType* pVal);
        [id(0x00000025), propput, helpstring("property MobileGeometryDefineBy")]
        HRESULT MobileGeometryDefineBy([in] DSGeometryDefineByType pVal);
        [id(0x00000023), propget, helpstring("property MobileComponent")]
        HRESULT MobileComponent([out, retval] int* pVal);
        [id(0x00000023), propput, helpstring("property MobileComponent")]
        HRESULT MobileComponent([in] int pVal);
        [id(0x0000004a), propget, helpstring("property MobileRemotePointSelection")]
        HRESULT MobileRemotePointSelection([out, retval] dsid* pVal);
        [id(0x0000004a), propput, helpstring("property MobileRemotePointSelection")]
        HRESULT MobileRemotePointSelection([in] dsid pVal);
        [id(0x0000000d), propput, helpstring("property MobileSet")]
        HRESULT MobileSet([in] IDispatch* rhs);
        [id(0x00000018), propget, helpstring("property MobileBodyName")]
        HRESULT MobileBodyName([out, retval] BSTR* pVal);
        [id(0x0000001d), propget, helpstring("property MobileCoordinateSystemSelection")]
        HRESULT MobileCoordinateSystemSelection([out, retval] int* pVal);
        [id(0x0000001d), propput, helpstring("property MobileCoordinateSystemSelection")]
        HRESULT MobileCoordinateSystemSelection([in] int pVal);
        [id(0x0000000a), propget, helpstring("property JointType")]
        HRESULT JointType([out, retval] DSJointType* pVal);
        [id(0x0000000a), propput, helpstring("property JointType")]
        HRESULT JointType([in] DSJointType pVal);
        [id(0x00000055), propget, helpstring("property JointBushingType")]
        HRESULT JointBushingType([out, retval] DSJointBushingType* pVal);
        [id(0x00000055), propput, helpstring("property JointBushingType")]
        HRESULT JointBushingType([in] DSJointBushingType pVal);
        [id(0x0000000b), propget, helpstring("property Suppressed")]
        HRESULT Suppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000000b), propput, helpstring("property Suppressed")]
        HRESULT Suppressed([in] VARIANT_BOOL pVal);
        [id(0x0000000f), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x00000019), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x00000010), propget, helpstring("property Prototypes")]
        HRESULT Prototypes([out, retval] VARIANT* pVal);
        [id(0x00000011), propget, helpstring("property TranslationXFixedOrFree")]
        HRESULT TranslationXFixedOrFree([out, retval] FixedOrFree* pVal);
        [id(0x00000011), propput, helpstring("property TranslationXFixedOrFree")]
        HRESULT TranslationXFixedOrFree([in] FixedOrFree pVal);
        [id(0x00000012), propget, helpstring("property TranslationYFixedOrFree")]
        HRESULT TranslationYFixedOrFree([out, retval] FixedOrFree* pVal);
        [id(0x00000012), propput, helpstring("property TranslationYFixedOrFree")]
        HRESULT TranslationYFixedOrFree([in] FixedOrFree pVal);
        [id(0x00000013), propget, helpstring("property TranslationZFixedOrFree")]
        HRESULT TranslationZFixedOrFree([out, retval] FixedOrFree* pVal);
        [id(0x00000013), propput, helpstring("property TranslationZFixedOrFree")]
        HRESULT TranslationZFixedOrFree([in] FixedOrFree pVal);
        [id(0x00000054), propget, helpstring("property RotationDOF")]
        HRESULT RotationDOF([out, retval] DSJointRotationDOFType* pVal);
        [id(0x00000054), propput, helpstring("property RotationDOF")]
        HRESULT RotationDOF([in] DSJointRotationDOFType pVal);
        [id(0x00000014), propget, helpstring("property RotationXFixedOrFree")]
        HRESULT RotationXFixedOrFree([out, retval] FixedOrFree* pVal);
        [id(0x00000015), propget, helpstring("property RotationYFixedOrFree")]
        HRESULT RotationYFixedOrFree([out, retval] FixedOrFree* pVal);
        [id(0x00000016), propget, helpstring("property RotationZFixedOrFree")]
        HRESULT RotationZFixedOrFree([out, retval] FixedOrFree* pVal);
        [id(0x0000002c), propget, helpstring("property JointStopsXMinType")]
        HRESULT JointStopsXMinType([out, retval] DSJointStopType* pVal);
        [id(0x0000002c), propput, helpstring("property JointStopsXMinType")]
        HRESULT JointStopsXMinType([in] DSJointStopType pVal);
        [id(0x0000002b), propget, helpstring("property JointStopsXMin")]
        HRESULT JointStopsXMin([out, retval] double* pVal);
        [id(0x0000002b), propput, helpstring("property JointStopsXMin")]
        HRESULT JointStopsXMin([in] double pVal);
        [id(0x0000002e), propget, helpstring("property JointStopsXMaxType")]
        HRESULT JointStopsXMaxType([out, retval] DSJointStopType* pVal);
        [id(0x0000002e), propput, helpstring("property JointStopsXMaxType")]
        HRESULT JointStopsXMaxType([in] DSJointStopType pVal);
        [id(0x0000002d), propget, helpstring("property JointStopsXMax")]
        HRESULT JointStopsXMax([out, retval] double* pVal);
        [id(0x0000002d), propput, helpstring("property JointStopsXMax")]
        HRESULT JointStopsXMax([in] double pVal);
        [id(0x00000031), propget, helpstring("property JointStopsYMinType")]
        HRESULT JointStopsYMinType([out, retval] DSJointStopType* pVal);
        [id(0x00000031), propput, helpstring("property JointStopsYMinType")]
        HRESULT JointStopsYMinType([in] DSJointStopType pVal);
        [id(0x00000030), propget, helpstring("property JointStopsYMin")]
        HRESULT JointStopsYMin([out, retval] double* pVal);
        [id(0x00000030), propput, helpstring("property JointStopsYMin")]
        HRESULT JointStopsYMin([in] double pVal);
        [id(0x00000033), propget, helpstring("property JointStopsYMaxType")]
        HRESULT JointStopsYMaxType([out, retval] DSJointStopType* pVal);
        [id(0x00000033), propput, helpstring("property JointStopsYMaxType")]
        HRESULT JointStopsYMaxType([in] DSJointStopType pVal);
        [id(0x00000032), propget, helpstring("property JointStopsYMax")]
        HRESULT JointStopsYMax([out, retval] double* pVal);
        [id(0x00000032), propput, helpstring("property JointStopsYMax")]
        HRESULT JointStopsYMax([in] double pVal);
        [id(0x00000036), propget, helpstring("property JointStopsZMinType")]
        HRESULT JointStopsZMinType([out, retval] DSJointStopType* pVal);
        [id(0x00000036), propput, helpstring("property JointStopsZMinType")]
        HRESULT JointStopsZMinType([in] DSJointStopType pVal);
        [id(0x00000035), propget, helpstring("property JointStopsZMin")]
        HRESULT JointStopsZMin([out, retval] double* pVal);
        [id(0x00000035), propput, helpstring("property JointStopsZMin")]
        HRESULT JointStopsZMin([in] double pVal);
        [id(0x00000038), propget, helpstring("property JointStopsZMaxType")]
        HRESULT JointStopsZMaxType([out, retval] DSJointStopType* pVal);
        [id(0x00000038), propput, helpstring("property JointStopsZMaxType")]
        HRESULT JointStopsZMaxType([in] DSJointStopType pVal);
        [id(0x00000037), propget, helpstring("property JointStopsZMax")]
        HRESULT JointStopsZMax([out, retval] double* pVal);
        [id(0x00000037), propput, helpstring("property JointStopsZMax")]
        HRESULT JointStopsZMax([in] double pVal);
        [id(0x0000003b), propget, helpstring("property JointStopsRXMinType")]
        HRESULT JointStopsRXMinType([out, retval] DSJointStopType* pVal);
        [id(0x0000003b), propput, helpstring("property JointStopsRXMinType")]
        HRESULT JointStopsRXMinType([in] DSJointStopType pVal);
        [id(0x0000003a), propget, helpstring("property JointStopsRXMin")]
        HRESULT JointStopsRXMin([out, retval] double* pVal);
        [id(0x0000003a), propput, helpstring("property JointStopsRXMin")]
        HRESULT JointStopsRXMin([in] double pVal);
        [id(0x0000003d), propget, helpstring("property JointStopsRXMaxType")]
        HRESULT JointStopsRXMaxType([out, retval] DSJointStopType* pVal);
        [id(0x0000003d), propput, helpstring("property JointStopsRXMaxType")]
        HRESULT JointStopsRXMaxType([in] DSJointStopType pVal);
        [id(0x0000003c), propget, helpstring("property JointStopsRXMax")]
        HRESULT JointStopsRXMax([out, retval] double* pVal);
        [id(0x0000003c), propput, helpstring("property JointStopsRXMax")]
        HRESULT JointStopsRXMax([in] double pVal);
        [id(0x00000040), propget, helpstring("property JointStopsRYMinType")]
        HRESULT JointStopsRYMinType([out, retval] DSJointStopType* pVal);
        [id(0x00000040), propput, helpstring("property JointStopsRYMinType")]
        HRESULT JointStopsRYMinType([in] DSJointStopType pVal);
        [id(0x0000003f), propget, helpstring("property JointStopsRYMin")]
        HRESULT JointStopsRYMin([out, retval] double* pVal);
        [id(0x0000003f), propput, helpstring("property JointStopsRYMin")]
        HRESULT JointStopsRYMin([in] double pVal);
        [id(0x00000042), propget, helpstring("property JointStopsRYMaxType")]
        HRESULT JointStopsRYMaxType([out, retval] DSJointStopType* pVal);
        [id(0x00000042), propput, helpstring("property JointStopsRYMaxType")]
        HRESULT JointStopsRYMaxType([in] DSJointStopType pVal);
        [id(0x00000041), propget, helpstring("property JointStopsRYMax")]
        HRESULT JointStopsRYMax([out, retval] double* pVal);
        [id(0x00000041), propput, helpstring("property JointStopsRYMax")]
        HRESULT JointStopsRYMax([in] double pVal);
        [id(0x00000045), propget, helpstring("property JointStopsRZMinType")]
        HRESULT JointStopsRZMinType([out, retval] DSJointStopType* pVal);
        [id(0x00000045), propput, helpstring("property JointStopsRZMinType")]
        HRESULT JointStopsRZMinType([in] DSJointStopType pVal);
        [id(0x00000044), propget, helpstring("property JointStopsRZMin")]
        HRESULT JointStopsRZMin([out, retval] double* pVal);
        [id(0x00000044), propput, helpstring("property JointStopsRZMin")]
        HRESULT JointStopsRZMin([in] double pVal);
        [id(0x00000047), propget, helpstring("property JointStopsRZMaxType")]
        HRESULT JointStopsRZMaxType([out, retval] DSJointStopType* pVal);
        [id(0x00000047), propput, helpstring("property JointStopsRZMaxType")]
        HRESULT JointStopsRZMaxType([in] DSJointStopType pVal);
        [id(0x00000046), propget, helpstring("property JointStopsRZMax")]
        HRESULT JointStopsRZMax([out, retval] double* pVal);
        [id(0x00000046), propput, helpstring("property JointStopsRZMax")]
        HRESULT JointStopsRZMax([in] double pVal);
        [id(0x00000048), propget, helpstring("property JointStopsRestitution")]
        HRESULT JointStopsRestitution([out, retval] double* pVal);
        [id(0x00000048), propput, helpstring("property JointStopsRestitution")]
        HRESULT JointStopsRestitution([in] double pVal);
        [id(0x00000056), propget, helpstring("property BushingStiffnessCoefficients")]
        HRESULT BushingStiffnessCoefficients([out, retval] DSJointBushingType* pVal);
        [id(0x00000056), propput, helpstring("property BushingStiffnessCoefficients")]
        HRESULT BushingStiffnessCoefficients([in] DSJointBushingType pVal);
        [id(0x00000057), propget, helpstring("property BushingDampingCoefficients")]
        HRESULT BushingDampingCoefficients([out, retval] DSJointBushingType* pVal);
        [id(0x00000057), propput, helpstring("property BushingDampingCoefficients")]
        HRESULT BushingDampingCoefficients([in] DSJointBushingType pVal);
        [id(0x00000050), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x00000051), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x0000001e), propget, helpstring("property ReferenceSetString")]
        HRESULT ReferenceSetString([out, retval] BSTR* pVal);
        [id(0x0000001f), propget, helpstring("property MobileSetString")]
        HRESULT MobileSetString([out, retval] BSTR* pVal);
        [id(0x00000020), helpstring("method FlipReferenceMobileSurfaces")]
        HRESULT FlipReferenceMobileSurfaces();
        [id(0x00000024), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000052), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00000026), propput, helpstring("property Capability")]
        HRESULT Capability([in] DSJointCapability pVal);
        [id(0x00000026), propget, helpstring("property Capability")]
        HRESULT Capability([out, retval] DSJointCapability* pVal);
        [id(0x00000027), propput, helpstring("property InitialPosition")]
        HRESULT InitialPosition([in] DSJointInitialPosition pVal);
        [id(0x00000027), propget, helpstring("property InitialPosition")]
        HRESULT InitialPosition([out, retval] DSJointInitialPosition* pVal);
        [id(0x00000028), propget, helpstring("property HasValidGeoSelection")]
        HRESULT HasValidGeoSelection([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000029), propget, helpstring("property ElementReference")]
        HRESULT ElementReference([out, retval] unsigned int* pulVal);
        [id(0x00000053), helpstring("method AddCommandEditor")]
        HRESULT AddCommandEditor([out, retval] IDispatch** ppVal);
        [id(0x0000002a), propget, helpstring("property CommandEditors")]
        HRESULT CommandEditors([out, retval] IDispatch** ppDisp);
        [id(0x0000004b), propget, helpstring("property UnitTypeByDispid")]
        HRESULT UnitTypeByDispid(
                        [in] int dispid, 
                        [out, retval] int* unitType);
        [id(0x0000004c), propget, helpstring("property UnitStringByDispid")]
        HRESULT UnitStringByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* unitString);
        [id(0x0000004d), propget, helpstring("property ParamNameByDispid")]
        HRESULT ParamNameByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* paramName);
        [id(0x00000064), propget, helpstring("property JointBehaviorReference")]
        HRESULT JointBehaviorReference([out, retval] DSLoadBehavior* pVal);
        [id(0x00000064), propput, helpstring("property JointBehaviorReference")]
        HRESULT JointBehaviorReference([in] DSLoadBehavior pVal);
        [id(0x00000065), propget, helpstring("property JointBehaviorMobile")]
        HRESULT JointBehaviorMobile([out, retval] DSLoadBehavior* pVal);
        [id(0x00000065), propput, helpstring("property JointBehaviorMobile")]
        HRESULT JointBehaviorMobile([in] DSLoadBehavior pVal);
        [id(0x00000066), propget, helpstring("property JointPinballSizeReference")]
        HRESULT JointPinballSizeReference([out, retval] double* dVal);
        [id(0x00000066), propput, helpstring("property JointPinballSizeReference")]
        HRESULT JointPinballSizeReference([in] double dVal);
        [id(0x00000067), propget, helpstring("property JointPinballSizeMobile")]
        HRESULT JointPinballSizeMobile([out, retval] double* dVal);
        [id(0x00000067), propput, helpstring("property JointPinballSizeMobile")]
        HRESULT JointPinballSizeMobile([in] double dVal);
        [id(0x00000058), propget, helpstring("property BushingStiffnessPerUnitX")]
        HRESULT BushingStiffnessPerUnitX(
                        [in] int iIndexVal, 
                        [out, retval] double* pVal);
        [id(0x00000058), propput, helpstring("property BushingStiffnessPerUnitX")]
        HRESULT BushingStiffnessPerUnitX(
                        [in] int iIndexVal, 
                        [in] double pVal);
        [id(0x00000059), propget, helpstring("property BushingStiffnessPerUnitY")]
        HRESULT BushingStiffnessPerUnitY(
                        [in] int iIndexVal, 
                        [out, retval] double* pVal);
        [id(0x00000059), propput, helpstring("property BushingStiffnessPerUnitY")]
        HRESULT BushingStiffnessPerUnitY(
                        [in] int iIndexVal, 
                        [in] double pVal);
        [id(0x0000005a), propget, helpstring("property BushingStiffnessPerUnitZ")]
        HRESULT BushingStiffnessPerUnitZ(
                        [in] int iIndexVal, 
                        [out, retval] double* pVal);
        [id(0x0000005a), propput, helpstring("property BushingStiffnessPerUnitZ")]
        HRESULT BushingStiffnessPerUnitZ(
                        [in] int iIndexVal, 
                        [in] double pVal);
        [id(0x0000005b), propget, helpstring("property BushingStiffnessPerThetaUnitX")]
        HRESULT BushingStiffnessPerThetaUnitX(
                        [in] int iIndexVal, 
                        [out, retval] double* pVal);
        [id(0x0000005b), propput, helpstring("property BushingStiffnessPerThetaUnitX")]
        HRESULT BushingStiffnessPerThetaUnitX(
                        [in] int iIndexVal, 
                        [in] double pVal);
        [id(0x0000005c), propget, helpstring("property BushingStiffnessPerThetaUnitY")]
        HRESULT BushingStiffnessPerThetaUnitY(
                        [in] int iIndexVal, 
                        [out, retval] double* pVal);
        [id(0x0000005c), propput, helpstring("property BushingStiffnessPerThetaUnitY")]
        HRESULT BushingStiffnessPerThetaUnitY(
                        [in] int iIndexVal, 
                        [in] double pVal);
        [id(0x0000005d), propget, helpstring("property BushingStiffnessPerThetaUnitZ")]
        HRESULT BushingStiffnessPerThetaUnitZ(
                        [in] int iIndexVal, 
                        [out, retval] double* pVal);
        [id(0x0000005d), propput, helpstring("property BushingStiffnessPerThetaUnitZ")]
        HRESULT BushingStiffnessPerThetaUnitZ(
                        [in] int iIndexVal, 
                        [in] double pVal);
        [id(0x0000005e), propget, helpstring("property BushingDampingPerUnitX")]
        HRESULT BushingDampingPerUnitX(
                        [in] int iIndexVal, 
                        [out, retval] double* pVal);
        [id(0x0000005e), propput, helpstring("property BushingDampingPerUnitX")]
        HRESULT BushingDampingPerUnitX(
                        [in] int iIndexVal, 
                        [in] double pVal);
        [id(0x0000005f), propget, helpstring("property BushingDampingPerUnitY")]
        HRESULT BushingDampingPerUnitY(
                        [in] int iIndexVal, 
                        [out, retval] double* pVal);
        [id(0x0000005f), propput, helpstring("property BushingDampingPerUnitY")]
        HRESULT BushingDampingPerUnitY(
                        [in] int iIndexVal, 
                        [in] double pVal);
        [id(0x00000060), propget, helpstring("property BushingDampingPerUnitZ")]
        HRESULT BushingDampingPerUnitZ(
                        [in] int iIndexVal, 
                        [out, retval] double* pVal);
        [id(0x00000060), propput, helpstring("property BushingDampingPerUnitZ")]
        HRESULT BushingDampingPerUnitZ(
                        [in] int iIndexVal, 
                        [in] double pVal);
        [id(0x00000061), propget, helpstring("property BushingDampingPerThetaUnitX")]
        HRESULT BushingDampingPerThetaUnitX(
                        [in] int iIndexVal, 
                        [out, retval] double* pVal);
        [id(0x00000061), propput, helpstring("property BushingDampingPerThetaUnitX")]
        HRESULT BushingDampingPerThetaUnitX(
                        [in] int iIndexVal, 
                        [in] double pVal);
        [id(0x00000062), propget, helpstring("property BushingDampingPerThetaUnitY")]
        HRESULT BushingDampingPerThetaUnitY(
                        [in] int iIndexVal, 
                        [out, retval] double* pVal);
        [id(0x00000062), propput, helpstring("property BushingDampingPerThetaUnitY")]
        HRESULT BushingDampingPerThetaUnitY(
                        [in] int iIndexVal, 
                        [in] double pVal);
        [id(0x00000063), propget, helpstring("property BushingDampingPerThetaUnitZ")]
        HRESULT BushingDampingPerThetaUnitZ(
                        [in] int iIndexVal, 
                        [out, retval] double* pVal);
        [id(0x00000063), propput, helpstring("property BushingDampingPerThetaUnitZ")]
        HRESULT BushingDampingPerThetaUnitZ(
                        [in] int iIndexVal, 
                        [in] double pVal);
        [id(0x00000068), propget, helpstring("property GeometryDefineBy")]
        HRESULT GeometryDefineBy([out, retval] DSGeometryDefineByType* pVal);
        [id(0x00000068), propput, helpstring("property GeometryDefineBy")]
        HRESULT GeometryDefineBy([in] DSGeometryDefineByType pVal);
        [id(0x00000069), propget, helpstring("property JointTorsStiffness")]
        HRESULT JointTorsStiffness([out, retval] double* pVal);
        [id(0x00000069), propput, helpstring("property JointTorsStiffness")]
        HRESULT JointTorsStiffness([in] double pVal);
        [id(0x0000006a), propget, helpstring("property JointTorsDamping")]
        HRESULT JointTorsDamping([out, retval] double* pVal);
        [id(0x0000006a), propput, helpstring("property JointTorsDamping")]
        HRESULT JointTorsDamping([in] double pVal);
        [id(0x0000006b), propget, helpstring("property IsEditableMatrixEntry")]
        HRESULT IsEditableMatrixEntry(
                        [in] int iMatrixType, 
                        [in] int iRow, 
                        [in] int iCol, 
                        [out, retval] VARIANT_BOOL* pVal);
        [id(0x0000006c), propget, helpstring("property IsApplicableMatrixEntry")]
        HRESULT IsApplicableMatrixEntry(
                        [in] int iMatrixType, 
                        [in] int iRow, 
                        [in] int iCol, 
                        [out, retval] VARIANT_BOOL* pVal);
        [id(0x0000006d), propget, helpstring("property MatrixEntry")]
        HRESULT MatrixEntry(
                        [in] int iMatrixType, 
                        [in] int iRow, 
                        [in] int iCol, 
                        [out, retval] double* pVal);
        [id(0x0000006d), propput, helpstring("property MatrixEntry")]
        HRESULT MatrixEntry(
                        [in] int iMatrixType, 
                        [in] int iRow, 
                        [in] int iCol, 
                        [in] double pVal);
        [id(0x0000006e), propget, helpstring("property DOFMask")]
        HRESULT DOFMask([out, retval] BSTR* pVal);
        [id(0x00000071), helpstring("method PromoteRemotePoint")]
        HRESULT PromoteRemotePoint();
        [id(0x00000072), propget, helpstring("property SuppressedForSolve")]
        HRESULT SuppressedForSolve([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000073), propget, helpstring("property ObjectsShareGeometriesList")]
        HRESULT ObjectsShareGeometriesList([out, retval] VARIANT* pVal);
        [id(0x00000074), propget, helpstring("property NumReference")]
        HRESULT NumReference([out, retval] int* pVal);
        [id(0x00000075), propget, helpstring("property NumMobile")]
        HRESULT NumMobile([out, retval] int* pVal);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00000076), propput, helpstring("property RefEdgeSurfaceSelection")]
        HRESULT RefEdgeSurfaceSelection([in] IDispatch* rhs);
        [id(0x00000077), propget, helpstring("property JointRadialGapType")]
        HRESULT JointRadialGapType([out, retval] DSJointStopType* pVal);
        [id(0x00000077), propput, helpstring("property JointRadialGapType")]
        HRESULT JointRadialGapType([in] DSJointStopType pVal);
        [id(0x00000078), propget, helpstring("property JointRadialGapInnerDiameter")]
        HRESULT JointRadialGapInnerDiameter([out, retval] double* pVal);
        [id(0x00000078), propput, helpstring("property JointRadialGapInnerDiameter")]
        HRESULT JointRadialGapInnerDiameter([in] double pVal);
        [id(0x00000079), propget, helpstring("property JointRadialGapOuterDiameter")]
        HRESULT JointRadialGapOuterDiameter([out, retval] double* pVal);
        [id(0x00000079), propput, helpstring("property JointRadialGapOuterDiameter")]
        HRESULT JointRadialGapOuterDiameter([in] double pVal);
        [id(0x0000007a), propget, helpstring("property JointRadialGapHeight")]
        HRESULT JointRadialGapHeight([out, retval] double* pVal);
        [id(0x0000007a), propput, helpstring("property JointRadialGapHeight")]
        HRESULT JointRadialGapHeight([in] double pVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x0000007b), propget, helpstring("property JointNonlinLongStiffness")]
        HRESULT JointNonlinLongStiffness([out, retval] VARIANT* pVal);
        [id(0x0000007b), propput, helpstring("property JointNonlinLongStiffness")]
        HRESULT JointNonlinLongStiffness([in] VARIANT pVal);
        [id(0x0000007c), propget, helpstring("method AnsBCType")]
        HRESULT AnsBCType([out, retval] int* pVal);
        [id(0x0000007d), propget, helpstring("property LoadVariation")]
        HRESULT LoadVariation([out, retval] IDispatch** ppDisp);
        [id(0x0000007e), propget, helpstring("property DataViewType ")]
        HRESULT DataViewType(
                        [in] int iAnsBCLVType, 
                        [out, retval] int* pVal);
        [id(0x0000007f), helpstring("property JointNonlinearCell")]
        HRESULT JointNonlinearCell(
                        [in] VARIANT bIsNonlinear, 
                        [in] int rowId, 
                        [in] int colId);
        [id(0x00000080), helpstring("property ActiveNonlinearCell")]
        HRESULT ActiveNonlinearCell(
                        [in] int rowId, 
                        [in] int colId);
        [id(0x00000081), propget, helpstring("property IsThisCellNolinear")]
        HRESULT IsThisCellNolinear(
                        [in] int rowId, 
                        [in] int colId, 
                        [out, retval] VARIANT_BOOL* pVal);
        [id(0x00000082), propget, helpstring("property IsSolutionRBD")]
        HRESULT IsSolutionRBD([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000083), propget, helpstring("property PrototypesForSubset")]
        HRESULT PrototypesForSubset(
                        [in] int subset, 
                        [out, retval] VARIANT* pVal);
        [id(0x00000084), propget, helpstring("property ReferenceAppliedBy")]
        HRESULT ReferenceAppliedBy([out, retval] DSRemoteApplicationType* pVal);
        [id(0x00000084), propput, helpstring("property ReferenceAppliedBy")]
        HRESULT ReferenceAppliedBy([in] DSRemoteApplicationType pVal);
        [id(0x00000085), propget, helpstring("property MobileAppliedBy")]
        HRESULT MobileAppliedBy([out, retval] DSRemoteApplicationType* pVal);
        [id(0x00000085), propput, helpstring("property MobileAppliedBy")]
        HRESULT MobileAppliedBy([in] DSRemoteApplicationType pVal);
        [id(0x00000086), propget, helpstring("property SolverElementType")]
        HRESULT SolverElementType([out, retval] DSJointSolverElementType* pVal);
        [id(0x00000086), propput, helpstring("property SolverElementType")]
        HRESULT SolverElementType([in] DSJointSolverElementType pVal);
        [id(0x00000087), propget, helpstring("property ReferenceBeamMaterialName")]
        HRESULT ReferenceBeamMaterialName([out, retval] BSTR* pVal);
        [id(0x00000087), propput, helpstring("property ReferenceBeamMaterialName")]
        HRESULT ReferenceBeamMaterialName([in] BSTR pVal);
        [id(0x00000089), propget, helpstring("property MobileBeamMaterialName")]
        HRESULT MobileBeamMaterialName([out, retval] BSTR* pVal);
        [id(0x00000089), propput, helpstring("property MobileBeamMaterialName")]
        HRESULT MobileBeamMaterialName([in] BSTR pVal);
        [id(0x0000008b), helpstring("method UncheckRemotePointRelatedParameters")]
        HRESULT UncheckRemotePointRelatedParameters();
        [id(0x0000008a), propget, helpstring("property MobileBeamRadius")]
        HRESULT MobileBeamRadius([out, retval] double* dVal);
        [id(0x0000008a), propput, helpstring("property MobileBeamRadius")]
        HRESULT MobileBeamRadius([in] double dVal);
        [id(0x00000088), propget, helpstring("property ReferenceBeamRadius")]
        HRESULT ReferenceBeamRadius([out, retval] double* dVal);
        [id(0x00000088), propput, helpstring("property ReferenceBeamRadius")]
        HRESULT ReferenceBeamRadius([in] double dVal);
        [id(0x0000008c), propget, helpstring("property IsNolinearCellDataValid")]
        HRESULT IsNolinearCellDataValid(
                        [in] int rowId, 
                        [in] int colId, 
                        [out, retval] VARIANT_BOOL* pVal);
        [id(0x0000008d), propget, helpstring("property JointDynamicFrictionCoefficient")]
        HRESULT JointDynamicFrictionCoefficient([out, retval] double* pVal);
        [id(0x0000008d), propput, helpstring("property JointDynamicFrictionCoefficient")]
        HRESULT JointDynamicFrictionCoefficient([in] double pVal);
        [id(0x0000008e), propget, helpstring("property JointFrictionRadius")]
        HRESULT JointFrictionRadius([out, retval] double* pVal);
        [id(0x0000008e), propput, helpstring("property JointFrictionRadius")]
        HRESULT JointFrictionRadius([in] double pVal);
    };

    typedef enum {
        kJointBushingTypeDiagonal = 0,
        kJointBushingTypeFullSymmetric = 1
    } DSJointBushingType;

    typedef enum {
        kJOINT_ROTDOFNONE = 0,
        kJOINT_ROTDOFX = 1,
        kJOINT_ROTDOFY = 2,
        kJOINT_ROTDOFZ = 3,
        kJOINT_ROTDOFXYZ = 4
    } DSJointRotationDOFType;

    typedef enum {
        kJointStopTypeNone = 0,
        kJointStopTypeStop = 1,
        kJointStopTypeLock = 2
    } DSJointStopType;

    typedef enum {
        kJointCapabilityRigid = 0,
        kJointCapabilityFlexible = 1
    } DSJointCapability;

    typedef enum {
        kJointInitialPositionUnchanged = 0,
        kJointInitialPositionOverride = 1
    } DSJointInitialPosition;

    typedef enum {
        kJointSolverElementTypeProgramControlled = 0,
        kJointSolverElementTypeJointElement = 1,
        kJointSolverElementTypeContactDirect = 2
    } DSJointSolverElementType;

    typedef enum {
        DISPID_JointConditionJointSelection = 10,
        DISPID_JointConditionDOF = 11,
        DISPID_JointConditionType = 12,
        DISPID_JointConditionData = 13,
        DISPID_JointConditionLoadVariation = 14,
        DISPID_JointConditionAnsBCType = 15,
        DISPID_JointConditionFunctionUnitSystem = 16,
        DISPID_JointConditionSuppressed = 17,
        DISPID_JointConditionComments = 18,
        DISPID_JointConditionFigures = 19,
        DISPID_JointConditionImages = 20,
        DISPID_JointConditionFunctionAngleMeasure = 21,
        DISPID_JointConditionFunctionAngularVelocityMeasure = 22,
        DISPID_JointConditionUnitTypeByDispid = 50,
        DISPID_JointConditionUnitStringByDispid = 51,
        DISPID_JointConditionParamNameByDispid = 52,
        DISPID_JointConditionReplaceJointSelectionInModelLevelClone = 53,
        DISPID_JointConditionFunctionNumberOfSegments = 54,
        DISPID_JointConditionLockAtLoadStep = 55,
        DISPID_JointConditionTableFittingMethod = 56,
        DISPID_JointConditionTableFFTCutoff = 57,
        DISPID_JointConditionAddComment = 100,
        DISPID_JointConditionAddFigure = 101,
        DISPID_JointConditionAddImage = 102,
        DISPID_JointConditionAddCommandEditor = 103,
        DISPID_JointConditionSetPropertyByStep = 104
    } kDispId_JointCondition;

    [
      odl,
      uuid(AB0CFA7B-AB92-48FE-9198-48C9652CF8C6),
      helpstring("IDSJointConditionAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSJointConditionAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x0000000a), propget, helpstring("property JointSelection")]
        HRESULT JointSelection([out, retval] int* pVal);
        [id(0x0000000a), propput, helpstring("property JointSelection")]
        HRESULT JointSelection([in] int pVal);
        [id(0x0000000b), propget, helpstring("property DOF")]
        HRESULT DOF([out, retval] DSKinematicDOF* pVal);
        [id(0x0000000b), propput, helpstring("property DOF")]
        HRESULT DOF([in] DSKinematicDOF pVal);
        [id(0x0000000c), propget, helpstring("property ConditionType")]
        HRESULT JointConditionType([out, retval] int* pVal);
        [id(0x0000000c), propput, helpstring("property ConditionType")]
        HRESULT JointConditionType([in] int pVal);
        [id(0x0000000d), propget, helpstring("property ConditionData")]
        HRESULT JointConditionData([out, retval] VARIANT* pVal);
        [id(0x0000000d), propput, helpstring("property ConditionData")]
        HRESULT JointConditionData([in] VARIANT pVal);
        [id(0x0000000e), propget, helpstring("property LoadVariation")]
        HRESULT LoadVariation([out, retval] IDispatch** ppDisp);
        [id(0x00000010), propput, helpstring("property FunctionUnitSystem")]
        HRESULT FunctionUnitSystem([in] VARIANT vtVal);
        [id(0x00000010), propget, helpstring("property FunctionUnitSystem")]
        HRESULT FunctionUnitSystem([out, retval] VARIANT* vtVal);
        [id(0x00000015), propput, helpstring("property FunctionAngleMeasure")]
        HRESULT FunctionAngleMeasure([in] VARIANT vtVal);
        [id(0x00000015), propget, helpstring("property FunctionAngleMeasure")]
        HRESULT FunctionAngleMeasure([out, retval] VARIANT* vtVal);
        [id(0x00000016), propput, helpstring("property FunctionAngularVelocityMeasure")]
        HRESULT FunctionAngularVelocityMeasure([in] VARIANT vtVal);
        [id(0x00000016), propget, helpstring("property FunctionAngularVelocityMeasure")]
        HRESULT FunctionAngularVelocityMeasure([out, retval] VARIANT* vtVal);
        [id(0x0000000f), propget, helpstring("method AnsBCType")]
        HRESULT AnsBCType([out, retval] int* pVal);
        [id(0x60020018), helpstring("method GetDisplayString")]
        HRESULT GetDisplayString(
                        [in] long dispid, 
                        [out, retval] BSTR* pVal);
        [id(0x60020019), propget, helpstring("Get whether the BC is active at a step")]
        HRESULT ActiveAtLoadStep(
                        [in] unsigned int stepNumber, 
                        [out, retval] VARIANT_BOOL* bActive);
        [id(0x60020019), propput, helpstring("Get whether the BC is active at a step")]
        HRESULT ActiveAtLoadStep(
                        [in] unsigned int stepNumber, 
                        [in] VARIANT_BOOL bActive);
        [id(0x00000011), propget, helpstring("property Suppressed")]
        HRESULT Suppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000011), propput, helpstring("property Suppressed")]
        HRESULT Suppressed([in] VARIANT_BOOL pVal);
        [id(0x6002001d), propget, helpstring("property DataViewType ")]
        HRESULT DataViewType(
                        [in] int iAnsBCLVType, 
                        [out, retval] int* pVal);
        [id(0x00000032), propget, helpstring("property UnitTypeByDispid")]
        HRESULT UnitTypeByDispid(
                        [in] int dispid, 
                        [out, retval] int* unitType);
        [id(0x00000033), propget, helpstring("property UnitStringByDispid")]
        HRESULT UnitStringByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* unitString);
        [id(0x00000012), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x00000013), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x00000014), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000064), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x00000065), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x00000066), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00000034), propget, helpstring("property ParamNameByDispid")]
        HRESULT ParamNameByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* paramName);
        [id(0x00000067), helpstring("method AddCommandEditor")]
        HRESULT AddCommandEditor([out, retval] IDispatch** ppVal);
        [id(0x00000036), propget, helpstring("property FunctionNumberOfSegments")]
        HRESULT FunctionNumberOfSegments([out, retval] int* pVal);
        [id(0x00000036), propput, helpstring("property FunctionNumberOfSegments")]
        HRESULT FunctionNumberOfSegments([in] int pVal);
        [id(0x00000037), propget, helpstring("property LockAtLoadStep")]
        HRESULT LockAtLoadStep([out, retval] unsigned int* pVal);
        [id(0x00000037), propput, helpstring("property LockAtLoadStep")]
        HRESULT LockAtLoadStep([in] unsigned int pVal);
        [id(0x00000038), propget, helpstring("property TableFittingMethod")]
        HRESULT TableFittingMethod([out, retval] DSTableFittingMethod* pVal);
        [id(0x00000038), propput, helpstring("property TableFittingMethod")]
        HRESULT TableFittingMethod([in] DSTableFittingMethod pVal);
        [id(0x00000039), propget, helpstring("property TableFFTCutoff")]
        HRESULT TableFFTCutoff([out, retval] double* pVal);
        [id(0x00000039), propput, helpstring("property TableFFTCutoff")]
        HRESULT TableFFTCutoff([in] double pVal);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x00000068), helpstring("method SetPropertyByStep")]
        HRESULT SetPropertyByStep(
                        [in] int step, 
                        [in] BSTR propertyName, 
                        [in] VARIANT newVal);
    };

    typedef enum {
        kTableFittingProgramControlled = 0,
        kTableFittingFFT = 1
    } DSTableFittingMethod;

    typedef enum {
        DISPID_SpringType = 10,
        DISPID_SpringSuppressed = 11,
        DISPID_SpringReferenceSet = 12,
        DISPID_SpringMobileSet = 13,
        DISPID_SpringReferenceCoordinateSystemSelection = 14,
        DISPID_SpringMobileCoordinateSystemSelection = 15,
        DISPID_SpringReferenceSetString = 16,
        DISPID_SpringMobileSetString = 17,
        DISPID_SpringReferenceBodyName = 18,
        DISPID_SpringMobileBodyName = 19,
        DISPID_SpringComments = 20,
        DISPID_SpringFigures = 21,
        DISPID_SpringPrototypes = 22,
        DISPID_SpringScopingType = 23,
        DISPID_SpringLongStiffness = 24,
        DISPID_SpringTorsStiffness = 25,
        DISPID_SpringLongDamping = 26,
        DISPID_SpringTorsDamping = 27,
        DISPID_SpringGeometryDefineBy = 28,
        DISPID_SpringReferenceComponent = 29,
        DISPID_SpringMobileComponent = 30,
        DISPID_SpringReferenceLocationX = 31,
        DISPID_SpringReferenceLocationY = 32,
        DISPID_SpringReferenceLocationZ = 33,
        DISPID_SpringReferenceLocationSelection = 34,
        DISPID_SpringMobileLocationX = 35,
        DISPID_SpringMobileLocationY = 36,
        DISPID_SpringMobileLocationZ = 37,
        DISPID_SpringMobileLocationSelection = 38,
        DISPID_SpringImages = 39,
        DISPID_SpringReferenceBehavior = 42,
        DISPID_SpringMobileBehavior = 43,
        DISPID_SpringReferencePinballSize = 44,
        DISPID_SpringMobilePinballSize = 45,
        DISPID_SpringElementReference = 46,
        DISPID_SpringCommandEditors = 47,
        DISPID_SpringPreloadType = 48,
        DISPID_SpringPreloadLoad = 49,
        DISPID_SpringPreloadTorque = 50,
        DISPID_SpringPreloadLength = 51,
        DISPID_SpringPreloadRotation = 52,
        DISPID_SpringReferenceRemotePointSelection = 53,
        DISPID_SpringMobileRemotePointSelection = 54,
        DISPID_SpringUnitTypeByDispid = 55,
        DISPID_SpringUnitStringByDispid = 56,
        DISPID_SpringParamNameByDispid = 57,
        DISPID_SpringReferenceGeometryDefineBy = 58,
        DISPID_SpringMobileGeometryDefineBy = 59,
        DISPID_SpringAddComment = 60,
        DISPID_SpringAddFigure = 61,
        DISPID_SpringAddImage = 62,
        DISPID_SpringAddCommandEditor = 63,
        DISPID_SpringFlipReferenceMobileSurfaces = 64,
        DISPID_SpringHidden = 65,
        DISPID_SpringBehavior = 68,
        DISPID_SpringLength = 69,
        DISPID_SpringSuppressedForSolve = 70,
        DISPID_SpringNumReference = 71,
        DISPID_SpringNumMobile = 72,
        DISPID_SpringNonlLongStiffness = 73,
        DISPID_SpringAnsBCType = 74,
        DISPID_SpringLoadVariation = 75,
        DISPID_SpringDataViewType = 76,
        DISPID_SpringReferenceAppliedBy = 77,
        DISPID_SpringMobileAppliedBy = 78,
        DISPID_SpringPrototypesForSubset = 79,
        DISPID_SpringReferenceBeamMaterialName = 80,
        DISPID_SpringReferenceBeamRadius = 81,
        DISPID_SpringMobileBeamMaterialName = 82,
        DISPID_SpringMobileBeamRadius = 83,
        DISPID_SpringUncheckRemotePointRelatedParameters = 84,
        DISPID_SpringMaterialName = 85,
        DISPID_SpringEDAMaterialTransferId = 86
    } kDispId_Spring;

    [
      odl,
      uuid(49FFD340-DA89-4550-8B5A-484F3C361380),
      helpstring("IDSSpringAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSSpringAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x0000000a), propget, helpstring("property SpringType")]
        HRESULT SpringType([out, retval] DSSpringType* pVal);
        [id(0x0000000a), propput, helpstring("property SpringType")]
        HRESULT SpringType([in] DSSpringType pVal);
        [id(0x00000017), propget, helpstring("property SpringScopingType")]
        HRESULT SpringScopingType([out, retval] DSSpringScopingType* pVal);
        [id(0x00000017), propput, helpstring("property SpringScopingType")]
        HRESULT SpringScopingType([in] DSSpringScopingType pVal);
        [id(0x0000001c), propget, helpstring("property GeometryDefineBy")]
        HRESULT GeometryDefineBy([out, retval] DSGeometryDefineByType* pVal);
        [id(0x0000001c), propput, helpstring("property GeometryDefineBy")]
        HRESULT GeometryDefineBy([in] DSGeometryDefineByType pVal);
        [id(0x0000001d), propget, helpstring("property ReferenceComponent")]
        HRESULT ReferenceComponent([out, retval] int* pVal);
        [id(0x0000001d), propput, helpstring("property ReferenceComponent")]
        HRESULT ReferenceComponent([in] int pVal);
        [id(0x00000035), propget, helpstring("property ReferenceRemotePointSelection")]
        HRESULT ReferenceRemotePointSelection([out, retval] dsid* pVal);
        [id(0x00000035), propput, helpstring("property ReferenceRemotePointSelection")]
        HRESULT ReferenceRemotePointSelection([in] dsid pVal);
        [id(0x0000000c), propput, helpstring("property ReferenceSet")]
        HRESULT ReferenceSet([in] IDispatch* rhs);
        [id(0x00000012), propget, helpstring("property ReferenceBodyName")]
        HRESULT ReferenceBodyName([out, retval] BSTR* pVal);
        [id(0x0000000e), propget, helpstring("property ReferenceCoordinateSystemSelection")]
        HRESULT ReferenceCoordinateSystemSelection([out, retval] int* pVal);
        [id(0x0000000e), propput, helpstring("property ReferenceCoordinateSystemSelection")]
        HRESULT ReferenceCoordinateSystemSelection([in] int pVal);
        [id(0x0000001f), propget, helpstring("property ReferenceLocationX")]
        HRESULT ReferenceLocationX([out, retval] double* pVal);
        [id(0x0000001f), propput, helpstring("property ReferenceLocationX")]
        HRESULT ReferenceLocationX([in] double pVal);
        [id(0x00000020), propget, helpstring("property ReferenceLocationY")]
        HRESULT ReferenceLocationY([out, retval] double* pVal);
        [id(0x00000020), propput, helpstring("property ReferenceLocationY")]
        HRESULT ReferenceLocationY([in] double pVal);
        [id(0x00000021), propget, helpstring("property ReferenceLocationZ")]
        HRESULT ReferenceLocationZ([out, retval] double* pVal);
        [id(0x00000021), propput, helpstring("property ReferenceLocationZ")]
        HRESULT ReferenceLocationZ([in] double pVal);
        [id(0x00000022), propput, helpstring("property ReferenceLocationSelection")]
        HRESULT ReferenceLocationSelection([in] IDispatch* rhs);
        [id(0x00000010), propget, helpstring("property ReferenceSetString")]
        HRESULT ReferenceSetString([out, retval] BSTR* pVal);
        [id(0x0000002a), propget, helpstring("property SpringReferenceBehavior")]
        HRESULT SpringReferenceBehavior([out, retval] DSLoadBehavior* pVal);
        [id(0x0000002a), propput, helpstring("property SpringReferenceBehavior")]
        HRESULT SpringReferenceBehavior([in] DSLoadBehavior pVal);
        [id(0x0000002c), propget, helpstring("property SpringReferencePinballSize")]
        HRESULT SpringReferencePinballSize([out, retval] double* dVal);
        [id(0x0000002c), propput, helpstring("property SpringReferencePinballSize")]
        HRESULT SpringReferencePinballSize([in] double dVal);
        [id(0x0000001e), propget, helpstring("property MobileComponent")]
        HRESULT MobileComponent([out, retval] int* pVal);
        [id(0x0000001e), propput, helpstring("property MobileComponent")]
        HRESULT MobileComponent([in] int pVal);
        [id(0x00000036), propget, helpstring("property MobileRemotePointSelection")]
        HRESULT MobileRemotePointSelection([out, retval] dsid* pVal);
        [id(0x00000036), propput, helpstring("property MobileRemotePointSelection")]
        HRESULT MobileRemotePointSelection([in] dsid pVal);
        [id(0x0000000d), propput, helpstring("property MobileSet")]
        HRESULT MobileSet([in] IDispatch* rhs);
        [id(0x00000013), propget, helpstring("property MobileBodyName")]
        HRESULT MobileBodyName([out, retval] BSTR* pVal);
        [id(0x0000000f), propget, helpstring("property MobileCoordinateSystemSelection")]
        HRESULT MobileCoordinateSystemSelection([out, retval] int* pVal);
        [id(0x0000000f), propput, helpstring("property MobileCoordinateSystemSelection")]
        HRESULT MobileCoordinateSystemSelection([in] int pVal);
        [id(0x00000023), propget, helpstring("property MobileLocationX")]
        HRESULT MobileLocationX([out, retval] double* pVal);
        [id(0x00000023), propput, helpstring("property MobileLocationX")]
        HRESULT MobileLocationX([in] double pVal);
        [id(0x00000024), propget, helpstring("property MobileLocationY")]
        HRESULT MobileLocationY([out, retval] double* pVal);
        [id(0x00000024), propput, helpstring("property MobileLocationY")]
        HRESULT MobileLocationY([in] double pVal);
        [id(0x00000025), propget, helpstring("property MobileLocationZ")]
        HRESULT MobileLocationZ([out, retval] double* pVal);
        [id(0x00000025), propput, helpstring("property MobileLocationZ")]
        HRESULT MobileLocationZ([in] double pVal);
        [id(0x00000026), propput, helpstring("property MobileLocationSelection")]
        HRESULT MobileLocationSelection([in] IDispatch* rhs);
        [id(0x00000011), propget, helpstring("property MobileSetString")]
        HRESULT MobileSetString([out, retval] BSTR* pVal);
        [id(0x0000002b), propget, helpstring("property SpringMobileBehavior")]
        HRESULT SpringMobileBehavior([out, retval] DSLoadBehavior* pVal);
        [id(0x0000002b), propput, helpstring("property SpringMobileBehavior")]
        HRESULT SpringMobileBehavior([in] DSLoadBehavior pVal);
        [id(0x0000002d), propget, helpstring("property SpringMobilePinballSize")]
        HRESULT SpringMobilePinballSize([out, retval] double* dVal);
        [id(0x0000002d), propput, helpstring("property SpringMobilePinballSize")]
        HRESULT SpringMobilePinballSize([in] double dVal);
        [id(0x00000014), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x00000015), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x00000016), propget, helpstring("property Prototypes")]
        HRESULT Prototypes([out, retval] VARIANT* pVal);
        [id(0x0000003c), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x0000003d), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x00000018), propget, helpstring("property SpringLongStiffness")]
        HRESULT SpringLongStiffness([out, retval] double* pVal);
        [id(0x00000018), propput, helpstring("property SpringLongStiffness")]
        HRESULT SpringLongStiffness([in] double pVal);
        [id(0x00000019), propget, helpstring("property SpringTorsStiffness")]
        HRESULT SpringTorsStiffness([out, retval] double* pVal);
        [id(0x00000019), propput, helpstring("property SpringTorsStiffness")]
        HRESULT SpringTorsStiffness([in] double pVal);
        [id(0x0000001a), propget, helpstring("property SpringLongDamping")]
        HRESULT SpringLongDamping([out, retval] double* pVal);
        [id(0x0000001a), propput, helpstring("property SpringLongDamping")]
        HRESULT SpringLongDamping([in] double pVal);
        [id(0x0000001b), propget, helpstring("property SpringTorsDamping")]
        HRESULT SpringTorsDamping([out, retval] double* pVal);
        [id(0x0000001b), propput, helpstring("property SpringTorsDamping")]
        HRESULT SpringTorsDamping([in] double pVal);
        [id(0x00000030), propget, helpstring("property SpringPreloadType")]
        HRESULT SpringPreloadType([out, retval] DSSpringPreloadType* pVal);
        [id(0x00000030), propput, helpstring("property SpringPreloadType")]
        HRESULT SpringPreloadType([in] DSSpringPreloadType pVal);
        [id(0x00000031), propget, helpstring("property SpringPreloadLoad")]
        HRESULT SpringPreloadLoad([out, retval] double* pVal);
        [id(0x00000031), propput, helpstring("property SpringPreloadLoad")]
        HRESULT SpringPreloadLoad([in] double pVal);
        [id(0x00000032), propget, helpstring("property SpringPreloadTorque")]
        HRESULT SpringPreloadTorque([out, retval] double* pVal);
        [id(0x00000032), propput, helpstring("property SpringPreloadTorque")]
        HRESULT SpringPreloadTorque([in] double pVal);
        [id(0x00000033), propget, helpstring("property SpringPreloadLength")]
        HRESULT SpringPreloadLength([out, retval] double* pVal);
        [id(0x00000033), propput, helpstring("property SpringPreloadLength")]
        HRESULT SpringPreloadLength([in] double pVal);
        [id(0x00000034), propget, helpstring("property SpringPreloadRotation")]
        HRESULT SpringPreloadRotation([out, retval] double* pVal);
        [id(0x00000034), propput, helpstring("property SpringPreloadRotation")]
        HRESULT SpringPreloadRotation([in] double pVal);
        [id(0x0000000b), propget, helpstring("property Suppressed")]
        HRESULT Suppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000000b), propput, helpstring("property Suppressed")]
        HRESULT Suppressed([in] VARIANT_BOOL pVal);
        [id(0x00000027), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x0000003e), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x0000002e), propget, helpstring("property ElementReference")]
        HRESULT ElementReference([out, retval] unsigned int* pulVal);
        [id(0x0000003f), helpstring("method AddCommandEditor")]
        HRESULT AddCommandEditor([out, retval] IDispatch** ppVal);
        [id(0x00000040), helpstring("method FlipReferenceMobileSurfaces")]
        HRESULT FlipReferenceMobileSurfaces();
        [id(0x0000002f), propget, helpstring("property CommandEditors")]
        HRESULT CommandEditors([out, retval] IDispatch** ppDisp);
        [id(0x00000037), propget, helpstring("property UnitTypeByDispid")]
        HRESULT UnitTypeByDispid(
                        [in] int dispid, 
                        [out, retval] int* unitType);
        [id(0x00000038), propget, helpstring("property UnitStringByDispid")]
        HRESULT UnitStringByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* unitString);
        [id(0x00000039), propget, helpstring("property ParamNameByDispid")]
        HRESULT ParamNameByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* paramName);
        [id(0x0000003a), propget, helpstring("property ReferenceGeometryDefineBy")]
        HRESULT ReferenceGeometryDefineBy([out, retval] DSGeometryDefineByType* pVal);
        [id(0x0000003a), propput, helpstring("property ReferenceGeometryDefineBy")]
        HRESULT ReferenceGeometryDefineBy([in] DSGeometryDefineByType pVal);
        [id(0x0000003b), propget, helpstring("property MobileGeometryDefineBy")]
        HRESULT MobileGeometryDefineBy([out, retval] DSGeometryDefineByType* pVal);
        [id(0x0000003b), propput, helpstring("property MobileGeometryDefineBy")]
        HRESULT MobileGeometryDefineBy([in] DSGeometryDefineByType pVal);
        [id(0x00000041), propget, helpstring("property Hidden")]
        HRESULT Hidden([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000041), propput, helpstring("property Hidden")]
        HRESULT Hidden([in] VARIANT_BOOL pVal);
        [id(0x00000044), propget, helpstring("property SpringBehavior")]
        HRESULT SpringBehavior([out, retval] DSSpringBehavior* pVal);
        [id(0x00000044), propput, helpstring("property SpringBehavior")]
        HRESULT SpringBehavior([in] DSSpringBehavior pVal);
        [id(0x00000045), propget, helpstring("property SpringLength")]
        HRESULT SpringLength([out, retval] double* pVal);
        [id(0x00000046), propget, helpstring("property SuppressedForSolve")]
        HRESULT SuppressedForSolve([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000047), propget, helpstring("property NumReference")]
        HRESULT NumReference([out, retval] int* pVal);
        [id(0x00000048), propget, helpstring("property NumMobile")]
        HRESULT NumMobile([out, retval] int* pVal);
        [id(0x00000055), propget, helpstring("property MaterialName")]
        HRESULT MaterialName([out, retval] BSTR* pVal);
        [id(0x00000055), propput, helpstring("property MaterialName")]
        HRESULT MaterialName([in] BSTR pVal);
        [id(0x00000056), propget, helpstring("property EDAMaterialTransferId")]
        HRESULT EDAMaterialTransferId([out, retval] BSTR* pVal);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00000049), propget, helpstring("property SpringNonlinLongStiffness")]
        HRESULT SpringNonlinLongStiffness([out, retval] VARIANT* pVal);
        [id(0x00000049), propput, helpstring("property SpringNonlinLongStiffness")]
        HRESULT SpringNonlinLongStiffness([in] VARIANT pVal);
        [id(0x0000004a), propget, helpstring("method AnsBCType")]
        HRESULT AnsBCType([out, retval] int* pVal);
        [id(0x0000004b), propget, helpstring("property LoadVariation")]
        HRESULT LoadVariation([out, retval] IDispatch** ppDisp);
        [id(0x0000004c), propget, helpstring("property DataViewType ")]
        HRESULT DataViewType(
                        [in] int iAnsBCLVType, 
                        [out, retval] int* pVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x0000004d), propget, helpstring("property ReferenceAppliedBy")]
        HRESULT ReferenceAppliedBy([out, retval] DSRemoteApplicationType* pVal);
        [id(0x0000004d), propput, helpstring("property ReferenceAppliedBy")]
        HRESULT ReferenceAppliedBy([in] DSRemoteApplicationType pVal);
        [id(0x0000004e), propget, helpstring("property MobileAppliedBy")]
        HRESULT MobileAppliedBy([out, retval] DSRemoteApplicationType* pVal);
        [id(0x0000004e), propput, helpstring("property MobileAppliedBy")]
        HRESULT MobileAppliedBy([in] DSRemoteApplicationType pVal);
        [id(0x0000004f), propget, helpstring("property PrototypesForSubset")]
        HRESULT PrototypesForSubset(
                        [in] int subset, 
                        [out, retval] VARIANT* pVal);
        [id(0x00000050), propget, helpstring("property ReferenceBeamMaterialName")]
        HRESULT ReferenceBeamMaterialName([out, retval] BSTR* pVal);
        [id(0x00000050), propput, helpstring("property ReferenceBeamMaterialName")]
        HRESULT ReferenceBeamMaterialName([in] BSTR pVal);
        [id(0x00000052), propget, helpstring("property MobileBeamMaterialName")]
        HRESULT MobileBeamMaterialName([out, retval] BSTR* pVal);
        [id(0x00000052), propput, helpstring("property MobileBeamMaterialName")]
        HRESULT MobileBeamMaterialName([in] BSTR pVal);
        [id(0x00000054), helpstring("method UncheckRemotePointRelatedParameters")]
        HRESULT UncheckRemotePointRelatedParameters();
        [id(0x00000051), propget, helpstring("property BeamRadius")]
        HRESULT ReferenceBeamRadius([out, retval] double* dVal);
        [id(0x00000051), propput, helpstring("property BeamRadius")]
        HRESULT ReferenceBeamRadius([in] double dVal);
        [id(0x00000053), propget, helpstring("property BeamRadius")]
        HRESULT MobileBeamRadius([out, retval] double* dVal);
        [id(0x00000053), propput, helpstring("property BeamRadius")]
        HRESULT MobileBeamRadius([in] double dVal);
    };

    typedef enum {
        kSPRING_Longitudinal = 0,
        kSPRING_Torsional = 1
    } DSSpringType;

    typedef enum {
        kSpringPreloadTypeNone = 0,
        kSpringPreloadTypeLoad = 1,
        kSpringPreloadTypeTorque = 2,
        kSpringPreloadTypeLength = 3,
        kSpringPreloadTypeRotation = 4
    } DSSpringPreloadType;

    typedef enum {
        kLinearSpring = 0,
        kNonLinearSpringCompressionOnly = 1,
        kNonLinearSpringTensionOnly = 2,
        kNonLinearSpring = 3
    } DSSpringBehavior;

    typedef enum {
        DISPID_BearingScopingType = 10,
        DISPID_BearingStiffnessK11 = 11,
        DISPID_BearingStiffnessK22 = 12,
        DISPID_BearingStiffnessK12 = 13,
        DISPID_BearingStiffnessK21 = 14,
        DISPID_BearingDampingC11 = 15,
        DISPID_BearingDampingC22 = 16,
        DISPID_BearingDampingC12 = 17,
        DISPID_BearingDampingC21 = 18,
        DISPID_BearingSuppressed = 19,
        DISPID_BearingRefGeometryDefineBy = 20,
        DISPID_BearingReferenceSet = 21,
        DISPID_BearingReferenceComponent = 22,
        DISPID_BearingRefRemotePointSelection = 23,
        DISPID_BearingReferenceBodyName = 24,
        DISPID_BearingRefCoordSystemSelection = 25,
        DISPID_BearingReferenceBehavior = 26,
        DISPID_BearingReferencePinballSize = 27,
        DISPID_BearingReferenceLocationX = 28,
        DISPID_BearingReferenceLocationY = 29,
        DISPID_BearingReferenceLocationZ = 30,
        DISPID_BearingMobGeometryDefineBy = 40,
        DISPID_BearingMobileSet = 41,
        DISPID_BearingMobileComponent = 42,
        DISPID_BearingMobRemotePointSelection = 43,
        DISPID_BearingMobileBodyName = 44,
        DISPID_BearingMobileBehavior = 45,
        DISPID_BearingMobilePinballSize = 46,
        DISPID_BearingMobCoordSystemSelection = 47,
        DISPID_BearingUnitTypeByDispid = 48,
        DISPID_BearingUnitStringByDispid = 49,
        DISPID_BearingParamNameByDispid = 50,
        DISPID_BearingMobileLocationX = 51,
        DISPID_BearingMobileLocationY = 52,
        DISPID_BearingMobileLocationZ = 53,
        DISPID_BearingPrototypes = 60,
        DISPID_BearingFlipReferenceMobileSurfaces = 61,
        DISPID_BearingComments = 70,
        DISPID_BearingFigures = 71,
        DISPID_BearingImages = 72,
        DISPID_BearingAddComment = 80,
        DISPID_BearingAddFigure = 81,
        DISPID_BearingAddImage = 82,
        DISPID_BearingAddCommandEditor = 83,
        DISPID_BearingReferenceRotationPlane = 84,
        DISPID_BearingAnsBCType = 87,
        DISPID_BearingLoadVariation = 88,
        DISPID_BearingDataViewType = 89,
        DISPID_BearingReferenceBeamMaterialName = 90,
        DISPID_BearingReferenceBeamRadius = 91,
        DISPID_BearingMobileBeamMaterialName = 92,
        DISPID_BearingMobileBeamRadius = 93,
        DISPID_BearingUncheckRemotePointRelatedParameters = 94
    } kDispId_Bearing;

    [
      odl,
      uuid(00233047-6B80-4026-9803-387332189198),
      helpstring("IDSBearingAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSBearingAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x0000000a), propget, helpstring("property ScopingType")]
        HRESULT ScopingType([out, retval] DSConnectionScopingType* pVal);
        [id(0x0000000a), propput, helpstring("property ScopingType")]
        HRESULT ScopingType([in] DSConnectionScopingType pVal);
        [id(0x0000000b), propget, helpstring("property StiffnessK11")]
        HRESULT StiffnessK11([out, retval] VARIANT* dVal);
        [id(0x0000000b), propput, helpstring("property StiffnessK11")]
        HRESULT StiffnessK11([in] VARIANT dVal);
        [id(0x0000000c), propget, helpstring("property StiffnessK22")]
        HRESULT StiffnessK22([out, retval] VARIANT* dVal);
        [id(0x0000000c), propput, helpstring("property StiffnessK22")]
        HRESULT StiffnessK22([in] VARIANT dVal);
        [id(0x0000000d), propget, helpstring("property StiffnessK12")]
        HRESULT StiffnessK12([out, retval] VARIANT* dVal);
        [id(0x0000000d), propput, helpstring("property StiffnessK12")]
        HRESULT StiffnessK12([in] VARIANT dVal);
        [id(0x0000000e), propget, helpstring("property StiffnessK21")]
        HRESULT StiffnessK21([out, retval] VARIANT* dVal);
        [id(0x0000000e), propput, helpstring("property StiffnessK21")]
        HRESULT StiffnessK21([in] VARIANT dVal);
        [id(0x0000000f), propget, helpstring("property DampingC11")]
        HRESULT DampingC11([out, retval] VARIANT* dVal);
        [id(0x0000000f), propput, helpstring("property DampingC11")]
        HRESULT DampingC11([in] VARIANT dVal);
        [id(0x00000010), propget, helpstring("property DampingC22")]
        HRESULT DampingC22([out, retval] VARIANT* dVal);
        [id(0x00000010), propput, helpstring("property DampingC22")]
        HRESULT DampingC22([in] VARIANT dVal);
        [id(0x00000011), propget, helpstring("property DampingC12")]
        HRESULT DampingC12([out, retval] VARIANT* dVal);
        [id(0x00000011), propput, helpstring("property DampingC12")]
        HRESULT DampingC12([in] VARIANT dVal);
        [id(0x00000012), propget, helpstring("property DampingC21")]
        HRESULT DampingC21([out, retval] VARIANT* dVal);
        [id(0x00000012), propput, helpstring("property DampingC21")]
        HRESULT DampingC21([in] VARIANT dVal);
        [id(0x00000013), propget, helpstring("property Suppressed")]
        HRESULT Suppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000013), propput, helpstring("property Suppressed")]
        HRESULT Suppressed([in] VARIANT_BOOL pVal);
        [id(0x00000014), propget, helpstring("property ReferenceGeometryDefineBy")]
        HRESULT ReferenceGeometryDefineBy([out, retval] DSGeometryDefineByType* pVal);
        [id(0x00000014), propput, helpstring("property ReferenceGeometryDefineBy")]
        HRESULT ReferenceGeometryDefineBy([in] DSGeometryDefineByType pVal);
        [id(0x00000015), propput, helpstring("property ReferenceSet")]
        HRESULT ReferenceSet([in] IDispatch* rhs);
        [id(0x00000016), propget, helpstring("property ReferenceComponent")]
        HRESULT ReferenceComponent([out, retval] int* pVal);
        [id(0x00000016), propput, helpstring("property ReferenceComponent")]
        HRESULT ReferenceComponent([in] int pVal);
        [id(0x00000017), propget, helpstring("property ReferenceRemotePointSelection")]
        HRESULT ReferenceRemotePointSelection([out, retval] dsid* pVal);
        [id(0x00000017), propput, helpstring("property ReferenceRemotePointSelection")]
        HRESULT ReferenceRemotePointSelection([in] dsid pVal);
        [id(0x00000018), propget, helpstring("property ReferenceBodyName")]
        HRESULT ReferenceBodyName([out, retval] BSTR* pVal);
        [id(0x00000019), propget, helpstring("property RefCoordinateSystemSelection")]
        HRESULT RefCoordinateSystemSelection([out, retval] int* pVal);
        [id(0x00000019), propput, helpstring("property RefCoordinateSystemSelection")]
        HRESULT RefCoordinateSystemSelection([in] int pVal);
        [id(0x00000054), propget, helpstring("property ReferenceRotationPlane")]
        HRESULT ReferenceRotationPlane([out, retval] DSRotationPlane* pVal);
        [id(0x00000054), propput, helpstring("property ReferenceRotationPlane")]
        HRESULT ReferenceRotationPlane([in] DSRotationPlane pVal);
        [id(0x0000001a), propget, helpstring("property ReferenceBehavior")]
        HRESULT ReferenceBehavior([out, retval] DSLoadBehavior* pVal);
        [id(0x0000001a), propput, helpstring("property ReferenceBehavior")]
        HRESULT ReferenceBehavior([in] DSLoadBehavior pVal);
        [id(0x0000001b), propget, helpstring("property ReferencePinballSize")]
        HRESULT ReferencePinballSize([out, retval] double* dVal);
        [id(0x0000001b), propput, helpstring("property ReferencePinballSize")]
        HRESULT ReferencePinballSize([in] double dVal);
        [id(0x00000028), propget, helpstring("property MobileGeometryDefineBy")]
        HRESULT MobileGeometryDefineBy([out, retval] DSGeometryDefineByType* pVal);
        [id(0x00000028), propput, helpstring("property MobileGeometryDefineBy")]
        HRESULT MobileGeometryDefineBy([in] DSGeometryDefineByType pVal);
        [id(0x00000029), propput, helpstring("property MobileSet")]
        HRESULT MobileSet([in] IDispatch* rhs);
        [id(0x0000002a), propget, helpstring("property MobileComponent")]
        HRESULT MobileComponent([out, retval] int* pVal);
        [id(0x0000002a), propput, helpstring("property MobileComponent")]
        HRESULT MobileComponent([in] int pVal);
        [id(0x0000002b), propget, helpstring("property MobileRemotePointSelection")]
        HRESULT MobileRemotePointSelection([out, retval] dsid* pVal);
        [id(0x0000002b), propput, helpstring("property MobileRemotePointSelection")]
        HRESULT MobileRemotePointSelection([in] dsid pVal);
        [id(0x0000002c), propget, helpstring("property MobileBodyName")]
        HRESULT MobileBodyName([out, retval] BSTR* pVal);
        [id(0x0000002f), propget, helpstring("property MobCoordinateSystemSelection")]
        HRESULT MobCoordinateSystemSelection([out, retval] int* pVal);
        [id(0x0000002f), propput, helpstring("property MobCoordinateSystemSelection")]
        HRESULT MobCoordinateSystemSelection([in] int pVal);
        [id(0x0000002d), propget, helpstring("property MobileBehavior")]
        HRESULT MobileBehavior([out, retval] DSLoadBehavior* pVal);
        [id(0x0000002d), propput, helpstring("property MobileBehavior")]
        HRESULT MobileBehavior([in] DSLoadBehavior pVal);
        [id(0x0000002e), propget, helpstring("property MobilePinballSize")]
        HRESULT MobilePinballSize([out, retval] double* dVal);
        [id(0x0000002e), propput, helpstring("property MobilePinballSize")]
        HRESULT MobilePinballSize([in] double dVal);
        [id(0x0000003c), propget, helpstring("property Prototypes")]
        HRESULT Prototypes([out, retval] VARIANT* pVal);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00000030), propget, helpstring("property UnitTypeByDispid")]
        HRESULT UnitTypeByDispid(
                        [in] int dispid, 
                        [out, retval] int* unitType);
        [id(0x00000031), propget, helpstring("property UnitStringByDispid")]
        HRESULT UnitStringByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* unitString);
        [id(0x00000032), propget, helpstring("property ParamNameByDispid")]
        HRESULT ParamNameByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* paramName);
        [id(0x00000046), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x00000047), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x00000050), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x00000051), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x00000048), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000052), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x0000001c), propget, helpstring("property ReferenceLocationX")]
        HRESULT ReferenceLocationX([out, retval] double* pVal);
        [id(0x0000001c), propput, helpstring("property ReferenceLocationX")]
        HRESULT ReferenceLocationX([in] double pVal);
        [id(0x0000001d), propget, helpstring("property ReferenceLocationY")]
        HRESULT ReferenceLocationY([out, retval] double* pVal);
        [id(0x0000001d), propput, helpstring("property ReferenceLocationY")]
        HRESULT ReferenceLocationY([in] double pVal);
        [id(0x0000001e), propget, helpstring("property ReferenceLocationZ")]
        HRESULT ReferenceLocationZ([out, retval] double* pVal);
        [id(0x0000001e), propput, helpstring("property ReferenceLocationZ")]
        HRESULT ReferenceLocationZ([in] double pVal);
        [id(0x00000033), propget, helpstring("property MobileLocationX")]
        HRESULT MobileLocationX([out, retval] double* pVal);
        [id(0x00000033), propput, helpstring("property MobileLocationX")]
        HRESULT MobileLocationX([in] double pVal);
        [id(0x00000034), propget, helpstring("property MobileLocationY")]
        HRESULT MobileLocationY([out, retval] double* pVal);
        [id(0x00000034), propput, helpstring("property MobileLocationY")]
        HRESULT MobileLocationY([in] double pVal);
        [id(0x00000035), propget, helpstring("property MobileLocationZ")]
        HRESULT MobileLocationZ([out, retval] double* pVal);
        [id(0x00000035), propput, helpstring("property MobileLocationZ")]
        HRESULT MobileLocationZ([in] double pVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x00000053), helpstring("method AddCommandEditor")]
        HRESULT AddCommandEditor([out, retval] IDispatch** ppVal);
        [id(0x00000057), propget, helpstring("method AnsBCType")]
        HRESULT AnsBCType([out, retval] int* pVal);
        [id(0x00000058), propget, helpstring("property LoadVariation")]
        HRESULT LoadVariation(
                        [in] int ComponentPosition, 
                        [out, retval] IDispatch** ppDisp);
        [id(0x00000059), propget, helpstring("property DataViewType ")]
        HRESULT DataViewType(
                        [in] int iAnsBCLVType, 
                        [out, retval] int* piDataViewType);
        [id(0x0000005a), propget, helpstring("property ReferenceBeamMaterialName")]
        HRESULT ReferenceBeamMaterialName([out, retval] BSTR* pVal);
        [id(0x0000005a), propput, helpstring("property ReferenceBeamMaterialName")]
        HRESULT ReferenceBeamMaterialName([in] BSTR pVal);
        [id(0x0000005c), propget, helpstring("property MobileBeamMaterialName")]
        HRESULT MobileBeamMaterialName([out, retval] BSTR* pVal);
        [id(0x0000005c), propput, helpstring("property MobileBeamMaterialName")]
        HRESULT MobileBeamMaterialName([in] BSTR pVal);
        [id(0x0000005e), helpstring("method UncheckRemotePointRelatedParameters")]
        HRESULT UncheckRemotePointRelatedParameters();
        [id(0x0000005b), propget, helpstring("property ReferenceBeamRadius")]
        HRESULT ReferenceBeamRadius([out, retval] double* dVal);
        [id(0x0000005b), propput, helpstring("property ReferenceBeamRadius")]
        HRESULT ReferenceBeamRadius([in] double dVal);
        [id(0x0000005d), propget, helpstring("property MobileBeamRadius")]
        HRESULT MobileBeamRadius([out, retval] double* dVal);
        [id(0x0000005d), propput, helpstring("property MobileBeamRadius")]
        HRESULT MobileBeamRadius([in] double dVal);
    };

    typedef enum {
        kRotationPlaneNone = 0,
        kRotationPlaneXY = 1,
        kRotationPlaneYZ = 2,
        kRotationPlaneXZ = 3
    } DSRotationPlane;

    typedef enum {
        DISPID_LoadGeometryNum = 10,
        DISPID_LoadGeometrySelection = 11,
        DISPID_LoadDefineBy = 12,
        DISPID_LoadType = 13,
        DISPID_LoadSupportType = 14,
        DISPID_LoadCoefficientType = 15,
        DISPID_LoadFixedSupportType = 16,
        DISPID_LoadCylSupportType = 17,
        DISPID_LoadHeatFlowType = 18,
        DISPID_LoadCoefficientValue = 19,
        DISPID_LoadConvectionName = 20,
        DISPID_LoadCoefficientFile = 21,
        DISPID_LoadTemperatureValue = 22,
        DISPID_LoadRadialFixedOrFree = 23,
        DISPID_LoadAxialFixedOrFree = 24,
        DISPID_LoadTangentialFixedOrFree = 25,
        DISPID_LoadMagnitude = 26,
        DISPID_LoadComponentX = 27,
        DISPID_LoadComponentY = 28,
        DISPID_LoadComponentZ = 29,
        DISPID_LoadReactionComponent = 30,
        DISPID_LoadReactionMagnitude = 31,
        DISPID_LoadReactionComponentX = 32,
        DISPID_LoadReactionComponentY = 33,
        DISPID_LoadReactionComponentZ = 34,
        DISPID_LoadLocationX = 35,
        DISPID_LoadLocationY = 36,
        DISPID_LoadLocationZ = 37,
        DISPID_LoadDirection = 38,
        DISPID_LoadUnitString = 39,
        DISPID_LoadPrototypes = 40,
        DISPID_LoadNodeCount = 41,
        DISPID_LoadNode = 42,
        DISPID_LoadValuesCount = 43,
        DISPID_LoadNodeCountForPart = 44,
        DISPID_LoadNodeForPart = 45,
        DISPID_LoadComment = 46,
        DISPID_LoadFigures = 47,
        DISPID_LoadSuppressed = 48,
        DISPID_LoadReaction = 49,
        DISPID_LoadAttachedNodes = 50,
        DISPID_LoadAddFigure = 51,
        DISPID_LoadAddComment = 52,
        DISPID_LoadCoefficientFileIndex = 53,
        DISPID_ObjectStateString = 54,
        DISPID_LoadElementCountForPart = 55,
        DISPID_LoadElementForPart = 56,
        DISPID_LoadUnitType = 57,
        DISPID_LoadHasValidGeoSelection = 58,
        DISPID_LoadTimeType = 59,
        DISPID_LoadPhaseAngle = 60,
        DISPID_LoadScopedCount = 61,
        DISPID_LoadScopedItemId = 62,
        DISPID_LoadScopedPartItemCount = 63,
        DISPID_LoadLocationSelection = 64,
        DISPID_LoadReactionMomentMagnitude = 65,
        DISPID_LoadReactionMomentComponentX = 66,
        DISPID_LoadReactionMomentComponentY = 67,
        DISPID_LoadReactionMomentComponentZ = 68,
        DISPID_LoadRequiredFrictionCoeff = 69,
        DISPID_LoadPreload = 70,
        DISPID_LoadPreadjustment = 71,
        DISPID_LoadAdjustmentReaction = 72,
        DISPID_LoadPreloadReaction = 73,
        DISPID_LoadWorkingLoadReaction = 74,
        DISPID_LoadBoltLoadDefineBy = 75,
        DISPID_LoadCoordinateSystemSelection = 76,
        DISPID_LoadComponentSelection = 77,
        DISPID_LoadGeometryDefineBy = 78,
        DISPID_LoadNumSequenceEntries = 79,
        DISPID_LoadSequenceBoltLoadDefineBy = 81,
        DISPID_LoadSequenceComponentX = 82,
        DISPID_LoadSequenceComponentY = 83,
        DISPID_LoadSequenceComponentZ = 84,
        DISPID_LoadSpringFirstEnd = 85,
        DISPID_LoadSpringSecondEnd = 86,
        DISPID_LoadSpringStiffness = 87,
        DISPID_LoadConvectionFromEDA = 88,
        DISPID_LoadHasReactions = 89,
        DISPID_LoadReactionUnitType = 90,
        DISPID_LoadRotationMagnitude = 91,
        DISPID_LoadRotationComponentX = 92,
        DISPID_LoadRotationComponentY = 93,
        DISPID_LoadRotationComponentZ = 94,
        DISPID_LoadSequenceRotationComponentX = 95,
        DISPID_LoadSequenceRotationComponentY = 96,
        DISPID_LoadSequenceRotationComponentZ = 97,
        DISPID_LoadBehavior = 98,
        DISPID_LoadReactionComponentByLoadStep = 99,
        DISPID_LoadReactionMagnitudeByLoadStep = 100,
        DISPID_LoadReactionMomentMagnitudeByLoadStep = 101,
        DISPID_LoadRemoveConvectionIfNotUsed = 102,
        DISPID_BoltLoadCoordinateSystemSelection = 104,
        DISPID_LoadRadiationType = 105,
        DISPID_LoadVariationType = 106,
        DISPID_LoadVariationData = 107,
        DISPID_LoadStringIDForType = 108,
        DISPID_TemperatureLoadType = 109,
        DISPID_TemperatureLoadData = 110,
        DISPID_LoadFoundationStiffness = 111,
        DISPID_LoadAddImage = 112,
        DISPID_LoadImages = 113,
        DISPID_LoadShellFaceEnum = 114,
        DISPID_LoadCFXTimeValue = 115,
        DISPID_LoadCFXTimeStep = 116,
        DISPID_LoadCFXResultsFile = 117,
        DISPID_LoadGeometryType = 118,
        DISPID_LoadScopedType = 119,
        DISPID_LoadAnsBCType = 120,
        DISPID_LoadLoadVariation = 121,
        DISPID_LoadFunctionUnitSystem = 122,
        DISPID_LoadUnitTypeByDispid = 123,
        DISPID_LoadUnitStringByDispid = 124,
        DISPID_LoadFluidDensity = 125,
        DISPID_LoadCFXCoefficient = 126,
        DISPID_LoadActiveAtLoadStep = 127,
        DISPID_LoadGetDisplayString = 128,
        DISPID_LoadDataViewType = 129,
        DISPID_LoadComponentActiveAtLoadStep = 130,
        DISPID_LoadParamNameByDispid = 131,
        DISPID_LoadBodyAssignedTo = 132,
        DISPID_LoadFunctionAngleMeasure = 133,
        DISPID_LoadFunctionAngularVelocityMeasure = 134,
        DISPID_LoadTabularDataIndependentVariable = 135,
        DISPID_LoadGraphControlsXAxis = 136,
        DISPID_LoadPrimaryCoordinateSysIDForXYZ = 137,
        DISPID_LoadRemotePointSelection = 138,
        DISPID_LoadGraphControlsDesiredIndVarValue = 139,
        DISPID_LoadGraphControlsDesiredTimeValue = 140,
        DISPID_LoadPinballSize = 141,
        DISPID_LoadMaterialImpedance = 142,
        DISPID_LoadReferenceVelocity = 143,
        DISPID_LoadReferencePressure = 144,
        DISPID_LoadFunctionRangeMin = 145,
        DISPID_LoadFunctionRangeMax = 146,
        DISPID_LoadFunctionNumberOfSegments = 147,
        DISPID_LoadLoadVariationDataType = 148,
        DISPID_LoadUseInternalNodes = 149,
        DISPID_ConvectionTableSelection = 150,
        DISPID_FluidFlow = 151,
        DISPID_LineBodySelection = 152,
        DISPID_LoadDetonationTime = 153,
        DISPID_LoadInstantBurnEnum = 154,
        DISPID_LoadPipeLoadingType = 155,
        DISPID_LoadFEFlagValue = 156,
        DISPID_LoadPerformPostCloneTasks = 157,
        DISPID_LoadFSIExportType = 158,
        DISPID_LoadPromoteRemotePoint = 159,
        DISPID_LoadConvectionMatrix = 160,
        DISPID_LoadRadiationEnclosureType = 161,
        DISPID_LoadFSIDataToTransfer = 162,
        DISPID_LoadUseAutoNormalStiffness = 163,
        DISPID_LoadNormalStiffness = 164,
        DISPID_LoadUpdateContactStiffness = 165,
        DISPID_LoadFollowerLoad = 166,
        DISPID_LoadCalculatedFromUnbalancedMass = 167,
        DISPID_LoadSynchronousRatio = 168,
        DISPID_LoadUnbalancedMassMagnitude = 169,
        DISPID_LoadUnbalancedForceMagnitude = 170,
        DISPID_LoadUnbalancedForceAxisLocationX = 171,
        DISPID_LoadUnbalancedForceAxisLocationY = 172,
        DISPID_LoadUnbalancedForceAxisLocationZ = 173,
        DISPID_LoadUnbalancedForceAxisComponentX = 174,
        DISPID_LoadUnbalancedForceAxisComponentY = 175,
        DISPID_LoadUnbalancedForceAxisComponentZ = 176,
        DISPID_LoadUnbalancedForceRotatingRadius = 177,
        DISPID_LoadUnbalancedForceHitPointLocationX = 178,
        DISPID_LoadUnbalancedForceHitPointLocationY = 179,
        DISPID_LoadUnbalancedForceHitPointLocationZ = 180,
        DISPID_LoadBodyScopingDefineBy = 181,
        DISPID_LoadBodyScopingComponentSelection = 182,
        DISPID_LoadBodyScopingGeometrySelection = 183,
        DISPID_LoadUnbalancedForceHitPointNodeId = 184,
        DISPID_LoadPhaseAngleNew = 185,
        DISPID_LoadPhaseAngleX = 186,
        DISPID_LoadPhaseAngleY = 187,
        DISPID_LoadPhaseAngleZ = 188,
        DISPID_LoadMagnitudeImag = 189,
        DISPID_LoadComponentXImag = 190,
        DISPID_LoadComponentYImag = 191,
        DISPID_LoadComponentZImag = 192,
        DISPID_LoadAmplitduePhaseAtFreq = 193,
        DISPID_LoadUnbalancedForceHitPointSelectionType = 194,
        DISPID_LoadUnbalancedForceHitPointRemotePointSelection = 195,
        DISPID_LoadIsBaseExcitation = 196,
        DISPID_LoadIsAbsoluteResult = 197,
        DISPID_LoadBoundaryConditionSelection = 198,
        DISPID_LoadBaseExcitationDirection = 199,
        DISPID_LoadBeamMaterialName = 200,
        DISPID_LoadBeamRadius = 201,
        DISPID_LoadUncheckRemotePointRelatedParameters = 202,
        DISPID_LoadAppliedBy = 203,
        DISPID_LoadReadOnly = 204,
        DISPID_LoadSetPropertyByStep = 205
    } kDispId_Load;

    [
      odl,
      uuid(059848E7-3CD6-4603-8848-8DF1D2DECEC7),
      helpstring("IDSLoadAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSLoadAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x0000000a), propget, helpstring("property GeometryNum")]
        HRESULT GeometryNum([out, retval] int* pVal);
        [id(0x0000004e), propget, helpstring("property GeometryDefineBy")]
        HRESULT GeometryDefineBy([out, retval] DSGeometryDefineByType* pVal);
        [id(0x0000004e), propput, helpstring("property GeometryDefineBy")]
        HRESULT GeometryDefineBy([in] DSGeometryDefineByType pVal);
        [id(0x0000004d), propget, helpstring("property ComponentSelection")]
        HRESULT ComponentSelection([out, retval] int* pVal);
        [id(0x0000004d), propput, helpstring("property ComponentSelection")]
        HRESULT ComponentSelection([in] int pVal);
        [id(0x0000008a), propget, helpstring("property RemotePointSelection")]
        HRESULT RemotePointSelection([out, retval] dsid* pVal);
        [id(0x0000008a), propput, helpstring("property RemotePointSelection")]
        HRESULT RemotePointSelection([in] dsid pVal);
        [id(0x0000000b), propput, helpstring("property GeometrySelection")]
        HRESULT GeometrySelection([in] IDispatch* rhs);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x0000003b), propget, helpstring("property TimeType")]
        HRESULT TimeType([out, retval] DSTimeType* pTimeType);
        [id(0x0000003b), propput, helpstring("property TimeType")]
        HRESULT TimeType([in] DSTimeType pTimeType);
        [id(0x0000000c), propget, helpstring("property DefineBy")]
        HRESULT DefineBy([out, retval] DefineByType* pVal);
        [id(0x0000000c), propput, helpstring("property DefineBy")]
        HRESULT DefineBy([in] DefineByType pVal);
        [id(0x0000000d), propget, helpstring("property LoadType")]
        HRESULT loadType([out, retval] unsigned int* pVal);
        [id(0x0000000e), propget, helpstring("property SupportType")]
        HRESULT SupportType([out, retval] unsigned int* pVal);
        [id(0x0000000f), propget, helpstring("property CoefficientType")]
        HRESULT CoefficientType([out, retval] eLoadVariationSubOption* pVal);
        [id(0x0000000f), propput, helpstring("property CoefficientType")]
        HRESULT CoefficientType([in] eLoadVariationSubOption pVal);
        [id(0x00000096), propget, helpstring("property ConvectionTableSelection")]
        HRESULT ConvectionTableSelection([out, retval] DSConvectionTableSelection* pVal);
        [id(0x00000096), propput, helpstring("property ConvectionTableSelection")]
        HRESULT ConvectionTableSelection([in] DSConvectionTableSelection pVal);
        [id(0x00000010), propget, helpstring("property FixedSupportType")]
        HRESULT FixedSupportType([out, retval] DSFixedSupportType* pVal);
        [id(0x00000010), propput, helpstring("property FixedSupportType")]
        HRESULT FixedSupportType([in] DSFixedSupportType pVal);
        [id(0x00000011), propget, helpstring("property CylSupportType")]
        HRESULT CylSupportType([out, retval] DSCylSupportType* pVal);
        [id(0x00000011), propput, helpstring("property CylSupportType")]
        HRESULT CylSupportType([in] DSCylSupportType pVal);
        [id(0x00000012), propget, helpstring("property HeatFlowType")]
        HRESULT HeatFlowType([out, retval] DSHeatFlowType* pVal);
        [id(0x00000012), propput, helpstring("property HeatFlowType")]
        HRESULT HeatFlowType([in] DSHeatFlowType pVal);
        [id(0x00000069), propget, helpstring("property RadiationType")]
        HRESULT RadiationType([out, retval] int* pVal);
        [id(0x00000069), propput, helpstring("property RadiationType")]
        HRESULT RadiationType([in] int pVal);
        [id(0x0000006a), propget, helpstring("property VariationType")]
        HRESULT VariationType([out, retval] kLoadVariationType* pVal);
        [id(0x0000006a), propput, helpstring("property VariationType")]
        HRESULT VariationType([in] kLoadVariationType pVal);
        [id(0x00000013), propget, helpstring("property CoefficientValue")]
        HRESULT CoefficientValue([out, retval] VARIANT* pVal);
        [id(0x00000013), propput, helpstring("property CoefficientValue")]
        HRESULT CoefficientValue([in] VARIANT pVal);
        [id(0x00000014), propget, helpstring("property ConvectionName")]
        HRESULT ConvectionName([out, retval] BSTR* pVal);
        [id(0x00000015), propget, helpstring("property CoefficientFile")]
        HRESULT CoefficientFile([out, retval] IDispatch** ppDisp);
        [id(0x00000015), propput, helpstring("property CoefficientFile")]
        HRESULT CoefficientFile([in] IDispatch* ppDisp);
        [id(0x0000006b), propget, helpstring("property VariationData")]
        HRESULT VariationData([out, retval] IDispatch** ppDisp);
        [id(0x0000006b), propput, helpstring("property VariationData")]
        HRESULT VariationData([in] IDispatch* ppDisp);
        [id(0x00000035), propget, helpstring("property CoefficientFileIndex")]
        HRESULT CoefficientFileIndex([out, retval] int* pVal);
        [id(0x0000006d), propget, helpstring("property TemperatureLoadType")]
        HRESULT TemperatureLoadType([out, retval] kLoadVariationType* pVal);
        [id(0x0000006d), propput, helpstring("property TemperatureLoadType")]
        HRESULT TemperatureLoadType([in] kLoadVariationType pVal);
        [id(0x0000006e), propget, helpstring("property TemperatureLoadData")]
        HRESULT TemperatureLoadData([out, retval] IDispatch** ppDisp);
        [id(0x0000006e), propput, helpstring("property TemperatureLoadData")]
        HRESULT TemperatureLoadData([in] IDispatch* ppDisp);
        [id(0x00000016), propget, helpstring("property TemperatureValue")]
        HRESULT TemperatureValue([out, retval] VARIANT* pVal);
        [id(0x00000016), propput, helpstring("property TemperatureValue")]
        HRESULT TemperatureValue([in] VARIANT pVal);
        [id(0x0000007e), propget, helpstring("property CFXCoefficient")]
        HRESULT CFXCoefficient([out, retval] VARIANT* pVal);
        [id(0x0000007e), propput, helpstring("property CFXCoefficient")]
        HRESULT CFXCoefficient([in] VARIANT pVal);
        [id(0x00000073), propget, helpstring("property CFXTimeValue")]
        HRESULT CFXTimeValue([out, retval] double* pVal);
        [id(0x00000074), propget, helpstring("property CFXTimeStep")]
        HRESULT CFXTimeStep([out, retval] int* pVal);
        [id(0x00000075), propget, helpstring("property CFXResultsFile")]
        HRESULT CFXResultsFile([out, retval] BSTR* pVal);
        [id(0x00000097), propget, helpstring("property FluidFlow")]
        HRESULT HasFluidFlow([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000097), propput, helpstring("property FluidFlow")]
        HRESULT HasFluidFlow([in] VARIANT_BOOL pVal);
        [id(0x00000098), propget, helpstring("property LineBodySelection")]
        HRESULT LineBodySelection([out, retval] int* pVal);
        [id(0x00000098), propput, helpstring("property LineBodySelection")]
        HRESULT LineBodySelection([in] int pVal);
        [id(0x00000017), propget, helpstring("property RadialFixedOrFree")]
        HRESULT RadialFixedOrFree([out, retval] FixedOrFree* pVal);
        [id(0x00000017), propput, helpstring("property RadialFixedOrFree")]
        HRESULT RadialFixedOrFree([in] FixedOrFree pVal);
        [id(0x00000018), propget, helpstring("property AxialFixedOrFree")]
        HRESULT AxialFixedOrFree([out, retval] FixedOrFree* pVal);
        [id(0x00000018), propput, helpstring("property AxialFixedOrFree")]
        HRESULT AxialFixedOrFree([in] FixedOrFree pVal);
        [id(0x00000019), propget, helpstring("property TangentialFixedOrFree")]
        HRESULT TangentialFixedOrFree([out, retval] FixedOrFree* pVal);
        [id(0x00000019), propput, helpstring("property TangentialFixedOrFree")]
        HRESULT TangentialFixedOrFree([in] FixedOrFree pVal);
        [id(0x0000001a), propget, helpstring("property Magnitude")]
        HRESULT Magnitude([out, retval] VARIANT* pVal);
        [id(0x0000001a), propput, helpstring("property Magnitude")]
        HRESULT Magnitude([in] VARIANT pVal);
        [id(0x0000004c), propget, helpstring("property CoordinateSystemSelection")]
        HRESULT CoordinateSystemSelection([out, retval] int* pVal);
        [id(0x0000004c), propput, helpstring("property CoordinateSystemSelection")]
        HRESULT CoordinateSystemSelection([in] int pVal);
        [id(0x0000001b), propget, helpstring("property ComponentX")]
        HRESULT ComponentX([out, retval] VARIANT* pVal);
        [id(0x0000001b), propput, helpstring("property ComponentX")]
        HRESULT ComponentX([in] VARIANT pVal);
        [id(0x0000001c), propget, helpstring("property ComponentY")]
        HRESULT ComponentY([out, retval] VARIANT* pVal);
        [id(0x0000001c), propput, helpstring("property ComponentY")]
        HRESULT ComponentY([in] VARIANT pVal);
        [id(0x0000001d), propget, helpstring("property ComponentZ")]
        HRESULT ComponentZ([out, retval] VARIANT* pVal);
        [id(0x0000001d), propput, helpstring("property ComponentZ")]
        HRESULT ComponentZ([in] VARIANT pVal);
        [id(0x0000003c), propget, helpstring("property PhaseAngle")]
        HRESULT PhaseAngle([out, retval] double* pVal);
        [id(0x0000003c), propput, helpstring("property PhaseAngle")]
        HRESULT PhaseAngle([in] double pVal);
        [id(0x0000001e), propget, helpstring("property ReactionComponent")]
        HRESULT ReactionComponent(
                        int index, 
                        [out, retval] double* pVal);
        [id(0x0000001f), propget, helpstring("property ReactionMagnitude")]
        HRESULT ReactionMagnitude([out, retval] double* pVal);
        [id(0x00000020), propget, helpstring("property ReactionComponentX")]
        HRESULT ReactionComponentX([out, retval] double* pVal);
        [id(0x00000021), propget, helpstring("property ReactionComponentY")]
        HRESULT ReactionComponentY([out, retval] double* pVal);
        [id(0x00000022), propget, helpstring("property ReactionComponentZ")]
        HRESULT ReactionComponentZ([out, retval] double* pVal);
        [id(0x00000041), propget, helpstring("property ReactionMomentMagnitude")]
        HRESULT ReactionMomentMagnitude([out, retval] double* pVal);
        [id(0x00000042), propget, helpstring("property ReactionMomentComponentX")]
        HRESULT ReactionMomentComponentX([out, retval] double* pVal);
        [id(0x00000043), propget, helpstring("property ReactionMomentComponentY")]
        HRESULT ReactionMomentComponentY([out, retval] double* pVal);
        [id(0x00000044), propget, helpstring("property ReactionMomentComponentZ")]
        HRESULT ReactionMomentComponentZ([out, retval] double* pVal);
        [id(0x0000005b), propget, helpstring("property RotationMagnitude")]
        HRESULT RotationMagnitude([out, retval] double* pVal);
        [id(0x0000005b), propput, helpstring("property RotationMagnitude")]
        HRESULT RotationMagnitude([in] double pVal);
        [id(0x0000005c), propget, helpstring("property RotationComponentX")]
        HRESULT RotationComponentX([out, retval] VARIANT* pVal);
        [id(0x0000005c), propput, helpstring("property RotationComponentX")]
        HRESULT RotationComponentX([in] VARIANT pVal);
        [id(0x0000005d), propget, helpstring("property RotationComponentY")]
        HRESULT RotationComponentY([out, retval] VARIANT* pVal);
        [id(0x0000005d), propput, helpstring("property RotationComponentY")]
        HRESULT RotationComponentY([in] VARIANT pVal);
        [id(0x0000005e), propget, helpstring("property RotationComponentZ")]
        HRESULT RotationComponentZ([out, retval] VARIANT* pVal);
        [id(0x0000005e), propput, helpstring("property RotationComponentZ")]
        HRESULT RotationComponentZ([in] VARIANT pVal);
        [id(0x0000007a), propget, helpstring("property FunctionUnitSystem")]
        HRESULT FunctionUnitSystem([out, retval] VARIANT* vtVal);
        [id(0x0000007a), propput, helpstring("property FunctionUnitSystem")]
        HRESULT FunctionUnitSystem([in] VARIANT vtVal);
        [id(0x00000085), propget, helpstring("property FunctionAngleMeasure")]
        HRESULT FunctionAngleMeasure([out, retval] VARIANT* vtVal);
        [id(0x00000085), propput, helpstring("property FunctionAngleMeasure")]
        HRESULT FunctionAngleMeasure([in] VARIANT vtVal);
        [id(0x00000086), propget, helpstring("property FunctionAngularVelocityMeasure")]
        HRESULT FunctionAngularVelocityMeasure([out, retval] VARIANT* vtVal);
        [id(0x00000086), propput, helpstring("property FunctionAngularVelocityMeasure")]
        HRESULT FunctionAngularVelocityMeasure([in] VARIANT vtVal);
        [id(0x00000026), propput, helpstring("property Direction")]
        HRESULT Direction([in] IDispatch* rhs);
        [id(0x00000023), propget, helpstring("property LocationX")]
        HRESULT LocationX([out, retval] double* pVal);
        [id(0x00000023), propput, helpstring("property LocationX")]
        HRESULT LocationX([in] double pVal);
        [id(0x00000024), propget, helpstring("property LocationY")]
        HRESULT LocationY([out, retval] double* pVal);
        [id(0x00000024), propput, helpstring("property LocationY")]
        HRESULT LocationY([in] double pVal);
        [id(0x00000025), propget, helpstring("property LocationZ")]
        HRESULT LocationZ([out, retval] double* pVal);
        [id(0x00000025), propput, helpstring("property LocationZ")]
        HRESULT LocationZ([in] double pVal);
        [id(0x00000040), propput, helpstring("property LocationSelection")]
        HRESULT LocationSelection([in] IDispatch* rhs);
        [id(0x0000008e), propget, helpstring("property MaterialImpedance")]
        HRESULT MaterialImpedance([out, retval] double* dVal);
        [id(0x0000008e), propput, helpstring("property MaterialImpedance")]
        HRESULT MaterialImpedance([in] double dVal);
        [id(0x0000008f), propget, helpstring("property ReferenceVelocity")]
        HRESULT ReferenceVelocity([out, retval] double* dVal);
        [id(0x0000008f), propput, helpstring("property ReferenceVelocity")]
        HRESULT ReferenceVelocity([in] double dVal);
        [id(0x00000090), propget, helpstring("property ReferencePressure")]
        HRESULT ReferencePressure([out, retval] double* dVal);
        [id(0x00000090), propput, helpstring("property ReferencePressure")]
        HRESULT ReferencePressure([in] double dVal);
        [id(0x00000027), propget, helpstring("property UnitString")]
        HRESULT unitString(
                        [in, optional, defaultvalue(1)] int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00000029), propget, helpstring("property NodeCount (obsolete)")]
        HRESULT NodeCount([out, retval] VARIANT* pVal);
        [id(0x0000002a), propget, helpstring("property Node (obsolete)")]
        HRESULT Node(
                        int index, 
                        [out, retval] VARIANT* pVal);
        [id(0x0000002b), propget, helpstring("Returns the number of values contained by this load item")]
        HRESULT ValuesCount([out, retval] VARIANT* pVal);
        [id(0x0000002c), propget, helpstring("property NodeCountForPart")]
        HRESULT NodeCountForPart(
                        int partIndex, 
                        [out, retval] VARIANT* pVal);
        [id(0x0000002d), propget, helpstring("property NodeForPart")]
        HRESULT NodeForPart(
                        int partIndex, 
                        int index, 
                        [out, retval] VARIANT* pVal);
        [id(0x00000028), propget, helpstring("property Prototypes")]
        HRESULT Prototypes([out, retval] VARIANT* pVal);
        [id(0x00000034), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x0000002e), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x0000002f), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x00000033), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x00000030), propget, helpstring("property Suppressed")]
        HRESULT Suppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000030), propput, helpstring("property Suppressed")]
        HRESULT Suppressed([in] VARIANT_BOOL pVal);
        [id(0x00000031), propget, helpstring("property Reaction")]
        HRESULT Reaction([out, retval] IDispatch** pDisp);
        [id(0x00000032), propget, helpstring("property AttachedNodes")]
        HRESULT AttachedNodes([out, retval] IDispatch** pDisp);
        [id(0x00000036), propget, helpstring("property StateString")]
        HRESULT StateString([out, retval] BSTR* STR);
        [id(0x00000037), propget, helpstring("property ElementCountForPart")]
        HRESULT ElementCountForPart(
                        int partIndex, 
                        [out, retval] VARIANT* pVal);
        [id(0x00000038), propget, helpstring("property ElementForPart")]
        HRESULT ElementForPart(
                        int partIndex, 
                        int index, 
                        [out, retval] VARIANT* pVal);
        [id(0x00000039), propget, helpstring("property UnitType")]
        HRESULT unitType(
                        [in, optional, defaultvalue(1)] int index, 
                        [out, retval] int* unitType);
        [id(0x00000039), propput, helpstring("property UnitType")]
        HRESULT unitType(
                        [in, optional, defaultvalue(1)] int index, 
                        [in] int unitType);
        [id(0x0000003a), propget, helpstring("property HasValidGeoSelection")]
        HRESULT HasValidGeoSelection([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000003d), propget, helpstring("property ScopedCount")]
        HRESULT ScopedCount([out, retval] int* lVal);
        [id(0x0000003e), propget, helpstring("property ScopedItemId")]
        HRESULT ScopedItemId(
                        [in] int partIndex, 
                        [in] int itemIndex, 
                        [out, retval] unsigned int* ulVal);
        [id(0x0000003f), propget, helpstring("property ScopedPartItemCount")]
        HRESULT ScopedPartItemCount(
                        [in] int partIndex, 
                        [out, retval] unsigned int* ulVal);
        [id(0x00000045), propget, helpstring("property RequiredFrictionCoeff")]
        HRESULT RequiredFrictionCoeff([out, retval] double* dVal);
        [id(0x0000004b), propget, helpstring("property BoltLoadDefineBy")]
        HRESULT BoltLoadDefineBy([out, retval] DSBoltLoadDefineByType* pVal);
        [id(0x0000004b), propput, helpstring("property BoltLoadDefineBy")]
        HRESULT BoltLoadDefineBy([in] DSBoltLoadDefineByType pVal);
        [id(0x00000046), propget, helpstring("property Preload")]
        HRESULT Preload([out, retval] double* pVal);
        [id(0x00000046), propput, helpstring("property Preload")]
        HRESULT Preload([in] double pVal);
        [id(0x00000047), propget, helpstring("property Preadjustment")]
        HRESULT Preadjustment([out, retval] double* pVal);
        [id(0x00000047), propput, helpstring("property Preadjustment")]
        HRESULT Preadjustment([in] double pVal);
        [id(0x00000048), propget, helpstring("property AdjustmentReaction")]
        HRESULT AdjustmentReaction([out, retval] double* pVal);
        [id(0x00000049), propget, helpstring("property PreloadReaction")]
        HRESULT PreloadReaction([out, retval] double* pVal);
        [id(0x0000004a), propget, helpstring("property WorkingLoadReaction")]
        HRESULT WorkingLoadReaction([out, retval] double* pVal);
        [id(0x0000004f), propget, helpstring("property NumSequenceEntries")]
        HRESULT NumSequenceEntries([out, retval] unsigned int* pVal);
        [id(0x0000004f), propput, helpstring("property NumSequenceEntries")]
        HRESULT NumSequenceEntries([in] unsigned int pVal);
        [id(0x00000051), propget, helpstring("property SequenceBoltLoadDefineBy")]
        HRESULT SequenceBoltLoadDefineBy(
                        [in] int index, 
                        [out, retval] DSBoltLoadDefineByType* pVal);
        [id(0x00000051), propput, helpstring("property SequenceBoltLoadDefineBy")]
        HRESULT SequenceBoltLoadDefineBy(
                        [in] int index, 
                        [in] DSBoltLoadDefineByType pVal);
        [id(0x00000052), propget, helpstring("property SequenceComponentX")]
        HRESULT SequenceComponentX(
                        [in] int index, 
                        [out, retval] VARIANT* pVal);
        [id(0x00000052), propput, helpstring("property SequenceComponentX")]
        HRESULT SequenceComponentX(
                        [in] int index, 
                        [in] VARIANT pVal);
        [id(0x00000053), propget, helpstring("property SequenceComponentY")]
        HRESULT SequenceComponentY(
                        [in] int index, 
                        [out, retval] VARIANT* pVal);
        [id(0x00000053), propput, helpstring("property SequenceComponentY")]
        HRESULT SequenceComponentY(
                        [in] int index, 
                        [in] VARIANT pVal);
        [id(0x00000054), propget, helpstring("property SequenceComponentZ")]
        HRESULT SequenceComponentZ(
                        [in] int index, 
                        [out, retval] VARIANT* pVal);
        [id(0x00000054), propput, helpstring("property SequenceComponentZ")]
        HRESULT SequenceComponentZ(
                        [in] int index, 
                        [in] VARIANT pVal);
        [id(0x0000005f), propget, helpstring("property SequenceRotationComponentX")]
        HRESULT SequenceRotationComponentX(
                        [in] int index, 
                        [out, retval] VARIANT* pVal);
        [id(0x0000005f), propput, helpstring("property SequenceRotationComponentX")]
        HRESULT SequenceRotationComponentX(
                        [in] int index, 
                        [in] VARIANT pVal);
        [id(0x00000060), propget, helpstring("property SequenceRotationComponentY")]
        HRESULT SequenceRotationComponentY(
                        [in] int index, 
                        [out, retval] VARIANT* pVal);
        [id(0x00000060), propput, helpstring("property SequenceRotationComponentY")]
        HRESULT SequenceRotationComponentY(
                        [in] int index, 
                        [in] VARIANT pVal);
        [id(0x00000061), propget, helpstring("property SequenceRotationComponentZ")]
        HRESULT SequenceRotationComponentZ(
                        [in] int index, 
                        [out, retval] VARIANT* pVal);
        [id(0x00000061), propput, helpstring("property SequenceRotationComponentZ")]
        HRESULT SequenceRotationComponentZ(
                        [in] int index, 
                        [in] VARIANT pVal);
        [id(0x00000055), propput, helpstring("property SpringFirstEnd")]
        HRESULT SpringFirstEnd([in] IDispatch* rhs);
        [id(0x00000056), propput, helpstring("property SpringSecondEnd")]
        HRESULT SpringSecondEnd([in] IDispatch* rhs);
        [id(0x00000059), propget, helpstring("property HasReactions")]
        HRESULT HasReactions([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000005a), propget, helpstring("property ReactionUnitType")]
        HRESULT ReactionUnitType([out, retval] int* pVal);
        [id(0x00000062), propget, helpstring("property Behavior")]
        HRESULT Behavior([out, retval] DSLoadBehavior* pVal);
        [id(0x00000062), propput, helpstring("property Behavior")]
        HRESULT Behavior([in] DSLoadBehavior pVal);
        [id(0x00000063), propget, helpstring("property ReactionComponentByLoadStep")]
        HRESULT ReactionComponentByLoadStep(
                        [in] int index, 
                        [in] unsigned int ulLoadStep, 
                        [out, retval] double* pVal);
        [id(0x00000064), propget, helpstring("property ReactionMagnitudeByLoadStep")]
        HRESULT ReactionMagnitudeByLoadStep(
                        [in] unsigned int ulLoadStep, 
                        [out, retval] double* pVal);
        [id(0x00000065), propget, helpstring("property ReactionMomentMagnitudeByLoadStep")]
        HRESULT ReactionMomentMagnitudeByLoadStep(
                        [in] unsigned int ulLoadStep, 
                        [out, retval] double* pVal);
        [id(0x00000066), helpstring("method RemoveConvectionIfNotStillInUseInTree")]
        HRESULT RemoveConvectionIfNotStillInUseInTree();
        [id(0x00000068), propget, helpstring("property BoltLoadCoordinateSystemSelection")]
        HRESULT BoltLoadCoordinateSystemSelection([out, retval] int* pVal);
        [id(0x00000068), propput, helpstring("property BoltLoadCoordinateSystemSelection")]
        HRESULT BoltLoadCoordinateSystemSelection([in] int pVal);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** __MIDL__IDSLoadAuto0000);
        [id(0x0000006c), helpstring("method StringIDForType")]
        HRESULT StringIDForType([out, retval] BSTR* STR);
        [id(0x00000058), propput, helpstring("property ConvectionFromEDA")]
        HRESULT ConvectionFromEDA([in] IDispatch* rhs);
        [id(0x0000006f), propget, helpstring("property FoundationStiffness")]
        HRESULT FoundationStiffness([out, retval] double* pVal);
        [id(0x0000006f), propput, helpstring("property FoundationStiffness")]
        HRESULT FoundationStiffness([in] double pVal);
        [id(0x00000071), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000070), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00000072), propget, helpstring("method ShellFaceEnum")]
        HRESULT ShellFaceEnum([out, retval] DSShellFaceEnum* pShellFace);
        [id(0x00000072), propput, helpstring("method ShellFaceEnum")]
        HRESULT ShellFaceEnum([in] DSShellFaceEnum pShellFace);
        [id(0x00000076), propget, helpstring("method GeometryType")]
        HRESULT GeometryType([out, retval] int* pVal);
        [id(0x00000077), propget, helpstring("property ScopedType")]
        HRESULT ScopedType([out, retval] unsigned int* pVal);
        [id(0x00000078), propget, helpstring("method AnsBCType")]
        HRESULT AnsBCType([out, retval] int* pVal);
        [id(0x00000079), propget, helpstring("property LoadVariation")]
        HRESULT LoadVariation(
                        [in] int ComponentPosition, 
                        [out, retval] IDispatch** ppDisp);
        [id(0x00000080), helpstring("method GetDisplayString")]
        HRESULT GetDisplayString(
                        [in] long dispid, 
                        [out, retval] BSTR* pVal);
        [id(0x0000007f), propget, helpstring("Get whether the BC is active at a step")]
        HRESULT ActiveAtLoadStep(
                        [in] unsigned int stepNumber, 
                        [out, retval] VARIANT_BOOL* bActive);
        [id(0x0000007f), propput, helpstring("Get whether the BC is active at a step")]
        HRESULT ActiveAtLoadStep(
                        [in] unsigned int stepNumber, 
                        [in] VARIANT_BOOL bActive);
        [id(0x0000007b), propget, helpstring("property UnitTypeByDispid")]
        HRESULT UnitTypeByDispid(
                        [in] int dispid, 
                        [out, retval] int* unitType);
        [id(0x0000007c), propget, helpstring("property UnitStringByDispid")]
        HRESULT UnitStringByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* unitString);
        [id(0x0000007d), propget, helpstring("property FluidDensity")]
        HRESULT FluidDensity([out, retval] double* pVal);
        [id(0x0000007d), propput, helpstring("property FluidDensity")]
        HRESULT FluidDensity([in] double pVal);
        [id(0x00000081), propget, helpstring("property DataViewType ")]
        HRESULT DataViewType(
                        [in] int iAnsBCLVType, 
                        [out, retval] int* pVal);
        [id(0x00000082), propget, helpstring("ComponentActiveAtLoadStep")]
        HRESULT ComponentActiveAtLoadStep(
                        [in] int iAnsBCLVType, 
                        [in] unsigned int stepNumber, 
                        [out, retval] VARIANT_BOOL* bActive);
        [id(0x00000082), propput, helpstring("ComponentActiveAtLoadStep")]
        HRESULT ComponentActiveAtLoadStep(
                        [in] int iAnsBCLVType, 
                        [in] unsigned int stepNumber, 
                        [in] VARIANT_BOOL bActive);
        [id(0x00000083), propget, helpstring("property ParamNameByDispid")]
        HRESULT ParamNameByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* paramName);
        [id(0x00000084), propget, helpstring("property BodyAssignedTo")]
        HRESULT BodyAssignedTo([out, retval] int* pVal);
        [id(0x00000084), propput, helpstring("property BodyAssignedTo")]
        HRESULT BodyAssignedTo([in] int pVal);
        [id(0x00000087), propget, helpstring("property TabularDataIndependentVariable")]
        HRESULT TabularDataIndependentVariable([out, retval] int* iVarEnum);
        [id(0x00000087), propput, helpstring("property TabularDataIndependentVariable")]
        HRESULT TabularDataIndependentVariable([in] int iVarEnum);
        [id(0x00000088), propget, helpstring("property GraphControlsXAxis")]
        HRESULT GraphControlsXAxis([out, retval] int* iAxisEnum);
        [id(0x00000088), propput, helpstring("property GraphControlsXAxis")]
        HRESULT GraphControlsXAxis([in] int iAxisEnum);
        [id(0x0000008d), propget, helpstring("property PinballSize")]
        HRESULT PinballSize([out, retval] double* dVal);
        [id(0x0000008d), propput, helpstring("property PinballSize")]
        HRESULT PinballSize([in] double dVal);
        [id(0x00000094), propget, helpstring("property LoadVariationDataType ")]
        HRESULT LoadVariationDataType(
                        [in] int iAnsBCLVType, 
                        [out, retval] int* pVal);
        [id(0x00000091), propget, helpstring("property FunctionRangeMin")]
        HRESULT FunctionRangeMin([out, retval] double* dVal);
        [id(0x00000091), propput, helpstring("property FunctionRangeMin")]
        HRESULT FunctionRangeMin([in] double dVal);
        [id(0x00000092), propget, helpstring("property FunctionRangeMax")]
        HRESULT FunctionRangeMax([out, retval] double* dVal);
        [id(0x00000092), propput, helpstring("property FunctionRangeMax")]
        HRESULT FunctionRangeMax([in] double dVal);
        [id(0x00000093), propget, helpstring("property FunctionNumberOfSegments")]
        HRESULT FunctionNumberOfSegments([out, retval] int* pVal);
        [id(0x00000093), propput, helpstring("property FunctionNumberOfSegments")]
        HRESULT FunctionNumberOfSegments([in] int pVal);
        [id(0x00000095), propget, helpstring("property UseInternalNodes")]
        HRESULT UseInternalNodes([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000095), propput, helpstring("property UseInternalNodes")]
        HRESULT UseInternalNodes([in] VARIANT_BOOL pVal);
        [id(0x600200d9), propget]
        HRESULT DispVectorDisplay([out, retval] VARIANT_BOOL* pvbVectorDisplay);
        [id(0x00000099), propget, helpstring("property DetonationTime")]
        HRESULT DetonationTime([out, retval] double* dVal);
        [id(0x00000099), propput, helpstring("property DetonationTime")]
        HRESULT DetonationTime([in] double dVal);
        [id(0x0000009a), propget, helpstring("property InstantBurnEnum")]
        HRESULT InstantBurnEnum([out, retval] DSInstantBurnEnum* pInstantBurn);
        [id(0x0000009a), propput, helpstring("property InstantBurnEnum")]
        HRESULT InstantBurnEnum([in] DSInstantBurnEnum pInstantBurn);
        [id(0x0000009b), propget, helpstring("property PipeLoadingType")]
        HRESULT PipeLoadingType([out, retval] DSPipeLoadingType* pVal);
        [id(0x0000009b), propput, helpstring("property PipeLoadingType")]
        HRESULT PipeLoadingType([in] DSPipeLoadingType pVal);
        [id(0x0000009c), propget, helpstring("property FEFlagValue")]
        HRESULT FEFlagValue([out, retval] int* lVal);
        [id(0x0000009c), propput, helpstring("property FEFlagValue")]
        HRESULT FEFlagValue([in] int lVal);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x0000009e), propget, helpstring("property FSIExportType")]
        HRESULT FSIExportType([out, retval] int* pVal);
        [id(0x0000009e), propput, helpstring("property FSIExportType")]
        HRESULT FSIExportType([in] int pVal);
        [id(0x0000009f), helpstring("method PromoteRemotePoint")]
        HRESULT PromoteRemotePoint();
        [id(0x000000a0), propput, helpstring("property ConvectionMatrix")]
        HRESULT ConvectionMatrix([in] DiagOrCons pVal);
        [id(0x000000a0), propget, helpstring("property ConvectionMatrix")]
        HRESULT ConvectionMatrix([out, retval] DiagOrCons* pVal);
        [id(0x000000a1), propget, helpstring("property RadiationEnclosureType")]
        HRESULT RadiationEnclosureType([out, retval] int* lVal);
        [id(0x000000a1), propput, helpstring("property RadiationEnclosureType")]
        HRESULT RadiationEnclosureType([in] int lVal);
        [id(0x000000a2), propget, helpstring("property DataToTransfer")]
        HRESULT FSIDataToTransfer([out, retval] DSFSIDataToTransferType* pVal);
        [id(0x000000a2), propput, helpstring("property DataToTransfer")]
        HRESULT FSIDataToTransfer([in] DSFSIDataToTransferType pVal);
        [id(0x000000a6), propget, helpstring("property FollowerLoad")]
        HRESULT FollowerLoad([out, retval] VARIANT_BOOL* pVal);
        [id(0x000000a6), propput, helpstring("property FollowerLoad")]
        HRESULT FollowerLoad([in] VARIANT_BOOL pVal);
        [id(0x000000a7), propget, helpstring("property CalculatedFromUnbalancedMass")]
        HRESULT CalculatedFromUnbalancedMass([out, retval] VARIANT_BOOL* pVal);
        [id(0x000000a7), propput, helpstring("property CalculatedFromUnbalancedMass")]
        HRESULT CalculatedFromUnbalancedMass([in] VARIANT_BOOL pVal);
        [id(0x000000a8), propget, helpstring("property SynchronousRatio")]
        HRESULT SynchronousRatio([out, retval] double* pVal);
        [id(0x000000a8), propput, helpstring("property SynchronousRatio")]
        HRESULT SynchronousRatio([in] double pVal);
        [id(0x000000a9), propget, helpstring("property UnbalancedMassMagnitude")]
        HRESULT UnbalancedMassMagnitude([out, retval] double* pVal);
        [id(0x000000a9), propput, helpstring("property UnbalancedMassMagnitude")]
        HRESULT UnbalancedMassMagnitude([in] double pVal);
        [id(0x000000aa), propget, helpstring("property UnbalancedForceMagnitude")]
        HRESULT UnbalancedForceMagnitude([out, retval] double* pVal);
        [id(0x000000aa), propput, helpstring("property UnbalancedForceMagnitude")]
        HRESULT UnbalancedForceMagnitude([in] double pVal);
        [id(0x000000ab), propget, helpstring("property UnbalancedForceAxisLocationX")]
        HRESULT UnbalancedForceAxisLocationX([out, retval] double* pVal);
        [id(0x000000ac), propget, helpstring("property UnbalancedForceAxisLocationY")]
        HRESULT UnbalancedForceAxisLocationY([out, retval] double* pVal);
        [id(0x000000ad), propget, helpstring("property UnbalancedForceAxisLocationZ")]
        HRESULT UnbalancedForceAxisLocationZ([out, retval] double* pVal);
        [id(0x000000ae), propget, helpstring("property UnbalancedForceAxisComponentX")]
        HRESULT UnbalancedForceAxisComponentX([out, retval] double* pVal);
        [id(0x000000af), propget, helpstring("property UnbalancedForceAxisComponentY")]
        HRESULT UnbalancedForceAxisComponentY([out, retval] double* pVal);
        [id(0x000000b0), propget, helpstring("property UnbalancedForceAxisComponentZ")]
        HRESULT UnbalancedForceAxisComponentZ([out, retval] double* pVal);
        [id(0x000000b1), propget, helpstring("property UnbalancedForceRotatingRadius")]
        HRESULT UnbalancedForceRotatingRadius([out, retval] double* pVal);
        [id(0x000000b1), propput, helpstring("property UnbalancedForceRotatingRadius")]
        HRESULT UnbalancedForceRotatingRadius([in] double pVal);
        [id(0x000000b2), propget, helpstring("property UnbalancedForceHitPointLocationX")]
        HRESULT UnbalancedForceHitPointLocationX([out, retval] double* pVal);
        [id(0x000000b3), propget, helpstring("property UnbalancedForceHitPointLocationY")]
        HRESULT UnbalancedForceHitPointLocationY([out, retval] double* pVal);
        [id(0x000000b4), propget, helpstring("property UnbalancedForceHitPointLocationZ")]
        HRESULT UnbalancedForceHitPointLocationZ([out, retval] double* pVal);
        [id(0x000000b5), propget, helpstring("property BodyScopingDefineBy")]
        HRESULT BodyScopingDefineBy([out, retval] DSGeometryDefineByType* pVal);
        [id(0x000000b5), propput, helpstring("property BodyScopingDefineBy")]
        HRESULT BodyScopingDefineBy([in] DSGeometryDefineByType pVal);
        [id(0x000000b6), propget, helpstring("property BodyScopingComponentSelection")]
        HRESULT BodyScopingComponentSelection([out, retval] int* pVal);
        [id(0x000000b6), propput, helpstring("property BodyScopingComponentSelection")]
        HRESULT BodyScopingComponentSelection([in] int pVal);
        [id(0x000000b7), propput, helpstring("property BodyScopingGeometrySelection")]
        HRESULT BodyScopingGeometrySelection([in] IDispatch* rhs);
        [id(0x000000b8), propget, helpstring("property UnbalancedForceHitPointNodeId")]
        HRESULT UnbalancedForceHitPointNodeId([out, retval] int* pVal);
        [id(0x000000b9), propget, helpstring("property PhaseAngleNew")]
        HRESULT PhaseAngleNew([out, retval] VARIANT* pVal);
        [id(0x000000b9), propput, helpstring("property PhaseAngleNew")]
        HRESULT PhaseAngleNew([in] VARIANT pVal);
        [id(0x000000ba), propget, helpstring("property PhaseAngleX")]
        HRESULT PhaseAngleX([out, retval] VARIANT* pVal);
        [id(0x000000ba), propput, helpstring("property PhaseAngleX")]
        HRESULT PhaseAngleX([in] VARIANT pVal);
        [id(0x000000bb), propget, helpstring("property PhaseAngleY")]
        HRESULT PhaseAngleY([out, retval] VARIANT* pVal);
        [id(0x000000bb), propput, helpstring("property PhaseAngleY")]
        HRESULT PhaseAngleY([in] VARIANT pVal);
        [id(0x000000bc), propget, helpstring("property PhaseAngleZ")]
        HRESULT PhaseAngleZ([out, retval] VARIANT* pVal);
        [id(0x000000bc), propput, helpstring("property PhaseAngleZ")]
        HRESULT PhaseAngleZ([in] VARIANT pVal);
        [id(0x000000bd), propget, helpstring("property MagnitudeImag")]
        HRESULT MagnitudeImag([out, retval] VARIANT* pVal);
        [id(0x000000bd), propput, helpstring("property MagnitudeImag")]
        HRESULT MagnitudeImag([in] VARIANT pVal);
        [id(0x000000be), propget, helpstring("property ComponentXImag")]
        HRESULT ComponentXImag([out, retval] VARIANT* pVal);
        [id(0x000000be), propput, helpstring("property ComponentXImag")]
        HRESULT ComponentXImag([in] VARIANT pVal);
        [id(0x000000bf), propget, helpstring("property ComponentYImag")]
        HRESULT ComponentYImag([out, retval] VARIANT* pVal);
        [id(0x000000bf), propput, helpstring("property ComponentYImag")]
        HRESULT ComponentYImag([in] VARIANT pVal);
        [id(0x000000c0), propget, helpstring("property ComponentZImag")]
        HRESULT ComponentZImag([out, retval] VARIANT* pVal);
        [id(0x000000c0), propput, helpstring("property ComponentZImag")]
        HRESULT ComponentZImag([in] VARIANT pVal);
        [id(0x000000c1), propget, helpstring("property AmplitudePhaseAtFreq")]
        HRESULT AmplitudePhaseAtFreq(
                        [in] double dRequestedFreq, 
                        [out, retval] IAnsDoubleColl** pVal);
        [id(0x000000c2), propget, helpstring("property IsManualHitPointSelection")]
        HRESULT IsManualHitPointSelection([out, retval] VARIANT_BOOL* pVal);
        [id(0x000000c2), propput, helpstring("property IsManualHitPointSelection")]
        HRESULT IsManualHitPointSelection([in] VARIANT_BOOL pVal);
        [id(0x000000c3), propget, helpstring("property UnbalancedForceHitPointRemotePointSelection")]
        HRESULT UnbalancedForceHitPointRemotePointSelection([out, retval] dsid* pVal);
        [id(0x000000c3), propput, helpstring("property UnbalancedForceHitPointRemotePointSelection")]
        HRESULT UnbalancedForceHitPointRemotePointSelection([in] dsid pVal);
        [id(0x000000c4), propget, helpstring("property IsBaseExcitation")]
        HRESULT IsBaseExcitation([out, retval] VARIANT_BOOL* pVal);
        [id(0x000000c4), propput, helpstring("property IsBaseExcitation")]
        HRESULT IsBaseExcitation([in] VARIANT_BOOL pVal);
        [id(0x000000c5), propget, helpstring("property IsAbsoluteResult")]
        HRESULT IsAbsoluteResult([out, retval] VARIANT_BOOL* pVal);
        [id(0x000000c5), propput, helpstring("property IsAbsoluteResult")]
        HRESULT IsAbsoluteResult([in] VARIANT_BOOL pVal);
        [id(0x000000c6), propget, helpstring("property BoundaryConditionSelection")]
        HRESULT BoundaryConditionSelection([out, retval] int* pVal);
        [id(0x000000c6), propput, helpstring("property BoundaryConditionSelection")]
        HRESULT BoundaryConditionSelection([in] int pVal);
        [id(0x000000c7), propget, helpstring("property BaseExcitationDirection")]
        HRESULT BaseExcitationDirection([out, retval] NormalOrientationType* pVal);
        [id(0x000000c7), propput, helpstring("property BaseExcitationDirection")]
        HRESULT BaseExcitationDirection([in] NormalOrientationType pVal);
        [id(0x000000c8), propget, helpstring("property BeamMaterialName")]
        HRESULT BeamMaterialName([out, retval] BSTR* pVal);
        [id(0x000000c8), propput, helpstring("property BeamMaterialName")]
        HRESULT BeamMaterialName([in] BSTR pVal);
        [id(0x000000ca), helpstring("method UncheckRemotePointRelatedParameters")]
        HRESULT UncheckRemotePointRelatedParameters();
        [id(0x000000c9), propget, helpstring("property BeamRadius")]
        HRESULT BeamRadius([out, retval] double* dVal);
        [id(0x000000c9), propput, helpstring("property BeamRadius")]
        HRESULT BeamRadius([in] double dVal);
        [id(0x000000cb), propget, helpstring("property AppliedBy")]
        HRESULT AppliedBy([out, retval] LoadAppliedByType* pVal);
        [id(0x000000cb), propput, helpstring("property AppliedBy")]
        HRESULT AppliedBy([in] LoadAppliedByType pVal);
        [id(0x000000cc), propget, helpstring("property IsGeneratedLoadReadOnly")]
        HRESULT IsGeneratedLoadReadOnly([out, retval] VARIANT_BOOL* pVal);
        [id(0x000000cc), propput, helpstring("property IsGeneratedLoadReadOnly")]
        HRESULT IsGeneratedLoadReadOnly([in] VARIANT_BOOL pVal);
        [id(0x000000cd), helpstring("method SetPropertyByStep")]
        HRESULT SetPropertyByStep(
                        [in] int step, 
                        [in] BSTR propertyName, 
                        [in] VARIANT newVal);
    };

    typedef enum {
        kLoadVariationSubOptionUndefined = 0,
        kLoadVariationSubOptionConvectionBegin = 1,
        kLoadVariationSubOptionConvectionFILM = 2,
        kLoadVariationSubOptionConvectionSURF = 3,
        kLoadVariationSubOptionConvectionBULK = 4,
        kLoadVariationSubOptionConvectionDIFF = 5,
        kLoadVariationSubOptionConvectionEnd = 6,
        kLoadVariationSubOptionEnd = 7
    } eLoadVariationSubOption;

    typedef enum {
        kFilmCoefficient = 0,
        kAmbientTemperature = 1
    } DSConvectionTableSelection;

    typedef enum {
        kFixedSupport = 0,
        kGivenDisplacement = 1
    } DSFixedSupportType;

    typedef enum {
        kPinnedSupport = 0,
        kFixedCylindrically = 1
    } DSCylSupportType;

    typedef enum {
        kConstant = 0,
        kPerfectInsulation = 1
    } DSHeatFlowType;

    typedef enum {
        kVariationConstant = 0,
        kVariationData = 1,
        kVariationHeatInsulated = 2,
        kVariationConvTempData = 3,
        kVariationPressureCFX = 4
    } kLoadVariationType;

    typedef enum {
        kPreload = 0,
        kPreadjustment = 1,
        kLock = 2,
        kOpen = 3,
        kIncrement = 4
    } DSBoltLoadDefineByType;

    typedef enum {
        kDSInstantBurnNo = 0,
        kDSInstantBurnYes = 1
    } DSInstantBurnEnum;

    typedef enum {
        kPipeLoadingUnknown = 0,
        kPipeLoadingInternal = 1,
        kPipeLoadingExternal = 2
    } DSPipeLoadingType;

    typedef enum {
        kCMProgramControlled = 0,
        kCMDiagonal = 1,
        kCMConsistent = 2
    } DiagOrCons;

    typedef enum {
        k_DataToTransferType_ProgramControlled = 0,
        k_DataToTransferType_ASC_DataTransfers = 1
    } DSFSIDataToTransferType;

    typedef enum {
        kSurfaceEffect = 0,
        kDirect = 1
    } LoadAppliedByType;

    typedef enum {
        DISPID_AutodynGeometrySelection = 11,
        DISPID_AutodynDefineBy = 12,
        DISPID_AutodynComponentSelection = 13,
        DISPID_AutodynType = 21,
        DISPID_AutodynSuppressed = 22,
        DISPID_AutodynVelocityMagnitude = 23
    } kDispId_Autodyn;

    [
      odl,
      uuid(57C81AA6-0FBC-4E0A-8E96-C689EAE95B99),
      helpstring("IDSAutodynBCAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSAutodynBCAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x0000000c), propget, helpstring("property GeometryDefineBy")]
        HRESULT GeometryDefineBy([out, retval] DSGeometryDefineByType* pVal);
        [id(0x0000000c), propput, helpstring("property GeometryDefineBy")]
        HRESULT GeometryDefineBy([in] DSGeometryDefineByType pVal);
        [id(0x0000000d), propget, helpstring("property ComponentSelection")]
        HRESULT ComponentSelection([out, retval] int* pVal);
        [id(0x0000000d), propput, helpstring("property ComponentSelection")]
        HRESULT ComponentSelection([in] int pVal);
        [id(0x0000000b), propput, helpstring("property GeometrySelection")]
        HRESULT GeometrySelection([in] IDispatch* rhs);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000015), propget, helpstring("property AutodynType")]
        HRESULT AutodynType([out, retval] int* pVal);
        [id(0x00000015), propput, helpstring("property AutodynType")]
        HRESULT AutodynType([in] int pVal);
        [id(0x00000017), propget, helpstring("property AutodynVelocityMagnitude")]
        HRESULT AutodynVelocityMagnitude([out, retval] double* pVal);
        [id(0x00000017), propput, helpstring("property AutodynVelocityMagnitude")]
        HRESULT AutodynVelocityMagnitude([in] double pVal);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
    };

    typedef enum {
        DISPID_LoadGroupGeometrySelection = 10,
        DISPID_LoadGroupHasValidGeoSelection = 11,
        DISPID_LoadGroupAddLoad = 12,
        DISPID_LoadGroupLoads = 13,
        DISPID_LoadGroupComments = 14,
        DISPID_LoadGroupFigures = 15,
        DISPID_LoadGroupAddFigure = 16,
        DISPID_LoadGroupAddComment = 17,
        DISPID_LoadGroupNumberTurns = 18,
        DISPID_LoadGroupGeometryDefineBy = 19,
        DISPID_LoadGroupComponentSelection = 20,
        DISPID_LoadGroupCoilCurrent = 21,
        DISPID_LoadGroupPhaseAngle = 22,
        DISPID_LoadGroupType = 23,
        DISPID_LoadGroupSuppressed = 24,
        DISPID_LoadGroupIsConductorSolid = 25,
        DISPID_LoadGroupPrototypes = 26,
        DISPID_LoadGroupImages = 27,
        DISPID_LoadGroupAddImage = 28,
        DISPID_LoadGroupUnitTypeByDispid = 29,
        DISPID_LoadGroupUnitStringByDispid = 30,
        DISPID_LoadGroupParamNameByDispid = 31,
        DISPID_LoadGroupSourceConductorType = 32,
        DISPID_LoadGroupConductingArea = 33,
        DISPID_LoadGroupWindingPropertyType = 34,
        DISPID_LoadGroupCoilResistanceTotal = 35,
        DISPID_LoadGroupCoilLengthTotal = 36,
        DISPID_LoadGroupSymmetryMultiplier = 37,
        DISPID_LoadGroupInitializeWithExternalLinkInfo = 38,
        DISPID_LoadGroupAnsoftSolutionId = 39,
        DISPID_LoadGroupStatus = 40,
        DISPID_LoadGroupOnDataRefreshOption = 41,
        DISPID_LoadGroupGenerateRemoteLoads = 42,
        DISPID_LoadGroupAddExternalLinkInfo = 43,
        DISPID_LoadGroupRemotePointsInternalOption = 44,
        DISPID_LoadGroupImportedDataTypeOption = 45
    } kDispId_LoadGroup;

    [
      odl,
      uuid(C5C5D55C-A434-4331-9A1B-3E0B9B2BFBE7),
      helpstring("IDSLoadGroupAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSLoadGroupAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x00000013), propget, helpstring("property GeometryDefineBy")]
        HRESULT GeometryDefineBy([out, retval] DSGeometryDefineByType* pVal);
        [id(0x00000013), propput, helpstring("property GeometryDefineBy")]
        HRESULT GeometryDefineBy([in] DSGeometryDefineByType pVal);
        [id(0x00000014), propget, helpstring("property ComponentSelection")]
        HRESULT ComponentSelection([out, retval] int* pVal);
        [id(0x00000014), propput, helpstring("property ComponentSelection")]
        HRESULT ComponentSelection([in] int pVal);
        [id(0x0000000a), propput, helpstring("property GeometrySelection")]
        HRESULT GeometrySelection([in] IDispatch* rhs);
        [id(0x0000000b), propget, helpstring("property HasValidGeoSelection")]
        HRESULT HasValidGeoSelection([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000000c), helpstring("method AddLoad")]
        HRESULT AddLoad(
                        [in] IDispatch* piSelectMgr, 
                        [in] unsigned int loadType, 
                        [out, retval] IDispatch** ppVal);
        [id(0x0000000d), propget, helpstring("property Loads")]
        HRESULT Loads([out, retval] IDispatch** pVal);
        [id(0x0000000e), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x0000000f), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x00000011), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x00000010), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x00000012), propget, helpstring("property NumberTurns")]
        HRESULT NumberTurns([out, retval] unsigned int* pVal);
        [id(0x00000012), propput, helpstring("property NumberTurns")]
        HRESULT NumberTurns([in] unsigned int pVal);
        [id(0x00000015), propget, helpstring("property CoilCurrent")]
        HRESULT CoilCurrent([out, retval] double* pVal);
        [id(0x00000015), propput, helpstring("property CoilCurrent")]
        HRESULT CoilCurrent([in] double pVal);
        [id(0x00000016), propget, helpstring("property PhaseAngle")]
        HRESULT PhaseAngle([out, retval] double* pVal);
        [id(0x00000016), propput, helpstring("property PhaseAngle")]
        HRESULT PhaseAngle([in] double pVal);
        [id(0x00000017), propget, helpstring("property loadGroupType")]
        HRESULT loadGroupType([out, retval] int* pVal);
        [id(0x00000018), propget, helpstring("property Suppressed")]
        HRESULT Suppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000018), propput, helpstring("property Suppressed")]
        HRESULT Suppressed([in] VARIANT_BOOL pVal);
        [id(0x00000019), propget, helpstring("property IsConductorSolid")]
        HRESULT IsConductorSolid([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000001a), propget, helpstring("property DISPID_LoadGroupPrototypes")]
        HRESULT Prototypes([out, retval] VARIANT* pVal);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** __MIDL__IDSLoadGroupAuto0000);
        [id(0x0000001b), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x0000001c), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x0000001d), propget, helpstring("property UnitTypeByDispid")]
        HRESULT UnitTypeByDispid(
                        [in] int dispid, 
                        [out, retval] int* unitType);
        [id(0x0000001e), propget, helpstring("property UnitStringByDispid")]
        HRESULT UnitStringByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* unitString);
        [id(0x0000001f), propget, helpstring("property ParamNameByDispid")]
        HRESULT ParamNameByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* paramName);
        [id(0x00000021), propget, helpstring("property ConductingArea")]
        HRESULT ConductingArea([out, retval] double* pVal);
        [id(0x00000021), propput, helpstring("property ConductingArea")]
        HRESULT ConductingArea([in] double pVal);
        [id(0x00000023), propget, helpstring("property CoilResistanceTotal")]
        HRESULT CoilResistanceTotal([out, retval] double* pVal);
        [id(0x00000023), propput, helpstring("property CoilResistanceTotal")]
        HRESULT CoilResistanceTotal([in] double pVal);
        [id(0x00000024), propget, helpstring("property CoilLengthTotal")]
        HRESULT CoilLengthTotal([out, retval] double* pVal);
        [id(0x00000024), propput, helpstring("property CoilLengthTotal")]
        HRESULT CoilLengthTotal([in] double pVal);
        [id(0x00000025), propget, helpstring("property SymmetryMultiplier")]
        HRESULT SymmetryMultiplier([out, retval] unsigned int* pVal);
        [id(0x00000025), propput, helpstring("property SymmetryMultiplier")]
        HRESULT SymmetryMultiplier([in] unsigned int pVal);
        [id(0x00000020), propget, helpstring("property SourceConductorType")]
        HRESULT SourceConductorType([out, retval] unsigned int* pVal);
        [id(0x00000020), propput, helpstring("property SourceConductorType")]
        HRESULT SourceConductorType([in] unsigned int pVal);
        [id(0x00000022), propget, helpstring("property WindingPropertyType")]
        HRESULT WindingPropertyType([out, retval] unsigned int* pVal);
        [id(0x00000022), propput, helpstring("property WindingPropertyType")]
        HRESULT WindingPropertyType([in] unsigned int pVal);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x00000026), helpstring("method InitializeWithExternalLinkInfo")]
        HRESULT InitializeWithExternalLinkInfo(
                        [in] BSTR bsSolverType, 
                        [in] BSTR bsFilename, 
                        [in] BSTR bsDataIdentifier);
        [id(0x00000027), propget, helpstring("property AnsoftSolutionId")]
        HRESULT AnsoftSolutionId([out, retval] unsigned int* pVal);
        [id(0x00000027), propput, helpstring("property AnsoftSolutionId")]
        HRESULT AnsoftSolutionId([in] unsigned int pVal);
        [id(0x00000028), propget, helpstring("property LoadGroupStatus")]
        HRESULT LoadGroupStatus([out, retval] DSLoadGroupStatus* outVal);
        [id(0x00000029), propget, helpstring("property OnDataRefreshOption")]
        HRESULT OnDataRefreshOption([out, retval] DSLoadGroupUpdateOptions* pVal);
        [id(0x00000029), propput, helpstring("property OnDataRefreshOption")]
        HRESULT OnDataRefreshOption([in] DSLoadGroupUpdateOptions pVal);
        [id(0x0000002a), helpstring("method GenerateRemoteLoads")]
        HRESULT GenerateRemoteLoads();
        [id(0x0000002b), helpstring("method AddExternalLinkInfo")]
        HRESULT AddExternalLinkInfo(
                        [in] BSTR bsFilename, 
                        [in] BSTR bsDataIdentifier);
        [id(0x0000002c), propget, helpstring("property RemotePointsInternalOption")]
        HRESULT RemotePointsInternalOption([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000002c), propput, helpstring("property RemotePointsInternalOption")]
        HRESULT RemotePointsInternalOption([in] VARIANT_BOOL pVal);
        [id(0x0000002d), propget, helpstring("property ImportedDataTypeOption")]
        HRESULT ImportedDataTypeOption([out, retval] DSLoadGroupDataTypeOptions* pVal);
        [id(0x0000002d), propput, helpstring("property ImportedDataTypeOption")]
        HRESULT ImportedDataTypeOption([in] DSLoadGroupDataTypeOptions pVal);
    };

    typedef enum {
        kLGStatusUnknown = 0,
        kLGStatusNoData = 1,
        kLGStatusObsolete = 2,
        kLGStatusUptodate = 3,
        kLGStatusFailed = 4
    } DSLoadGroupStatus;

    typedef enum {
        kLGUpdateRegenerate = 0,
        kLGUpdateReuse = 1
    } DSLoadGroupUpdateOptions;

    typedef enum {
        kLGImportForceMoment = 0,
        kLGImportForceOnly = 1,
        kLGImportMomentOnly = 2
    } DSLoadGroupDataTypeOptions;

    typedef enum {
        DISPID_SolutionCombinationComments = 10,
        DISPID_SolutionCombinationNumLoadCases = 11,
        DISPID_SolutionCombinationLoadCaseInUse = 12,
        DISPID_SolutionCombinationEnvironmentId = 13,
        DISPID_SolutionCombinationCoefficient = 14,
        DISPID_SolutionCombinationResults = 15,
        DISPID_SolutionCombinationStressSafetyTools = 16,
        DISPID_SolutionCombinationFatigueTools = 17,
        DISPID_SolutionCombinationBeamTools = 18,
        DISPID_SolutionCombinationTime = 19,
        DISPID_SolutionCombinationSequenceStep = 31,
        DISPID_SolutionCombinationAddComment = 20,
        DISPID_SolutionCombinationAddLoadCase = 21,
        DISPID_SolutionCombinationAddResult = 22,
        DISPID_SolutionCombinationAddStressSafetyTool = 23,
        DISPID_SolutionCombinationAddFatigueTool = 24,
        DISPID_SolutionCombinationDeleteLoadCase = 25,
        DISPID_SolutionCombinationAddContactTool = 26,
        DISPID_SolutionCombinationContactTools = 27,
        DISPID_SolutionCombinationAddBeamTool = 28,
        DISPID_SolutionCombinationImages = 29,
        DISPID_SolutionCombinationAddImage = 30,
        DISPID_SolutionCombinationCalculateResults = 32,
        DISPID_CalculateSolutionCombinationFromAnswerSet = 33
    } kDispId_SolutionCombination;

    [
      odl,
      uuid(743B7244-8A03-448E-BAD2-9E430638084E),
      helpstring("IDSSolutionCombinationAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSSolutionCombinationAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x0000000a), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x0000000b), propget, helpstring("property NumLoadCases")]
        HRESULT NumLoadCases([out, retval] int* iNum);
        [id(0x0000000c), propget, helpstring("property LoadCaseInUse")]
        HRESULT LoadCaseInUse(
                        [in] int index, 
                        [out, retval] VARIANT_BOOL* pVal);
        [id(0x0000000c), propput, helpstring("property LoadCaseInUse")]
        HRESULT LoadCaseInUse(
                        [in] int index, 
                        [in] VARIANT_BOOL pVal);
        [id(0x0000000d), propget, helpstring("property EnvironmentId")]
        HRESULT EnvironmentId(
                        [in] int index, 
                        [out, retval] int* pVal);
        [id(0x0000000d), propput, helpstring("property EnvironmentId")]
        HRESULT EnvironmentId(
                        [in] int index, 
                        [in] int pVal);
        [id(0x0000000e), propget, helpstring("property Coefficient")]
        HRESULT Coefficient(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x0000000e), propput, helpstring("property Coefficient")]
        HRESULT Coefficient(
                        [in] int index, 
                        [in] double pVal);
        [id(0x0000001f), propget, helpstring("property SequenceStep")]
        HRESULT SequenceStep(
                        [in] int index, 
                        [out, retval] int* pVal);
        [id(0x0000001f), propput, helpstring("property SequenceStep")]
        HRESULT SequenceStep(
                        [in] int index, 
                        [in] int pVal);
        [id(0x0000000f), propget, helpstring("property Results")]
        HRESULT Results([out, retval] IDispatch** pVal);
        [id(0x00000010), propget, helpstring("property StressSafetyTools")]
        HRESULT StressSafetyTools([out, retval] IDispatch** pVal);
        [id(0x00000011), propget, helpstring("property FatigueTools")]
        HRESULT FatigueTools([out, retval] IDispatch** ppDisp);
        [id(0x0000001b), propget, helpstring("property ContactTools")]
        HRESULT ContactTools([out, retval] IDispatch** pVal);
        [id(0x00000012), propget, helpstring("property BeamTools")]
        HRESULT BeamTools([out, retval] IDispatch** pVal);
        [id(0x00000014), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x00000015), helpstring("method AddLoadCase")]
        HRESULT AddLoadCase();
        [id(0x00000016), helpstring("method AddResult")]
        HRESULT AddResult(
                        [in] IDispatch* piSelectMgr, 
                        [in] unsigned int resType, 
                        [out, retval] IDispatch** ppVal);
        [id(0x00000017), helpstring("method AddStressSafetyTool")]
        HRESULT AddStressSafetyTool(
                        [in] unsigned int toolType, 
                        [out, retval] IDispatch** pDisp);
        [id(0x00000018), helpstring("method AddFatigueTool")]
        HRESULT AddFatigueTool([out, retval] IDispatch** ppVal);
        [id(0x00000019), helpstring("method DeleteLoadCase")]
        HRESULT DeleteLoadCase([in] int index);
        [id(0x0000001a), helpstring("method AddContactTool")]
        HRESULT AddContactTool(
                        [in] IDispatch* piSelectMgr, 
                        [out, retval] IDispatch** ppVal);
        [id(0x0000001c), helpstring("method AddBeamTool")]
        HRESULT AddBeamTool(
                        [in] IDispatch* piSelectMgr, 
                        [out, retval] IDispatch** ppVal);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
        [id(0x0000001d), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x0000001e), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00000013), propget, helpstring("property Time")]
        HRESULT Time(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000013), propput, helpstring("property Time")]
        HRESULT Time(
                        [in] int index, 
                        [in] double pVal);
        [id(0x00000020), helpstring("method CalculateSolutionCombinationResults")]
        HRESULT CalculateSolutionCombinationResults([in] IAnsProgress* piProgress);
        [id(0x00000021), helpstring("method CalculateSolutionCombinationFromAnswerSet")]
        HRESULT CalculateSolutionCombinationFromAnswerSet([in] IAnsProgress* piProgress);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
    };

    typedef enum {
        DISPID_DASolutionCombinationComments = 10,
        DISPID_DASolutionCombinationNumLoadCases = 11,
        DISPID_DASolutionCombinationLoadCaseInUse = 12,
        DISPID_DASolutionCombinationEnvironmentId = 13,
        DISPID_DASolutionCombinationCoefficient = 14,
        DISPID_DASolutionCombinationResults = 15,
        DISPID_DASolutionCombinationStressSafetyTools = 16,
        DISPID_DASolutionCombinationFatigueTools = 17,
        DISPID_DASolutionCombinationBeamTools = 18,
        DISPID_DASolutionCombinationTimeStart = 19,
        DISPID_DASolutionCombinationSequenceStep = 31,
        DISPID_DASolutionCombinationUserDefinedLoadCaseInfo = 34,
        DISPID_DASolutionCombinationAddComment = 20,
        DISPID_DASolutionCombinationAddLoadCase = 21,
        DISPID_DASolutionCombinationAddResult = 22,
        DISPID_DASolutionCombinationAddStressSafetyTool = 23,
        DISPID_DASolutionCombinationAddFatigueTool = 24,
        DISPID_DASolutionCombinationDeleteLoadCase = 25,
        DISPID_DASolutionCombinationAddContactTool = 26,
        DISPID_DASolutionCombinationContactTools = 27,
        DISPID_DASolutionCombinationAddBeamTool = 28,
        DISPID_DASolutionCombinationImages = 29,
        DISPID_DASolutionCombinationAddImage = 30,
        DISPID_DASolutionCombinationCalculateResults = 32,
        DISPID_DASolutionCombinationUserCombTypes = 33,
        DISPID_DASolutionCombinationResetObject = 35,
        DISPID_DASolutionCombinationScriptLocation = 36,
        DISPID_DASolutionCombinationEvaluateLocation = 37,
        DISPID_DASolutionCombinationPhase = 38,
        DISPID_DASolutionCombinationMode = 39,
        DISPID_DASolutionCombinationStep = 40,
        DISPID_DASolutionCombinationEnvType = 41,
        DISPID_DASolutionCombinationMinFreq = 42,
        DISPID_DASolutionCombinationPhaseUnitString = 43,
        DISPID_DASolutionCombinationFreqUnitString = 44,
        DISPID_DASolutionCombinationTimeUnitString = 45,
        DISPID_DASolutionCombinationSolveScriptModified = 46,
        DISPID_DASolutionCombinationEvalScriptModified = 47,
        DISPID_DASolutionCombinationSolveScriptTimeStamp = 48,
        DISPID_DASolutionCombinationEvalScriptTimeStamp = 49,
        DISPID_DASolutionCombinationTimeEnd = 50,
        DISPID_DASolutionCombinationMaxFreq = 51,
        DISPID_DASolutionCombinationDisplayDAData = 52,
        DISPID_DASolutionCombinationSingleSet = 53
    } kDispId_DASolutionCombination;

    [
      odl,
      uuid(DD8C886F-82DB-4278-BF2C-1A3C6D4B0CEB),
      helpstring("IDSDASolutionCombinationAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSDASolutionCombinationAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x0000000a), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x0000000b), propget, helpstring("property NumLoadCases")]
        HRESULT NumLoadCases([out, retval] int* iNum);
        [id(0x0000000c), propget, helpstring("property LoadCaseInUse")]
        HRESULT LoadCaseInUse(
                        [in] int index, 
                        [out, retval] VARIANT_BOOL* pVal);
        [id(0x0000000c), propput, helpstring("property LoadCaseInUse")]
        HRESULT LoadCaseInUse(
                        [in] int index, 
                        [in] VARIANT_BOOL pVal);
        [id(0x0000000d), propget, helpstring("property EnvironmentId")]
        HRESULT EnvironmentId(
                        [in] int index, 
                        [out, retval] int* pVal);
        [id(0x0000000d), propput, helpstring("property EnvironmentId")]
        HRESULT EnvironmentId(
                        [in] int index, 
                        [in] int pVal);
        [id(0x0000000e), propget, helpstring("property Coefficient")]
        HRESULT Coefficient(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x0000000e), propput, helpstring("property Coefficient")]
        HRESULT Coefficient(
                        [in] int index, 
                        [in] double pVal);
        [id(0x0000001f), propget, helpstring("property SequenceStep")]
        HRESULT SequenceStep(
                        [in] int index, 
                        [out, retval] int* pVal);
        [id(0x0000001f), propput, helpstring("property SequenceStep")]
        HRESULT SequenceStep(
                        [in] int index, 
                        [in] int pVal);
        [id(0x0000000f), propget, helpstring("property Results")]
        HRESULT Results([out, retval] IDispatch** pVal);
        [id(0x00000010), propget, helpstring("property StressSafetyTools")]
        HRESULT StressSafetyTools([out, retval] IDispatch** pVal);
        [id(0x00000011), propget, helpstring("property FatigueTools")]
        HRESULT FatigueTools([out, retval] IDispatch** ppDisp);
        [id(0x0000001b), propget, helpstring("property ContactTools")]
        HRESULT ContactTools([out, retval] IDispatch** pVal);
        [id(0x00000012), propget, helpstring("property BeamTools")]
        HRESULT BeamTools([out, retval] IDispatch** pVal);
        [id(0x00000014), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x00000015), helpstring("method AddLoadCase")]
        HRESULT AddLoadCase();
        [id(0x00000016), helpstring("method AddResult")]
        HRESULT AddResult(
                        [in] IDispatch* piSelectMgr, 
                        [in] unsigned int resType, 
                        [out, retval] IDispatch** ppVal);
        [id(0x00000017), helpstring("method AddStressSafetyTool")]
        HRESULT AddStressSafetyTool(
                        [in] unsigned int toolType, 
                        [out, retval] IDispatch** pDisp);
        [id(0x00000018), helpstring("method AddFatigueTool")]
        HRESULT AddFatigueTool([out, retval] IDispatch** ppVal);
        [id(0x00000019), helpstring("method DeleteLoadCase")]
        HRESULT DeleteLoadCase([in] int index);
        [id(0x0000001a), helpstring("method AddContactTool")]
        HRESULT AddContactTool(
                        [in] IDispatch* piSelectMgr, 
                        [out, retval] IDispatch** ppVal);
        [id(0x0000001c), helpstring("method AddBeamTool")]
        HRESULT AddBeamTool(
                        [in] IDispatch* piSelectMgr, 
                        [out, retval] IDispatch** ppVal);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
        [id(0x0000001d), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x0000001e), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00000013), propget, helpstring("property TimeStart")]
        HRESULT TimeStart(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000013), propput, helpstring("property TimeStart")]
        HRESULT TimeStart(
                        [in] int index, 
                        [in] double pVal);
        [id(0x00000032), propget, helpstring("property TimeEnd")]
        HRESULT TimeEnd(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000032), propput, helpstring("property TimeEnd")]
        HRESULT TimeEnd(
                        [in] int index, 
                        [in] double pVal);
        [id(0x0000002a), propget, helpstring("property Freq")]
        HRESULT MinFreq(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x0000002a), propput, helpstring("property Freq")]
        HRESULT MinFreq(
                        [in] int index, 
                        [in] double pVal);
        [id(0x00000033), propget, helpstring("property Freq")]
        HRESULT MaxFreq(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000033), propput, helpstring("property Freq")]
        HRESULT MaxFreq(
                        [in] int index, 
                        [in] double pVal);
        [id(0x00000026), propget, helpstring("property Phase")]
        HRESULT Phase(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000026), propput, helpstring("property Phase")]
        HRESULT Phase(
                        [in] int index, 
                        [in] double pVal);
        [id(0x00000027), propget, helpstring("property Mode")]
        HRESULT Mode(
                        [in] int index, 
                        [out, retval] int* pVal);
        [id(0x00000027), propput, helpstring("property Mode")]
        HRESULT Mode(
                        [in] int index, 
                        [in] int pVal);
        [id(0x00000029), propget, helpstring("property EnvType")]
        HRESULT EnvType(
                        [in] int index, 
                        [out, retval] int* pVal);
        [id(0x00000029), propput, helpstring("property EnvType")]
        HRESULT EnvType(
                        [in] int index, 
                        [in] int pVal);
        [id(0x00000028), propget, helpstring("property Step")]
        HRESULT step(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000028), propput, helpstring("property Step")]
        HRESULT step(
                        [in] int index, 
                        [in] double pVal);
        [id(0x00000020), helpstring("method CalculateSolutionCombinationResults")]
        HRESULT CalculateSolutionCombinationResults([in] IAnsProgress* piProgress);
        [id(0x0000002d), propget, helpstring("property TimeUnitString")]
        HRESULT TimeUnitString([out, retval] BSTR* pVal);
        [id(0x0000002c), propget, helpstring("property FreqUnitString")]
        HRESULT FreqUnitString([out, retval] BSTR* pVal);
        [id(0x0000002b), propget, helpstring("property PhaseUnitString")]
        HRESULT PhaseUnitString([out, retval] BSTR* pVal);
        [id(0x00000023), helpstring("method ResetObject")]
        HRESULT ResetObject();
        [id(0x00000021), propget, helpstring("property UserCombTypes")]
        HRESULT UserCombTypes(
                        [in] unsigned int LoadcaseIndex, 
                        [out, retval] VARIANT_BOOL* pIsOK);
        [id(0x00000022), propget, helpstring("property UserDefinedLoadCaseInfo")]
        HRESULT UserDefinedLoadCaseInfo(
                        [in] int LoadcaseIndex, 
                        [in] int InfoType, 
                        [in] int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00000022), propput, helpstring("property UserDefinedLoadCaseInfo")]
        HRESULT UserDefinedLoadCaseInfo(
                        [in] int LoadcaseIndex, 
                        [in] int InfoType, 
                        [in] int index, 
                        [in] BSTR pVal);
        [id(0x00000024), propget, helpstring("method ScriptLocation")]
        HRESULT ScriptLocation([out, retval] BSTR* ScriptLocation);
        [id(0x00000025), propget, helpstring("method EvaluateLocation")]
        HRESULT EvaluateLocation([out, retval] BSTR* EvaluateLocation);
        [id(0x0000002e), propget, helpstring("method SolveScriptModified")]
        HRESULT SolveScriptModified(
                        [in] VARIANT_BOOL SaveTimeStamp, 
                        [out, retval] VARIANT_BOOL* IsModified);
        [id(0x0000002f), propget, helpstring("method EvalScriptModified")]
        HRESULT EvalScriptModified(
                        [in] VARIANT_BOOL SaveTimeStamp, 
                        [out, retval] VARIANT_BOOL* IsModified);
        [id(0x00000030), propget, helpstring("method SolveScriptTimeStamp")]
        HRESULT SolveScriptTimeStamp([out, retval] BSTR* SolveScriptTimeStamp);
        [id(0x00000031), propget, helpstring("method EvalScriptTimeStamp")]
        HRESULT EvalScriptTimeStamp([out, retval] BSTR* EvalScriptTimeStamp);
        [id(0x00000030), propput, helpstring("method SolveScriptTimeStamp")]
        HRESULT SolveScriptTimeStamp([in] BSTR* SolveScriptTimeStamp);
        [id(0x00000031), propput, helpstring("method EvalScriptTimeStamp")]
        HRESULT EvalScriptTimeStamp([in] BSTR* EvalScriptTimeStamp);
        [id(0x00000034), propget, helpstring("property DisplayDAData")]
        HRESULT DisplayDAData([out, retval] VARIANT_BOOL* IsDADataEnabled);
        [id(0x00000035), propget, helpstring("property SingleSet")]
        HRESULT SingleSet(
                        [in] int index, 
                        [out, retval] VARIANT_BOOL* pVal);
        [id(0x00000035), propput, helpstring("property SingleSet")]
        HRESULT SingleSet(
                        [in] int index, 
                        [in] VARIANT_BOOL pVal);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
    };

    typedef enum {
        DISPID_DAAttributeComments = 10,
        DISPID_DAAttributeSuppressed = 11,
        DISPID_DAAttributeGroupName = 12,
        DISPID_DAAttributeGroupType = 13,
        DISPID_DAAttributeGroupSubtype = 14,
        DISPID_DAAttributeName1 = 21,
        DISPID_DAAttributeName2 = 22,
        DISPID_DAAttributeName3 = 23,
        DISPID_DAAttributeName4 = 24,
        DISPID_DAAttributeName5 = 25,
        DISPID_DAAttributeName6 = 26,
        DISPID_DAAttributeName7 = 27,
        DISPID_DAAttributeName8 = 28,
        DISPID_DAAttributeName9 = 29,
        DISPID_DAAttributeName10 = 30,
        DISPID_DAAttributeValue1 = 31,
        DISPID_DAAttributeValue2 = 32,
        DISPID_DAAttributeValue3 = 33,
        DISPID_DAAttributeValue4 = 34,
        DISPID_DAAttributeValue5 = 35,
        DISPID_DAAttributeValue6 = 36,
        DISPID_DAAttributeValue7 = 37,
        DISPID_DAAttributeValue8 = 38,
        DISPID_DAAttributeValue9 = 39,
        DISPID_DAAttributeValue10 = 40,
        DISPID_DAAttributeValue11 = 41,
        DISPID_DAAttributeValue12 = 42,
        DISPID_DAAttributeValue13 = 43,
        DISPID_DAAttributeValue14 = 44,
        DISPID_DAAttributeValue15 = 45,
        DISPID_DAAttributeValue16 = 46,
        DISPID_DAAttributeValue17 = 47,
        DISPID_DAAttributeValue18 = 48,
        DISPID_DAAttributeValue19 = 49,
        DISPID_DAAttributeValue20 = 50,
        DISPID_DAAttributeGeometrySelection1 = 51,
        DISPID_DAAttributeGeometrySelection2 = 52,
        DISPID_DAAttributeGeometrySelection3 = 53,
        DISPID_DAAttributeGeometrySelection4 = 54,
        DISPID_DAAttributeGeometrySelection5 = 55,
        DISPID_DAAttributeGeometrySelection6 = 56,
        DISPID_DAAttributeGeometrySelection7 = 57,
        DISPID_DAAttributeGeometrySelection8 = 58,
        DISPID_DAAttributeGeometrySelection9 = 59,
        DISPID_DAAttributeGeometrySelection10 = 60,
        DISPID_DAAttributeLoadCaseSelection1 = 61,
        DISPID_DAAttributeLoadCaseSelection2 = 62,
        DISPID_DAAttributeLoadCaseSelection3 = 63,
        DISPID_DAAttributeLoadCaseSelection4 = 64,
        DISPID_DAAttributeLoadCaseSelection5 = 65,
        DISPID_DAAttributeLoadCaseSelection6 = 66,
        DISPID_DAAttributeLoadCaseSelection7 = 67,
        DISPID_DAAttributeLoadCaseSelection8 = 68,
        DISPID_DAAttributeLoadCaseSelection9 = 69,
        DISPID_DAAttributeLoadCaseSelection10 = 70,
        DISPID_DAAttributeImages = 71,
        DISPID_DAAttributeGeometryScopeMethod1 = 72,
        DISPID_DAAttributeGeometryScopeMethod2 = 73,
        DISPID_DAAttributeGeometryScopeMethod3 = 74,
        DISPID_DAAttributeGeometryScopeMethod4 = 75,
        DISPID_DAAttributeGeometryScopeMethod5 = 76,
        DISPID_DAAttributeGeometryScopeMethod6 = 77,
        DISPID_DAAttributeGeometryScopeMethod7 = 78,
        DISPID_DAAttributeGeometryScopeMethod8 = 79,
        DISPID_DAAttributeGeometryScopeMethod9 = 80,
        DISPID_DAAttributeGeometryScopeMethod10 = 81,
        DISPID_DAAttributeGeometrySelectionByName1 = 82,
        DISPID_DAAttributeGeometrySelectionByName2 = 83,
        DISPID_DAAttributeGeometrySelectionByName3 = 84,
        DISPID_DAAttributeGeometrySelectionByName4 = 85,
        DISPID_DAAttributeGeometrySelectionByName5 = 86,
        DISPID_DAAttributeGeometrySelectionByName6 = 87,
        DISPID_DAAttributeGeometrySelectionByName7 = 88,
        DISPID_DAAttributeGeometrySelectionByName8 = 89,
        DISPID_DAAttributeGeometrySelectionByName9 = 90,
        DISPID_DAAttributeGeometrySelectionByName10 = 91,
        DISPID_DAAttributeNumAttributes = 101,
        DISPID_DAAttributeGetGroupType = 102,
        DISPID_DAAttributeGetGroupSubtype = 103,
        DISPID_DAAttributeGetAttributeName = 104,
        DISPID_DAAttributeGetAttributeValue = 105,
        DISPID_DAAttributeGetAttributeValueDataType = 106,
        DISPID_DAAttributeGetAttributeGeomSelection = 107,
        DISPID_DAAttributeGetAttributeLoadCaseSelection = 108,
        DISPID_DAAttributeGetAttributeApplication = 109,
        DISPID_DAAttributeGetAttributeId = 110,
        DISPID_DAAttributeGetHasGeometrySelection = 111,
        DISPID_DAAttributeGetGeometrySelection = 112,
        DISPID_DAAttributeAddComment = 113,
        DISPID_DAAttributeAddFigure = 114,
        DISPID_DAAttributeAddImage = 115,
        DISPID_DAAttributeGetDisplayUnits = 116,
        DISPID_DAAttributeUnitTypeByDispid = 117,
        DISPID_DAAttributeUnitStringByDispid = 118,
        DISPID_DAAttributeParamNameByDispid = 119
    } kDispId_DAAttribute;

    [
      odl,
      uuid(1ED7CC9C-6EC8-4888-9CED-AEF0DD4A1821),
      helpstring("IDSDAAttributeAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSDAAttributeAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** __MIDL__IDSDAAttributeAuto0000);
        [id(0x0000000b), propget, helpstring("property Suppressed")]
        HRESULT Suppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000000b), propput, helpstring("property Suppressed")]
        HRESULT Suppressed([in] VARIANT_BOOL pVal);
        [id(0x0000000c), propget, helpstring("property AttributeGroupName")]
        HRESULT AttributeGroupName([out, retval] BSTR* pVal);
        [id(0x0000000c), propput, helpstring("property AttributeGroupName")]
        HRESULT AttributeGroupName([in] BSTR pVal);
        [id(0x0000000d), propget, helpstring("property AttributeGroupType")]
        HRESULT AttributeGroupType([out, retval] unsigned int* pGroupType);
        [id(0x0000000d), propput, helpstring("property AttributeGroupType")]
        HRESULT AttributeGroupType([in] unsigned int pGroupType);
        [id(0x0000000e), propget, helpstring("property AttributeGroupSubtype")]
        HRESULT AttributeGroupSubtype([out, retval] unsigned int* pGroupSubtype);
        [id(0x0000000e), propput, helpstring("property AttributeGroupSubtype")]
        HRESULT AttributeGroupSubtype([in] unsigned int pGroupSubtype);
        [id(0x00000048), propget, helpstring("property GeometryScopeMethod1")]
        HRESULT GeometryScopeMethod1([out, retval] DSGeometryDefineByType* pVal);
        [id(0x00000048), propput, helpstring("property GeometryScopeMethod1")]
        HRESULT GeometryScopeMethod1([in] DSGeometryDefineByType pVal);
        [id(0x00000049), propget, helpstring("property GeometryScopeMethod2")]
        HRESULT GeometryScopeMethod2([out, retval] DSGeometryDefineByType* pVal);
        [id(0x00000049), propput, helpstring("property GeometryScopeMethod2")]
        HRESULT GeometryScopeMethod2([in] DSGeometryDefineByType pVal);
        [id(0x0000004a), propget, helpstring("property GeometryScopeMethod3")]
        HRESULT GeometryScopeMethod3([out, retval] DSGeometryDefineByType* pVal);
        [id(0x0000004a), propput, helpstring("property GeometryScopeMethod3")]
        HRESULT GeometryScopeMethod3([in] DSGeometryDefineByType pVal);
        [id(0x0000004b), propget, helpstring("property GeometryScopeMethod4")]
        HRESULT GeometryScopeMethod4([out, retval] DSGeometryDefineByType* pVal);
        [id(0x0000004b), propput, helpstring("property GeometryScopeMethod4")]
        HRESULT GeometryScopeMethod4([in] DSGeometryDefineByType pVal);
        [id(0x0000004c), propget, helpstring("property GeometryScopeMethod5")]
        HRESULT GeometryScopeMethod5([out, retval] DSGeometryDefineByType* pVal);
        [id(0x0000004c), propput, helpstring("property GeometryScopeMethod5")]
        HRESULT GeometryScopeMethod5([in] DSGeometryDefineByType pVal);
        [id(0x0000004d), propget, helpstring("property GeometryScopeMethod6")]
        HRESULT GeometryScopeMethod6([out, retval] DSGeometryDefineByType* pVal);
        [id(0x0000004d), propput, helpstring("property GeometryScopeMethod6")]
        HRESULT GeometryScopeMethod6([in] DSGeometryDefineByType pVal);
        [id(0x0000004e), propget, helpstring("property GeometryScopeMethod7")]
        HRESULT GeometryScopeMethod7([out, retval] DSGeometryDefineByType* pVal);
        [id(0x0000004e), propput, helpstring("property GeometryScopeMethod7")]
        HRESULT GeometryScopeMethod7([in] DSGeometryDefineByType pVal);
        [id(0x0000004f), propget, helpstring("property GeometryScopeMethod8")]
        HRESULT GeometryScopeMethod8([out, retval] DSGeometryDefineByType* pVal);
        [id(0x0000004f), propput, helpstring("property GeometryScopeMethod8")]
        HRESULT GeometryScopeMethod8([in] DSGeometryDefineByType pVal);
        [id(0x00000050), propget, helpstring("property GeometryScopeMethod9")]
        HRESULT GeometryScopeMethod9([out, retval] DSGeometryDefineByType* pVal);
        [id(0x00000050), propput, helpstring("property GeometryScopeMethod9")]
        HRESULT GeometryScopeMethod9([in] DSGeometryDefineByType pVal);
        [id(0x00000051), propget, helpstring("property GeometryScopeMethod10")]
        HRESULT GeometryScopeMethod10([out, retval] DSGeometryDefineByType* pVal);
        [id(0x00000051), propput, helpstring("property GeometryScopeMethod10")]
        HRESULT GeometryScopeMethod10([in] DSGeometryDefineByType pVal);
        [id(0x00000052), propget, helpstring("property GeometrySelectionByName1")]
        HRESULT GeometrySelectionByName1([out, retval] dsid* pVal);
        [id(0x00000052), propput, helpstring("property GeometrySelectionByName1")]
        HRESULT GeometrySelectionByName1([in] dsid pVal);
        [id(0x00000053), propget, helpstring("property GeometrySelectionByName2")]
        HRESULT GeometrySelectionByName2([out, retval] dsid* pVal);
        [id(0x00000053), propput, helpstring("property GeometrySelectionByName2")]
        HRESULT GeometrySelectionByName2([in] dsid pVal);
        [id(0x00000054), propget, helpstring("property GeometrySelectionByName3")]
        HRESULT GeometrySelectionByName3([out, retval] dsid* pVal);
        [id(0x00000054), propput, helpstring("property GeometrySelectionByName3")]
        HRESULT GeometrySelectionByName3([in] dsid pVal);
        [id(0x00000055), propget, helpstring("property GeometrySelectionByName4")]
        HRESULT GeometrySelectionByName4([out, retval] dsid* pVal);
        [id(0x00000055), propput, helpstring("property GeometrySelectionByName4")]
        HRESULT GeometrySelectionByName4([in] dsid pVal);
        [id(0x00000056), propget, helpstring("property GeometrySelectionByName5")]
        HRESULT GeometrySelectionByName5([out, retval] dsid* pVal);
        [id(0x00000056), propput, helpstring("property GeometrySelectionByName5")]
        HRESULT GeometrySelectionByName5([in] dsid pVal);
        [id(0x00000057), propget, helpstring("property GeometrySelectionByName6")]
        HRESULT GeometrySelectionByName6([out, retval] dsid* pVal);
        [id(0x00000057), propput, helpstring("property GeometrySelectionByName6")]
        HRESULT GeometrySelectionByName6([in] dsid pVal);
        [id(0x00000058), propget, helpstring("property GeometrySelectionByName7")]
        HRESULT GeometrySelectionByName7([out, retval] dsid* pVal);
        [id(0x00000058), propput, helpstring("property GeometrySelectionByName7")]
        HRESULT GeometrySelectionByName7([in] dsid pVal);
        [id(0x00000059), propget, helpstring("property GeometrySelectionByName8")]
        HRESULT GeometrySelectionByName8([out, retval] dsid* pVal);
        [id(0x00000059), propput, helpstring("property GeometrySelectionByName8")]
        HRESULT GeometrySelectionByName8([in] dsid pVal);
        [id(0x0000005a), propget, helpstring("property GeometrySelectionByName9")]
        HRESULT GeometrySelectionByName9([out, retval] dsid* pVal);
        [id(0x0000005a), propput, helpstring("property GeometrySelectionByName9")]
        HRESULT GeometrySelectionByName9([in] dsid pVal);
        [id(0x0000005b), propget, helpstring("property GeometrySelectionByName10")]
        HRESULT GeometrySelectionByName10([out, retval] dsid* pVal);
        [id(0x0000005b), propput, helpstring("property GeometrySelectionByName10")]
        HRESULT GeometrySelectionByName10([in] dsid pVal);
        [id(0x00000015), propget, helpstring("property AttributeName1")]
        HRESULT AttributeName1([out, retval] BSTR* pVal);
        [id(0x00000015), propput, helpstring("property AttributeName1")]
        HRESULT AttributeName1([in] BSTR pVal);
        [id(0x00000016), propget, helpstring("property AttributeName2")]
        HRESULT AttributeName2([out, retval] BSTR* pVal);
        [id(0x00000016), propput, helpstring("property AttributeName2")]
        HRESULT AttributeName2([in] BSTR pVal);
        [id(0x00000017), propget, helpstring("property AttributeName3")]
        HRESULT AttributeName3([out, retval] BSTR* pVal);
        [id(0x00000017), propput, helpstring("property AttributeName3")]
        HRESULT AttributeName3([in] BSTR pVal);
        [id(0x00000018), propget, helpstring("property AttributeName4")]
        HRESULT AttributeName4([out, retval] BSTR* pVal);
        [id(0x00000018), propput, helpstring("property AttributeName4")]
        HRESULT AttributeName4([in] BSTR pVal);
        [id(0x00000019), propget, helpstring("property AttributeName5")]
        HRESULT AttributeName5([out, retval] BSTR* pVal);
        [id(0x00000019), propput, helpstring("property AttributeName5")]
        HRESULT AttributeName5([in] BSTR pVal);
        [id(0x0000001a), propget, helpstring("property AttributeName6")]
        HRESULT AttributeName6([out, retval] BSTR* pVal);
        [id(0x0000001a), propput, helpstring("property AttributeName6")]
        HRESULT AttributeName6([in] BSTR pVal);
        [id(0x0000001b), propget, helpstring("property AttributeName7")]
        HRESULT AttributeName7([out, retval] BSTR* pVal);
        [id(0x0000001b), propput, helpstring("property AttributeName7")]
        HRESULT AttributeName7([in] BSTR pVal);
        [id(0x0000001c), propget, helpstring("property AttributeName8")]
        HRESULT AttributeName8([out, retval] BSTR* pVal);
        [id(0x0000001c), propput, helpstring("property AttributeName8")]
        HRESULT AttributeName8([in] BSTR pVal);
        [id(0x0000001d), propget, helpstring("property AttributeName9")]
        HRESULT AttributeName9([out, retval] BSTR* pVal);
        [id(0x0000001d), propput, helpstring("property AttributeName9")]
        HRESULT AttributeName9([in] BSTR pVal);
        [id(0x0000001e), propget, helpstring("property AttributeName10")]
        HRESULT AttributeName10([out, retval] BSTR* pVal);
        [id(0x0000001e), propput, helpstring("property AttributeName10")]
        HRESULT AttributeName10([in] BSTR pVal);
        [id(0x0000001f), propget, helpstring("property AttributeValue1")]
        HRESULT AttributeValue1([out, retval] BSTR* pVar);
        [id(0x0000001f), propput, helpstring("property AttributeValue1")]
        HRESULT AttributeValue1([in] BSTR pVar);
        [id(0x00000020), propget, helpstring("property AttributeValue2")]
        HRESULT AttributeValue2([out, retval] BSTR* pVar);
        [id(0x00000020), propput, helpstring("property AttributeValue2")]
        HRESULT AttributeValue2([in] BSTR pVar);
        [id(0x00000021), propget, helpstring("property AttributeValue3")]
        HRESULT AttributeValue3([out, retval] BSTR* pVar);
        [id(0x00000021), propput, helpstring("property AttributeValue3")]
        HRESULT AttributeValue3([in] BSTR pVar);
        [id(0x00000022), propget, helpstring("property AttributeValue4")]
        HRESULT AttributeValue4([out, retval] BSTR* pVar);
        [id(0x00000022), propput, helpstring("property AttributeValue4")]
        HRESULT AttributeValue4([in] BSTR pVar);
        [id(0x00000023), propget, helpstring("property AttributeValue5")]
        HRESULT AttributeValue5([out, retval] BSTR* pVar);
        [id(0x00000023), propput, helpstring("property AttributeValue5")]
        HRESULT AttributeValue5([in] BSTR pVar);
        [id(0x00000024), propget, helpstring("property AttributeValue6")]
        HRESULT AttributeValue6([out, retval] BSTR* pVar);
        [id(0x00000024), propput, helpstring("property AttributeValue6")]
        HRESULT AttributeValue6([in] BSTR pVar);
        [id(0x00000025), propget, helpstring("property AttributeValue7")]
        HRESULT AttributeValue7([out, retval] BSTR* pVar);
        [id(0x00000025), propput, helpstring("property AttributeValue7")]
        HRESULT AttributeValue7([in] BSTR pVar);
        [id(0x00000026), propget, helpstring("property AttributeValue8")]
        HRESULT AttributeValue8([out, retval] BSTR* pVar);
        [id(0x00000026), propput, helpstring("property AttributeValue8")]
        HRESULT AttributeValue8([in] BSTR pVar);
        [id(0x00000027), propget, helpstring("property AttributeValue9")]
        HRESULT AttributeValue9([out, retval] BSTR* pVar);
        [id(0x00000027), propput, helpstring("property AttributeValue9")]
        HRESULT AttributeValue9([in] BSTR pVar);
        [id(0x00000028), propget, helpstring("property AttributeValue10")]
        HRESULT AttributeValue10([out, retval] BSTR* pVar);
        [id(0x00000028), propput, helpstring("property AttributeValue10")]
        HRESULT AttributeValue10([in] BSTR pVar);
        [id(0x00000029), propget, helpstring("property AttributeValue11")]
        HRESULT AttributeValue11([out, retval] unsigned int* pVal);
        [id(0x00000029), propput, helpstring("property AttributeValue11")]
        HRESULT AttributeValue11([in] unsigned int pVal);
        [id(0x0000002a), propget, helpstring("property AttributeValue12")]
        HRESULT AttributeValue12([out, retval] unsigned int* pVal);
        [id(0x0000002a), propput, helpstring("property AttributeValue12")]
        HRESULT AttributeValue12([in] unsigned int pVal);
        [id(0x0000002b), propget, helpstring("property AttributeValue13")]
        HRESULT AttributeValue13([out, retval] unsigned int* pVal);
        [id(0x0000002b), propput, helpstring("property AttributeValue13")]
        HRESULT AttributeValue13([in] unsigned int pVal);
        [id(0x0000002c), propget, helpstring("property AttributeValue14")]
        HRESULT AttributeValue14([out, retval] unsigned int* pVal);
        [id(0x0000002c), propput, helpstring("property AttributeValue14")]
        HRESULT AttributeValue14([in] unsigned int pVal);
        [id(0x0000002d), propget, helpstring("property AttributeValue15")]
        HRESULT AttributeValue15([out, retval] unsigned int* pVal);
        [id(0x0000002d), propput, helpstring("property AttributeValue15")]
        HRESULT AttributeValue15([in] unsigned int pVal);
        [id(0x0000002e), propget, helpstring("property AttributeValue16")]
        HRESULT AttributeValue16([out, retval] unsigned int* pVal);
        [id(0x0000002e), propput, helpstring("property AttributeValue16")]
        HRESULT AttributeValue16([in] unsigned int pVal);
        [id(0x0000002f), propget, helpstring("property AttributeValue17")]
        HRESULT AttributeValue17([out, retval] unsigned int* pVal);
        [id(0x0000002f), propput, helpstring("property AttributeValue17")]
        HRESULT AttributeValue17([in] unsigned int pVal);
        [id(0x00000030), propget, helpstring("property AttributeValue18")]
        HRESULT AttributeValue18([out, retval] unsigned int* pVal);
        [id(0x00000030), propput, helpstring("property AttributeValue18")]
        HRESULT AttributeValue18([in] unsigned int pVal);
        [id(0x00000031), propget, helpstring("property AttributeValue19")]
        HRESULT AttributeValue19([out, retval] unsigned int* pVal);
        [id(0x00000031), propput, helpstring("property AttributeValue19")]
        HRESULT AttributeValue19([in] unsigned int pVal);
        [id(0x00000032), propget, helpstring("property AttributeValue20")]
        HRESULT AttributeValue20([out, retval] unsigned int* pVal);
        [id(0x00000032), propput, helpstring("property AttributeValue20")]
        HRESULT AttributeValue20([in] unsigned int pVal);
        [id(0x00000033), propput, helpstring("property GeometrySelection1")]
        HRESULT GeometrySelection1([in] IDispatch* rhs);
        [id(0x00000034), propput, helpstring("property GeometrySelection2")]
        HRESULT GeometrySelection2([in] IDispatch* rhs);
        [id(0x00000035), propput, helpstring("property GeometrySelection3")]
        HRESULT GeometrySelection3([in] IDispatch* rhs);
        [id(0x00000036), propput, helpstring("property GeometrySelection4")]
        HRESULT GeometrySelection4([in] IDispatch* rhs);
        [id(0x00000037), propput, helpstring("property GeometrySelection5")]
        HRESULT GeometrySelection5([in] IDispatch* rhs);
        [id(0x00000038), propput, helpstring("property GeometrySelection6")]
        HRESULT GeometrySelection6([in] IDispatch* rhs);
        [id(0x00000039), propput, helpstring("property GeometrySelection7")]
        HRESULT GeometrySelection7([in] IDispatch* rhs);
        [id(0x0000003a), propput, helpstring("property GeometrySelection8")]
        HRESULT GeometrySelection8([in] IDispatch* rhs);
        [id(0x0000003b), propput, helpstring("property GeometrySelection9")]
        HRESULT GeometrySelection9([in] IDispatch* rhs);
        [id(0x0000003c), propput, helpstring("property GeometrySelection10")]
        HRESULT GeometrySelection10([in] IDispatch* rhs);
        [id(0x0000003d), propget, helpstring("property LoadCaseSelection1")]
        HRESULT LoadCaseSelection1([out, retval] unsigned int* pLoadCase);
        [id(0x0000003d), propput, helpstring("property LoadCaseSelection1")]
        HRESULT LoadCaseSelection1([in] unsigned int pLoadCase);
        [id(0x0000003e), propget, helpstring("property LoadCaseSelection2")]
        HRESULT LoadCaseSelection2([out, retval] unsigned int* pLoadCase);
        [id(0x0000003e), propput, helpstring("property LoadCaseSelection2")]
        HRESULT LoadCaseSelection2([in] unsigned int pLoadCase);
        [id(0x0000003f), propget, helpstring("property LoadCaseSelection3")]
        HRESULT LoadCaseSelection3([out, retval] unsigned int* pLoadCase);
        [id(0x0000003f), propput, helpstring("property LoadCaseSelection3")]
        HRESULT LoadCaseSelection3([in] unsigned int pLoadCase);
        [id(0x00000040), propget, helpstring("property LoadCaseSelection4")]
        HRESULT LoadCaseSelection4([out, retval] unsigned int* pLoadCase);
        [id(0x00000040), propput, helpstring("property LoadCaseSelection4")]
        HRESULT LoadCaseSelection4([in] unsigned int pLoadCase);
        [id(0x00000041), propget, helpstring("property LoadCaseSelection5")]
        HRESULT LoadCaseSelection5([out, retval] unsigned int* pLoadCase);
        [id(0x00000041), propput, helpstring("property LoadCaseSelection5")]
        HRESULT LoadCaseSelection5([in] unsigned int pLoadCase);
        [id(0x00000042), propget, helpstring("property LoadCaseSelection6")]
        HRESULT LoadCaseSelection6([out, retval] unsigned int* pLoadCase);
        [id(0x00000042), propput, helpstring("property LoadCaseSelection6")]
        HRESULT LoadCaseSelection6([in] unsigned int pLoadCase);
        [id(0x00000043), propget, helpstring("property LoadCaseSelection7")]
        HRESULT LoadCaseSelection7([out, retval] unsigned int* pLoadCase);
        [id(0x00000043), propput, helpstring("property LoadCaseSelection7")]
        HRESULT LoadCaseSelection7([in] unsigned int pLoadCase);
        [id(0x00000044), propget, helpstring("property LoadCaseSelection8")]
        HRESULT LoadCaseSelection8([out, retval] unsigned int* pLoadCase);
        [id(0x00000044), propput, helpstring("property LoadCaseSelection8")]
        HRESULT LoadCaseSelection8([in] unsigned int pLoadCase);
        [id(0x00000045), propget, helpstring("property LoadCaseSelection9")]
        HRESULT LoadCaseSelection9([out, retval] unsigned int* pLoadCase);
        [id(0x00000045), propput, helpstring("property LoadCaseSelection9")]
        HRESULT LoadCaseSelection9([in] unsigned int pLoadCase);
        [id(0x00000046), propget, helpstring("property LoadCaseSelection10")]
        HRESULT LoadCaseSelection10([out, retval] unsigned int* pLoadCase);
        [id(0x00000046), propput, helpstring("property LoadCaseSelection10")]
        HRESULT LoadCaseSelection10([in] unsigned int pLoadCase);
        [id(0x00000065), helpstring("method GetNumAttribututes")]
        HRESULT GetNumAttribututes([out, retval] int* numAttr);
        [id(0x00000066), helpstring("method GetGroupType")]
        HRESULT GetGroupType([out, retval] BSTR* groupType);
        [id(0x00000067), helpstring("method GetGroupSubtype")]
        HRESULT GetGroupSubtype([out, retval] BSTR* groupSubtype);
        [id(0x00000068), helpstring("method GetAttributeName")]
        HRESULT GetAttributeName(
                        [in] int index, 
                        [out, retval] BSTR* attrName);
        [id(0x00000069), helpstring("method GetAttributeValue")]
        HRESULT GetAttributeValue(
                        [in] int index, 
                        [out, retval] BSTR* attrValue);
        [id(0x0000006a), helpstring("method GetAttributeValueDataType")]
        HRESULT GetAttributeValueDataType(
                        [in] int index, 
                        [out, retval] BSTR* attrValue);
        [id(0x0000006b), helpstring("method GetAttributeGeomSelection")]
        HRESULT GetAttributeGeomSelection(
                        [in] int index, 
                        [out, retval] BSTR* attrGeomSelection);
        [id(0x0000006c), helpstring("method GetAttributeLoadCaseSelection")]
        HRESULT GetAttributeLoadCaseSelection(
                        [in] int index, 
                        [out, retval] unsigned int* loadCaseSelection);
        [id(0x0000006d), helpstring("method GetAttributeApplication")]
        HRESULT GetAttributeApplication(
                        [in] int index, 
                        [out, retval] BSTR* application);
        [id(0x0000006e), helpstring("method GetAttributeId")]
        HRESULT GetAttributeId(
                        [in] int index, 
                        [out, retval] int* attrId);
        [id(0x0000006f), helpstring("method getHasGeometrySelection")]
        HRESULT getHasGeometrySelection(
                        [in] int index, 
                        [out, retval] VARIANT_BOOL* pHasGeom);
        [id(0x00000070), helpstring("method getGeometrySelection")]
        HRESULT getGeometrySelection(
                        [in] int index, 
                        [out, retval] BSTR* ScopeID);
        [id(0x00000071), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x00000072), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x00000073), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00000047), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000074), helpstring("method GetAttributeDisplayUnits")]
        HRESULT GetAttributeDisplayUnits(
                        [in] int index, 
                        [out, retval] BSTR* groupUnits);
        [id(0x00000075), propget, helpstring("property UnitTypeByDispid")]
        HRESULT UnitTypeByDispid(
                        [in] int dispid, 
                        [out, retval] int* unitType);
        [id(0x00000076), propget, helpstring("property UnitStringByDispid")]
        HRESULT UnitStringByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* unitString);
        [id(0x00000077), propget, helpstring("property ParamNameByDispid")]
        HRESULT ParamNameByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* paramName);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
    };

    typedef enum {
        DISPID_DAResultGroupType = 11,
        DISPID_DAResultGroupSubtype = 12,
        DISPID_DAResultComponentSelection = 13,
        DISPID_DAResultComponentSelectionName = 14,
        DISPID_DAResultGeometryScopeMethod = 15,
        DISPID_DAResultGeometrySelection = 16,
        DISPID_DAResultGeometrySelectionByName = 17,
        DISPID_DAResultOutputUnitType = 18,
        DISPID_DAResultName1 = 21,
        DISPID_DAResultName2 = 22,
        DISPID_DAResultName3 = 23,
        DISPID_DAResultName4 = 24,
        DISPID_DAResultName5 = 25,
        DISPID_DAResultName6 = 26,
        DISPID_DAResultName7 = 27,
        DISPID_DAResultName8 = 28,
        DISPID_DAResultName9 = 29,
        DISPID_DAResultName10 = 30,
        DISPID_DAResultEntryValue1 = 31,
        DISPID_DAResultEntryValue2 = 32,
        DISPID_DAResultEntryValue3 = 33,
        DISPID_DAResultEntryValue4 = 34,
        DISPID_DAResultEntryValue5 = 35,
        DISPID_DAResultEntryValue6 = 36,
        DISPID_DAResultEntryValue7 = 37,
        DISPID_DAResultEntryValue8 = 38,
        DISPID_DAResultEntryValue9 = 39,
        DISPID_DAResultEntryValue10 = 40,
        DISPID_DAResultEntryValue11 = 41,
        DISPID_DAResultEntryValue12 = 42,
        DISPID_DAResultEntryValue13 = 43,
        DISPID_DAResultEntryValue14 = 44,
        DISPID_DAResultEntryValue15 = 45,
        DISPID_DAResultEntryValue16 = 46,
        DISPID_DAResultEntryValue17 = 47,
        DISPID_DAResultEntryValue18 = 48,
        DISPID_DAResultEntryValue19 = 49,
        DISPID_DAResultEntryValue20 = 50,
        DISPID_DAResultResultValue1 = 51,
        DISPID_DAResultResultValue2 = 52,
        DISPID_DAResultResultValue3 = 53,
        DISPID_DAResultResultValue4 = 54,
        DISPID_DAResultResultValue5 = 55,
        DISPID_DAResultResultValue6 = 56,
        DISPID_DAResultResultValue7 = 57,
        DISPID_DAResultResultValue8 = 58,
        DISPID_DAResultResultValue9 = 59,
        DISPID_DAResultResultValue10 = 60,
        DISPID_DAResultResultValue11 = 61,
        DISPID_DAResultResultValue12 = 62,
        DISPID_DAResultResultValue13 = 63,
        DISPID_DAResultResultValue14 = 64,
        DISPID_DAResultResultValue15 = 65,
        DISPID_DAResultResultValue16 = 66,
        DISPID_DAResultResultValue17 = 67,
        DISPID_DAResultResultValue18 = 68,
        DISPID_DAResultResultValue19 = 69,
        DISPID_DAResultResultValue20 = 70,
        DISPID_DAResultMinimum = 71,
        DISPID_DAResultMaximum = 72,
        DISPID_DAResultMinimumBodyName = 73,
        DISPID_DAResultMaximumBodyName = 74,
        DISPID_DAResultUnitTypeByDispid = 75,
        DISPID_DAResultUnitStringByDispid = 76,
        DISPID_DAResultParamNameByDispid = 77,
        DISPID_DAResultIsSolved = 78,
        DISPID_DAResultImages = 79,
        DISPID_DAResultDisplayTime = 80,
        DISPID_DAResultCalculateTimeHistory = 81,
        DISPID_DAResultSetDriver = 82,
        DISPID_DAResultSetNumber = 83,
        DISPID_DAResultCalculateFreqHistory = 84,
        DISPID_DAResultNumAttributes = 101,
        DISPID_DAResultGetGroupType = 102,
        DISPID_DAResultGetGroupSubtype = 103,
        DISPID_DAResultGetDisplayType = 104,
        DISPID_DAResultGetAttributeName = 105,
        DISPID_DAResultGetEntryValue = 106,
        DISPID_DAResultGetEntryValueDataType = 107,
        DISPID_DAResultGetAttributeId = 108,
        DISPID_DAResultAddComment = 109,
        DISPID_DAResultAddFigure = 110,
        DISPID_DAResultAddImage = 111,
        DISPID_DAResultRenameBasedOnDefinition = 112,
        DISPID_DAResultGetDisplayStyle = 113,
        DISPID_DAResultGetDisplayUnits = 114,
        DISPID_DAResultGetComponent = 115,
        DISPID_DAResultMinimumOfMinimumOverTime = 116,
        DISPID_DAResultMaximumOfMinimumOverTime = 117,
        DISPID_DAResultMinimumOfMaximumOverTime = 118,
        DISPID_DAResultMaximumOfMaximumOverTime = 119,
        DISPID_DAResultAdjustLegend = 120,
        DISPID_DAResultTime = 121,
        DISPID_DAResultLoadStep = 122,
        DISPID_DAResultSubstep = 123,
        DISPID_DAResultLegendStyle = 124
    } kDispId_DAResult;

    [
      odl,
      uuid(3ECB4500-E072-4F12-949E-18854F47EC5D),
      helpstring("IDSDAResultAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSDAResultAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x00000051), propget, helpstring("method CalculateTimeHistory")]
        HRESULT CalculateTimeHistory([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000051), propput, helpstring("method CalculateTimeHistory")]
        HRESULT CalculateTimeHistory([in] VARIANT_BOOL pVal);
        [id(0x00000052), propget, helpstring("method SetDriver")]
        HRESULT SetDriver([out, retval] DSSetDriverStyle* pVal);
        [id(0x00000052), propput, helpstring("method SetDriver")]
        HRESULT SetDriver([in] DSSetDriverStyle pVal);
        [id(0x00000053), propget, helpstring("method SetNumber")]
        HRESULT SetNumber([out, retval] unsigned int* pVal);
        [id(0x00000053), propput, helpstring("method SetNumber")]
        HRESULT SetNumber([in] unsigned int pVal);
        [id(0x00000050), propget, helpstring("property DisplayTime")]
        HRESULT DisplayTime([out, retval] double* pVal);
        [id(0x00000050), propput, helpstring("property DisplayTime")]
        HRESULT DisplayTime([in] double pVal);
        [id(0x00000079), propget, helpstring("property Time")]
        HRESULT Time([out, retval] double* pVal);
        [id(0x0000007a), propget, helpstring("property LoadStep")]
        HRESULT LoadStep([out, retval] int* pVal);
        [id(0x0000007b), propget, helpstring("property Substep")]
        HRESULT Substep([out, retval] int* pVal);
        [id(0x0000000b), propget, helpstring("property GroupType")]
        HRESULT groupType([out, retval] unsigned int* pGroupType);
        [id(0x0000000b), propput, helpstring("property GroupType")]
        HRESULT groupType([in] unsigned int pGroupType);
        [id(0x0000000c), propget, helpstring("property GroupSubtype")]
        HRESULT groupSubtype([out, retval] unsigned int* pGroupSubtype);
        [id(0x0000000c), propput, helpstring("property GroupSubtype")]
        HRESULT groupSubtype([in] unsigned int pGroupSubtype);
        [id(0x0000000d), propget, helpstring("property ComponentSelection")]
        HRESULT ComponentSelection([out, retval] unsigned int* pComponentSelection);
        [id(0x0000000d), propput, helpstring("property ComponentSelection")]
        HRESULT ComponentSelection([in] unsigned int pComponentSelection);
        [id(0x0000000e), propget, helpstring("property ComponentSelection")]
        HRESULT ComponentSelectionName([out, retval] BSTR* pComponentSelection);
        [id(0x0000000f), propget, helpstring("property GeometryScopeMethod")]
        HRESULT GeometryScopeMethod([out, retval] DSGeometryDefineByType* pVal);
        [id(0x0000000f), propput, helpstring("property GeometryScopeMethod")]
        HRESULT GeometryScopeMethod([in] DSGeometryDefineByType pVal);
        [id(0x00000010), propput, helpstring("property GeometrySelection")]
        HRESULT GeometrySelection([in] IDispatch* rhs);
        [id(0x00000011), propget, helpstring("property GeometrySelectionByName")]
        HRESULT GeometrySelectionByName([out, retval] dsid* pVal);
        [id(0x00000011), propput, helpstring("property GeometrySelectionByName")]
        HRESULT GeometrySelectionByName([in] dsid pVal);
        [id(0x00000012), propget, helpstring("property OutputUnitType")]
        HRESULT OutputUnitType([out, retval] WBUnitCategoryType* pVal);
        [id(0x00000015), propget, helpstring("property Name1")]
        HRESULT Name1([out, retval] BSTR* pVal);
        [id(0x00000015), propput, helpstring("property Name1")]
        HRESULT Name1([in] BSTR pVal);
        [id(0x00000016), propget, helpstring("property Name2")]
        HRESULT Name2([out, retval] BSTR* pVal);
        [id(0x00000016), propput, helpstring("property Name2")]
        HRESULT Name2([in] BSTR pVal);
        [id(0x00000017), propget, helpstring("property Name3")]
        HRESULT Name3([out, retval] BSTR* pVal);
        [id(0x00000017), propput, helpstring("property Name3")]
        HRESULT Name3([in] BSTR pVal);
        [id(0x00000018), propget, helpstring("property Name4")]
        HRESULT Name4([out, retval] BSTR* pVal);
        [id(0x00000018), propput, helpstring("property Name4")]
        HRESULT Name4([in] BSTR pVal);
        [id(0x00000019), propget, helpstring("property Name5")]
        HRESULT Name5([out, retval] BSTR* pVal);
        [id(0x00000019), propput, helpstring("property Name5")]
        HRESULT Name5([in] BSTR pVal);
        [id(0x0000001a), propget, helpstring("property Name6")]
        HRESULT Name6([out, retval] BSTR* pVal);
        [id(0x0000001a), propput, helpstring("property Name6")]
        HRESULT Name6([in] BSTR pVal);
        [id(0x0000001b), propget, helpstring("property Name7")]
        HRESULT Name7([out, retval] BSTR* pVal);
        [id(0x0000001b), propput, helpstring("property Name7")]
        HRESULT Name7([in] BSTR pVal);
        [id(0x0000001c), propget, helpstring("property Name8")]
        HRESULT Name8([out, retval] BSTR* pVal);
        [id(0x0000001c), propput, helpstring("property Name8")]
        HRESULT Name8([in] BSTR pVal);
        [id(0x0000001d), propget, helpstring("property Name9")]
        HRESULT Name9([out, retval] BSTR* pVal);
        [id(0x0000001d), propput, helpstring("property Name9")]
        HRESULT Name9([in] BSTR pVal);
        [id(0x0000001e), propget, helpstring("property Name10")]
        HRESULT Name10([out, retval] BSTR* pVal);
        [id(0x0000001e), propput, helpstring("property Name10")]
        HRESULT Name10([in] BSTR pVal);
        [id(0x0000001f), propget, helpstring("property EntryValue1")]
        HRESULT EntryValue1([out, retval] BSTR* pVar);
        [id(0x0000001f), propput, helpstring("property EntryValue1")]
        HRESULT EntryValue1([in] BSTR pVar);
        [id(0x00000020), propget, helpstring("property EntryValue2")]
        HRESULT EntryValue2([out, retval] BSTR* pVar);
        [id(0x00000020), propput, helpstring("property EntryValue2")]
        HRESULT EntryValue2([in] BSTR pVar);
        [id(0x00000021), propget, helpstring("property EntryValue3")]
        HRESULT EntryValue3([out, retval] BSTR* pVar);
        [id(0x00000021), propput, helpstring("property EntryValue3")]
        HRESULT EntryValue3([in] BSTR pVar);
        [id(0x00000022), propget, helpstring("property EntryValue4")]
        HRESULT EntryValue4([out, retval] BSTR* pVar);
        [id(0x00000022), propput, helpstring("property EntryValue4")]
        HRESULT EntryValue4([in] BSTR pVar);
        [id(0x00000023), propget, helpstring("property EntryValue5")]
        HRESULT EntryValue5([out, retval] BSTR* pVar);
        [id(0x00000023), propput, helpstring("property EntryValue5")]
        HRESULT EntryValue5([in] BSTR pVar);
        [id(0x00000024), propget, helpstring("property EntryValue6")]
        HRESULT EntryValue6([out, retval] BSTR* pVar);
        [id(0x00000024), propput, helpstring("property EntryValue6")]
        HRESULT EntryValue6([in] BSTR pVar);
        [id(0x00000025), propget, helpstring("property EntryValue7")]
        HRESULT EntryValue7([out, retval] BSTR* pVar);
        [id(0x00000025), propput, helpstring("property EntryValue7")]
        HRESULT EntryValue7([in] BSTR pVar);
        [id(0x00000026), propget, helpstring("property EntryValue8")]
        HRESULT EntryValue8([out, retval] BSTR* pVar);
        [id(0x00000026), propput, helpstring("property EntryValue8")]
        HRESULT EntryValue8([in] BSTR pVar);
        [id(0x00000027), propget, helpstring("property EntryValue9")]
        HRESULT EntryValue9([out, retval] BSTR* pVar);
        [id(0x00000027), propput, helpstring("property EntryValue9")]
        HRESULT EntryValue9([in] BSTR pVar);
        [id(0x00000028), propget, helpstring("property EntryValue10")]
        HRESULT EntryValue10([out, retval] BSTR* pVar);
        [id(0x00000028), propput, helpstring("property EntryValue10")]
        HRESULT EntryValue10([in] BSTR pVar);
        [id(0x00000029), propget, helpstring("property EntryValue11")]
        HRESULT EntryValue11([out, retval] unsigned int* pVal);
        [id(0x00000029), propput, helpstring("property EntryValue11")]
        HRESULT EntryValue11([in] unsigned int pVal);
        [id(0x0000002a), propget, helpstring("property EntryValue12")]
        HRESULT EntryValue12([out, retval] unsigned int* pVal);
        [id(0x0000002a), propput, helpstring("property EntryValue12")]
        HRESULT EntryValue12([in] unsigned int pVal);
        [id(0x0000002b), propget, helpstring("property EntryValue13")]
        HRESULT EntryValue13([out, retval] unsigned int* pVal);
        [id(0x0000002b), propput, helpstring("property EntryValue13")]
        HRESULT EntryValue13([in] unsigned int pVal);
        [id(0x0000002c), propget, helpstring("property EntryValue14")]
        HRESULT EntryValue14([out, retval] unsigned int* pVal);
        [id(0x0000002c), propput, helpstring("property EntryValue14")]
        HRESULT EntryValue14([in] unsigned int pVal);
        [id(0x0000002d), propget, helpstring("property EntryValue15")]
        HRESULT EntryValue15([out, retval] unsigned int* pVal);
        [id(0x0000002d), propput, helpstring("property EntryValue15")]
        HRESULT EntryValue15([in] unsigned int pVal);
        [id(0x0000002e), propget, helpstring("property EntryValue16")]
        HRESULT EntryValue16([out, retval] unsigned int* pVal);
        [id(0x0000002e), propput, helpstring("property EntryValue16")]
        HRESULT EntryValue16([in] unsigned int pVal);
        [id(0x0000002f), propget, helpstring("property EntryValue17")]
        HRESULT EntryValue17([out, retval] unsigned int* pVal);
        [id(0x0000002f), propput, helpstring("property EntryValue17")]
        HRESULT EntryValue17([in] unsigned int pVal);
        [id(0x00000030), propget, helpstring("property EntryValue18")]
        HRESULT EntryValue18([out, retval] unsigned int* pVal);
        [id(0x00000030), propput, helpstring("property EntryValue18")]
        HRESULT EntryValue18([in] unsigned int pVal);
        [id(0x00000031), propget, helpstring("property EntryValue19")]
        HRESULT EntryValue19([out, retval] unsigned int* pVal);
        [id(0x00000031), propput, helpstring("property EntryValue19")]
        HRESULT EntryValue19([in] unsigned int pVal);
        [id(0x00000032), propget, helpstring("property EntryValue20")]
        HRESULT EntryValue20([out, retval] unsigned int* pVal);
        [id(0x00000032), propput, helpstring("property EntryValue20")]
        HRESULT EntryValue20([in] unsigned int pVal);
        [id(0x00000033), propget, helpstring("property ResultValue1")]
        HRESULT ResultValue1([out, retval] BSTR* pVar);
        [id(0x00000033), propput, helpstring("property ResultValue1")]
        HRESULT ResultValue1([in] BSTR pVar);
        [id(0x00000034), propget, helpstring("property ResultValue2")]
        HRESULT ResultValue2([out, retval] BSTR* pVar);
        [id(0x00000034), propput, helpstring("property ResultValue2")]
        HRESULT ResultValue2([in] BSTR pVar);
        [id(0x00000035), propget, helpstring("property ResultValue3")]
        HRESULT ResultValue3([out, retval] BSTR* pVar);
        [id(0x00000035), propput, helpstring("property ResultValue3")]
        HRESULT ResultValue3([in] BSTR pVar);
        [id(0x00000036), propget, helpstring("property ResultValue4")]
        HRESULT ResultValue4([out, retval] BSTR* pVar);
        [id(0x00000036), propput, helpstring("property ResultValue4")]
        HRESULT ResultValue4([in] BSTR pVar);
        [id(0x00000037), propget, helpstring("property ResultValue5")]
        HRESULT ResultValue5([out, retval] BSTR* pVar);
        [id(0x00000037), propput, helpstring("property ResultValue5")]
        HRESULT ResultValue5([in] BSTR pVar);
        [id(0x00000038), propget, helpstring("property ResultValue6")]
        HRESULT ResultValue6([out, retval] BSTR* pVar);
        [id(0x00000038), propput, helpstring("property ResultValue6")]
        HRESULT ResultValue6([in] BSTR pVar);
        [id(0x00000039), propget, helpstring("property ResultValue7")]
        HRESULT ResultValue7([out, retval] BSTR* pVar);
        [id(0x00000039), propput, helpstring("property ResultValue7")]
        HRESULT ResultValue7([in] BSTR pVar);
        [id(0x0000003a), propget, helpstring("property ResultValue8")]
        HRESULT ResultValue8([out, retval] BSTR* pVar);
        [id(0x0000003a), propput, helpstring("property ResultValue8")]
        HRESULT ResultValue8([in] BSTR pVar);
        [id(0x0000003b), propget, helpstring("property ResultValue9")]
        HRESULT ResultValue9([out, retval] BSTR* pVar);
        [id(0x0000003b), propput, helpstring("property ResultValue9")]
        HRESULT ResultValue9([in] BSTR pVar);
        [id(0x0000003c), propget, helpstring("property ResultValue10")]
        HRESULT ResultValue10([out, retval] BSTR* pVar);
        [id(0x0000003c), propput, helpstring("property ResultValue10")]
        HRESULT ResultValue10([in] BSTR pVar);
        [id(0x0000003d), propget, helpstring("property ResultValue11")]
        HRESULT ResultValue11([out, retval] unsigned int* pVal);
        [id(0x0000003d), propput, helpstring("property ResultValue11")]
        HRESULT ResultValue11([in] unsigned int pVal);
        [id(0x0000003e), propget, helpstring("property ResultValue12")]
        HRESULT ResultValue12([out, retval] unsigned int* pVal);
        [id(0x0000003e), propput, helpstring("property ResultValue12")]
        HRESULT ResultValue12([in] unsigned int pVal);
        [id(0x0000003f), propget, helpstring("property ResultValue13")]
        HRESULT ResultValue13([out, retval] unsigned int* pVal);
        [id(0x0000003f), propput, helpstring("property ResultValue13")]
        HRESULT ResultValue13([in] unsigned int pVal);
        [id(0x00000040), propget, helpstring("property ResultValue14")]
        HRESULT ResultValue14([out, retval] unsigned int* pVal);
        [id(0x00000040), propput, helpstring("property ResultValue14")]
        HRESULT ResultValue14([in] unsigned int pVal);
        [id(0x00000041), propget, helpstring("property ResultValue15")]
        HRESULT ResultValue15([out, retval] unsigned int* pVal);
        [id(0x00000041), propput, helpstring("property ResultValue15")]
        HRESULT ResultValue15([in] unsigned int pVal);
        [id(0x00000042), propget, helpstring("property ResultValue16")]
        HRESULT ResultValue16([out, retval] unsigned int* pVal);
        [id(0x00000042), propput, helpstring("property ResultValue16")]
        HRESULT ResultValue16([in] unsigned int pVal);
        [id(0x00000043), propget, helpstring("property ResultValue17")]
        HRESULT ResultValue17([out, retval] unsigned int* pVal);
        [id(0x00000043), propput, helpstring("property ResultValue17")]
        HRESULT ResultValue17([in] unsigned int pVal);
        [id(0x00000044), propget, helpstring("property ResultValue18")]
        HRESULT ResultValue18([out, retval] unsigned int* pVal);
        [id(0x00000044), propput, helpstring("property ResultValue18")]
        HRESULT ResultValue18([in] unsigned int pVal);
        [id(0x00000045), propget, helpstring("property ResultValue19")]
        HRESULT ResultValue19([out, retval] unsigned int* pVal);
        [id(0x00000045), propput, helpstring("property ResultValue19")]
        HRESULT ResultValue19([in] unsigned int pVal);
        [id(0x00000046), propget, helpstring("property ResultValue20")]
        HRESULT ResultValue20([out, retval] unsigned int* pVal);
        [id(0x00000046), propput, helpstring("property ResultValue20")]
        HRESULT ResultValue20([in] unsigned int pVal);
        [id(0x00000047), propget, helpstring("property ResultMinimum")]
        HRESULT Minimum([out, retval] double* pVal);
        [id(0x00000048), propget, helpstring("property ResultMaximum")]
        HRESULT Maximum([out, retval] double* pVal);
        [id(0x00000049), propget, helpstring("property ResultMinimumBodyName")]
        HRESULT MinimumBodyName([out, retval] BSTR* pVal);
        [id(0x0000004a), propget, helpstring("property ResultMaximumBodyName")]
        HRESULT MaximumBodyName([out, retval] BSTR* pVal);
        [id(0x0000004b), propget, helpstring("property UnitTypeByDispid")]
        HRESULT UnitTypeByDispid(
                        [in] int dispid, 
                        [out, retval] int* unitType);
        [id(0x0000004c), propget, helpstring("property UnitStringByDispid")]
        HRESULT UnitStringByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* unitString);
        [id(0x0000004d), propget, helpstring("property ParamNameByDispid")]
        HRESULT ParamNameByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* paramName);
        [id(0x0000004e), propget, helpstring("property IsSolved")]
        HRESULT IsSolved([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000065), helpstring("method GetNumAttribututes")]
        HRESULT GetNumAttribututes([out, retval] int* numAttr);
        [id(0x00000066), helpstring("method GetGroupType")]
        HRESULT GetGroupType([out, retval] BSTR* groupType);
        [id(0x00000067), helpstring("method GetGroupSubtype")]
        HRESULT GetGroupSubtype([out, retval] BSTR* groupSubtype);
        [id(0x00000073), helpstring("method GetComponent")]
        HRESULT GetComponent([out, retval] BSTR* Component);
        [id(0x00000068), helpstring("method GetDisplayType")]
        HRESULT GetDisplayType([out, retval] BSTR* groupType);
        [id(0x00000071), helpstring("method GetDisplayStyle")]
        HRESULT GetDisplayStyle([out, retval] BSTR* groupStyle);
        [id(0x00000072), helpstring("method GetDisplayUnits")]
        HRESULT GetDisplayUnits([out, retval] BSTR* groupUnits);
        [id(0x00000069), helpstring("method GetAttributeName")]
        HRESULT GetAttributeName(
                        [in] int index, 
                        [out, retval] BSTR* attrName);
        [id(0x0000006a), helpstring("method GetEntryValue")]
        HRESULT GetEntryValue(
                        [in] int index, 
                        [out, retval] BSTR* attrValue);
        [id(0x0000006b), helpstring("method GetEntryValueDataType")]
        HRESULT GetEntryValueDataType(
                        [in] int index, 
                        [out, retval] BSTR* attrValue);
        [id(0x0000006c), helpstring("method GetAttributeId")]
        HRESULT GetAttributeId(
                        [in] int index, 
                        [out, retval] int* attrId);
        [id(0x0000006d), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x0000006e), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x0000006f), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x0000004f), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000070), helpstring("method RenameBasedOnDefinition")]
        HRESULT RenameBasedOnDefinition();
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00000074), propget, helpstring("property MinimumOfMinimumOverTime")]
        HRESULT MinimumOfMinimumOverTime([out, retval] double* pVal);
        [id(0x00000075), propget, helpstring("property MaximumOfMinimumOverTime")]
        HRESULT MaximumOfMinimumOverTime([out, retval] double* pVal);
        [id(0x00000076), propget, helpstring("property MinimumOfMaximumOverTime")]
        HRESULT MinimumOfMaximumOverTime([out, retval] double* pVal);
        [id(0x00000077), propget, helpstring("property MaximumOfMaximumOverTime")]
        HRESULT MaximumOfMaximumOverTime([out, retval] double* pVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x0000007c), propget, helpstring("property ResultLegendStyle")]
        HRESULT ResultLegendStyle([out, retval] BSTR* pStyle);
        [id(0x0000007c), propput, helpstring("property ResultLegendStyle")]
        HRESULT ResultLegendStyle([in] BSTR pStyle);
    };

    [
      odl,
      uuid(D72CE981-D81E-401F-93FC-D6E7950E9C2F),
      helpstring("IDSMaterialAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSMaterialAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000009), propget, helpstring("property Description")]
        HRESULT Description([out, retval] BSTR* pVal);
        [id(0x00000009), propput, helpstring("property Description")]
        HRESULT Description([in] BSTR pVal);
        [id(0x00000078), propget, helpstring("property FileName")]
        HRESULT filename([out, retval] BSTR* pVal);
        [id(0x0000007b), helpstring("method Save")]
        HRESULT Save();
        [id(0x0000007c), helpstring("method Refresh")]
        HRESULT Refresh();
        [id(0x00000096), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x00000098), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x000000a0), propget, helpstring("property ansObject")]
        HRESULT AnsMaterialObject([out, retval] IDispatch** ppObj);
        [id(0x000000a4), propget, helpstring("property UseEDA")]
        HRESULT UseEDA([out, retval] VARIANT_BOOL* __MIDL__IDSMaterialAuto0000);
        [id(0x00000194), propget, helpstring("property EmagMaterialType")]
        HRESULT EmagMaterialType([out, retval] DSEmagMaterialType* pVal);
        [id(0x000000ca), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x000000cb), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
    };

    typedef enum {
        kEMTUnknown = 0,
        kEMTLinearSoft = 1,
        kEMTLinearHard = 2,
        kEMTNonLinearSoft = 3,
        kEMTNonLinearHard = 4
    } DSEmagMaterialType;

    [
      odl,
      uuid(D1E639FA-1CF3-4793-A570-0BB5A8C8ADB6),
      helpstring("IDSMeshAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSMeshAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property ID")]
        HRESULT ID([out, retval] VARIANT* pVal);
        [id(0x00000002), propget, helpstring("property Nodes")]
        HRESULT Nodes([out, retval] VARIANT* pVal);
        [id(0x00000003), propget, helpstring("property TetElements")]
        HRESULT TetElements([out, retval] VARIANT* pVal);
        [id(0x00000004), propget, helpstring("property HexElements")]
        HRESULT HexElements([out, retval] VARIANT* pVal);
        [id(0x00000005), propget, helpstring("property PyrElements")]
        HRESULT PyrElements([out, retval] VARIANT* pVal);
        [id(0x00000006), propget, helpstring("property WedElements")]
        HRESULT WedElements([out, retval] VARIANT* pVal);
        [id(0x00000007), propget, helpstring("property TriElements")]
        HRESULT TriElements([out, retval] VARIANT* pVal);
        [id(0x00000008), propget, helpstring("property QuadElements")]
        HRESULT QuadElements([out, retval] VARIANT* pVal);
        [id(0x00000009), propget, helpstring("property NumNodes")]
        HRESULT NumNodes([out, retval] int* pVal);
        [id(0x0000000a), propget, helpstring("property NumElements")]
        HRESULT NumElements([out, retval] int* pVal);
        [id(0x0000000b), propget, helpstring("property NumTetElements")]
        HRESULT NumTetElements([out, retval] int* pVal);
        [id(0x0000000c), propget, helpstring("property NumHexElements")]
        HRESULT NumHexElements([out, retval] int* pVal);
        [id(0x0000000d), propget, helpstring("property NumPyrElements")]
        HRESULT NumPyrElements([out, retval] int* pVal);
        [id(0x0000000e), propget, helpstring("property NumWedElements")]
        HRESULT NumWedElements([out, retval] int* pVal);
        [id(0x0000000f), propget, helpstring("property NumTriElements")]
        HRESULT NumTriElements([out, retval] int* pVal);
        [id(0x00000010), propget, helpstring("property NumQuadElements")]
        HRESULT NumQuadElements([out, retval] int* pVal);
        [id(0x00000011), propget, helpstring("property Faces")]
        HRESULT Faces([out, retval] VARIANT* pVal);
        [id(0x00000012), propget, helpstring("property NumFaces")]
        HRESULT NumFaces([out, retval] int* pVal);
        [id(0x00000013), propget, helpstring("property Volume")]
        HRESULT Volume([out, retval] double* pVal);
        [id(0x00000014), propget, helpstring("property Thickness")]
        HRESULT Thickness([out, retval] double* pVal);
        [id(0x00000015), propget, helpstring("property MeshType")]
        HRESULT MeshType([out, retval] int* pVal);
        [id(0x00000016), propget, helpstring("property SurfaceArea")]
        HRESULT SurfaceArea([out, retval] double* pVal);
        [id(0x00000017), propget, helpstring("method MinMetricsForTet")]
        HRESULT MinMetricsForTet([out, retval] double* pVal);
        [id(0x00000018), propget, helpstring("method MinMetricsForHex")]
        HRESULT MinMetricsForHex([out, retval] double* pVal);
        [id(0x00000019), propget, helpstring("method MinMetricsForWed")]
        HRESULT MinMetricsForWed([out, retval] double* pVal);
        [id(0x0000001a), propget, helpstring("method MinMetricsForPyr")]
        HRESULT MinMetricsForPyr([out, retval] double* pVal);
        [id(0x0000001b), propget, helpstring("method MinMetricsForTri")]
        HRESULT MinMetricsForTri([out, retval] double* pVal);
        [id(0x0000001c), propget, helpstring("method MinMetricsForQuad")]
        HRESULT MinMetricsForQuad([out, retval] double* pVal);
        [id(0x0000001d), propget, helpstring("method MaxMetricsForTet")]
        HRESULT MaxMetricsForTet([out, retval] double* pVal);
        [id(0x0000001e), propget, helpstring("method MaxMetricsForHex")]
        HRESULT MaxMetricsForHex([out, retval] double* pVal);
        [id(0x0000001f), propget, helpstring("method MaxMetricsForWed")]
        HRESULT MaxMetricsForWed([out, retval] double* pVal);
        [id(0x00000020), propget, helpstring("method MaxMetricsForPyr")]
        HRESULT MaxMetricsForPyr([out, retval] double* pVal);
        [id(0x00000021), propget, helpstring("method MaxMetricsForTri")]
        HRESULT MaxMetricsForTri([out, retval] double* pVal);
        [id(0x00000022), propget, helpstring("method MaxMetricsForQuad")]
        HRESULT MaxMetricsForQuad([out, retval] double* pVal);
        [id(0x00000023), propget, helpstring("method AvgMetricsForTet")]
        HRESULT AvgMetricsForTet([out, retval] double* pVal);
        [id(0x00000024), propget, helpstring("method AvgMetricsForHex")]
        HRESULT AvgMetricsForHex([out, retval] double* pVal);
        [id(0x00000025), propget, helpstring("method AvgMetricsForWed")]
        HRESULT AvgMetricsForWed([out, retval] double* pVal);
        [id(0x00000026), propget, helpstring("method AvgMetricsForPyr")]
        HRESULT AvgMetricsForPyr([out, retval] double* pVal);
        [id(0x00000027), propget, helpstring("method AvgMetricsForTri")]
        HRESULT AvgMetricsForTri([out, retval] double* pVal);
        [id(0x00000028), propget, helpstring("method AvgMetricsForQuad")]
        HRESULT AvgMetricsForQuad([out, retval] double* pVal);
        [id(0x00000029), propget, helpstring("method StdevMetricsForTet")]
        HRESULT StdevMetricsForTet([out, retval] double* pVal);
        [id(0x0000002a), propget, helpstring("method StdevMetricsForHex")]
        HRESULT StdevMetricsForHex([out, retval] double* pVal);
        [id(0x0000002b), propget, helpstring("method StdevMetricsForWed")]
        HRESULT StdevMetricsForWed([out, retval] double* pVal);
        [id(0x0000002c), propget, helpstring("method StdevMetricsForPyr")]
        HRESULT StdevMetricsForPyr([out, retval] double* pVal);
        [id(0x0000002d), propget, helpstring("method StdevMetricsForTri")]
        HRESULT StdevMetricsForTri([out, retval] double* pVal);
        [id(0x0000002e), propget, helpstring("method StdevMetricsForQuad")]
        HRESULT StdevMetricsForQuad([out, retval] double* pVal);
        [id(0x0000002f), propget, helpstring("method NumberOfCornerNodes")]
        HRESULT NumberOfCornerNodes([out, retval] int* pVal);
        [id(0x00000030), helpstring("method DoesMeshContainVolume")]
        HRESULT DoesMeshContainVolume(
                        [in] unsigned int topoId, 
                        [out, retval] long* pVal);
        [id(0x00000031), propget, helpstring("method MinMetricsForTetInVolume")]
        HRESULT MinMetricsForTetInVolume(
                        [in] unsigned int topoId, 
                        [out, retval] double* pVal);
        [id(0x00000032), propget, helpstring("method MinMetricsForHexInVolume")]
        HRESULT MinMetricsForHexInVolume(
                        [in] unsigned int topoId, 
                        [out, retval] double* pVal);
        [id(0x00000033), propget, helpstring("method MinMetricsForWedInVolume")]
        HRESULT MinMetricsForWedInVolume(
                        [in] unsigned int topoId, 
                        [out, retval] double* pVal);
        [id(0x00000034), propget, helpstring("method MinMetricsForPyrInVolume")]
        HRESULT MinMetricsForPyrInVolume(
                        [in] unsigned int topoId, 
                        [out, retval] double* pVal);
        [id(0x00000035), propget, helpstring("method MinMetricsForTriInVolume")]
        HRESULT MinMetricsForTriInVolume(
                        [in] unsigned int topoId, 
                        [out, retval] double* pVal);
        [id(0x00000036), propget, helpstring("method MinMetricsForQuadInVolume")]
        HRESULT MinMetricsForQuadInVolume(
                        [in] unsigned int topoId, 
                        [out, retval] double* pVal);
        [id(0x00000037), propget, helpstring("method MaxMetricsForTetInVolume")]
        HRESULT MaxMetricsForTetInVolume(
                        [in] unsigned int topoId, 
                        [out, retval] double* pVal);
        [id(0x00000038), propget, helpstring("method MaxMetricsForHexInVolume")]
        HRESULT MaxMetricsForHexInVolume(
                        [in] unsigned int topoId, 
                        [out, retval] double* pVal);
        [id(0x00000039), propget, helpstring("method MaxMetricsForWedInVolume")]
        HRESULT MaxMetricsForWedInVolume(
                        [in] unsigned int topoId, 
                        [out, retval] double* pVal);
        [id(0x0000003a), propget, helpstring("method MaxMetricsForPyrInVolume")]
        HRESULT MaxMetricsForPyrInVolume(
                        [in] unsigned int topoId, 
                        [out, retval] double* pVal);
        [id(0x0000003b), propget, helpstring("method MaxMetricsForTriInVolume")]
        HRESULT MaxMetricsForTriInVolume(
                        [in] unsigned int topoId, 
                        [out, retval] double* pVal);
        [id(0x0000003c), propget, helpstring("method MaxMetricsForQuadInVolume")]
        HRESULT MaxMetricsForQuadInVolume(
                        [in] unsigned int topoId, 
                        [out, retval] double* pVal);
        [id(0x0000003d), propget, helpstring("method AvgMetricsForTetInVolume")]
        HRESULT AvgMetricsForTetInVolume(
                        [in] unsigned int topoId, 
                        [out, retval] double* pVal);
        [id(0x0000003e), propget, helpstring("method AvgMetricsForHexInVolume")]
        HRESULT AvgMetricsForHexInVolume(
                        [in] unsigned int topoId, 
                        [out, retval] double* pVal);
        [id(0x0000003f), propget, helpstring("method AvgMetricsForWedInVolume")]
        HRESULT AvgMetricsForWedInVolume(
                        [in] unsigned int topoId, 
                        [out, retval] double* pVal);
        [id(0x00000040), propget, helpstring("method AvgMetricsForPyrInVolume")]
        HRESULT AvgMetricsForPyrInVolume(
                        [in] unsigned int topoId, 
                        [out, retval] double* pVal);
        [id(0x00000041), propget, helpstring("method AvgMetricsForTriInVolume")]
        HRESULT AvgMetricsForTriInVolume(
                        [in] unsigned int topoId, 
                        [out, retval] double* pVal);
        [id(0x00000042), propget, helpstring("method AvgMetricsForQuadInVolume")]
        HRESULT AvgMetricsForQuadInVolume(
                        [in] unsigned int topoId, 
                        [out, retval] double* pVal);
        [id(0x00000043), propget, helpstring("method StdevMetricsForTetInVolume")]
        HRESULT StdevMetricsForTetInVolume(
                        [in] unsigned int topoId, 
                        [out, retval] double* pVal);
        [id(0x00000044), propget, helpstring("method StdevMetricsForHexInVolume")]
        HRESULT StdevMetricsForHexInVolume(
                        [in] unsigned int topoId, 
                        [out, retval] double* pVal);
        [id(0x00000045), propget, helpstring("method StdevMetricsForWedInVolume")]
        HRESULT StdevMetricsForWedInVolume(
                        [in] unsigned int topoId, 
                        [out, retval] double* pVal);
        [id(0x00000046), propget, helpstring("method StdevMetricsForPyrInVolume")]
        HRESULT StdevMetricsForPyrInVolume(
                        [in] unsigned int topoId, 
                        [out, retval] double* pVal);
        [id(0x00000047), propget, helpstring("method StdevMetricsForTriInVolume")]
        HRESULT StdevMetricsForTriInVolume(
                        [in] unsigned int topoId, 
                        [out, retval] double* pVal);
        [id(0x00000048), propget, helpstring("method StdevMetricsForQuadInVolume")]
        HRESULT StdevMetricsForQuadInVolume(
                        [in] unsigned int topoId, 
                        [out, retval] double* pVal);
        [id(0x00000049), propget, helpstring("property NumElementsInVolume")]
        HRESULT NumElementsInVolume(
                        [in] unsigned int topoId, 
                        [out, retval] int* pVal);
        [id(0x0000004a), propget, helpstring("property NumTetElementsInVolume")]
        HRESULT NumTetElementsInVolume(
                        [in] unsigned int topoId, 
                        [out, retval] int* pVal);
        [id(0x0000004b), propget, helpstring("property NumHexElementsInVolume")]
        HRESULT NumHexElementsInVolume(
                        [in] unsigned int topoId, 
                        [out, retval] int* pVal);
        [id(0x0000004c), propget, helpstring("property NumPyrElementsInVolume")]
        HRESULT NumPyrElementsInVolume(
                        [in] unsigned int topoId, 
                        [out, retval] int* pVal);
        [id(0x0000004d), propget, helpstring("property NumWedElementsInVolume")]
        HRESULT NumWedElementsInVolume(
                        [in] unsigned int topoId, 
                        [out, retval] int* pVal);
        [id(0x0000004e), propget, helpstring("property NumTriElementsInVolume")]
        HRESULT NumTriElementsInVolume(
                        [in] unsigned int topoId, 
                        [out, retval] int* pVal);
        [id(0x0000004f), propget, helpstring("property NumQuadElementsInVolume")]
        HRESULT NumQuadElementsInVolume(
                        [in] unsigned int topoId, 
                        [out, retval] int* pVal);
        [id(0x00000050), propget, helpstring("property PartId")]
        HRESULT partId([out, retval] int* pVal);
        [id(0x00000051), propget, helpstring("property CornerNodes")]
        HRESULT CornerNodes([out, retval] VARIANT* pVal);
        [id(0x00000052), propget, helpstring("method NumCornerNodes")]
        HRESULT NumCornerNodes([out, retval] int* pVal);
        [id(0x00000053), propget, helpstring("property AnsMesh")]
        HRESULT AnsMesh([out, retval] IUnknown** ppiMesh);
        [id(0x00000054), propget, helpstring("property IsDirty")]
        HRESULT IsDirty([out, retval] long* pbDirty);
        [id(0x00000054), propput, helpstring("property IsDirty")]
        HRESULT IsDirty([in] long pbDirty);
        [id(0x00000055), propget, helpstring("property PartMesh")]
        HRESULT PartMesh([out, retval] IDispatch** ppiMesh);
    };

    [
      odl,
      uuid(982AF027-DF5D-4CA1-80F9-7F97658CD91C),
      helpstring("IDSMeshBCAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSMeshBCAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property ForceNode")]
        HRESULT ForceNode(
                        int index, 
                        [out, retval] int* pVal);
        [id(0x00000002), propget, helpstring("property ForceX")]
        HRESULT ForceX(
                        int index, 
                        [out, retval] double* pVal);
        [id(0x00000003), propget, helpstring("property ForceY")]
        HRESULT ForceY(
                        int index, 
                        [out, retval] double* pVal);
        [id(0x00000004), propget, helpstring("property ForceZ")]
        HRESULT ForceZ(
                        int index, 
                        [out, retval] double* pVal);
        [id(0x00000005), propget, helpstring("property RotNode")]
        HRESULT RotXNode(
                        int index, 
                        [out, retval] int* pVal);
        [id(0x00000006), propget, helpstring("property RotNode")]
        HRESULT RotYNode(
                        int index, 
                        [out, retval] int* pVal);
        [id(0x00000007), propget, helpstring("property RotNode")]
        HRESULT RotZNode(
                        int index, 
                        [out, retval] int* pVal);
        [id(0x00000008), propget, helpstring("property RotX")]
        HRESULT RotX(
                        int index, 
                        [out, retval] double* pVal);
        [id(0x00000009), propget, helpstring("property RotY")]
        HRESULT RotY(
                        int index, 
                        [out, retval] double* pVal);
        [id(0x0000000a), propget, helpstring("property RotZ")]
        HRESULT RotZ(
                        int index, 
                        [out, retval] double* pVal);
        [id(0x0000000b), propget, helpstring("property DispXNode")]
        HRESULT DispXNode(
                        int index, 
                        [out, retval] int* pVal);
        [id(0x0000000c), propget, helpstring("property DispX")]
        HRESULT DispX(
                        int index, 
                        [out, retval] double* pVal);
        [id(0x0000000d), propget, helpstring("property DispYNode")]
        HRESULT DispYNode(
                        int index, 
                        [out, retval] int* pVal);
        [id(0x0000000e), propget, helpstring("property DispY")]
        HRESULT DispY(
                        int index, 
                        [out, retval] double* pVal);
        [id(0x0000000f), propget, helpstring("property DispZNode")]
        HRESULT DispZNode(
                        int index, 
                        [out, retval] int* pVal);
        [id(0x00000010), propget, helpstring("property DispZ")]
        HRESULT DispZ(
                        int index, 
                        [out, retval] double* pVal);
        [id(0x00000011), propget, helpstring("property ForceCount")]
        HRESULT ForceCount([out, retval] int* pVal);
        [id(0x00000012), propget, helpstring("property RotXCount")]
        HRESULT RotXCount([out, retval] int* pVal);
        [id(0x00000013), propget, helpstring("property RotYCount")]
        HRESULT RotYCount([out, retval] int* pVal);
        [id(0x00000014), propget, helpstring("property RotZCount")]
        HRESULT RotZCount([out, retval] int* pVal);
        [id(0x00000015), propget, helpstring("property DispXCount")]
        HRESULT DispXCount([out, retval] int* pVal);
        [id(0x00000016), propget, helpstring("property DispYCount")]
        HRESULT DispYCount([out, retval] int* pVal);
        [id(0x00000017), propget, helpstring("property DispZCount")]
        HRESULT DispZCount([out, retval] int* pVal);
        [id(0x00000018), propget, helpstring("property Heat")]
        HRESULT Heat(
                        int index, 
                        [out, retval] double* pVal);
        [id(0x00000019), propget, helpstring("property HeatNode")]
        HRESULT HeatNode(
                        int index, 
                        [out, retval] int* pVal);
        [id(0x0000001a), propget, helpstring("property Temp")]
        HRESULT Temp(
                        int index, 
                        [out, retval] double* pVal);
        [id(0x0000001b), propget, helpstring("property TempNode")]
        HRESULT TempNode(
                        int index, 
                        [out, retval] int* pVal);
        [id(0x0000001c), propget, helpstring("property ConvectionFilm")]
        HRESULT ConvectionFilm(
                        int dsid, 
                        [out, retval] double* pVal);
        [id(0x0000001d), propget, helpstring("property ConvectionTemp")]
        HRESULT ConvectionTemp(
                        int dsid, 
                        [out, retval] double* pVal);
        [id(0x0000001e), propget, helpstring("property HeatCount")]
        HRESULT HeatCount([out, retval] int* pVal);
        [id(0x0000001f), propget, helpstring("property TempCount")]
        HRESULT TempCount([out, retval] int* pVal);
        [id(0x00000020), propget, helpstring("property ConvectionCount")]
        HRESULT ConvectionCount([out, retval] int* pVal);
        [id(0x00000021), propget, helpstring("property FilmCoefTable")]
        HRESULT FilmCoefTable(
                        int convecDSId, 
                        [out, retval] VARIANT* pVal);
        [id(0x00000022), propget, helpstring("property FilmCoefEvalType")]
        HRESULT FilmCoefEvalType(
                        int convecDSId, 
                        [out, retval] int* pVal);
        [id(0x00000023), propget, helpstring("property Pressure")]
        HRESULT Pressure(
                        int dsid, 
                        [out, retval] double* pVal);
        [id(0x00000024), propget, helpstring("property PressureVecX")]
        HRESULT PressureVecX(
                        int dsid, 
                        [out, retval] double* pVal);
        [id(0x00000025), propget, helpstring("property PressureVecY")]
        HRESULT PressureVecY(
                        int dsid, 
                        [out, retval] double* pVal);
        [id(0x00000026), propget, helpstring("property PressureVecZ")]
        HRESULT PressureVecZ(
                        int dsid, 
                        [out, retval] double* pVal);
        [id(0x00000027), propget, helpstring("property HasLoad")]
        HRESULT HasLoad(
                        int dsid, 
                        [out, retval] VARIANT_BOOL* pVal);
        [id(0x00000028), propget, helpstring("property BoltForceX")]
        HRESULT BoltForceX(
                        int dsid, 
                        [out, retval] double* pVal);
        [id(0x00000029), propget, helpstring("property BoltForceY")]
        HRESULT BoltForceY(
                        int dsid, 
                        [out, retval] double* pVal);
        [id(0x0000002a), propget, helpstring("property BoltForceZ")]
        HRESULT BoltForceZ(
                        int dsid, 
                        [out, retval] double* pVal);
        [id(0x0000002b), propget, helpstring("property BoltForce")]
        HRESULT BoltForce(
                        int dsid, 
                        [out, retval] double* pVal);
        [id(0x0000002c), propget, helpstring("property HeatFlux")]
        HRESULT HeatFlux(
                        int dsid, 
                        [out, retval] double* pVal);
        [id(0x0000002d), propget, helpstring("property AngleCount")]
        HRESULT AngleCount([out, retval] int* pVal);
        [id(0x0000002e), propget, helpstring("property AngleNode")]
        HRESULT AngleNode(
                        int index, 
                        [out, retval] int* pVal);
        [id(0x0000002f), propget, helpstring("property AngleX")]
        HRESULT AngleX(
                        int index, 
                        [out, retval] double* pVal);
        [id(0x00000030), propget, helpstring("property AngleY")]
        HRESULT AngleY(
                        int index, 
                        [out, retval] double* pVal);
        [id(0x00000031), propget, helpstring("property AngleZ")]
        HRESULT AngleZ(
                        int index, 
                        [out, retval] double* pVal);
        [id(0x00000032), propget, helpstring("property DirectMomentNode")]
        HRESULT DirectMomentNode(
                        int index, 
                        [out, retval] int* pVal);
        [id(0x00000033), propget, helpstring("property DirectMomentX")]
        HRESULT DirectMomentX(
                        int index, 
                        [out, retval] double* pVal);
        [id(0x00000034), propget, helpstring("property DirectMomentY")]
        HRESULT DirectMomentY(
                        int index, 
                        [out, retval] double* pVal);
        [id(0x00000035), propget, helpstring("property DirectMomentZ")]
        HRESULT DirectMomentZ(
                        int index, 
                        [out, retval] double* pVal);
        [id(0x00000036), propget, helpstring("property DirectMomentCount")]
        HRESULT DirectMomentCount([out, retval] int* pVal);
        [id(0x00000037), propget, helpstring("property PhaseAngle")]
        HRESULT PhaseAngle(
                        int dsid, 
                        [out, retval] double* pVal);
        [id(0x00000038), propget, helpstring("property RadiationEms")]
        HRESULT RadiationEms(
                        int dsid, 
                        [out, retval] double* pVal);
        [id(0x00000039), propget, helpstring("property RadiationTemp")]
        HRESULT RadiationTemp(
                        int dsid, 
                        [out, retval] double* pVal);
    };

    typedef enum {
        DISPID_MeshControlGeometryDefineBy = 10,
        DISPID_MeshControlComponentSelection = 11,
        DISPID_MeshControlGeometrySelection = 12,
        DISPID_SlaveGeometry = 13,
        DISPID_LowGeometrySelection = 14,
        DISPID_MeshControlContactRegion = 15,
        DISPID_MeshControlSubValue = 16,
        DISPID_MeshControlActive = 17,
        DISPID_MeshControlSubType = 18,
        DISPID_MeshControlSphereCenter = 19,
        DISPID_MeshControlSphereCenterX = 20,
        DISPID_MeshControlSphereCenterY = 21,
        DISPID_MeshControlSphereCenterZ = 22,
        DISPID_MeshControlInnerRadius = 23,
        DISPID_MeshControlValue = 24,
        DISPID_SubMethod = 25,
        DISPID_SubMultizoneMapped = 26,
        DISPID_SubMultizoneFree = 27,
        DISPID_ElementMidsideNodes = 28,
        DISPID_SourceTargetSelection = 29,
        DISPID_InfluenceGeometry = 30,
        DISPID_SourceGeometrySelection = 31,
        DISPID_TargetGeometrySelection = 32,
        DISPID_SweepShape = 33,
        DISPID_SweepESizeType = 34,
        DISPID_MeshControlESize = 35,
        DISPID_MeshControlNDiv = 36,
        DISPID_MeshControlSizingType = 37,
        DISPID_MeshControlSizingCurvatureAngle = 38,
        DISPID_MeshControlSizingTransition = 39,
        DISPID_SweepBiasType = 40,
        DISPID_SweepBiasValue = 41,
        DISPID_MatchDefinedBy = 42,
        DISPID_MeshControlSectorZAxis = 43,
        DISPID_SectorZAxis_1 = 44,
        DISPID_SectorZAxis_2 = 45,
        DISPID_ExplicitDefineType = 46,
        DISPID_ExplicitMaxElementSize = 47,
        DISPID_MaxNumElements = 48,
        DISPID_DefineDefTol = 49,
        DISPID_MeshControlRelativeSize = 50,
        DISPID_MeshControlAbsoluteSize = 51,
        DISPID_MeshControlMinElementSize = 52,
        DISPID_MeshControlMaxElementSize = 53,
        DISPID_MeshControlFillSmallHoles = 54,
        DISPID_MeshControlBackupMethod = 55,
        DISPID_DefineMinESize = 56,
        DISPID_ExplicitMinElementSize = 57,
        DISPID_NumCellsAcrossGap = 58,
        DISPID_CurvatureNormalAngle = 59,
        DISPID_MeshControlMessages = 60,
        DISPID_InflationOption = 61,
        DISPID_FirstLayerHeight = 62,
        DISPID_TransitionRatio = 63,
        DISPID_NumLayers = 64,
        DISPID_ExpansionFactor = 65,
        DISPID_MaximumThickness = 66,
        DISPID_MinEdgeSize = 67,
        DISPID_InflationAlgorithm = 68,
        DISPID_MethodElementOption = 69,
        DISPID_MergeTolerance = 70,
        DISPID_AutoManualMode = 71,
        DISPID_MatchMeshWherePossible = 72,
        DISPID_SpecifiedSides = 73,
        DISPID_SpecifiedCorners = 74,
        DISPID_SpecifiedEnds = 75,
        DISPID_BFCartSubType = 76,
        DISPID_BFCartSpacingOption = 77,
        DISPID_BFCartKeyPoints = 78,
        DISPID_BFCartTolerance = 79,
        DISPID_BFCartVerticesX = 80,
        DISPID_BFCartVerticesY = 81,
        DISPID_BFCartVerticesZ = 82,
        DISPID_BFCartProjFactor = 83,
        DISPID_BFCartCoordSys = 84,
        DISPID_MaximumLayers = 85,
        DISPID_ConstrainBoundary = 86,
        DISPID_PinchSnapBoundary = 87,
        DISPID_WriteICEMCFDFiles = 88,
        DISPID_FirstAspectRatio = 89,
        DISPID_SelectScriptFile = 90,
        DISPID_SkipMeshing = 91,
        DISPID_PITetraTransition = 92,
        DISPID_PITetraGrowthRate = 93,
        DISPID_BoundaryDefineBy = 94,
        DISPID_BoundaryComponentSelection = 95,
        DISPID_PITetraFeatureAngle = 96,
        DISPID_LastAspectRatio = 97,
        DISPID_MeshControlHoleTolerance = 98,
        DISPID_PinchBehavior = 99,
        DISPID_InflationDirection = 100,
        DISPID_PinchSnapDefinedBy = 101,
        DISPID_PinchSnapTolerance = 102,
        DISPID_PinchSnapESizeFactor = 103,
        DISPID_BiasOption = 104,
        DISPID_BiasGrowthRate = 105,
        DISPID_MZSurfaceMeshMethod = 106,
        DISPID_SizeBiasReverse = 107,
        DISPID_PreserveBoundaries = 108,
        DISPID_LocalMinSize = 109,
        DISPID_MappedMeshOption = 110,
        DISPID_SourceScopingMethod = 111,
        DISPID_SourceNamedSelection = 112,
        DISPID_SweepSizeBehavior = 113,
        DISPID_SweepEdges = 114,
        DISPID_ReuseBlocking = 115,
        DISPID_UpdateSizes = 116,
        DISPID_NamedSelectionTreatment = 117,
        DISPID_MCTargetQuality = 118,
        DISPID_MCTargetSkewness = 119,
        DISPID_MCTargetNLQuality = 120,
        DISPID_LowComponentSelection = 121,
        DISPID_LocalAdvancedSizeFunction = 122,
        DISPID_LocalProximitySources = 123,
        DISPID_LocalNumCellGap = 124,
        DISPID_LocalDefeaturingTolerance = 125,
        DISPID_LocalProximityMinSize = 126,
        kNumMeshControlDispIds = 127
    } kDispId_ExposeIMeshControlUI;

    typedef enum {
        DISPID_MeshControlGeometryNum = 128,
        DISPID_MeshControlState = 129,
        DISPID_MeshControlList = 130,
        DISPID_MeshControlScope = 131,
        DISPID_MeshControlName = 132,
        DISPID_MeshControlGraphics = 133,
        DISPID_MeshControlPrototypes = 134,
        DISPID_ControlType = 135,
        DISPID_MeshControlAddComment = 136,
        DISPID_MeshControlComment = 137,
        DISPID_MeshControlFigures = 138,
        DISPID_MeshControlAddFigure = 139,
        DISPID_MeshControlIsOnWire = 140,
        DISPID_MeshControlIsOnSheet = 141,
        DISPID_MeshControlIsOnSolid = 142,
        DISPID_MeshControlSectorZCenterX = 143,
        DISPID_MeshControlSectorZCenterY = 144,
        DISPID_MeshControlSectorZCenterZ = 145,
        DISPID_MeshControlSectorZVXX = 146,
        DISPID_MeshControlSectorZVXY = 147,
        DISPID_MeshControlSectorZVXZ = 148,
        DISPID_MeshControlSectorZVZX = 149,
        DISPID_MeshControlSectorZVZY = 150,
        DISPID_MeshControlSectorZVZZ = 151,
        DISPID_SectorZCenterX_2 = 152,
        DISPID_SectorZCenterY_2 = 153,
        DISPID_SectorZCenterZ_2 = 154,
        DISPID_SectorZVXX_2 = 155,
        DISPID_SectorZVXY_2 = 156,
        DISPID_SectorZVXZ_2 = 157,
        DISPID_SectorZVZX_2 = 158,
        DISPID_SectorZVZY_2 = 159,
        DISPID_SectorZVZZ_2 = 160,
        DISPID_DisplayMeshControlMessages = 161,
        DISPID_MeshControlStandardMeshControl = 162,
        DISPID_MeshControlTopologyType = 163,
        DISPID_MeshControlGeometrySelectionString = 164,
        DISPID_MeshContactRegionSourceName = 165,
        DISPID_MeshContactRegionName = 166,
        DISPID_MeshControlImages = 167,
        DISPID_MeshControlAddImage = 168,
        DISPID_MeshControlMessage = 169,
        DISPID_MeshControlFeedbackCode = 170,
        DISPID_SetDataAfterResume = 171,
        DISPID_MeshControlUnitTypeByDispid = 172,
        DISPID_MeshControlUnitStringByDispid = 173,
        DISPID_MeshControlParamNameByDispid = 174,
        DISPID_MeshControlUpdateListOnly = 175,
        DISPID_MeshControlIsDispidParameterizeable = 176,
        DISPID_MeshContorlIsActivePostPinch = 177
    } kDispId_MeshControl;

    [
      odl,
      uuid(B87EB752-1E5A-4579-AFFC-4885E3078117),
      helpstring("IDSMeshControlAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSMeshControlAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000080), propget, helpstring("property GeometryNum")]
        HRESULT GeometryNum([out, retval] int* pVal);
        [id(0x0000000a), propget, helpstring("property GeometryDefineBy")]
        HRESULT GeometryDefineBy([out, retval] DSGeometryDefineByType* pVal);
        [id(0x0000000a), propput, helpstring("property GeometryDefineBy")]
        HRESULT GeometryDefineBy([in] DSGeometryDefineByType pVal);
        [id(0x0000000b), propget, helpstring("property ComponentSelection")]
        HRESULT ComponentSelection([out, retval] int* pVal);
        [id(0x0000000b), propput, helpstring("property ComponentSelection")]
        HRESULT ComponentSelection([in] int pVal);
        [id(0x0000000c), propput, helpstring("property GeometrySelection")]
        HRESULT GeometrySelection([in] IDispatch* rhs);
        [id(0x0000000d), propput, helpstring("property SlaveGeometry")]
        HRESULT SlaveGeometry([in] IDispatch* rhs);
        [id(0x0000000e), propput, helpstring("property LowGeometrySelection")]
        HRESULT LowGeometrySelection([in] IDispatch* rhs);
        [id(0x00000086), propget, helpstring("property Prototypes")]
        HRESULT Prototypes([out, retval] IDispatch** pVal);
        [id(0x00000087), propget, helpstring("property ControlType")]
        HRESULT ControlType([out, retval] DSMeshControls* pVal);
        [id(0x00000087), propput, helpstring("property ControlType")]
        HRESULT ControlType([in] DSMeshControls pVal);
        [id(0x0000000f), propget, helpstring("property ContactRegion")]
        HRESULT ContactRegion([out, retval] int* plVal);
        [id(0x0000000f), propput, helpstring("property ContactRegion")]
        HRESULT ContactRegion([in] int plVal);
        [id(0x00000010), propget, helpstring("property SubValue")]
        HRESULT SubValue([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000010), propput, helpstring("property SubValue")]
        HRESULT SubValue([in] VARIANT_BOOL pVal);
        [id(0x00000011), propget, helpstring("property Active")]
        HRESULT Active([out, retval] int* plVal);
        [id(0x00000012), propget, helpstring("property SubType")]
        HRESULT SubType([out, retval] int* plVal);
        [id(0x00000012), propput, helpstring("property SubType")]
        HRESULT SubType([in] int plVal);
        [id(0x00000013), propget, helpstring("property SphereCenter")]
        HRESULT SphereCenter([out, retval] int* pdVal);
        [id(0x00000013), propput, helpstring("property SphereCenter")]
        HRESULT SphereCenter([in] int pdVal);
        [id(0x00000014), propget, helpstring("property SphereCenterX")]
        HRESULT SphereCenterX([out, retval] double* pdVal);
        [id(0x00000015), propget, helpstring("property SphereCenterY")]
        HRESULT SphereCenterY([out, retval] double* pdVal);
        [id(0x00000016), propget, helpstring("property SphereCenterZ")]
        HRESULT SphereCenterZ([out, retval] double* pdVal);
        [id(0x00000017), propget, helpstring("property InnerRadius")]
        HRESULT InnerRadius([out, retval] double* pdVal);
        [id(0x00000017), propput, helpstring("property InnerRadius")]
        HRESULT InnerRadius([in] double pdVal);
        [id(0x00000018), propget, helpstring("property Value")]
        HRESULT Value([out, retval] int* pVal);
        [id(0x00000018), propput, helpstring("property Value")]
        HRESULT Value([in] int pVal);
        [id(0x00000019), propget, helpstring("property SubMethod")]
        HRESULT SubMethod([out, retval] int* pVal);
        [id(0x00000019), propput, helpstring("property SubMethod")]
        HRESULT SubMethod([in] int pVal);
        [id(0x0000001a), propget, helpstring("property SubMultizoneMapped")]
        HRESULT SubMultizoneMapped([out, retval] int* pVal);
        [id(0x0000001a), propput, helpstring("property SubMultizoneMapped")]
        HRESULT SubMultizoneMapped([in] int pVal);
        [id(0x0000001b), propget, helpstring("property SubMultizoneFree")]
        HRESULT SubMultizoneFree([out, retval] int* pVal);
        [id(0x0000001b), propput, helpstring("property SubMultizoneFree")]
        HRESULT SubMultizoneFree([in] int pVal);
        [id(0x0000001c), propget, helpstring("property ElementMidsideNodes")]
        HRESULT ElementMidsideNodes([out, retval] int* pVal);
        [id(0x0000001c), propput, helpstring("property ElementMidsideNodes")]
        HRESULT ElementMidsideNodes([in] int pVal);
        [id(0x0000001d), propput, helpstring("property SourceTargetSelection")]
        HRESULT SourceTargetSelection([in] int plVal);
        [id(0x0000001d), propget, helpstring("property SourceTargetSelection")]
        HRESULT SourceTargetSelection([out, retval] int* plVal);
        [id(0x0000001e), propput, helpstring("property InfluenceGeometry")]
        HRESULT InfluenceGeometry([in] IDispatch* rhs);
        [id(0x0000001f), propput, helpstring("property SourceGeometry")]
        HRESULT SourceGeometry([in] IDispatch* ppiLongs);
        [id(0x0000001f), propget, helpstring("property SourceGeometry")]
        HRESULT SourceGeometry([out, retval] IDispatch** ppiLongs);
        [id(0x00000020), propput, helpstring("property TargetGeometry")]
        HRESULT TargetGeometry([in] IDispatch* ppiLongs);
        [id(0x00000020), propget, helpstring("property TargetGeometry")]
        HRESULT TargetGeometry([out, retval] IDispatch** ppiLongs);
        [id(0x00000022), propget, helpstring("property SweepESizeType")]
        HRESULT SweepESizeType([out, retval] int* plVal);
        [id(0x00000022), propput, helpstring("property SweepESizeType")]
        HRESULT SweepESizeType([in] int plVal);
        [id(0x00000023), propget, helpstring("property ESize")]
        HRESULT ESize([out, retval] double* pdVal);
        [id(0x00000023), propput, helpstring("property ESize")]
        HRESULT ESize([in] double pdVal);
        [id(0x00000024), propget, helpstring("property NDiv")]
        HRESULT NDiv([out, retval] int* pVal);
        [id(0x00000024), propput, helpstring("property NDiv")]
        HRESULT NDiv([in] int pVal);
        [id(0x00000025), propget, helpstring("property SizingType")]
        HRESULT SizingType([out, retval] int* pVal);
        [id(0x00000025), propput, helpstring("property SizingType")]
        HRESULT SizingType([in] int pVal);
        [id(0x00000026), propget, helpstring("property SizingCurvatureAngle")]
        HRESULT SizingCurvatureAngle([out, retval] double* pdVal);
        [id(0x00000026), propput, helpstring("property SizingCurvatureAngle")]
        HRESULT SizingCurvatureAngle([in] double pdVal);
        [id(0x00000028), propget, helpstring("property SweepBiasType")]
        HRESULT SweepBiasType([out, retval] int* plVal);
        [id(0x00000028), propput, helpstring("property SweepBiasType")]
        HRESULT SweepBiasType([in] int plVal);
        [id(0x00000029), propget, helpstring("property SweepBiasValue")]
        HRESULT SweepBiasValue([out, retval] double* pdVal);
        [id(0x00000029), propput, helpstring("property SweepBiasValue")]
        HRESULT SweepBiasValue([in] double pdVal);
        [id(0x00000088), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x00000089), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x0000008a), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x0000008b), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x00000056), propget, helpstring("property ConstrainBoundary")]
        HRESULT ConstrainBoundary([out, retval] int* pVal);
        [id(0x00000056), propput, helpstring("property ConstrainBoundary")]
        HRESULT ConstrainBoundary([in] int pVal);
        [id(0x00000057), propget, helpstring("property PinchSnapBoundary")]
        HRESULT PinchSnapBoundary([out, retval] int* pVal);
        [id(0x00000057), propput, helpstring("property PinchSnapBoundary")]
        HRESULT PinchSnapBoundary([in] int pVal);
        [id(0x00000065), propget, helpstring("property PinchSnapDefinedBy")]
        HRESULT PinchSnapDefinedBy([out, retval] int* pVal);
        [id(0x00000065), propput, helpstring("property PinchSnapDefinedBy")]
        HRESULT PinchSnapDefinedBy([in] int pVal);
        [id(0x00000066), propget, helpstring("property PinchSnapTolerance")]
        HRESULT PinchSnapTolerance([out, retval] double* pVal);
        [id(0x00000066), propput, helpstring("property PinchSnapTolerance")]
        HRESULT PinchSnapTolerance([in] double pVal);
        [id(0x00000067), propget, helpstring("property PinchSnapESizeFactor")]
        HRESULT PinchSnapESizeFactor([out, retval] double* pVal);
        [id(0x00000067), propput, helpstring("property PinchSnapESizeFactor")]
        HRESULT PinchSnapESizeFactor([in] double pVal);
        [id(0x0000008c), propget, helpstring("property isOnWire")]
        HRESULT isOnWire([out, retval] int* onWire);
        [id(0x0000008d), propget, helpstring("property isOnSheet")]
        HRESULT isOnSheet([out, retval] int* onSheet);
        [id(0x0000008e), propget, helpstring("property isOnSolid")]
        HRESULT isOnSolid([out, retval] int* onSolid);
        [id(0x0000002a), propget, helpstring("property MatchDefinedBy")]
        HRESULT MatchDefinedBy([out, retval] int* piVal);
        [id(0x0000002a), propput, helpstring("property MatchDefinedBy")]
        HRESULT MatchDefinedBy([in] int piVal);
        [id(0x0000002b), propget, helpstring("property SectorZAxis")]
        HRESULT SectorZAxis([out, retval] int* pdVal);
        [id(0x0000002b), propput, helpstring("property SectorZAxis")]
        HRESULT SectorZAxis([in] int pdVal);
        [id(0x0000002c), propget, helpstring("property SectorZAxis_1")]
        HRESULT SectorZAxis_1([out, retval] int* piVal);
        [id(0x0000002c), propput, helpstring("property SectorZAxis_1")]
        HRESULT SectorZAxis_1([in] int piVal);
        [id(0x0000002d), propget, helpstring("property SectorZAxis_2")]
        HRESULT SectorZAxis_2([out, retval] int* piVal);
        [id(0x0000002d), propput, helpstring("property SectorZAxis_2")]
        HRESULT SectorZAxis_2([in] int piVal);
        [id(0x0000008f), propget, helpstring("property SectorZCenterX")]
        HRESULT SectorZCenterX([out, retval] double* pdVal);
        [id(0x00000090), propget, helpstring("property SectorZCenterY")]
        HRESULT SectorZCenterY([out, retval] double* pdVal);
        [id(0x00000091), propget, helpstring("property SectorZCenterZ")]
        HRESULT SectorZCenterZ([out, retval] double* pdVal);
        [id(0x00000092), propget, helpstring("property SectorZVXX")]
        HRESULT SectorZVXX([out, retval] double* pdVal);
        [id(0x00000093), propget, helpstring("property SectorZVXY")]
        HRESULT SectorZVXY([out, retval] double* pdVal);
        [id(0x00000094), propget, helpstring("property SectorZVXZ")]
        HRESULT SectorZVXZ([out, retval] double* pdVal);
        [id(0x00000095), propget, helpstring("property SectorZVZX")]
        HRESULT SectorZVZX([out, retval] double* pdVal);
        [id(0x00000096), propget, helpstring("property SectorZVZY")]
        HRESULT SectorZVZY([out, retval] double* pdVal);
        [id(0x00000097), propget, helpstring("property SectorZVZZ")]
        HRESULT SectorZVZZ([out, retval] double* pdVal);
        [id(0x00000098), propget, helpstring("property SectorZCenterX_2")]
        HRESULT SectorZCenterX_2([out, retval] double* pdVal);
        [id(0x00000099), propget, helpstring("property SectorZCenterY_2")]
        HRESULT SectorZCenterY_2([out, retval] double* pdVal);
        [id(0x0000009a), propget, helpstring("property SectorZCenterZ_2")]
        HRESULT SectorZCenterZ_2([out, retval] double* pdVal);
        [id(0x0000009b), propget, helpstring("property SectorZVXX_2")]
        HRESULT SectorZVXX_2([out, retval] double* pdVal);
        [id(0x0000009c), propget, helpstring("property SectorZVXY_2")]
        HRESULT SectorZVXY_2([out, retval] double* pdVal);
        [id(0x0000009d), propget, helpstring("property SectorZVXZ_2")]
        HRESULT SectorZVXZ_2([out, retval] double* pdVal);
        [id(0x0000009e), propget, helpstring("property SectorZVZX_2")]
        HRESULT SectorZVZX_2([out, retval] double* pdVal);
        [id(0x0000009f), propget, helpstring("property SectorZVZY_2")]
        HRESULT SectorZVZY_2([out, retval] double* pdVal);
        [id(0x000000a0), propget, helpstring("property SectorZVZZ_2")]
        HRESULT SectorZVZZ_2([out, retval] double* pdVal);
        [id(0x0000002e), propget, helpstring("property ExplicitDefineType")]
        HRESULT ExplicitDefineType([out, retval] int* pVal);
        [id(0x0000002e), propput, helpstring("property ExplicitDefineType")]
        HRESULT ExplicitDefineType([in] int pVal);
        [id(0x0000002f), propget, helpstring("property ExplicitMaxElementSize")]
        HRESULT ExplicitMaxElementSize([out, retval] double* pVal);
        [id(0x0000002f), propput, helpstring("property ExplicitMaxElementSize")]
        HRESULT ExplicitMaxElementSize([in] double pVal);
        [id(0x00000030), propget, helpstring("property MaxNumElements")]
        HRESULT MaxNumElements([out, retval] unsigned int* pVal);
        [id(0x00000030), propput, helpstring("property MaxNumElements")]
        HRESULT MaxNumElements([in] unsigned int pVal);
        [id(0x00000031), propget, helpstring("property DefineDefTol")]
        HRESULT DefineDefTol([out, retval] int* pVal);
        [id(0x00000031), propput, helpstring("property DefineDefTol")]
        HRESULT DefineDefTol([in] int pVal);
        [id(0x00000032), propget, helpstring("property RelativeContactSize")]
        HRESULT RelativeContactSize([out, retval] double* pdVal);
        [id(0x00000032), propput, helpstring("property RelativeContactSize")]
        HRESULT RelativeContactSize([in] double pdVal);
        [id(0x00000033), propget, helpstring("property AbsoluteContactSize")]
        HRESULT AbsoluteContactSize([out, retval] double* pdVal);
        [id(0x00000033), propput, helpstring("property AbsoluteContactSize")]
        HRESULT AbsoluteContactSize([in] double pdVal);
        [id(0x00000034), propget, helpstring("property MinElementSize")]
        HRESULT MinElementSize([out, retval] double* pVal);
        [id(0x00000034), propput, helpstring("property MinElementSize")]
        HRESULT MinElementSize([in] double pVal);
        [id(0x00000035), propget, helpstring("property MaxElementSize")]
        HRESULT MaxElementSize([out, retval] double* pVal);
        [id(0x00000035), propput, helpstring("property MaxElementSize")]
        HRESULT MaxElementSize([in] double pVal);
        [id(0x00000036), propget, helpstring("property FillSmallHoles")]
        HRESULT FillSmallHoles([out, retval] int* pVal);
        [id(0x00000036), propput, helpstring("property FillSmallHoles")]
        HRESULT FillSmallHoles([in] int pVal);
        [id(0x00000037), propget, helpstring("property BackupMethod")]
        HRESULT BackupMethod([out, retval] int* pVal);
        [id(0x00000037), propput, helpstring("property BackupMethod")]
        HRESULT BackupMethod([in] int pVal);
        [id(0x00000038), propget, helpstring("property DefineMinESize")]
        HRESULT DefineMinESize([out, retval] int* pVal);
        [id(0x00000038), propput, helpstring("property DefineMinESize")]
        HRESULT DefineMinESize([in] int pVal);
        [id(0x00000039), propget, helpstring("property ExplicitMinElementSize")]
        HRESULT ExplicitMinElementSize([out, retval] double* pVal);
        [id(0x00000039), propput, helpstring("property ExplicitMinElementSize")]
        HRESULT ExplicitMinElementSize([in] double pVal);
        [id(0x0000003a), propget, helpstring("property NumCellsAcrossGap")]
        HRESULT NumCellsAcrossGap([out, retval] int* pVal);
        [id(0x0000003a), propput, helpstring("property NumCellsAcrossGap")]
        HRESULT NumCellsAcrossGap([in] int pVal);
        [id(0x0000003c), propget, helpstring("property ControlMessages")]
        HRESULT ControlMessages([out, retval] VARIANT_BOOL* pVal);
        [id(0x000000a1), helpstring("method DisplayMeshControlMessages")]
        HRESULT DisplayMeshControlMessages();
        [id(0x000000a2), propget, helpstring("property AnsMeshControl")]
        HRESULT AnsMeshControl([out, retval] IDispatch** ppiControl);
        [id(0x000000a3), propget, helpstring("property TopologyType")]
        HRESULT TopologyType([out, retval] int* pulType);
        [id(0x000000a4), propget, helpstring("property GeometrySelectionString")]
        HRESULT GeometrySelectionString([out, retval] BSTR* pVal);
        [id(0x000000a5), propget, helpstring("property AttatchedSourceName")]
        HRESULT AttatchedSourceName([out, retval] BSTR* pVal);
        [id(0x000000a6), propget, helpstring("property ContactRegionName")]
        HRESULT ContactRegionName([out, retval] BSTR* pVal);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
        [id(0x0000003d), propget, helpstring("property InflationOption")]
        HRESULT InflationOption([out, retval] int* pVal);
        [id(0x0000003d), propput, helpstring("property InflationOption")]
        HRESULT InflationOption([in] int pVal);
        [id(0x0000003e), propget, helpstring("property FirstLayerHeight")]
        HRESULT FirstLayerHeight([out, retval] double* pVal);
        [id(0x0000003e), propput, helpstring("property FirstLayerHeight")]
        HRESULT FirstLayerHeight([in] double pVal);
        [id(0x00000040), propget, helpstring("property NumLayers")]
        HRESULT NumLayers([out, retval] int* pVal);
        [id(0x00000040), propput, helpstring("property NumLayers")]
        HRESULT NumLayers([in] int pVal);
        [id(0x00000041), propget, helpstring("property ExpansionFactor")]
        HRESULT ExpansionFactor([out, retval] double* pVal);
        [id(0x00000041), propput, helpstring("property ExpansionFactor")]
        HRESULT ExpansionFactor([in] double pVal);
        [id(0x00000042), propget, helpstring("property MaximumThickness")]
        HRESULT MaximumThickness([out, retval] double* pVal);
        [id(0x00000042), propput, helpstring("property MaximumThickness")]
        HRESULT MaximumThickness([in] double pVal);
        [id(0x00000043), propget, helpstring("property MinEdgeSize")]
        HRESULT MinEdgeSize([out, retval] double* pVal);
        [id(0x00000044), propget, helpstring("property InflationAlgorithm")]
        HRESULT InflationAlgorithm([out, retval] int* pVal);
        [id(0x00000044), propput, helpstring("property InflationAlgorithm")]
        HRESULT InflationAlgorithm([in] int pVal);
        [id(0x000000a7), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x000000a8), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00000045), propget, helpstring("property MethodElementOption")]
        HRESULT MethodElementOption([out, retval] int* pVal);
        [id(0x00000045), propput, helpstring("property MethodElementOption")]
        HRESULT MethodElementOption([in] int pVal);
        [id(0x00000046), propget, helpstring("property MergeTolerance")]
        HRESULT MergeTolerance([out, retval] double* pdVal);
        [id(0x00000046), propput, helpstring("property MergeTolerance")]
        HRESULT MergeTolerance([in] double pdVal);
        [id(0x00000047), propget, helpstring("property AutoManualMode")]
        HRESULT AutoManualMode([out, retval] int* piVal);
        [id(0x00000047), propput, helpstring("property AutoManualMode")]
        HRESULT AutoManualMode([in] int piVal);
        [id(0x600200a2), helpstring("method GetDisplayString")]
        HRESULT GetDisplayString(
                        [in] long dispid, 
                        [out, retval] BSTR* pVal);
        [id(0x000000a9), propget, helpstring("property SolverMessage")]
        HRESULT MeshControlMessage([out, retval] BSTR* pVal);
        [id(0x000000aa), propget, helpstring("property MeshControlFeedbackCode")]
        HRESULT MeshControlFeedbackCode([out, retval] int* pVal);
        [id(0x000000ab), helpstring("method SetDataAfterResume")]
        HRESULT SetDataAfterResume(int iDatabaseVersion);
        [id(0x00000048), propget, helpstring("property MatchMeshWherePossible")]
        HRESULT MatchMeshWherePossible([out, retval] int* pVal);
        [id(0x00000048), propput, helpstring("property MatchMeshWherePossible")]
        HRESULT MatchMeshWherePossible([in] int pVal);
        [id(0x00000049), propget, helpstring("property SpecifiedSides")]
        HRESULT SpecifiedSides([out, retval] IDispatch** ppiLongs);
        [id(0x00000049), propput, helpstring("property SpecifiedSides")]
        HRESULT SpecifiedSides([in] IDispatch* ppiLongs);
        [id(0x0000004a), propget, helpstring("property SpecifiedCorners")]
        HRESULT SpecifiedCorners([out, retval] IDispatch** ppiLongs);
        [id(0x0000004a), propput, helpstring("property SpecifiedCorners")]
        HRESULT SpecifiedCorners([in] IDispatch* ppiLongs);
        [id(0x0000004b), propget, helpstring("property SpecifiedEnds")]
        HRESULT SpecifiedEnds([out, retval] IDispatch** ppiLongs);
        [id(0x0000004b), propput, helpstring("property SpecifiedEnds")]
        HRESULT SpecifiedEnds([in] IDispatch* ppiLongs);
        [id(0x00000021), propget, helpstring("property SweepShape")]
        HRESULT SweepShape([out, retval] int* pVal);
        [id(0x00000021), propput, helpstring("property SweepShape")]
        HRESULT SweepShape([in] int pVal);
        [id(0x00000027), propget, helpstring("property SizingTransition")]
        HRESULT SizingTransition([out, retval] double* pdVal);
        [id(0x00000027), propput, helpstring("property SizingTransition")]
        HRESULT SizingTransition([in] double pdVal);
        [id(0x0000003f), propget, helpstring("property TransitionRatio")]
        HRESULT TransitionRatio([out, retval] double* pdVal);
        [id(0x0000003f), propput, helpstring("property TransitionRatio")]
        HRESULT TransitionRatio([in] double pdVal);
        [id(0x0000003b), propget, helpstring("property CurvatureNormalAngle")]
        HRESULT CurvatureNormalAngle([out, retval] double* pdVal);
        [id(0x0000003b), propput, helpstring("property CurvatureNormalAngle")]
        HRESULT CurvatureNormalAngle([in] double pdVal);
        [id(0x0000004d), propget, helpstring("property BFCartSpacingOption")]
        HRESULT BFCartSpacingOption([out, retval] int* pVal);
        [id(0x0000004d), propput, helpstring("property BFCartSpacingOption")]
        HRESULT BFCartSpacingOption([in] int pVal);
        [id(0x0000004c), propget, helpstring("property BFCartSubType")]
        HRESULT BFCartSubType([out, retval] int* pVal);
        [id(0x0000004c), propput, helpstring("property BFCartSubType")]
        HRESULT BFCartSubType([in] int pVal);
        [id(0x0000004e), propget, helpstring("property BFCartKeyPoints")]
        HRESULT BFCartKeyPoints([out, retval] int* pVal);
        [id(0x0000004e), propput, helpstring("property BFCartKeyPoints")]
        HRESULT BFCartKeyPoints([in] int pVal);
        [id(0x0000004f), propget, helpstring("property BFCartTolerance")]
        HRESULT BFCartTolerance([out, retval] double* pdVal);
        [id(0x0000004f), propput, helpstring("property BFCartTolerance")]
        HRESULT BFCartTolerance([in] double pdVal);
        [id(0x00000050), propput, helpstring("property BFCartVerticesX")]
        HRESULT BFCartVerticesX([in] IDispatch* ppiLongs);
        [id(0x00000050), propget, helpstring("property BFCartVerticesX")]
        HRESULT BFCartVerticesX([out, retval] IDispatch** ppiLongs);
        [id(0x00000051), propput, helpstring("property BFCartVerticesY")]
        HRESULT BFCartVerticesY([in] IDispatch* ppiLongs);
        [id(0x00000051), propget, helpstring("property BFCartVerticesY")]
        HRESULT BFCartVerticesY([out, retval] IDispatch** ppiLongs);
        [id(0x00000052), propput, helpstring("property BFCartVerticesZ")]
        HRESULT BFCartVerticesZ([in] IDispatch* ppiLongs);
        [id(0x00000052), propget, helpstring("property BFCartVerticesZ")]
        HRESULT BFCartVerticesZ([out, retval] IDispatch** ppiLongs);
        [id(0x00000053), propget, helpstring("property BFCartProjFactor")]
        HRESULT BFCartProjFactor([out, retval] double* pdVal);
        [id(0x00000053), propput, helpstring("property BFCartProjFactor")]
        HRESULT BFCartProjFactor([in] double pdVal);
        [id(0x00000054), propget, helpstring("property BFCartCoordSys")]
        HRESULT BFCartCoordSys([out, retval] int* pVal);
        [id(0x00000054), propput, helpstring("property BFCartCoordSys")]
        HRESULT BFCartCoordSys([in] int pVal);
        [id(0x000000ac), propget, helpstring("property UnitTypeByDispid")]
        HRESULT UnitTypeByDispid(
                        [in] int dispid, 
                        [out, retval] int* unitType);
        [id(0x000000ad), propget, helpstring("property UnitStringByDispid")]
        HRESULT UnitStringByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* unitString);
        [id(0x000000ae), propget, helpstring("property ParamNameByDispid")]
        HRESULT ParamNameByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* paramName);
        [id(0x00000059), propget, helpstring("property FirstAspectRatio")]
        HRESULT FirstAspectRatio([out, retval] double* pVal);
        [id(0x00000059), propput, helpstring("property FirstAspectRatio")]
        HRESULT FirstAspectRatio([in] double pVal);
        [id(0x0000005e), propget, helpstring("property BoundaryDefineBy")]
        HRESULT BoundaryDefineBy([out, retval] DSGeometryDefineByType* pVal);
        [id(0x0000005e), propput, helpstring("property BoundaryDefineBy")]
        HRESULT BoundaryDefineBy([in] DSGeometryDefineByType pVal);
        [id(0x0000005f), propget, helpstring("property BoundaryComponentSelection")]
        HRESULT BoundaryComponentSelection([out, retval] BSTR* pVal);
        [id(0x0000005f), propput, helpstring("property BoundaryComponentSelection")]
        HRESULT BoundaryComponentSelection([in] BSTR pVal);
        [id(0x00000060), propget, helpstring("property PITetraFeatureAngle")]
        HRESULT PITetraFeatureAngle([out, retval] double* pdVal);
        [id(0x00000060), propput, helpstring("property PITetraFeatureAngle")]
        HRESULT PITetraFeatureAngle([in] double pdVal);
        [id(0x00000061), propget, helpstring("property LastAspectRatio")]
        HRESULT LastAspectRatio([out, retval] double* pVal);
        [id(0x00000061), propput, helpstring("property LastAspectRatio")]
        HRESULT LastAspectRatio([in] double pVal);
        [id(0x00000062), propget, helpstring("property MeshControlHoleTolerance")]
        HRESULT MeshControlHoleTolerance([out, retval] double* pdVal);
        [id(0x00000062), propput, helpstring("property MeshControlHoleTolerance")]
        HRESULT MeshControlHoleTolerance([in] double pdVal);
        [id(0x00000055), propget, helpstring("property MaximumLayers")]
        HRESULT MaximumLayers([out, retval] int* pVal);
        [id(0x00000055), propput, helpstring("property MaximumLayers")]
        HRESULT MaximumLayers([in] int pVal);
        [id(0x00000068), propget, helpstring("property BiasOption")]
        HRESULT BiasOption([out, retval] int* pVal);
        [id(0x00000068), propput, helpstring("property BiasOption")]
        HRESULT BiasOption([in] int pVal);
        [id(0x00000069), propget, helpstring("property BiasGrowthRate")]
        HRESULT BiasGrowthRate([out, retval] double* pdVal);
        [id(0x00000069), propput, helpstring("property BiasGrowthRate")]
        HRESULT BiasGrowthRate([in] double pdVal);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x0000006a), propget, helpstring("property MZSurfaceMeshMethod")]
        HRESULT MZSurfaceMeshMethod([out, retval] int* pVal);
        [id(0x0000006a), propput, helpstring("property MZSurfaceMeshMethod")]
        HRESULT MZSurfaceMeshMethod([in] int pVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x0000006b), propget, helpstring("property SizeBiasReverseGeometry")]
        HRESULT SizeBiasReverseGeometry([out, retval] IDispatch** ppiLongs);
        [id(0x0000006b), propput, helpstring("property SizeBiasReverseGeometry")]
        HRESULT SizeBiasReverseGeometry([in] IDispatch* ppiLongs);
        [id(0x0000006c), propget, helpstring("property PreserveBoundaries")]
        HRESULT PreserveBoundaries([out, retval] int* pVal);
        [id(0x0000006c), propput, helpstring("property PreserveBoundaries")]
        HRESULT PreserveBoundaries([in] int pVal);
        [id(0x0000006d), propget, helpstring("property LocalMinSize")]
        HRESULT LocalMinSize([out, retval] double* pdVal);
        [id(0x0000006d), propput, helpstring("property LocalMinSize")]
        HRESULT LocalMinSize([in] double pdVal);
        [id(0x000000b0), propget, helpstring("property DISPID_MeshControlIsDispidParameterizeable")]
        HRESULT IsDispidParameterizeable(
                        [in] long dispid, 
                        [out, retval] VARIANT_BOOL* pFlag);
        [id(0x0000006e), propget, helpstring("property MappedMeshOption")]
        HRESULT MappedMeshOption([out, retval] int* pVal);
        [id(0x0000006e), propput, helpstring("property MappedMeshOption")]
        HRESULT MappedMeshOption([in] int pVal);
        [id(0x0000006f), propget, helpstring("property SourceScopingMethod")]
        HRESULT SourceScopingMethod([out, retval] DSGeometryDefineByType* pVal);
        [id(0x0000006f), propput, helpstring("property SourceScopingMethod")]
        HRESULT SourceScopingMethod([in] DSGeometryDefineByType pVal);
        [id(0x00000070), propget, helpstring("property SourceNamedSelection")]
        HRESULT SourceNamedSelection([out, retval] BSTR* pVal);
        [id(0x00000070), propput, helpstring("property SourceNamedSelection")]
        HRESULT SourceNamedSelection([in] BSTR pVal);
        [id(0x00000071), propget, helpstring("property SweepSizeBehavior")]
        HRESULT SweepSizeBehavior([out, retval] int* pVal);
        [id(0x00000071), propput, helpstring("property SweepSizeBehavior")]
        HRESULT SweepSizeBehavior([in] int pVal);
        [id(0x00000072), propget, helpstring("property SweepEdges")]
        HRESULT SweepEdges([out, retval] IDispatch** ppiLongs);
        [id(0x00000072), propput, helpstring("property SweepEdges")]
        HRESULT SweepEdges([in] IDispatch* ppiLongs);
        [id(0x00000073), propget, helpstring("property ReuseBlocking")]
        HRESULT ReuseBlocking([out, retval] int* pVal);
        [id(0x00000073), propput, helpstring("property ReuseBlocking")]
        HRESULT ReuseBlocking([in] int pVal);
        [id(0x0000005c), propget, helpstring("property PITetraTransition")]
        HRESULT PITetraTransition([out, retval] int* pVal);
        [id(0x0000005c), propput, helpstring("property PITetraTransition")]
        HRESULT PITetraTransition([in] int pVal);
        [id(0x0000005d), propget, helpstring("property PITetraGrowthRate")]
        HRESULT PITetraGrowthRate([out, retval] double* pVal);
        [id(0x0000005d), propput, helpstring("property PITetraGrowthRate")]
        HRESULT PITetraGrowthRate([in] double pVal);
        [id(0x00000058), propget, helpstring("property WriteICEMCFDFiles")]
        HRESULT WriteICEMCFDFiles([out, retval] int* pVal);
        [id(0x00000058), propput, helpstring("property WriteICEMCFDFiles")]
        HRESULT WriteICEMCFDFiles([in] int pVal);
        [id(0x00000074), propget, helpstring("property UpdateSizes")]
        HRESULT UpdateSizes([out, retval] int* pVal);
        [id(0x00000074), propput, helpstring("property UpdateSizes")]
        HRESULT UpdateSizes([in] int pVal);
        [id(0x00000075), propget, helpstring("property NamedSelectionTreatment")]
        HRESULT NamedSelectionTreatment([out, retval] int* pVal);
        [id(0x00000075), propput, helpstring("property NamedSelectionTreatment")]
        HRESULT NamedSelectionTreatment([in] int pVal);
        [id(0x000000b1), helpstring("property isActivePostPinch")]
        HRESULT isActivePostPinch([out, retval] VARIANT_BOOL* postPinch);
        [id(0x60020103), helpstring("method MeshControlStringIDForType")]
        HRESULT MeshControlStringIDForType([out, retval] BSTR* STR);
        [id(0x60020104), propget, helpstring("property Suppressed")]
        HRESULT Suppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x60020104), propput, helpstring("property Suppressed")]
        HRESULT Suppressed([in] VARIANT_BOOL pVal);
        [id(0x00000076), propget, helpstring("property TargetQuality")]
        HRESULT TargetQuality([out, retval] double* pdVal);
        [id(0x00000076), propput, helpstring("property TargetQuality")]
        HRESULT TargetQuality([in] double pdVal);
        [id(0x00000077), propget, helpstring("property TargetSkewness")]
        HRESULT TargetSkewness([out, retval] double* pdVal);
        [id(0x00000077), propput, helpstring("property TargetSkewness")]
        HRESULT TargetSkewness([in] double pdVal);
        [id(0x00000078), propget, helpstring("property TargetNLQuality")]
        HRESULT TargetNLQuality([out, retval] double* pdVal);
        [id(0x00000078), propput, helpstring("property TargetNLQuality")]
        HRESULT TargetNLQuality([in] double pdVal);
        [id(0x00000079), propget, helpstring("property LowComponentSelection")]
        HRESULT LowComponentSelection([out, retval] int* pVal);
        [id(0x00000079), propput, helpstring("property LowComponentSelection")]
        HRESULT LowComponentSelection([in] int pVal);
        [id(0x0000007a), propget, helpstring("property LocalAdvancedSizeFunction")]
        HRESULT LocalAdvancedSizeFunction([out, retval] int* pVal);
        [id(0x0000007a), propput, helpstring("property LocalAdvancedSizeFunction")]
        HRESULT LocalAdvancedSizeFunction([in] int pVal);
        [id(0x0000007b), propget, helpstring("property LocalProximitySources")]
        HRESULT LocalProximitySources([out, retval] int* pVal);
        [id(0x0000007b), propput, helpstring("property LocalProximitySources")]
        HRESULT LocalProximitySources([in] int pVal);
        [id(0x0000007c), propget, helpstring("property LocalNumCellGap")]
        HRESULT LocalNumCellGap([out, retval] int* pVal);
        [id(0x0000007c), propput, helpstring("property LocalNumCellGap")]
        HRESULT LocalNumCellGap([in] int pVal);
        [id(0x0000007d), propget, helpstring("property LocalDefeaturingTolerance")]
        HRESULT LocalDefeaturingTolerance([out, retval] double* pdVal);
        [id(0x0000007d), propput, helpstring("property LocalDefeaturingTolerance")]
        HRESULT LocalDefeaturingTolerance([in] double pdVal);
        [id(0x0000007e), propget, helpstring("property LocalProximityMinSize")]
        HRESULT LocalProximityMinSize([out, retval] double* pdVal);
        [id(0x0000007e), propput, helpstring("property LocalProximityMinSize")]
        HRESULT LocalProximityMinSize([in] double pdVal);
    };

    typedef enum {
        kRelevance = 0,
        kBodyMeshType = 11,
        kRefinement = 14,
        kUnknownMC = 21,
        kMappedFaceMeshing = 23,
        kSize = 26,
        kMeshMatch = 28,
        kProximity = 29,
        kContactSize = 30,
        kGapSize = 31,
        kInflation = 32,
        kMerge = 33,
        kNameTransfer = 34,
        kMeshGrouping = 35,
        kSharpAngle = 36,
        kFracture = 37,
        kMeshingRegion = 38,
        kOrphanGeometryInfo = 39,
        kWasher = 40,
        kAsymMappedMesh = 41,
        kGlobalSettings = 42
    } DSMeshControls;

    typedef enum {
        DISPID_MeshControlGroupRelevance = 10,
        DISPID_MeshControlGroupDefeatureOn = 11,
        DISPID_MeshControlGroupDefeatureSetting = 12,
        DISPID_MeshControlGroupNodes = 13,
        DISPID_MeshControlGroupElements = 14,
        DISPID_MeshControlGroupSheetShape = 15,
        DISPID_MeshControlGroupMeshControls = 16,
        DISPID_MeshControlGroupComments = 17,
        DISPID_MeshControlGroupFigures = 18,
        DISPID_MeshControlHasMesh = 19,
        DISPID_MeshControlGroupElementSize = 70,
        DISPID_MeshControlGroupUseAdvancedControls = 71,
        DISPID_MeshControlGroupCurvProximity = 72,
        DISPID_MeshControlGroupShapeChecking = 73,
        DISPID_MeshControlGroupElementOrder = 74,
        DISPID_PinchTolerance = 75,
        DISPID_PinchGenerateOnRefresh = 76,
        DISPID_MeshControlGroupInitialSizeSeed = 77,
        DISPID_MeshControlGroupMinEdgeSize = 78,
        DISPID_MeshControlGroupNumberOfRetries = 79,
        DISPID_MeshControlGroupStraightSideElement = 81,
        DISPID_MeshControlGroupAssemblyMesh = 82,
        DISPID_MeshControlGroupIndependentMesh = 208,
        DISPID_MeshControlGroupSolidMesher = 83,
        DISPID_MeshControlGroupMeshMorphing = 129,
        DISPID_MeshControlGroupAddMeshControl = 20,
        DISPID_MeshControlGroupAddComment = 21,
        DISPID_MeshControlGroupMeshParts = 22,
        DISPID_MeshControlGroupClearMeshQueue = 23,
        DISPID_MeshControlGroupAddPartToMeshQueue = 24,
        DISPID_MeshControlGroupGetNumPartsInMeshQueue = 25,
        DISPID_MeshControlGroupGetPartFromMeshQueue = 26,
        DISPID_MeshControlGroupAddFigure = 27,
        DISPID_MeshControlGroupPreviewDefeature = 28,
        DISPID_MeshControlGroupHasDefeaturing = 29,
        DISPID_MeshControlGroupPreviewSweepable = 30,
        DISPID_MeshControlGroupAutoGapSize = 31,
        DISPID_MeshControlGroupAddGapTool = 32,
        DISPID_MeshControlGroupSurfaceMeshParts = 33,
        DISPID_PinchUseSheetThickness = 34,
        DISPID_MeshControlGroupPreviewMeshControls = 35,
        DISPID_MeshControlGroupAddImage = 36,
        DISPID_CollisionAvoidance = 37,
        DISPID_FixFirstLayer = 38,
        DISPID_UsePostSmoothing = 39,
        DISPID_SmoothingIterations = 40,
        DISPID_InflationAspectRatio = 41,
        DISPID_InflationMaximumAngle = 42,
        DISPID_InflationFilletRatio = 43,
        DISPID_MeshControlGroupAutomaticInflation = 44,
        DISPID_MeshControlGroupComponentSelectionInflation = 45,
        DISPID_MeshControlGroupStringSelectionInflation = 46,
        DISPID_McgGlobalUseCustomTargetLimit = 64,
        DISPID_McgGlobalTargetQuality = 47,
        DISPID_McgGlobalTargetSkewness = 48,
        DISPID_McgGlobalTargetJacobianRatio = 49,
        DISPID_MeshControlGroupPostMeshing = 50,
        DISPID_MeshControlGroupSurfaceArea = 51,
        DISPID_MeshControlGroupVolume = 52,
        DISPID_MeshControlGroupPostMeshingList = 53,
        DISPID_MeshControlGroupNumSurfaces = 54,
        DISPID_MeshControlGroupXCentroid = 60,
        DISPID_MeshControlGroupYCentroid = 61,
        DISPID_MeshControlGroupZCentroid = 62,
        DISPID_MeshControlGroupIsMeshing = 63,
        DISPID_MeshControlGroupMeshMetric = 55,
        DISPID_MeshControlGroupMeshMetricMin = 56,
        DISPID_MeshControlGroupMeshMetricMax = 57,
        DISPID_MeshControlGroupMeshMetricAverage = 58,
        DISPID_MeshControlGroupMeshMetricSTDV = 59,
        DISPID_MeshControlGroupMeshingFailed = 80,
        DISPID_RefreshedGapSizeObjectChildren = 84,
        DISPID_MeshControlGroupGapSizes = 85,
        DISPID_MeshControlGroupLoadFromFile = 86,
        DISPID_MeshControlGroupSaveToFile = 87,
        DISPID_MeshControlGroupImages = 88,
        DISPID_MeshControlGroupUpdateFromFile = 89,
        DISPID_MeshControlGroupWriteInputFile = 90,
        DSIPId_MeshControlGroupPhysicsPreference = 91,
        DSIPId_MeshControlGroupRelevanceCenter = 92,
        DSIPId_MeshControlGroupSmoothingOption = 93,
        DSIPId_MeshControlGroupTransitionOption = 94,
        DISPId_MeshControlGroupSpanAngleOption = 95,
        DISPId_MeshControlGroupSetMeshingState = 96,
        DISPId_MeshControlGroupWriteFluentInputFile = 97,
        DISPId_DrawProblematicGeometry = 98,
        DISPId_NumProblems = 99,
        DISPId_GetNumProblemTopos = 100,
        DISPId_GetProblemTopo = 101,
        DISPId_AddProblematicComponent = 102,
        DISPId_InvalidateState = 103,
        DISPID_MeshControlGroupAdvancedSizeFunction = 104,
        DISPID_MeshControlGroupSpanningAngleSF = 105,
        DISPID_MeshControlGroupMinSizeSF = 106,
        DISPID_MeshControlGroupTransitionSF = 107,
        DSIPId_MeshControlGroupSolverPreference = 108,
        DISPId_MeshControlGroupWritePolyFlowInputFile = 109,
        DISPID_MeshControlGroupList = 110,
        DISPID_MeshControlGroupInflationOption = 111,
        DISPID_MeshControlGroupFirstLayerHeight = 112,
        DISPID_MeshControlGroupMaximumLayersOption = 113,
        DISPID_MeshControlGroupMaximumLayers = 114,
        DISPID_MeshControlGroupNumLayers = 115,
        DISPID_MeshControlGroupExpansionFactorOption = 116,
        DISPID_MeshControlGroupExpansionFactor = 117,
        DISPID_MeshControlGroupMaximumThickness = 118,
        DISPID_MeshControlGroupExpansionType = 119,
        DISPID_MeshControlGroupMultiBodyOption = 120,
        DISPID_MeshControlGroupStairStepping = 121,
        DISPID_MeshControlGroupInflationAlgorithm = 122,
        DISPID_MeshControlGroupPreviewAutoInflation = 123,
        DISPId_DrawWorstElements = 124,
        DISPID_InflationGapFactor = 125,
        DISPID_MeshControlGroupAdvancedInflationOptions = 126,
        DISPId_AutoPinch = 127,
        DISPID_MeshControlGroupRigidBodyBehavior = 128,
        DISPId_InitMeshMorph = 130,
        DISPId_ForceUpdateMeshStates = 131,
        DISPId_MeshControlGroupWriteCGNSInputFile = 132,
        DISPID_MeshControlGroupPreviewInflation = 133,
        DISPID_MeshControlGroupNumCellGapSF = 134,
        DISPID_MeshControlGroupMaxSizeSF = 135,
        DISPID_MeshControlGroupTransitionRatio = 136,
        DISPID_MeshControlGroupUsingWB2Filters = 137,
        DISPID_RigidBodyFaceMeshType = 138,
        DISPID_MaxFaceElementSize = 139,
        DISPID_GetMaxSizeEitherUserOrCalculated = 140,
        DISPID_MeshControlGroupAutoMeshLayersThinRegion = 141,
        DISPId_WriteICEMInputFiles = 142,
        DISPID_BodyOfInfluenceForPrototypes = 143,
        DISPID_MeshMetricGraph = 144,
        DISPID_AttachGraphListeners = 145,
        DISPID_CleanMeshMetrics = 146,
        DISPId_MeshControlGroupWriteTGridGeometryFile = 147,
        DISPId_HasOverlappingNamedSelections = 148,
        DISPId_DrawOverlappingNamedSelections = 149,
        DISPID_MeshControlGroupPrototypeIdsWithOneElementThickness = 150,
        DISPID_MeshControlGroupUnitTypeByDispid = 151,
        DISPID_MeshControlGroupUnitStringByDispid = 152,
        DISPID_MeshControlGroupParamNameByDispid = 153,
        DISPID_MeshControlGroupSetAddPinchControlGeom = 154,
        DISPID_MeshControlGroupPreviewHoleRemovable = 155,
        DISPID_MeshControlGroupSheetHoleRemoval = 156,
        DISPID_MeshControlGroupHoleTolerance = 157,
        DISPID_MeshControlGroupFirstAspectRatio = 158,
        DISPID_AssemblyMeshingMethod = 159,
        DISPID_FeatureCaptureOptionGoCart = 160,
        DISPID_FeatureAngleGoCart = 161,
        DISPID_SagToleranceGoCart = 162,
        DISPID_MeshControlGroupCleanPartOrBody = 163,
        DISPID_MeshControlGroupExtraRetriesForAssembly = 164,
        DISPID_TessellationRefinementOptionGoCart = 165,
        DISPID_MeshControlGroupCheckDataAfterResume = 166,
        DISPID_TGridRunModeGoCart = 167,
        DISPID_MeshControlGroupAutoMeshDefeatureTol = 168,
        DISPID_MeshControlGroupAutoMeshDefeaturing = 169,
        DISPID_MeshControlGroupPreviewMappable = 170,
        DISPID_CheckMixedMethods = 171,
        DISPID_MeshControlGroupAutoMissingTessellationVisited = 172,
        DISPID_MeshControlGroupAutoFindMissingTessellations = 173,
        DISPID_NumMissingTessellations = 174,
        DISPID_MeshControlGroupAutoAddMissingTessellationComponent = 175,
        DISPID_MeshControlGroupAutoDrawMissingTessellations = 176,
        DISPID_MeshControlGroupLastAspectRatio = 177,
        DISPID_KeepSolidMeshGoCart = 178,
        DISPID_MeshControlGroupProximitySFSources = 179,
        DISPID_MeshWorksheetNamedSelectionLoads = 180,
        DISPID_MeshWorksheetAddNamedSelection = 181,
        DISPID_MeshWorkSheetDeleteNamedSelection = 182,
        DISPID_MeshWorksheetNumEntries = 183,
        DISPID_ClearMeshWorksheetNamedSelection = 184,
        DISPID_DumpMeshPropertiesToTextFile = 185,
        DISPID_DirectMeshingRecording = 188,
        DISPID_AddMeshWrapper = 189,
        DISPID_WorksheetGenerateMeshAtStep = 190,
        DISPID_DirectMeshingRecordingNumEntries = 191,
        DISPID_DirectMeshingRecordingRefreshComponentGroup = 192,
        DISPID_WorksheetValidateRecording = 193,
        DISPID_MeshControlGroupWrapMeshParts = 194,
        DISPID_MeshControlGroupInflationDirection = 195,
        DISPID_MeshWorksheetGenerateMesh = 196,
        DISPID_MeshControlGroupTriangleSurfaceMesh = 197,
        DISPId_AssemblyMeshSewn = 198,
        DISPID_MeshWorksheetNamedSelectionActive = 199,
        DISPID_GeneratingMeshInSteps = 200,
        DISPID_MeshControlGroupProximityMinSizeSF = 201,
        DISPId_GetDisplayInternalMinSize = 202,
        DISPID_MeshControlGroupMeshState = 203,
        DISPID_IntersectionFeatureCreation = 204,
        DISPID_MorphingFrequency = 205,
        DISPID_MeshControlGroupAttachMesh = 206,
        DISPID_MeshControlGroupLastError = 207,
        DISPId_MeshControlGroupFromRefreshAssembly = 210,
        DISPId_MeshControlGroupSetACTMeshingState = 211,
        DISPID_MeshControlGroupTopologyChecks = 212,
        DISPID_MeshControlNumCpuPartMeshing = 213,
        DISPID_SetDesignpointUpdateFlag = 214,
        DISPID_MeshControlGroupDisplayStyle = 215,
        DISPID_MeshControlGroupReadOnly = 216,
        DISPID_FixedSFForSheets = 217,
        DISPID_NotifyMeshControlGroup = 218,
        DISPID_MeshControlGroupPolyflowExportUnit = 219,
        DISPID_MeshCustomPhysicsPreference = 220,
        DISPID_RepairOverlappingContactRegions = 221,
        DISPID_MeshControlGroupFluentExportMeshType = 222,
        DISPID_CacheSizeFunction = 223,
        DISPID_RepairOverlappingNamedSelections = 224,
        DISPID_MeshControlGroupWasherHeight = 225,
        DISPID_MeshControlGroupWasherMoveNodes = 226,
        DISPID_MeshControlGroupWasherMoveTolerance = 227,
        DISPID_MeshControlGroupWashersEnabled = 228,
        DISPID_MeshControlGroupAsymMappedMeshEnabled = 229
    } kDispId_MeshControlGroup;

    [
      odl,
      uuid(912552C2-AF85-4BF2-B394-83F87F29DA8B),
      helpstring("IDSMeshControlGroupAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSMeshControlGroupAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000047), propget, helpstring("property UseAdvancedControls")]
        HRESULT UseAdvancedControls([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000047), propput, helpstring("property UseAdvancedControls")]
        HRESULT UseAdvancedControls([in] VARIANT_BOOL pVal);
        [id(0x0000005b), propget, helpstring("property PhysicsPreference")]
        HRESULT PhysicsPreference([out, retval] int* pVal);
        [id(0x0000005b), propput, helpstring("property PhysicsPreference")]
        HRESULT PhysicsPreference([in] int pVal);
        [id(0x0000006c), propget, helpstring("property SolverPreference")]
        HRESULT SolverPreference([out, retval] int* pVal);
        [id(0x0000006c), propput, helpstring("property SolverPreference")]
        HRESULT SolverPreference([in] int pVal);
        [id(0x0000000a), propget, helpstring("property Relevance")]
        HRESULT Relevance([out, retval] int* pVal);
        [id(0x0000000a), propput, helpstring("property Relevance")]
        HRESULT Relevance([in] int pVal);
        [id(0x0000005c), propget, helpstring("property RelevanceCenter")]
        HRESULT RelevanceCenter([out, retval] int* pVal);
        [id(0x0000005c), propput, helpstring("property RelevanceCenter")]
        HRESULT RelevanceCenter([in] int pVal);
        [id(0x0000002c), propget, helpstring("property AutomaticInflation")]
        HRESULT AutomaticInflation([out, retval] int* piVal);
        [id(0x0000002c), propput, helpstring("property AutomaticInflation")]
        HRESULT AutomaticInflation([in] int piVal);
        [id(0x00000046), propget, helpstring("property ElementSize")]
        HRESULT ElementSize([out, retval] double* pVal);
        [id(0x00000046), propput, helpstring("property ElementSize")]
        HRESULT ElementSize([in] double pVal);
        [id(0x00000048), propget, helpstring("property CurvProximity")]
        HRESULT CurvProximity([out, retval] int* pVal);
        [id(0x00000048), propput, helpstring("property CurvProximity")]
        HRESULT CurvProximity([in] int pVal);
        [id(0x00000049), propget, helpstring("property ShapeChecking")]
        HRESULT ShapeChecking([out, retval] int* piCheck);
        [id(0x00000049), propput, helpstring("property ShapeChecking")]
        HRESULT ShapeChecking([in] int piCheck);
        [id(0x0000004a), propget, helpstring("property ElementOrder")]
        HRESULT ElementOrder([out, retval] int* piOrder);
        [id(0x0000004a), propput, helpstring("property ElementOrder")]
        HRESULT ElementOrder([in] int piOrder);
        [id(0x00000051), propget, helpstring("property StraightSideElement")]
        HRESULT StraightSideElement([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000051), propput, helpstring("property StraightSideElement")]
        HRESULT StraightSideElement([in] VARIANT_BOOL pVal);
        [id(0x00000081), propget, helpstring("property MeshMorphing")]
        HRESULT MeshMorphing([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000081), propput, helpstring("property MeshMorphing")]
        HRESULT MeshMorphing([in] VARIANT_BOOL pVal);
        [id(0x0000000b), propget, helpstring("property DefeatureOn")]
        HRESULT DefeatureOn([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000000b), propput, helpstring("property DefeatureOn")]
        HRESULT DefeatureOn([in] VARIANT_BOOL pVal);
        [id(0x0000000c), propget, helpstring("property DefeatureSetting")]
        HRESULT DefeatureSetting([out, retval] int* pVal);
        [id(0x0000000c), propput, helpstring("property DefeatureSetting")]
        HRESULT DefeatureSetting([in] int pVal);
        [id(0x0000004f), propget, helpstring("property NumberOfRetries")]
        HRESULT NumberOfRetries([out, retval] int* pVal);
        [id(0x0000004f), propput, helpstring("property NumberOfRetries")]
        HRESULT NumberOfRetries([in] int pVal);
        [id(0x00000080), propget, helpstring("property RigidBodyBehavior")]
        HRESULT RigidBodyBehavior([out, retval] int* piBehavior);
        [id(0x00000080), propput, helpstring("property RigidBodyBehavior")]
        HRESULT RigidBodyBehavior([in] int piBehavior);
        [id(0x00000022), propget, helpstring("property PinchUseSheetThickness")]
        HRESULT PinchUseSheetThickness([out, retval] int* pVal);
        [id(0x00000022), propput, helpstring("property PinchUseSheetThickness")]
        HRESULT PinchUseSheetThickness([in] int pVal);
        [id(0x0000004b), propget, helpstring("property PinchTolerance")]
        HRESULT PinchTolerance([out, retval] double* pVal);
        [id(0x0000004b), propput, helpstring("property PinchTolerance")]
        HRESULT PinchTolerance([in] double pVal);
        [id(0x0000004c), propget, helpstring("property PinchGenerateOnRefresh")]
        HRESULT PinchGenerateOnRefresh([out, retval] int* pVal);
        [id(0x0000004c), propput, helpstring("property PinchGenerateOnRefresh")]
        HRESULT PinchGenerateOnRefresh([in] int pVal);
        [id(0x0000000d), propget, helpstring("property Nodes")]
        HRESULT Nodes([out, retval] int* pVal);
        [id(0x0000000e), propget, helpstring("property Elements")]
        HRESULT Elements([out, retval] int* pVal);
        [id(0x0000000f), propget, helpstring("property SheetShape")]
        HRESULT SheetShape([out, retval] DSSheetMeshShapes* pVal);
        [id(0x0000000f), propput, helpstring("property SheetShape")]
        HRESULT SheetShape([in] DSSheetMeshShapes pVal);
        [id(0x00000010), propget, helpstring("property MeshControls")]
        HRESULT MeshControls([out, retval] VARIANT* pVal);
        [id(0x0000004d), propget, helpstring("property InitialSizeSeed")]
        HRESULT InitialSizeSeed([out, retval] int* piSeed);
        [id(0x0000004d), propput, helpstring("property InitialSizeSeed")]
        HRESULT InitialSizeSeed([in] int piSeed);
        [id(0x0000005d), propget, helpstring("property SmoothingOption")]
        HRESULT SmoothingOption([out, retval] int* pVal);
        [id(0x0000005d), propput, helpstring("property SmoothingOption")]
        HRESULT SmoothingOption([in] int pVal);
        [id(0x0000005e), propget, helpstring("property TransitionOption")]
        HRESULT TransitionOption([out, retval] int* pVal);
        [id(0x0000005e), propput, helpstring("property TransitionOption")]
        HRESULT TransitionOption([in] int pVal);
        [id(0x0000005f), propget, helpstring("property SpanAngleOption")]
        HRESULT SpanAngleOption([out, retval] int* pVal);
        [id(0x0000005f), propput, helpstring("property SpanAngleOption")]
        HRESULT SpanAngleOption([in] int pVal);
        [id(0x00000068), propget, helpstring("property AdvancedSizeFunction")]
        HRESULT AdvancedSizeFunction([out, retval] int* pVal);
        [id(0x00000068), propput, helpstring("property AdvancedSizeFunction")]
        HRESULT AdvancedSizeFunction([in] int pVal);
        [id(0x00000069), propget, helpstring("property SpanningAngleSF")]
        HRESULT SpanningAngleSF([out, retval] double* pVal);
        [id(0x00000069), propput, helpstring("property SpanningAngleSF")]
        HRESULT SpanningAngleSF([in] double pVal);
        [id(0x0000006a), propget, helpstring("property MinSizeSF")]
        HRESULT MinSizeSF([out, retval] double* pVal);
        [id(0x0000006a), propput, helpstring("property MinSizeSF")]
        HRESULT MinSizeSF([in] double pVal);
        [id(0x0000006b), propget, helpstring("property TransitionSF")]
        HRESULT TransitionSF([out, retval] double* pVal);
        [id(0x0000006b), propput, helpstring("property TransitionSF")]
        HRESULT TransitionSF([in] double pVal);
        [id(0x0000004e), propget, helpstring("property MinEdgeSize")]
        HRESULT MinEdgeSize([out, retval] double* pVal);
        [id(0x00000078), propput, helpstring("property MultiBodyOption")]
        HRESULT MultiBodyOption([in] int piVal);
        [id(0x00000078), propget, helpstring("property MultiBodyOption")]
        HRESULT MultiBodyOption([out, retval] int* piVal);
        [id(0x0000002d), propget, helpstring("property ComponentSelectionInflation")]
        HRESULT ComponentSelectionInflation([out, retval] int* pVal);
        [id(0x0000002d), propput, helpstring("property ComponentSelectionInflation")]
        HRESULT ComponentSelectionInflation([in] int pVal);
        [id(0x0000002e), propget, helpstring("property StringSelectionInflation")]
        HRESULT StringSelectionInflation([out, retval] BSTR* pVal);
        [id(0x0000002e), propput, helpstring("property StringSelectionInflation")]
        HRESULT StringSelectionInflation([in] BSTR pVal);
        [id(0x0000006f), propget, helpstring("property InflationOption")]
        HRESULT InflationOption([out, retval] int* pVal);
        [id(0x0000006f), propput, helpstring("property InflationOption")]
        HRESULT InflationOption([in] int pVal);
        [id(0x00000070), propget, helpstring("property FirstLayerHeight")]
        HRESULT FirstLayerHeight([out, retval] double* pVal);
        [id(0x00000070), propput, helpstring("property FirstLayerHeight")]
        HRESULT FirstLayerHeight([in] double pVal);
        [id(0x00000071), propget, helpstring("property MaximumLayersOption")]
        HRESULT MaximumLayersOption([out, retval] int* pVal);
        [id(0x00000071), propput, helpstring("property MaximumLayersOption")]
        HRESULT MaximumLayersOption([in] int pVal);
        [id(0x00000072), propget, helpstring("property MaximumLayers")]
        HRESULT MaximumLayers([out, retval] int* pVal);
        [id(0x00000072), propput, helpstring("property MaximumLayers")]
        HRESULT MaximumLayers([in] int pVal);
        [id(0x00000073), propget, helpstring("property NumLayers")]
        HRESULT NumLayers([out, retval] int* pVal);
        [id(0x00000073), propput, helpstring("property NumLayers")]
        HRESULT NumLayers([in] int pVal);
        [id(0x00000074), propget, helpstring("property ExpansionFactorOption")]
        HRESULT ExpansionFactorOption([out, retval] int* pVal);
        [id(0x00000074), propput, helpstring("property ExpansionFactorOption")]
        HRESULT ExpansionFactorOption([in] int pVal);
        [id(0x00000075), propget, helpstring("property ExpansionFactor")]
        HRESULT ExpansionFactor([out, retval] double* pVal);
        [id(0x00000075), propput, helpstring("property ExpansionFactor")]
        HRESULT ExpansionFactor([in] double pVal);
        [id(0x00000076), propget, helpstring("property MaximumThickness")]
        HRESULT MaximumThickness([out, retval] double* pVal);
        [id(0x00000076), propput, helpstring("property MaximumThickness")]
        HRESULT MaximumThickness([in] double pVal);
        [id(0x0000007a), propget, helpstring("property InflationAlgorithm")]
        HRESULT InflationAlgorithm([out, retval] int* pVal);
        [id(0x0000007a), propput, helpstring("property InflationAlgorithm")]
        HRESULT InflationAlgorithm([in] int pVal);
        [id(0x0000007e), propget, helpstring("property AdvancedInflationOptions")]
        HRESULT AdvancedInflationOptions([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000007e), propput, helpstring("property AdvancedInflationOptions")]
        HRESULT AdvancedInflationOptions([in] VARIANT_BOOL pVal);
        [id(0x00000025), propput]
        HRESULT CollisionAvoidance([in] int piVal);
        [id(0x00000025), propget]
        HRESULT CollisionAvoidance([out, retval] int* piVal);
        [id(0x00000026), propput]
        HRESULT FixFirstLayer([in] int piVal);
        [id(0x00000026), propget]
        HRESULT FixFirstLayer([out, retval] int* piVal);
        [id(0x00000079), propget, helpstring("property StairStepping")]
        HRESULT StairStepping([out, retval] int* pVal);
        [id(0x00000079), propput, helpstring("property StairStepping")]
        HRESULT StairStepping([in] int pVal);
        [id(0x00000029), propput]
        HRESULT InflationAspectRatio([in] double pdVal);
        [id(0x00000029), propget]
        HRESULT InflationAspectRatio([out, retval] double* pdVal);
        [id(0x0000007d), propput]
        HRESULT InflationGapFactor([in] double pdVal);
        [id(0x0000007d), propget]
        HRESULT InflationGapFactor([out, retval] double* pdVal);
        [id(0x00000077), propget, helpstring("property ExpansionType")]
        HRESULT ExpansionType([out, retval] int* pVal);
        [id(0x00000077), propput, helpstring("property ExpansionType")]
        HRESULT ExpansionType([in] int pVal);
        [id(0x0000002a), propput]
        HRESULT InflationMaximumAngle([in] double pdVal);
        [id(0x0000002a), propget]
        HRESULT InflationMaximumAngle([out, retval] double* pdVal);
        [id(0x0000002b), propput]
        HRESULT InflationFilletRatio([in] double pdVal);
        [id(0x0000002b), propget]
        HRESULT InflationFilletRatio([out, retval] double* pdVal);
        [id(0x00000027), propput]
        HRESULT UsePostSmoothing([in] int piVal);
        [id(0x00000027), propget]
        HRESULT UsePostSmoothing([out, retval] int* piVal);
        [id(0x00000028), propput]
        HRESULT SmoothingIterations([in] int piVal);
        [id(0x00000028), propget]
        HRESULT SmoothingIterations([out, retval] int* piVal);
        [id(0x0000009f), propget, helpstring("property AssemblyMeshingMethod")]
        HRESULT AssemblyMeshingMethod([out, retval] int* pVal);
        [id(0x0000009f), propput, helpstring("property AssemblyMeshingMethod")]
        HRESULT AssemblyMeshingMethod([in] int pVal);
        [id(0x000000a0), propget, helpstring("property FeatureCaptureOptionGoCart")]
        HRESULT FeatureCaptureOptionGoCart([out, retval] int* pVal);
        [id(0x000000a0), propput, helpstring("property FeatureCaptureOptionGoCart")]
        HRESULT FeatureCaptureOptionGoCart([in] int pVal);
        [id(0x000000a1), propget, helpstring("property FeatureAngleGoCart")]
        HRESULT FeatureAngleGoCart([out, retval] double* pVal);
        [id(0x000000a1), propput, helpstring("property FeatureAngleGoCart")]
        HRESULT FeatureAngleGoCart([in] double pVal);
        [id(0x000000a2), propget, helpstring("property SagToleranceGoCart")]
        HRESULT SagToleranceGoCart([out, retval] double* pVal);
        [id(0x000000a2), propput, helpstring("property SagToleranceGoCart")]
        HRESULT SagToleranceGoCart([in] double pVal);
        [id(0x00000053), propget, helpstring("property SolidMesher")]
        HRESULT SolidMesher([out, retval] int* piMesher);
        [id(0x00000053), propput, helpstring("property SolidMesher")]
        HRESULT SolidMesher([in] int piMesher);
        [id(0x00000014), helpstring("method AddMeshControl")]
        HRESULT AddMeshControl(
                        [in] IDispatch* piSelectMgrDisp, 
                        [in] DSMeshControls ControlType, 
                        [out, retval] IDispatch** ppVal);
        [id(0x00000015), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x00000016), helpstring("method MeshParts")]
        HRESULT MeshParts(
                        IAnsProgress* piProgress, 
                        [in] int bUpdate);
        [id(0x00000011), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x00000012), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x0000001b), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x00000013), propget, helpstring("property HasMesh")]
        HRESULT HasMesh([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000001c), helpstring("method PreviewDefeature")]
        HRESULT PreviewDefeature([in] IDispatch* pISelMgr);
        [id(0x0000001d), propget, helpstring("property HasDefeaturingMeshControl")]
        HRESULT HasDefeaturingMeshControl([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000001e), helpstring("method PreviewSweepable")]
        HRESULT PreviewSweepable([in] IDispatch* pISelMgr);
        [id(0x000000aa), helpstring("method PreviewMappable")]
        HRESULT PreviewMappable([in] IDispatch* pISelMgr);
        [id(0x00000033), propget, helpstring("property SurfaceArea")]
        HRESULT SurfaceArea([out, retval] double* pVal);
        [id(0x00000034), propget, helpstring("property Volume     ")]
        HRESULT Volume([out, retval] double* pVal);
        [id(0x00000036), propget, helpstring("property NumSurfaces")]
        HRESULT NumSurfaces([out, retval] int* pVal);
        [id(0x0000003c), propget, helpstring("property XCentroid  ")]
        HRESULT XCentroid([out, retval] double* pVal);
        [id(0x0000003d), propget, helpstring("property YCentroid  ")]
        HRESULT YCentroid([out, retval] double* pVal);
        [id(0x0000003e), propget, helpstring("property ZCentroid  ")]
        HRESULT ZCentroid([out, retval] double* pVal);
        [id(0x00000050), propget, helpstring("property MeshingFailed")]
        HRESULT MeshingFailed([out, retval] VARIANT_BOOL* pvFailed);
        [id(0x00000050), propput, helpstring("property MeshingFailed")]
        HRESULT MeshingFailed([in] VARIANT_BOOL pvFailed);
        [id(0x00000037), propget, helpstring("property MeshMetric")]
        HRESULT MeshMetric([out, retval] int* pVal);
        [id(0x00000037), propput, helpstring("property MeshMetric")]
        HRESULT MeshMetric([in] int pVal);
        [id(0x00000038), propget, helpstring("property MeshMetricMin")]
        HRESULT MeshMetricMin([out, retval] double* pVal);
        [id(0x00000039), propget, helpstring("property MeshMetricMax")]
        HRESULT MeshMetricMax([out, retval] double* pVal);
        [id(0x0000003a), propget, helpstring("property MeshMetricAverage")]
        HRESULT MeshMetricAverage([out, retval] double* pVal);
        [id(0x0000003b), propget, helpstring("property MeshMetricSTDV")]
        HRESULT MeshMetricSTDV([out, retval] double* pVal);
        [id(0x0000003f), propget, helpstring("property IsMeshing")]
        HRESULT IsMeshing([out, retval] VARIANT_BOOL* bIsMeshing);
        [id(0x0000001f), helpstring("method AutoGapSize")]
        HRESULT AutoGapSize(IAnsProgress* piProgress);
        [id(0x00000052), propget, helpstring("property AssemblyMesh")]
        HRESULT AssemblyMesh([out, retval] IDispatch** ppDisp);
        [id(0x00000020), helpstring("method AddGapTool")]
        HRESULT AddGapTool([out, retval] IDispatch** ppVal);
        [id(0x00000055), propget, helpstring("property GapSizes")]
        HRESULT GapSizes([out, retval] VARIANT* pVal);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
        [id(0x00000056), helpstring("method LoadFromFile")]
        HRESULT LoadFromFile([in] BSTR bsFilename);
        [id(0x00000057), helpstring("method SaveToFile")]
        HRESULT SaveToFile([in] BSTR bsFilename);
        [id(0x00000017), helpstring("method ClearMeshQueue")]
        HRESULT ClearMeshQueue();
        [id(0x00000018), helpstring("method AddPartToMeshQueue")]
        HRESULT AddPartToMeshQueue([in] dsid cPrototypeId);
        [id(0x00000019), helpstring("method GetNumPartsInMeshQueue")]
        HRESULT GetNumPartsInMeshQueue([out, retval] int* piNumParts);
        [id(0x0000001a), helpstring("method GetPartFromMeshQueue")]
        HRESULT GetPartFromMeshQueue(
                        [in] int index, 
                        [out, retval] int* piPartId);
        [id(0x00000021), helpstring("method SurfaceMeshParts")]
        HRESULT SurfaceMeshParts(IAnsProgress* piProgress);
        [id(0x00000023), helpstring("method PreviewMeshControls")]
        HRESULT PreviewMeshControls(
                        unsigned int ulFilter0, 
                        unsigned int ulFilter1, 
                        IAnsProgress* piProgress);
        [id(0x00000058), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000024), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00000059), helpstring("method UpdateFromFile")]
        HRESULT UpdateFromFile([in] BSTR bsFilename);
        [id(0x0000005a), helpstring("method WriteInputFile")]
        HRESULT WriteInputFile(
                        [in] BSTR filename, 
                        [in, optional, defaultvalue(0)] VARIANT_BOOL vbWithSkinComponents);
        [id(0x00000060), helpstring("method SetMeshingState")]
        HRESULT SetMeshingState(
                        [in] int iState, 
                        [in] int iPartIdx);
        [id(0x00000061), helpstring("method WriteFluentInputFile")]
        HRESULT WriteFluentInputFile([in] BSTR filename);
        [id(0x00000062), helpstring("method DrawProblematicGeometry")]
        HRESULT DrawProblematicGeometry();
        [id(0x00000063), propget, helpstring("property NumProblems")]
        HRESULT NumProblems([out, retval] int* piNum);
        [id(0x00000064), helpstring("method GetNumProblemTopos")]
        HRESULT GetNumProblemTopos(
                        [in] int index, 
                        [out] int* piPartId, 
                        [out] int* piNum);
        [id(0x00000065), helpstring("method GetProblemTopo")]
        HRESULT GetProblemTopo(
                        [in] int iProblemIndex, 
                        [in] int iTopoIndex, 
                        [out, retval] unsigned int* ulTopo);
        [id(0x00000066), helpstring("method AddProblematicComponent")]
        HRESULT AddProblematicComponent(
                        [in] int index, 
                        [out, retval] IDispatch** ppDisp);
        [id(0x00000067), helpstring("method InvalidateState")]
        HRESULT InvalidateState([in] unsigned int iMethodId);
        [id(0x0000007b), helpstring("method PreviewAutoInflation")]
        HRESULT PreviewAutoInflation([in] IDispatch* pISelMgr);
        [id(0x0000007c), helpstring("method DrawWorstElements")]
        HRESULT DrawWorstElements();
        [id(0x0000007f), helpstring("method AutoPinch")]
        HRESULT AutoPinch([in] IAnsProgress* piProgress);
        [id(0x00000083), helpstring("method ForceUpdateMeshStates")]
        HRESULT ForceUpdateMeshStates();
        [id(0x00000082), helpstring("method InitializeMeshMorphingServices")]
        HRESULT InitializeMeshMorphingServices([in] IAnsProgress* piProgress);
        [id(0x0000006d), helpstring("method WritePolyFlowInputFile")]
        HRESULT WritePolyFlowInputFile([in] BSTR filename);
        [id(0x00000084), helpstring("method WriteCGNSInputFile")]
        HRESULT WriteCGNSInputFile([in] BSTR filename);
        [id(0x00000085), helpstring("method PreviewInflation")]
        HRESULT PreviewInflation(IAnsProgress* piProgress);
        [id(0x00000086), propget, helpstring("property NumCellGapSF")]
        HRESULT NumCellGapSF([out, retval] int* pVal);
        [id(0x00000086), propput, helpstring("property NumCellGapSF")]
        HRESULT NumCellGapSF([in] int pVal);
        [id(0x00000087), propget, helpstring("property MaxSizeSF")]
        HRESULT MaxSizeSF([out, retval] double* pVal);
        [id(0x00000087), propput, helpstring("property MaxSizeSF")]
        HRESULT MaxSizeSF([in] double pVal);
        [id(0x00000088), propget, helpstring("property TransitionRatio")]
        HRESULT TransitionRatio([out, retval] double* pVal);
        [id(0x00000088), propput, helpstring("property TransitionRatio")]
        HRESULT TransitionRatio([in] double pVal);
        [id(0x00000089), propget, helpstring("property UsingWB2Filters")]
        HRESULT UsingWB2Filters([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000008a), propget, helpstring("property RigidBodyFaceMeshType")]
        HRESULT RigidBodyFaceMeshType([out, retval] int* piType);
        [id(0x0000008a), propput, helpstring("property RigidBodyFaceMeshType")]
        HRESULT RigidBodyFaceMeshType([in] int piType);
        [id(0x0000008b), propget, helpstring("property MaxFaceElementSize")]
        HRESULT MaxFaceElementSize([out, retval] double* pVal);
        [id(0x0000008b), propput, helpstring("property MaxFaceElementSize")]
        HRESULT MaxFaceElementSize([in] double pVal);
        [id(0x0000008c), helpstring("method GetMaxSizeEitherUserOrCalculated")]
        HRESULT GetMaxSizeEitherUserOrCalculated([out, retval] double* pdVal);
        [id(0x0000008e), helpstring("method WriteICEMInputFiles")]
        HRESULT WriteICEMInputFiles([in] BSTR filename);
        [id(0x00000090), propget, helpstring("property MeshMetricGraph")]
        HRESULT MeshMetricGraph([out, retval] IDispatch** pIMeshMetricGraph);
        [id(0x00000091), helpstring("method AttachGraphListeners")]
        HRESULT AttachGraphListeners();
        [id(0x00000092), helpstring("method CleanMeshMetrics")]
        HRESULT CleanMeshMetrics();
        [id(0x00000093), helpstring("method WriteTGridGeometryFile")]
        HRESULT WriteTGridGeometryFile([in] BSTR filename);
        [id(0x00000094), propget, helpstring("property HasOverlappingNamedSelections")]
        HRESULT HasOverlappingNamedSelections([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000095), helpstring("method DrawOverlappingNamedSelections")]
        HRESULT DrawOverlappingNamedSelections([in] IDispatch* pISelMgr);
        [id(0x00000096), propget, helpstring("property PrototypeIdsWithOneElementThickness")]
        HRESULT PrototypeIdsWithOneElementThickness([out, retval] IDispatch** pDisp);
        [id(0x00000097), propget, helpstring("property UnitTypeByDispid")]
        HRESULT UnitTypeByDispid(
                        [in] int dispid, 
                        [out, retval] int* unitType);
        [id(0x00000098), propget, helpstring("property UnitStringByDispid")]
        HRESULT UnitStringByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* unitString);
        [id(0x00000099), propget, helpstring("property ParamNameByDispid")]
        HRESULT ParamNameByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* paramName);
        [id(0x0000009a), helpstring("method SetAddPinchControlGeom")]
        HRESULT SetAddPinchControlGeom(
                        [in] IDispatch* piSelectMgrDisp, 
                        [in] int GeomType);
        [id(0x0000009b), helpstring("method PreviewHoleRemovable")]
        HRESULT PreviewHoleRemovable([in] IDispatch* pISelMgr);
        [id(0x0000009c), propget, helpstring("property SheetHoleRemoval")]
        HRESULT SheetHoleRemoval([out, retval] int* pVal);
        [id(0x0000009c), propput, helpstring("property SheetHoleRemoval")]
        HRESULT SheetHoleRemoval([in] int pVal);
        [id(0x0000009d), propget, helpstring("property HoleTolerance")]
        HRESULT HoleTolerance([out, retval] double* pVal);
        [id(0x0000009d), propput, helpstring("property HoleTolerance")]
        HRESULT HoleTolerance([in] double pVal);
        [id(0x0000009e), propget, helpstring("property FirstAspectRatio")]
        HRESULT FirstAspectRatio([out, retval] double* pVal);
        [id(0x0000009e), propput, helpstring("property FirstAspectRatio")]
        HRESULT FirstAspectRatio([in] double pVal);
        [id(0x000000a3), helpstring("method CleanPartOrBody")]
        HRESULT CleanPartOrBody([in] IAnsUINTColl* piDsIds);
        [id(0x000000a4), propget, helpstring("property ExtraRetriesForAssembly")]
        HRESULT ExtraRetriesForAssembly([out, retval] VARIANT_BOOL* pVal);
        [id(0x000000a4), propput, helpstring("property ExtraRetriesForAssembly")]
        HRESULT ExtraRetriesForAssembly([in] VARIANT_BOOL pVal);
        [id(0x000000a5), propget, helpstring("property TessellationRefinementOptionGoCart")]
        HRESULT TessellationRefinementOptionGoCart([out, retval] int* pVal);
        [id(0x000000a5), propput, helpstring("property TessellationRefinementOptionGoCart")]
        HRESULT TessellationRefinementOptionGoCart([in] int pVal);
        [id(0x000000a6), helpstring("method CheckDataAfterResume")]
        HRESULT CheckDataAfterResume();
        [id(0x000000a8), propget, helpstring("property MeshDefeatureTol")]
        HRESULT MeshDefeatureTol([out, retval] double* pVal);
        [id(0x000000a8), propput, helpstring("property MeshDefeatureTol")]
        HRESULT MeshDefeatureTol([in] double pVal);
        [id(0x000000a9), propget, helpstring("property AutoMeshDefeaturing")]
        HRESULT AutoMeshDefeaturing([out, retval] int* pVal);
        [id(0x000000a9), propput, helpstring("property AutoMeshDefeaturing")]
        HRESULT AutoMeshDefeaturing([in] int pVal);
        [id(0x000000ab), helpstring("method CheckMixedMethods")]
        HRESULT CheckMixedMethods();
        [id(0x000000ac), propget, helpstring("property MissingTessellationVisited")]
        HRESULT MissingTessellationVisited([out, retval] VARIANT_BOOL* pvVisited);
        [id(0x000000ad), helpstring("method FindMissingTessellations")]
        HRESULT FindMissingTessellations();
        [id(0x000000ae), propget, helpstring("property NumMissingTessellations")]
        HRESULT NumMissingTessellations([out, retval] int* pVal);
        [id(0x000000af), helpstring("method AddMisssingTessellationComponent")]
        HRESULT AddMissingTessellationComponent(
                        [in] int index, 
                        [out, retval] IDispatch** ppDisp);
        [id(0x000000b0), helpstring("method DrawMissingTessellationComponent")]
        HRESULT DrawMissingTessellations();
        [id(0x000000b1), propget, helpstring("property LastAspectRatio")]
        HRESULT LastAspectRatio([out, retval] double* pVal);
        [id(0x000000b1), propput, helpstring("property LastAspectRatio")]
        HRESULT LastAspectRatio([in] double pVal);
        [id(0x000000b2), propget, helpstring("property KeepSolidMeshGoCart")]
        HRESULT KeepSolidMeshGoCart([out, retval] int* pVal);
        [id(0x000000b2), propput, helpstring("property KeepSolidMeshGoCart")]
        HRESULT KeepSolidMeshGoCart([in] int pVal);
        [id(0x000000b3), propget, helpstring("property ProximitySFSources")]
        HRESULT ProximitySFSources([out, retval] int* pVal);
        [id(0x000000b3), propput, helpstring("property ProximitySFSources")]
        HRESULT ProximitySFSources([in] int pVal);
        [id(0x000000b5), helpstring("method AddNamedSelectionList")]
        HRESULT AddNamedSelectionList();
        [id(0x000000b7), propget, helpstring("property NumNamedSelectionEntries")]
        HRESULT NumNamedSelectionEntries([out, retval] int* pVal);
        [id(0x000000bc), propget, helpstring("property DirectMeshingRecording")]
        HRESULT DirectMeshingRecording([out, retval] VARIANT_BOOL* pVal);
        [id(0x000000bc), propput, helpstring("property DirectMeshingRecording")]
        HRESULT DirectMeshingRecording([in] VARIANT_BOOL pVal);
        [id(0x000000bf), propget, helpstring("property DirectMeshingRecordingNumEntries")]
        HRESULT DirectMeshingRecordingNumEntries([out, retval] int* iVal);
        [id(0x000000bf), propput, helpstring("property DirectMeshingRecordingNumEntries")]
        HRESULT DirectMeshingRecordingNumEntries([in] int iVal);
        [id(0x000000b4), propget, helpstring("property WorkSheetNamedSelectionId")]
        HRESULT WorkSheetNamedSelectionId(
                        [in] int index, 
                        [out, retval] dsid* pVal);
        [id(0x000000b4), propput, helpstring("property WorkSheetNamedSelectionId")]
        HRESULT WorkSheetNamedSelectionId(
                        [in] int index, 
                        [in] dsid pVal);
        [id(0x000000b6), helpstring("method DeleteNamedSelectionList")]
        HRESULT DeleteNamedSelectionList([in] int index);
        [id(0x000000b8), helpstring("method ClearNamedSelectionList")]
        HRESULT ClearNamedSelectionList();
        [id(0x000000b9), helpstring("method DumpMeshPropertiesToTextFile")]
        HRESULT DumpMeshPropertiesToTextFile([in] BSTR outFile);
        [id(0x000000bd), helpstring("method AddMeshWrapper")]
        HRESULT AddMeshWrapper([out, retval] IDispatch** ppVal);
        [id(0x000000be), helpstring("method WorksheetGenerateMeshAtStep")]
        HRESULT WorksheetGenerateMeshAtStep(
                        [in] int step, 
                        [in, optional, defaultvalue(0)] IAnsProgress* piProgress);
        [id(0x000000c1), helpstring("method WorksheetValidateRecording")]
        HRESULT WorksheetValidateRecording();
        [id(0x000000c2), helpstring("method WrapMeshParts")]
        HRESULT WrapMeshParts(IAnsProgress* piProgress);
        [id(0x000000c4), helpstring("method MeshWorksheetGenerateMesh")]
        HRESULT MeshWorksheetGenerateMesh([in, optional, defaultvalue(0)] IAnsProgress* piProgress);
        [id(0x000000c5), propget, helpstring("property TriangleSurfaceMesh")]
        HRESULT TriangleSurfaceMesh([out, retval] int* pVal);
        [id(0x000000c5), propput, helpstring("property TriangleSurfaceMesh")]
        HRESULT TriangleSurfaceMesh([in] int pVal);
        [id(0x000000e5), propget, helpstring("property AsymMappedMeshEnabled")]
        HRESULT AsymMappedMeshEnabled([out, retval] VARIANT_BOOL* pVal);
        [id(0x000000e5), propput, helpstring("property AsymMappedMeshEnabled")]
        HRESULT AsymMappedMeshEnabled([in] VARIANT_BOOL pVal);
        [id(0x000000c6), propget, helpstring("property AssemblyMeshSewn")]
        HRESULT AssemblyMeshSewn([out, retval] int* pVal);
        [id(0x000000c7), propget, helpstring("property MeshWorksheetNamedSelectionActive")]
        HRESULT MeshWorksheetNamedSelectionActive(
                        [in] int index, 
                        [out, retval] int* pVal);
        [id(0x000000c7), propput, helpstring("property MeshWorksheetNamedSelectionActive")]
        HRESULT MeshWorksheetNamedSelectionActive(
                        [in] int index, 
                        [in] int pVal);
        [id(0x000000c8), propget, helpstring("property GeneratingMeshInSteps")]
        HRESULT GeneratingMeshInSteps([out, retval] VARIANT_BOOL* pVal);
        [id(0x000000c9), propget, helpstring("property ProximityMinSizeSF")]
        HRESULT ProximityMinSizeSF([out, retval] double* pVal);
        [id(0x000000c9), propput, helpstring("property ProximityMinSizeSF")]
        HRESULT ProximityMinSizeSF([in] double pVal);
        [id(0x000000ca), helpstring("method GetDisplayInternalMinSize")]
        HRESULT GetDisplayInternalMinSize([out, retval] double* pdVal);
        [id(0x000000cb), propget, helpstring("property MeshControlGroupMeshState")]
        HRESULT MeshControlGroupMeshState([out, retval] VARIANT_BOOL* pVal);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x000000cc), propget, helpstring("property IntersectionFeatureCreation")]
        HRESULT IntersectionFeatureCreation([out, retval] int* pVal);
        [id(0x000000cc), propput, helpstring("property IntersectionFeatureCreation")]
        HRESULT IntersectionFeatureCreation([in] int pVal);
        [id(0x000000cd), propget, helpstring("property MorphingFrequency")]
        HRESULT MorphingFrequency([out, retval] int* pVal);
        [id(0x000000cd), propput, helpstring("property MorphingFrequency")]
        HRESULT MorphingFrequency([in] int pVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x000000ce), helpstring("method AttachMesh")]
        HRESULT AttachMesh([in] BSTR bsFilename);
        [id(0x000000cf), propget, helpstring("property LastError")]
        HRESULT LastError([out, retval] BSTR* pbsFilename);
        [id(0x000000cf), propput, helpstring("property LastError")]
        HRESULT LastError([in] BSTR pbsFilename);
        [id(0x000000d2), propget, helpstring("property FromRefreshAssembly")]
        HRESULT FromRefreshAssembly([out, retval] VARIANT_BOOL* pVal);
        [id(0x000000d2), propput, helpstring("property FromRefreshAssembly")]
        HRESULT FromRefreshAssembly([in] VARIANT_BOOL pVal);
        [id(0x000000d4), propget, helpstring("property TopologyChecks")]
        HRESULT TopologyChecks([out, retval] int* pVal);
        [id(0x000000d4), propput, helpstring("property TopologyChecks")]
        HRESULT TopologyChecks([in] int pVal);
        [id(0x000000d3), helpstring("method SetACTMeshingState")]
        HRESULT SetACTMeshingState(
                        [in] int iState, 
                        [in] int iPartId);
        [id(0x000000d5), propget, helpstring("property NumCpuPartMeshing")]
        HRESULT NumCpuPartMeshing([out, retval] int* pVal);
        [id(0x000000d5), propput, helpstring("property NumCpuPartMeshing")]
        HRESULT NumCpuPartMeshing([in] int pVal);
        [id(0x000000d6), helpstring("method SetDesignpointUpdateFlag")]
        HRESULT SetDesignpointUpdateFlag([in] int newVal);
        [id(0x000000d7), propget, helpstring("property DisplayStyle")]
        HRESULT DisplayStyle([out, retval] DSMeshDisplayStyle* pVal);
        [id(0x000000d7), propput, helpstring("property DisplayStyle")]
        HRESULT DisplayStyle([in] DSMeshDisplayStyle pVal);
        [id(0x000000d8), propget, helpstring("property ReadOnly")]
        HRESULT ReadOnly([out, retval] VARIANT_BOOL* pVal);
        [id(0x000000d8), propput, helpstring("property ReadOnly")]
        HRESULT ReadOnly([in] VARIANT_BOOL pVal);
        [id(0x000000d9), propget, helpstring("property Use FixedASF for sheets")]
        HRESULT UseFixedSFForSheets([out, retval] int* pVal);
        [id(0x000000d9), propput, helpstring("property Use FixedASF for sheets")]
        HRESULT UseFixedSFForSheets([in] int pVal);
        [id(0x000000dc), propget, helpstring("property MeshCustomPhysicsPreferenceXMLFile")]
        HRESULT MeshCustomPhysicsPreferenceXMLFile([out, retval] BSTR* pVal);
        [id(0x000000da), helpstring("method NotifyMeshControlGroup")]
        HRESULT NotifyMeshControlGroup();
        [id(0x000000db), propget, helpstring("property PolyflowExportUnit")]
        HRESULT PolyflowExportUnit([out, retval] int* pVal);
        [id(0x000000db), propput, helpstring("property PolyflowExportUnit")]
        HRESULT PolyflowExportUnit([in] int pVal);
        [id(0x000000dd), helpstring("method RepairOverlappingContactRegions")]
        HRESULT RepairOverlappingContactRegions([in] IAnsProgress* piProgress);
        [id(0x000000de), propget, helpstring("property FluentExportMeshType")]
        HRESULT FluentExportMeshType([out, retval] int* pVal);
        [id(0x000000de), propput, helpstring("property FluentExportMeshType")]
        HRESULT FluentExportMeshType([in] int pVal);
        [id(0x000000df), propget, helpstring("property CacheSizeFunction")]
        HRESULT CacheSizeFunction([out, retval] int* pVal);
        [id(0x000000df), propput, helpstring("property CacheSizeFunction")]
        HRESULT CacheSizeFunction([in] int pVal);
        [id(0x000000e4), propget, helpstring("property WashersEnabled")]
        HRESULT WashersEnabled([out, retval] VARIANT_BOOL* pVal);
        [id(0x000000e4), propput, helpstring("property WashersEnabled")]
        HRESULT WashersEnabled([in] VARIANT_BOOL pVal);
        [id(0x000000e1), propget, helpstring("property WasherHeight")]
        HRESULT WasherHeight([out, retval] double* pVal);
        [id(0x000000e1), propput, helpstring("property WasherHeight")]
        HRESULT WasherHeight([in] double pVal);
        [id(0x000000e2), propget, helpstring("property WasherMoveNodes")]
        HRESULT WasherMoveNodes([out, retval] VARIANT_BOOL* pVal);
        [id(0x000000e2), propput, helpstring("property WasherMoveNodes")]
        HRESULT WasherMoveNodes([in] VARIANT_BOOL pVal);
        [id(0x000000e3), propget, helpstring("property WasherMoveTolerance")]
        HRESULT WasherMoveTolerance([out, retval] double* pVal);
        [id(0x000000e3), propput, helpstring("property WasherMoveTolerance")]
        HRESULT WasherMoveTolerance([in] double pVal);
        [id(0x000000e0), helpstring("method RepairOverlappingNamedSelections")]
        HRESULT RepairOverlappingNamedSelections([in] IAnsProgress* piProgress);
        [id(0x0000008d), propget, helpstring("property LayersInThinRegion")]
        HRESULT LayersInThinRegion([out, retval] int* pVal);
        [id(0x0000008d), propput, helpstring("property LayersInThinRegion")]
        HRESULT LayersInThinRegion([in] int pVal);
        [id(0x0000002f), propget, helpstring("property GlobalTargetQuality")]
        HRESULT GlobalTargetQuality([out, retval] double* pdVal);
        [id(0x0000002f), propput, helpstring("property GlobalTargetQuality")]
        HRESULT GlobalTargetQuality([in] double pdVal);
        [id(0x00000030), propget, helpstring("property GlobalTargetSkewness")]
        HRESULT GlobalTargetSkewness([out, retval] double* pdVal);
        [id(0x00000030), propput, helpstring("property GlobalTargetSkewness")]
        HRESULT GlobalTargetSkewness([in] double pdVal);
        [id(0x00000031), propget, helpstring("property GlobalTargetJacobianRatio")]
        HRESULT GlobalTargetJacobianRatio([out, retval] double* pdVal);
        [id(0x00000031), propput, helpstring("property GlobalTargetJacobianRatio")]
        HRESULT GlobalTargetJacobianRatio([in] double pdVal);
        [id(0x00000040), propget, helpstring("property GlobalUseCustomTargetLimit")]
        HRESULT GlobalUseCustomTargetLimit([out, retval] VARIANT_BOOL* pdVal);
        [id(0x00000040), propput, helpstring("property GlobalUseCustomTargetLimit")]
        HRESULT GlobalUseCustomTargetLimit([in] VARIANT_BOOL pdVal);
        [id(0x000000d0), propget, helpstring("property IndependentMesh")]
        HRESULT IndependentMesh([out, retval] IDispatch** ppDisp);
    };

    typedef enum {
        kSHEET_TRIS = 0,
        kSHEET_QUADS = 1
    } DSSheetMeshShapes;

    typedef enum {
        kDisplayMeshByBodyColor = 0,
        kDisplayMeshByElementQuality = 1,
        kDisplayMeshByAspectRatio = 2,
        kDisplayMeshByJacobianRatio = 3,
        kDisplayMeshByWarpingFactor = 4,
        kDisplayMeshByParallelDeviation = 5,
        kDisplayMeshByMaximumCornerAngle = 6,
        kDisplayMeshBySkewness = 7,
        kDisplayMeshByOrthogonalQuality = 8,
        kDisplayMeshByShellThickness = 9
    } DSMeshDisplayStyle;

    typedef enum {
        DISPID_MeshEditGroupAddNodeMove = 10
    } kDispId_MeshEditGroup;

    [
      odl,
      uuid(F90046AB-00F4-4773-8C9C-1314F66FFF2D),
      helpstring("IDSMeshEditGroupAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSMeshEditGroupAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x0000000a), helpstring("method AddNodeMove")]
        HRESULT AddNodeMove([out, retval] IDispatch** pDisp);
    };

    typedef enum {
        DISPID_NodeMoveMoveNode = 10,
        DISPID_NodeMoveCount = 11,
        DISPID_NodeMoveNodeId = 12,
        DISPID_NodeMoveOldLocationX = 13,
        DISPID_NodeMoveOldLocationY = 14,
        DISPID_NodeMoveOldLocationZ = 15,
        DISPID_NodeMoveNewLocationX = 16,
        DISPID_NodeMoveNewLocationY = 17,
        DISPID_NodeMoveNewLocationZ = 18,
        DISPID_NodeMoveUndoLast = 19,
        DISPID_NodeMoveUndoAll = 20,
        DISPID_NodeNumberOfNodesMoved = 21,
        DISPID_NodeMoveF4Key = 22,
        DISPID_NodeMoveMoveNodeById = 23,
        DISPID_NodeMoveComments = 24,
        DISPID_NodeMoveFigures = 25,
        DISPID_NodeMoveAddComment = 26,
        DISPID_NodeMoveAddFigure = 27,
        DISPID_NodeMoveImages = 28,
        DISPID_NodeMoveAddImage = 29,
        DISPID_NodeMoveDirectInput = 30
    } kDispId_NodeMove;

    [
      odl,
      uuid(C2DFE529-5310-4929-8CE3-6AF9440E6C3D),
      helpstring("IDSNodeMoveAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSNodeMoveAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x0000000a), helpstring("method MoveNode - location expected in user units")]
        HRESULT MoveNode(
                        [in] unsigned int NodeIndex, 
                        [in] int protoId, 
                        [in] double newLocationX, 
                        [in] double newLocationY, 
                        [in] double newLocationZ);
        [id(0x0000000b), propget, helpstring("property MoveCount")]
        HRESULT MoveCount([out, retval] unsigned int* pVal);
        [id(0x0000000c), propget, helpstring("property NodeId")]
        HRESULT NodeId(
                        [in] unsigned int index, 
                        [out, retval] unsigned int* pVal);
        [id(0x0000000d), propget, helpstring("property OldLocationX")]
        HRESULT OldLocationX(
                        [in] unsigned int index, 
                        [out, retval] double* pVal);
        [id(0x0000000e), propget, helpstring("property OldLocationY")]
        HRESULT OldLocationY(
                        [in] unsigned int index, 
                        [out, retval] double* pVal);
        [id(0x0000000f), propget, helpstring("property OldLocationZ")]
        HRESULT OldLocationZ(
                        [in] unsigned int index, 
                        [out, retval] double* pVal);
        [id(0x00000010), propget, helpstring("property NewLocationX")]
        HRESULT newLocationX(
                        [in] unsigned int index, 
                        [out, retval] double* pVal);
        [id(0x00000011), propget, helpstring("property NewLocationY")]
        HRESULT newLocationY(
                        [in] unsigned int index, 
                        [out, retval] double* pVal);
        [id(0x00000012), propget, helpstring("property NewLocationZ")]
        HRESULT newLocationZ(
                        [in] unsigned int index, 
                        [out, retval] double* pVal);
        [id(0x00000013), helpstring("method UndoLast")]
        HRESULT UndoLast();
        [id(0x00000014), helpstring("method UndoLast")]
        HRESULT UndoAll();
        [id(0x00000015), propget, helpstring("property NumberOfNodesMoved")]
        HRESULT NumberOfNodesMoved([out, retval] unsigned int* pVal);
        [id(0x00000017), helpstring("method MoveNodeById - location expected in user units")]
        HRESULT MoveNodeById(
                        [in] unsigned int NodeId, 
                        [in] double newLocationX, 
                        [in] double newLocationY, 
                        [in] double newLocationZ);
        [id(0x00000018), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x00000019), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x0000001a), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x0000001b), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x0000001c), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x0000001d), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
    };

    typedef enum {
        DISPID_ModelEnvironments = 10,
        DISPID_ModelPrototypeGroup = 11,
        DISPID_ModelContactGroup = 12,
        DISPID_ModelMeshControlGroup = 13,
        DISPID_ModelComments = 14,
        DISPID_ModelFigures = 15,
        DISPID_ModelAddComment = 16,
        DISPID_ModelAttachAssembly = 17,
        DISPID_ModelHasGeometry = 18,
        DISPID_ModelAddFigure = 19,
        DISPID_ModelAddComponentGroup = 20,
        DISPID_ModelComponentGroup = 21,
        DISPID_ModelAddCoordinateSystemGroup = 22,
        DISPID_ModelCoordinateSystemGroup = 23,
        DISPID_ModelAddVTGroup = 24,
        DISPID_ModelAddSolutionCombination = 25,
        DISPID_ModelSolutionCombinations = 26,
        DISPID_ModelAddMeshControlGroup = 27,
        DISPID_ModelVTGroup = 28,
        DISPID_ModelPrototypes = 29,
        DISPID_ModelAddContactGroup = 30,
        DISPID_ModelAddSolutionStepsGroup = 31,
        DISPID_ModelSolutionStepsGroup = 32,
        DISPID_ModelIs2DGeometry = 33,
        DISPID_ModelAddSymmetryGroup = 34,
        DISPID_ModelAutoCreateSymmetryGroup = 35,
        DISPID_ModelAutoCreateEnvironmentWithThermalCondition = 36,
        DISPID_ModelAutoCreateSequenceEnvironmentWithThermalCondition = 37,
        DISPID_ModelRefreshSymmetryGroup = 38,
        DISPID_ModelSymmetryGroup = 39,
        DISPID_ModelImages = 40,
        DISPID_ModelAddImage = 41,
        DISPID_ModelCharts = 42,
        DISPID_ModelAutoCreateTransEnvWithInitialCondition = 43,
        DISPID_ModelAddRemotePointGroup = 44,
        DISPID_ModelRemotePointGroup = 45,
        DISPID_ModelAutoCreateEnvironmentWithEmagCondition = 46,
        DISPID_ModelAutoCreateSequenceEnvironmentWithEmagCondition = 47,
        DISPID_ModelAutoCreateElectricEnvironmentWithThermalCondition = 48,
        DISPID_ModelAutoCreateElectricSequenceEnvironmentWithThermalCondition = 49,
        DISPID_ModelConstructionGeometryGroup = 50,
        DISPID_ModelAddConstructionGeometryGroup = 51,
        DISPID_ModelFilterCollection = 52,
        DISPID_ModelSelectedSolver = 53,
        DISPID_ModelDisableFiltering = 54,
        DISPID_ModelEnableFiltering = 55,
        DISPID_ModelFilterEnvironmentId = 56,
        DISPID_ModelResetModel = 57,
        DISPID_ModelClearModel = 58,
        DISPID_ModelUpdateModel = 59,
        DISPID_SetModelDirectory = 60,
        DISPID_ModelSystemCaption = 61,
        DISPID_SetScratchSolutionDirectory = 62,
        DISPID_WB2ProjectSaved = 63,
        DISPID_ModelAddMeshRenumberingControlGroup = 64,
        DISPID_ModelMeshRenumberingControlGroup = 65,
        DISPID_VolumeofOneSelectedBody = 66,
        DISPID_VolumeofAllSelectedBodies = 67,
        DISPID_MassofOneSelectedBody = 68,
        DISPID_MassofAllSelectedBodies = 69,
        DISPID_CentroidOfOneSelectedBody = 70,
        DISPID_CentroidOfAllSelectedBodies = 71,
        DISPID_BodyNamesOfOneSelectedEntity = 72,
        DISPID_TransformVector = 73,
        DISPID_getMassMomentofInertiaofOneSelectedBody = 74,
        DISPID_TypeofOneSelectedBody = 75,
        DISPID_NodeCountOfOneSelectedBody = 76,
        DISPID_NodeCountOfAllSelectedBodies = 77,
        DISPID_ElementCountOfOneSelectedBody = 78,
        DISPID_ElementCountOfAllSelectedBodies = 79,
        DISPID_ModelAddExternalEnhancedModel = 80,
        DISPID_ModelExternalEnhancedModels = 81,
        DISPID_ModelAddFractureGroup = 82,
        DISPID_ModelFractureGroup = 83,
        DISPID_ModelBlockMeshing = 84,
        DISPID_Modelwarn2DSurfaceNegativeZ = 85,
        DISPID_ModelCondensedGeometry = 86,
        DISPID_ModelAddCondensedGeometry = 87,
        DISPID_ModelAddTreeGroupingFolder = 88,
        DISPID_ModelRemoveTreeGroupingFolder = 89,
        DISPID_ModelMeshConnectionsParent = 90,
        DISPID_ModelAddMeshConnectionsParent = 91,
        DISPID_ModelAddMeshEditGroup = 92,
        DISPID_ModelAssemblyCoordinateSystem = 93,
        DISPID_ModelAssemblyAlignModel = 94,
        DISPID_ModelAssemblySourceCopyNum = 95,
        DISPID_ModelAddEmptyTreeGroupingFolder = 96,
        DISPID_ModelRemoveTreeGroupingFolderWONotify = 97,
        DISPID_ModelAlignmentDefinition = 98,
        DISPID_ModelAssemblyAlignmentStatus = 99,
        DISPID_ModelAssemblyTransformOriginal = 100,
        DISPID_ModelUpdateGeometryFromSource = 101,
        DISPID_ModelAssemblyObjectsRenamed = 102,
        DISPID_ModelAddCompositeFailureCriteriaGroup = 103,
        DISPID_ModelCompositeFailureCriteriaGroup = 104,
        DISPID_UpdateAssemblyFilePaths = 105,
        DISPID_ModelMergeParts = 106,
        DISPID_ModelGetConnectivityGraphAsJSON = 107
    } kDispId_Model;

    [
      odl,
      uuid(44D3BC82-B9AC-4EAC-8B5F-093FF41D8542),
      helpstring("IDSModelAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSModelAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x0000000a), propget, helpstring("property Environments")]
        HRESULT Environments([out, retval] IDispatch** ppDisp);
        [id(0x0000000b), propget, helpstring("property PrototypeGroup")]
        HRESULT PrototypeGroup([out, retval] IDispatch** ppDisp);
        [id(0x0000000c), propget, helpstring("property ContactGroup")]
        HRESULT ContactGroup([out, retval] IDispatch** ppDisp);
        [id(0x0000000d), propget, helpstring("property MeshControlGroup")]
        HRESULT MeshControlGroup([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x00000015), propget, helpstring("property ComponentGroup")]
        HRESULT ComponentGroup([out, retval] IDispatch** ppDisp);
        [id(0x00000017), propget, helpstring("property CoordinateSystemGroup")]
        HRESULT CoordinateSystemGroup([out, retval] IDispatch** ppDisp);
        [id(0x0000001a), propget, helpstring("property SolutionCombinations")]
        HRESULT SolutionCombinations([out, retval] IDispatch** ppDisp);
        [id(0x0000001c), propget, helpstring("property VTGroup")]
        HRESULT VTGroup([out, retval] IDispatch** ppDisp);
        [id(0x00000020), propget, helpstring("property SolutionStepsGroup")]
        HRESULT SolutionStepsGroup([out, retval] IDispatch** ppDisp);
        [id(0x00000010), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x00000011), helpstring("method AttachAssembly")]
        HRESULT AttachAssembly([in] IDispatch* pAsmDisp);
        [id(0x0000000e), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x0000000f), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000012), helpstring("method HasGeometry")]
        HRESULT HasGeometry([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000013), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x00000014), helpstring("method AddComponentGroup")]
        HRESULT AddComponentGroup([out, retval] IDispatch** pDisp);
        [id(0x00000016), helpstring("method AddCoordinateSystemGroup")]
        HRESULT AddCoordinateSystemGroup([out, retval] IDispatch** pDisp);
        [id(0x00000018), helpstring("method AddVTGroup")]
        HRESULT AddVTGroup([out, retval] IDispatch** pDisp);
        [id(0x0000001b), helpstring("method AddMeshControlGroup")]
        HRESULT AddMeshControlGroup([out, retval] IDispatch** pDisp);
        [id(0x0000001e), helpstring("method AddContactGroup")]
        HRESULT AddContactGroup([out, retval] IDispatch** pDisp);
        [id(0x00000019), helpstring("method AddSolutionCombination")]
        HRESULT AddSolutionCombination([out, retval] IDispatch** pDisp);
        [id(0x0000001f), helpstring("method AddSolutionStepsGroup")]
        HRESULT AddSolutionStepsGroup([out, retval] IDispatch** pDisp);
        [id(0x0000001d), propget, helpstring("property Prototypes")]
        HRESULT Prototypes([out, retval] IDispatch** ppDisp);
        [id(0x00000021), propget, helpstring("property Is2DGeometry")]
        HRESULT Is2DGeometry([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000022), helpstring("method AddSymmetryGroup")]
        HRESULT AddSymmetryGroup([out, retval] IDispatch** pDisp);
        [id(0x00000023), helpstring("method AutoCreateSymmetryGroup")]
        HRESULT AutoCreateSymmetryGroup([in] IDispatch* pAsmDisp);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
        [id(0x00000024), helpstring("method CreateEnvironmentWithThermalCondition")]
        HRESULT CreateEnvironmentWithThermalCondition(
                        [in] DSPhysicsType newVal, 
                        [in] dsid idThermalEnv, 
                        [in] double dTime, 
                        [in] IDispatch* pSelMgr, 
                        [out, retval] IDSEnvironmentAuto** pEnv);
        [id(0x00000025), helpstring("method CreateSequenceEnvironmentWithThermalCondition")]
        HRESULT CreateSequenceEnvironmentWithThermalCondition(
                        [in] DSPhysicsType newVal, 
                        [in] dsid idThermalEnv, 
                        [in] IDSListWrapper* pList, 
                        [in] IDispatch* pSelMgr, 
                        [out, retval] IDSEnvironmentAuto** pEnv);
        [id(0x00000026), helpstring("method RefreshSymmetryGroup")]
        HRESULT RefreshSymmetryGroup([in] IDispatch* pAsmDisp);
        [id(0x00000027), propget, helpstring("property SymmetryGroup")]
        HRESULT SymmetryGroup([out, retval] IDispatch** ppDisp);
        [id(0x00000028), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000029), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x0000002a), propget, helpstring("property Charts")]
        HRESULT Charts([out, retval] IDispatch** ppDisp);
        [id(0x0000002b), helpstring("method CreateTransEnvWithInitialCondition")]
        HRESULT CreateTransEnvWithInitialCondition(
                        [in] dsid idThermalEnv, 
                        [out, retval] IDSEnvironmentAuto** pEnv);
        [id(0x6002002b)]
        HRESULT CreateTransThermalEnvWithInitialCondition([in] dsid idThermalEnv);
        [id(0x0000002c), helpstring("method AddRemotePointGroup")]
        HRESULT AddRemotePointGroup([out, retval] IDispatch** pDisp);
        [id(0x0000002d), propget, helpstring("property RemotePointGroup")]
        HRESULT RemotePointGroup([out, retval] IDispatch** ppDisp);
        [id(0x0000002e), helpstring("method CreateEnvironmentWithEmagCondition")]
        HRESULT CreateEnvironmentWithEmagCondition(
                        [in] dsid idEmagEnv, 
                        [in] double dTime, 
                        [in] IDispatch* pSelMgr, 
                        [out, retval] IDSEnvironmentAuto** pEnv);
        [id(0x0000002f), helpstring("method CreateSequenceEnvironmentWithEmagCondition")]
        HRESULT CreateSequenceEnvironmentWithEmagCondition(
                        [in] dsid idThermalEnv, 
                        [in] IDSListWrapper* pList, 
                        [in] IDispatch* pSelMgr, 
                        [out, retval] IDSEnvironmentAuto** pEnv);
        [id(0x00000032), propget, helpstring("property ConstructionGeometryGroup")]
        HRESULT ConstructionGeometryGroup([out, retval] IDispatch** ppDisp);
        [id(0x00000033), helpstring("method AddConstructionGeometryGroup")]
        HRESULT AddConstructionGeometryGroup([out, retval] IDispatch** pDisp);
        [id(0x60020032)]
        HRESULT WriteCAERep(
                        [in] BSTR bsFilePath, 
                        [in] unsigned int dsid);
        [id(0x60020033)]
        HRESULT WriteHDF5TransferFile(
                        [in] BSTR bsFilePath, 
                        [in] int iUnitSystem, 
                        [in] unsigned int dsid);
        [id(0x00002710), propget, helpstring("property CellId")]
        HRESULT CellId([out, retval] BSTR* pVal);
        [id(0x00002710), propput, helpstring("property CellId")]
        HRESULT CellId([in] BSTR pVal);
        [id(0x00002711), propget, helpstring("property DisplayName")]
        HRESULT DisplayName([out, retval] BSTR* pVal);
        [id(0x00000034), helpstring("method GetFilterCollection")]
        HRESULT GetFilterCollection([out, retval] ISimulationFilterCollection** piFilterCol);
        [id(0x00000035), helpstring("method GetSelectedSolver")]
        HRESULT GetSelectedSolver([out, retval] BSTR* pbsSolver);
        [id(0x00000036), helpstring("method DisableFiltering will remove current filter selection")]
        HRESULT DisableFiltering();
        [id(0x00000037), helpstring("method EnableFiltering will remove current filter selection")]
        HRESULT EnableFiltering();
        [id(0x00000038), propget, helpstring("method FilterEnvironmentId return the current filter environment Id ")]
        HRESULT FilterEnvironmentId([out, retval] int* piEnvId);
        [id(0x00000055), helpstring("method warn2DSurfaceNegativeZ")]
        HRESULT warn2DSurfaceNegativeZ();
        [id(0x00000039), helpstring("method ResetModel")]
        HRESULT ResetModel();
        [id(0x0000003a), helpstring("method ClearModel")]
        HRESULT ClearModel();
        [id(0x0000003b), helpstring("method UpdateModel")]
        HRESULT UpdateModel([in] IAnsProgress* piProgress);
        [id(0x0000003c), helpstring("Set the model directory")]
        HRESULT SetModelDirectory([in] BSTR bsDirectory);
        [id(0x0000003d), propget, helpstring("property SystemCaption")]
        HRESULT SystemCaption([out, retval] BSTR* pVal);
        [id(0x0000003d), propput, helpstring("property SystemCaption")]
        HRESULT SystemCaption([in] BSTR pVal);
        [id(0x0000003e), helpstring("Set the Scratch Solution Directory")]
        HRESULT SetScratchSolutionDirectory([in] BSTR bsDirectory);
        [id(0x0000003f), propget, helpstring("property WB2ProjectSaved")]
        HRESULT WB2ProjectSaved([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000003f), propput, helpstring("property WB2ProjectSaved")]
        HRESULT WB2ProjectSaved([in] VARIANT_BOOL pVal);
        [id(0x00000040), helpstring("method AddMeshRenumberingControlGroup")]
        HRESULT AddMeshRenumberingControlGroup([out, retval] IDispatch** pDisp);
        [id(0x00000041), propget, helpstring("property MeshRenumberingControlGroup")]
        HRESULT MeshRenumberingControlGroup([out, retval] IDispatch** ppDisp);
        [id(0x00000042), propget, helpstring("Property Volume of one selected Body")]
        HRESULT VolumeofOneSelectedBody(
                        [in] IDispatch* pISelMgr, 
                        [in] int bodyIndex, 
                        [out, retval] double* pVal);
        [id(0x00000043), propget, helpstring("Property Volume of all selected Bodies")]
        HRESULT VolumeofAllSelectedBodies(
                        [in] IDispatch* pISelMgr, 
                        [out, retval] double* pVal);
        [id(0x00000044), propget, helpstring("Property Mass of one selected Body")]
        HRESULT MassofOneSelectedBody(
                        [in] IDispatch* pISelMgr, 
                        [in] int bodyIndex, 
                        [out, retval] double* pVal);
        [id(0x00000045), propget, helpstring("Property Mass of all selected Bodies")]
        HRESULT MassofAllSelectedBodies(
                        [in] IDispatch* pISelMgr, 
                        [out, retval] double* pVal);
        [id(0x00000046), propget, helpstring("Property Centroid of one selected Body")]
        HRESULT CentroidofOneSelectedBody(
                        [in] IDispatch* pISelMgr, 
                        [in] int bodyIndex, 
                        [out, retval] IAnsDoubleColl** pVal);
        [id(0x00000047), propget, helpstring("Property Centroid of all selected Bodies")]
        HRESULT CentroidofAllSelectedBodies(
                        [in] IDispatch* pISelMgr, 
                        [out, retval] IAnsDoubleColl** pVal);
        [id(0x00000048), propget, helpstring("Body Names of one selected Entity")]
        HRESULT BodyNamesOfOneSelectedEntity(
                        [in] IDispatch* pISelMgr, 
                        [in] int entityIndex, 
                        [out, retval] BSTR* pVal);
        [id(0x00000049), helpstring("method TransformVector")]
        HRESULT TransformVector(
                        [in] int currentUnits, 
                        [in] int partUnits, 
                        [in] dsid coordSysID, 
                        [in] double X, 
                        [in] double Y, 
                        [in] double Z, 
                        [out, retval] IAnsDoubleColl** pVal);
        [id(0x0000004a), helpstring("method get Mass Moment of Inertia of One Selected Body")]
        HRESULT getMassMomentofInertiaofOneSelectedBody(
                        [in] int currentUnits, 
                        [in] int partUnits, 
                        [in] IDispatch* pISelMgr, 
                        [in] int bodyIndex, 
                        [in] dsid coordSysID, 
                        [out, retval] IAnsDoubleColl** pVal);
        [id(0x0000004b), propget, helpstring("Property Type of one selected Body")]
        HRESULT TypeofOneSelectedBody(
                        [in] IDispatch* pISelMgr, 
                        [in] int bodyIndex, 
                        [out, retval] int* pVal);
        [id(0x0000004c), propget, helpstring("Node count of one selected Body")]
        HRESULT NodeCountOfOneSelectedBody(
                        [in] IDispatch* pISelMgr, 
                        [in] int bodyIndex, 
                        [out, retval] int* pVal);
        [id(0x0000004d), propget, helpstring("Node count of all selected Bodies")]
        HRESULT NodeCountOfAllSelectedBodies(
                        [in] IDispatch* pISelMgr, 
                        [out, retval] int* pVal);
        [id(0x0000004e), propget, helpstring("Element count of one selected Body")]
        HRESULT ElementCountOfOneSelectedBody(
                        [in] IDispatch* pISelMgr, 
                        [in] int bodyIndex, 
                        [out, retval] int* pVal);
        [id(0x0000004f), propget, helpstring("Element count of all selected Bodies")]
        HRESULT ElementCountOfAllSelectedBodies(
                        [in] IDispatch* pISelMgr, 
                        [out, retval] int* pVal);
        [id(0x00000050), helpstring("method AddExternalEnhancedModel")]
        HRESULT AddExternalEnhancedModel(
                        DSExternalEnhancedModelType eEnhancedModelType, 
                        [out, retval] IDispatch** pDisp);
        [id(0x00000051), propget, helpstring("property ExternalEnhancedModel")]
        HRESULT ExternalEnhancedModels(
                        [in] int eEnhancedModelType, 
                        [out, retval] IDispatch** ppDisp);
        [id(0x00000052), helpstring("method AddFractureGroup")]
        HRESULT AddFractureGroup([out, retval] IDispatch** pDisp);
        [id(0x00000053), propget, helpstring("property FractureGroup")]
        HRESULT FractureGroup([out, retval] IDispatch** ppDisp);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x00000054), propget, helpstring("property BlockMeshing")]
        HRESULT BlockMeshing([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000054), propput, helpstring("property BlockMeshing")]
        HRESULT BlockMeshing([in] VARIANT_BOOL pVal);
        [id(0x00000057), helpstring("method AddCondensedGeometry")]
        HRESULT AddCondensedGeometry([out, retval] IDispatch** pDisp);
        [id(0x00000056), propget, helpstring("property CondensedGeometry")]
        HRESULT CondensedGeometry([out, retval] IDispatch** ppDisp);
        [id(0x00000058), helpstring("method AddTreeGroupingFolder")]
        HRESULT AddTreeGroupingFolder(
                        [in] unsigned int parentId, 
                        [out, retval] IDispatch** pDisp);
        [id(0x00000059), helpstring("method RemoveTreeGroupingFolder")]
        HRESULT RemoveTreeGroupingFolder([in] unsigned int IdToDelete);
        [id(0x0000005a), propget, helpstring("property MeshConnectionsParent")]
        HRESULT MeshConnectionsParent([out, retval] IDispatch** ppDisp);
        [id(0x0000005b), helpstring("method AddMeshConnectionsParent")]
        HRESULT AddMeshConnectionsParent([out, retval] IDispatch** pDisp);
        [id(0x0000005c), helpstring("method AddMeshEditGroup")]
        HRESULT AddMeshEditGroup([out, retval] IDispatch** pDisp);
        [id(0x0000005d), propput, helpstring("method to set coordinate system for alignment")]
        HRESULT ModelAssemblyCoordinateSystem(
                        [in] BSTR bsSource, 
                        [in] int csType, 
                        [in] IDispatch* ppDisp);
        [id(0x0000005d), propget, helpstring("method to set coordinate system for alignment")]
        HRESULT ModelAssemblyCoordinateSystem(
                        [in] BSTR bsSource, 
                        [in] int csType, 
                        [out, retval] IDispatch** ppDisp);
        [id(0x0000005e), helpstring("method AlignModel")]
        HRESULT AlignModel([in] ModelAssemblyAlignmentAction alignmentAction);
        [id(0x0000005f), propput, helpstring("method to set copy number of source for alignment")]
        HRESULT ModelAssemblySourceCopyNum(
                        [in] BSTR bsSource, 
                        [in] int pCopyNum);
        [id(0x0000005f), propget, helpstring("method to set copy number of source for alignment")]
        HRESULT ModelAssemblySourceCopyNum(
                        [in] BSTR bsSource, 
                        [out, retval] int* pCopyNum);
        [id(0x6002006e), propput, helpstring("PreviewMode")]
        HRESULT PreviewMode([in] VARIANT_BOOL pVal);
        [id(0x6002006e), propget, helpstring("PreviewMode")]
        HRESULT PreviewMode([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000060), helpstring("method AddEmptyTreeGroupingFolder")]
        HRESULT AddEmptyTreeGroupingFolder(
                        [in] unsigned int parentId, 
                        [out, retval] IDispatch** pDisp);
        [id(0x00000061), helpstring("method RemoveTreeGroupingFolder")]
        HRESULT RemoveTreeGroupingFolderWithoutNotification([in] unsigned int IdToDelete);
        [id(0x60020072), helpstring("method ValidateAlignmentInputs")]
        HRESULT ValidateAlignmentInputs([out, retval] IAnsIDispColl** ppiClosedLoops);
        [id(0x00000063), propput, helpstring("-1 = Active, 0 = Inactive, 1 = Locked")]
        HRESULT ModelAssemblyAlignmentStatus(
                        [in] BSTR bsSource, 
                        [in] int piStatus);
        [id(0x00000063), propget, helpstring("-1 = Active, 0 = Inactive, 1 = Locked")]
        HRESULT ModelAssemblyAlignmentStatus(
                        [in] BSTR bsSource, 
                        [out, retval] int* piStatus);
        [id(0x60020075), helpstring("Returns error/warning message")]
        HRESULT get_ModelAssemblyAlignmentStatusMessage(
                        [in] BSTR bsSource, 
                        [out, retval] BSTR* pbsMessage);
        [id(0x60020076), helpstring("method IsValidAlignmentInput")]
        HRESULT get_IsValidAlignmentInput(
                        [in] BSTR bsSource, 
                        [in] kPropId_ModelAssemblyAlignmentWorksheet propId, 
                        [out, retval] VARIANT_BOOL* pvbValid);
        [id(0x00000064), propput, helpstring("method to set transform original of source for alignment")]
        HRESULT ModelAssemblyTransformOriginal(
                        [in] BSTR bsSource, 
                        [in] VARIANT_BOOL pvbTransform);
        [id(0x00000064), propget, helpstring("method to set transform original of source for alignment")]
        HRESULT ModelAssemblyTransformOriginal(
                        [in] BSTR bsSource, 
                        [out, retval] VARIANT_BOOL* pvbTransform);
        [id(0x00000065), propget, helpstring("property is Update Geometry From Source")]
        HRESULT IsUpdateGeometryFromSource([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000065), propput, helpstring("property is Update Geometry From Source")]
        HRESULT IsUpdateGeometryFromSource([in] VARIANT_BOOL pVal);
        [id(0x00000067), helpstring("method AddCompositeFailureCriteriaGroup")]
        HRESULT AddCompositeFailureCriteriaGroup([out, retval] IDispatch** pDisp);
        [id(0x00000068), propget, helpstring("property CompositeFailureCriteriaGroup")]
        HRESULT CompositeFailureCriteriaGroup([out, retval] IDispatch** ppDisp);
        [id(0x6002007d), helpstring("Returns BodyReferenceIdForProtoId")]
        HRESULT BodyReferenceIdForProtoId(
                        [in] unsigned int idProto, 
                        [out, retval] int* iBodyRef);
        [id(0x6002007e), helpstring("Returns ProtoIdForBodyReferenceId")]
        HRESULT ProtoIdForBodyReferenceId(
                        [in] unsigned int iBodyRef, 
                        [out, retval] int* idProto);
        [id(0x6002007f), helpstring("PartIdForBodyGroupId")]
        HRESULT PartIdForBodyGroupId(
                        [in] unsigned int uiBodyGroupId, 
                        [out, retval] int* iPartId);
        [id(0x60020080), helpstring("BodyGroupIdForPartId")]
        HRESULT BodyGroupIdForPartId(
                        [in] unsigned int uiPartId, 
                        [out, retval] int* iBodyGroupId);
        [id(0x60020081), helpstring("method PerformCADGrouping")]
        HRESULT PerformCADGrouping([out, retval] VARIANT_BOOL* pvbValid);
        [id(0x60020082), helpstring("method DeleteCADGrouping")]
        HRESULT DeleteCADGrouping([out, retval] VARIANT_BOOL* pvbValid);
        [id(0x60020083), helpstring("method CADAssemblyExists")]
        HRESULT CADAssemblyExists([out, retval] VARIANT_BOOL* pvbValid);
        [id(0x00000069), helpstring("Update the Assembly File Paths")]
        HRESULT UpdateAssemblyFilePaths(
                        [in] BSTR bsFilePMDB, 
                        [in] BSTR bsFileACMO);
        [id(0x0000006a), helpstring("Merge Given Parts")]
        HRESULT MergeParts([in] IAnsUINTColl* piPartIds);
        [id(0x0000006b), helpstring("method getConnectivityGraphJSON")]
        HRESULT getConnectivityGraphJSON([out, retval] BSTR* pVal);
    };

    typedef enum {
        kEXTERNAL_ENHANCEDMODEL_LAYEREDSECTION = 0,
        kEXTERNAL_ENHANCEDMODEL_MATERIAL = 1,
        kEXTERNAL_ENHANCEDMODEL_ASSEMBLEDLAYEREDSECTION = 2
    } DSExternalEnhancedModelType;

    typedef enum {
        SetRigidTransforms = 1,
        SetRigidTransformsAndPreview = 2,
        SetRigidTransformsAndRefresh = 3
    } ModelAssemblyAlignmentAction;

    typedef enum {
        PROPID_SourceCopyNumber = 1,
        PROPID_AlignmentSourceCoordinateSystem = 2,
        PROPID_AlignmentTargetCoordinateSystem = 3,
        PROPID_AlignmentStatus = 4,
        PROPID_TransformOriginal = 5
    } kPropId_ModelAssemblyAlignmentWorksheet;

    [
      odl,
      uuid(AEF14045-399B-4C37-BF08-7F8C991C022F),
      helpstring("IDSMomentLoadAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSMomentLoadAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property ID")]
        HRESULT ID([out, retval] VARIANT* pVal);
        [id(0x00000002), propget, helpstring("property Name")]
        HRESULT Name([out, retval] VARIANT* pVal);
        [id(0x00000002), propput, helpstring("property Name")]
        HRESULT Name([in] VARIANT pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
    };

    typedef enum {
        DISPID_SolutionInfoToolAddFigure = 10,
        DISPID_SolutionInfoToolAddComment = 11,
        DISPID_SolutionInfoToolComments = 12,
        DISPID_SolutionInfoToolFigures = 13,
        DISPID_SolutionInfoToolAddResult = 14,
        DISPID_SolutionInfoToolSolutionOutputType = 15,
        DISPID_SolutionInfoToolNumNRResiduals = 16,
        DISPID_SolutionInfoToolResults = 17,
        DISPID_SolutionInfoToolRefresh = 18,
        DISPID_SolutionInfoToolUpdateInterval = 19,
        DISPID_SolutionInfoToolResultCharts = 20,
        DISPID_SolutionInfoToolCalculateAllContactTrackers = 21,
        DISPID_SolutionInfoToolDisplayPoints = 22,
        DISPID_SolutionInfoToolImages = 23,
        DISPID_SolutionInfoToolAddImage = 24,
        DISPID_SolutionInfoToolDisplayFilterDuringSolve = 25,
        DISPID_SolutionInfoToolImportResultTrackersFromFile = 26,
        DISPID_SolutionInfoToolFEConnectionStepSelect = 27,
        DISPID_SolutionInfoToolFEConnectionStepNumber = 28,
        DISPID_SolutionInfoToolFEConnectionDisplayOpt = 29,
        DISPID_SolutionInfoToolFEConnectionColorOpt = 30,
        DISPID_SolutionInfoToolFEConnectionLineColor = 31,
        DISPID_SolutionInfoToolFEConnectionResultShow = 32,
        DISPID_SolutionInfoToolFEConnectionLineThick = 33,
        DISPID_SolutionInfoToolFEConnectionCreateFile_defunct = 34,
        DISPID_SolutionInfoToolFEConnectionDisplayType = 35,
        DISPID_SolutionInfoToolComponentSelection = 36,
        DISPID_SolutionInfoToolPFactorResultType = 37,
        DISPID_SolutionInfoToolIdentifyElementViolations = 38
    } kDispId_SolutionInfoTool;

    [
      odl,
      uuid(80C8BD98-21CE-4495-B216-C94C84569457),
      helpstring("IDSSolutionInfoToolAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSSolutionInfoToolAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x0000000c), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x0000000d), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x0000000f), propget, helpstring("method SolutionOutputType")]
        HRESULT SolutionOutputType([out, retval] DSSolutionOutputType* pVal);
        [id(0x0000000f), propput, helpstring("method SolutionOutputType")]
        HRESULT SolutionOutputType([in] DSSolutionOutputType pVal);
        [id(0x0000000a), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x0000000b), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x0000000e), helpstring("method AddResult")]
        HRESULT AddResult(
                        [in] IDispatch* piSelectMgr, 
                        [in] unsigned int resType, 
                        [out, retval] IDispatch** ppVal);
        [id(0x00000010), propget, helpstring("method NumNRResiduals")]
        HRESULT NumNRResiduals([out, retval] int* pVal);
        [id(0x00000010), propput, helpstring("method NumNRResiduals")]
        HRESULT NumNRResiduals([in] int pVal);
        [id(0x00000011), propget, helpstring("property Results")]
        HRESULT Results([out, retval] IDispatch** pVal);
        [id(0x00000012), helpstring("method Refresh, updates 'text' only")]
        HRESULT Refresh();
        [id(0x00000013), propget, helpstring("method UpdateInterval")]
        HRESULT UpdateInterval([out, retval] double* pVal);
        [id(0x00000013), propput, helpstring("method UpdateInterval")]
        HRESULT UpdateInterval([in] double pVal);
        [id(0x00000014), propget, helpstring("property ResultCharts")]
        HRESULT ResultCharts([out, retval] IDispatch** pVal);
        [id(0x00000015), propput, helpstring("method CalculateAllContactTrackers")]
        HRESULT CalculateAllContactTrackers([in] VARIANT_BOOL pVal);
        [id(0x00000015), propget, helpstring("method CalculateAllContactTrackers")]
        HRESULT CalculateAllContactTrackers([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
        [id(0x00000016), propget, helpstring("property DisplayPoints")]
        HRESULT DisplayPoints([out, retval] double* pVal);
        [id(0x00000016), propput, helpstring("property DisplayPoints")]
        HRESULT DisplayPoints([in] double pVal);
        [id(0x00000017), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000018), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00000019), propput, helpstring("method SolutionInfoToolDisplayFilterDuringSolve")]
        HRESULT SolutionInfoToolDisplayFilterDuringSolve([in] VARIANT_BOOL pVal);
        [id(0x00000019), propget, helpstring("method SolutionInfoToolDisplayFilterDuringSolve")]
        HRESULT SolutionInfoToolDisplayFilterDuringSolve([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000001a), helpstring("method ImportResultTrackersFromFile")]
        HRESULT ImportResultTrackersFromFile([in] BSTR bsFilename);
        [id(0x0000001b), propget, helpstring("method FEConnectionStepSelect")]
        HRESULT FEConnectionStepSelect([out, retval] int* pVal);
        [id(0x0000001b), propput, helpstring("method FEConnectionStepSelect")]
        HRESULT FEConnectionStepSelect([in] int pVal);
        [id(0x0000001c), propget, helpstring("method FEConnectionStepNumber")]
        HRESULT FEConnectionStepNumber([out, retval] int* pVal);
        [id(0x0000001c), propput, helpstring("method FEConnectionStepNumber")]
        HRESULT FEConnectionStepNumber([in] int pVal);
        [id(0x0000001d), propget, helpstring("method FEConnectionDisplayOpt")]
        HRESULT FEConnectionDisplayOpt([out, retval] int* pVal);
        [id(0x0000001d), propput, helpstring("method FEConnectionDisplayOpt")]
        HRESULT FEConnectionDisplayOpt([in] int pVal);
        [id(0x0000001e), propget, helpstring("method FEConnectionColorOpt")]
        HRESULT FEConnectionColorOpt([out, retval] int* pVal);
        [id(0x0000001e), propput, helpstring("method FEConnectionColorOpt")]
        HRESULT FEConnectionColorOpt([in] int pVal);
        [id(0x0000001f), propget, helpstring("method FEConnectionLineColor")]
        HRESULT FEConnectionLineColor([out, retval] int* pVal);
        [id(0x0000001f), propput, helpstring("method FEConnectionLineColor")]
        HRESULT FEConnectionLineColor([in] int pVal);
        [id(0x00000020), propput, helpstring("method FEConnectionResultShow")]
        HRESULT FEConnectionResultShow([in] VARIANT_BOOL pVal);
        [id(0x00000020), propget, helpstring("method FEConnectionResultShow")]
        HRESULT FEConnectionResultShow([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000021), propget, helpstring("method FEConnectionLineThick")]
        HRESULT FEConnectionLineThick([out, retval] int* pVal);
        [id(0x00000021), propput, helpstring("method FEConnectionLineThick")]
        HRESULT FEConnectionLineThick([in] int pVal);
        [id(0x00000023), propget, helpstring("method FEConnectionDisplayType")]
        HRESULT FEConnectionDisplayType([out, retval] DSFEConnectionDisplayType* pVal);
        [id(0x00000023), propput, helpstring("method FEConnectionDisplayType")]
        HRESULT FEConnectionDisplayType([in] DSFEConnectionDisplayType pVal);
        [id(0x00000024), propget, helpstring("method FEConnectionComponentSelection")]
        HRESULT FEConnectionComponentSelection([out, retval] int* pVal);
        [id(0x00000024), propput, helpstring("method FEConnectionComponentSelection")]
        HRESULT FEConnectionComponentSelection([in] int pVal);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x00000025), propget, helpstring("method PFactorResultType")]
        HRESULT PFactorResultType([out, retval] DSPFactorResultType* pVal);
        [id(0x00000025), propput, helpstring("method PFactorResultType")]
        HRESULT PFactorResultType([in] DSPFactorResultType pVal);
        [id(0x00000026), propget, helpstring("method IdentifyElementViolations")]
        HRESULT IdentifyElementViolations([out, retval] unsigned int* pVal);
        [id(0x00000026), propput, helpstring("method IdentifyElementViolations")]
        HRESULT IdentifyElementViolations([in] unsigned int pVal);
    };

    typedef enum {
        kRAW_OUTPUT = 0,
        kFORCE_CONVERGENCE = 1,
        kDISP_CONVERGENCE = 2,
        kHEAT_COVERGENCE = 3,
        kTEMP_CONVERGENCE = 4,
        kMAX_DOF_INC = 5,
        kTIMEINC_VS_TIME = 6,
        kLINE_SEARCH = 7,
        kITERATION_VS_TIME = 8,
        kBISECTION_POINTS = 9,
        kTIME_INCREMENT = 10,
        kSUBSTEP_CONVERGED_POINTS = 11,
        kLOADSTEP_CONVERGED_POINTS = 12,
        kCSG_CONVERGENCE = 13,
        kTEMPERATURE_CHANGE = 14,
        kPROP_CHANGE_PERCENT = 15,
        kMOMENT_CONVERGENCE = 16,
        kROTATION_CONVERGENCE = 17,
        kENERGY_CONSERVATION = 18,
        kMOMENTUM_SUMMARY = 19,
        kENERGY_SUMMARY = 20,
        kAMPS_CONVERGENCE = 21,
        kCONTACT_OUTPUT = 22,
        kDAEVALUATE = 23,
        kDASOLVE = 24,
        kPOST_OUTPUT = 25,
        kREMESH_POINT = 26,
        kFREQUENCY_CONVERGENCE = 27,
        kPARTICIPATION_FACTOR = 28
    } DSSolutionOutputType;

    typedef enum {
        kDisplayConnectionLines = 0,
        kDisplayPointsOnly = 1
    } DSFEConnectionDisplayType;

    typedef enum {
        kParticipationFactor = 0,
        kEffectiveMass = 1,
        kCumulativeEffectiveMassRatio = 2,
        kPFactorAll = 3
    } DSPFactorResultType;

    typedef enum {
        DISPID_ExpansionSettingsAddFigure = 10,
        DISPID_ExpansionSettingsAddComment = 11,
        DISPID_ExpansionSettingsComments = 12,
        DISPID_ExpansionSettingsFigures = 13,
        DISPID_ExpansionSettingsImages = 14,
        DISPID_ExpansionSettingsAddImage = 15,
        DISPID_ExpansionSettingsPerformExpansionPass = 16,
        DISPID_ExpansionSettingsSolverFilesDirectory = 17,
        DISPID_ExpansionSettingsScratchSolverFilesDirectory = 18,
        DISPID_ExpansionSettingsCleanupOptionalFiles = 19,
        DISPID_ExpansionSettingsCalculateStress = 20,
        DISPID_ExpansionSettingsCalculateStrain = 21,
        DISPID_ExpansionSettingsNodalForces = 22,
        DISPID_ExpansionSettingsCalculateContact = 23,
        DISPID_ExpansionSettingsGeneralMisc = 24,
        DISPID_ExpansionSettingsDatabase = 25
    } kDispId_ExpansionSettings;

    [
      odl,
      uuid(26CEDB67-5BE0-4401-B197-47E40058BF08),
      helpstring("IDSExpansionSettingsAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSExpansionSettingsAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x0000000c), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x0000000d), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x0000000a), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x0000000b), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x0000000e), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x0000000f), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00000010), helpstring("method PerformExpansionPass")]
        HRESULT PerformExpansionPass([in] IAnsProgress* pProgress);
        [id(0x00000011), propget, helpstring("property SolverFilesDirectory")]
        HRESULT SolverFilesDirectory([out, retval] BSTR* pbsSolverDir);
        [id(0x00000011), propput, helpstring("property SolverFilesDirectory")]
        HRESULT SolverFilesDirectory([in] BSTR pbsSolverDir);
        [id(0x00000012), propget, helpstring("property ScratchSolverFilesDirectory")]
        HRESULT ScratchSolverFilesDirectory([out, retval] BSTR* pScratchSolverFilesDirectory);
        [id(0x00000012), propput, helpstring("property ScratchSolverFilesDirectory")]
        HRESULT ScratchSolverFilesDirectory([in] BSTR pScratchSolverFilesDirectory);
        [id(0x00000013), propget, helpstring("property CleanupOptionalFiles")]
        HRESULT CleanupOptionalFiles([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000013), propput, helpstring("property CleanupOptionalFiles")]
        HRESULT CleanupOptionalFiles([in] VARIANT_BOOL pVal);
        [id(0x00000019), helpstring("method GetExpansionDatabase")]
        HRESULT GetExpansionDatabase([out, retval] IDispatch** ppUnk);
    };

    [
      odl,
      uuid(6417E422-F6B5-4F8C-8356-B5702FF4237A),
      helpstring("IExpansionDatabase Interface"),
      dual,
      oleautomation
    ]
    interface IExpansionDatabase : IDispatch {
        [id(0x00000001), helpstring("HasSolvedExpansions")]
        HRESULT HasSolvedExpansions([out, retval] VARIANT_BOOL* vbHasSolvedExpansions);
        [id(0x00000002), helpstring("GetJSON")]
        HRESULT GetJSON([out, retval] BSTR* pVal);
        [id(0x00000003), helpstring("Toggle")]
        HRESULT Toggle([in] BSTR request);
    };

    [
      odl,
      uuid(6D157C33-663C-41BB-840D-1C6A3974BFB2),
      helpstring("IDSNodeAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSNodeAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property x")]
        HRESULT X([out, retval] double* pVal);
        [id(0x00000002), propget, helpstring("property y")]
        HRESULT Y([out, retval] double* pVal);
        [id(0x00000003), propget, helpstring("property z")]
        HRESULT Z([out, retval] double* pVal);
        [id(0x00000004), propget, helpstring("property Index")]
        HRESULT index([out, retval] int* pVal);
    };

    [
      odl,
      uuid(EC1920F2-B1FD-498C-895F-36EEE73F9943),
      helpstring("IDSVariantColl Interface"),
      dual,
      oleautomation
    ]
    interface IDSVariantColl : IDispatch {
        [id(0x00000001), propget, helpstring("property Count")]
        HRESULT Count([out, retval] int* plCount);
        [id(00000000), propget, helpstring("property Item")]
        HRESULT Item(
                        [in] int lNum, 
                        [out, retval] VARIANT* pdVal);
        [id(0xfffffffc), propget, helpstring("property NewEnum")]
        HRESULT _NewEnum([out, retval] IUnknown** ppunkEnum);
        [id(0x00000004), helpstring("method Add")]
        HRESULT Add([in] VARIANT vntValue);
        [id(0x00000005), helpstring("method Remove")]
        HRESULT Remove([in] int index);
        [id(0x00000006), helpstring("method Modify")]
        HRESULT Modify(
                        [in] int index, 
                        [in] VARIANT vntValue);
        [id(0x00000007), helpstring("method Insert")]
        HRESULT Insert(
                        [in] VARIANT vntValue, 
                        [in] int index);
        [id(0x00000008), helpstring("method RemoveAll")]
        HRESULT RemoveAll();
    };

    [
      odl,
      uuid(8DD84F99-E19A-4454-AE4F-99A12706B436),
      helpstring("IDSEnumVariants Interface")
    ]
    interface IDSEnumVariants : IUnknown {
        [helpstring("method Next")]
        HRESULT _stdcall Next(
                        [in] unsigned int ulNum, 
                        [out] VARIANT* pdVals, 
                        [out] unsigned int* pcFetched);
        [helpstring("method Skip")]
        HRESULT _stdcall Skip([in] unsigned int ulNum);
        [helpstring("method Reset")]
        HRESULT _stdcall Reset();
        [helpstring("method Clone")]
        HRESULT _stdcall Clone([out] IDSEnumVariants** ppEnumVnts);
    };

    typedef enum {
        DISPID_ParameterSetParamCount = 10,
        DISPID_ParameterSetRunCount = 11,
        DISPID_ParameterSetComments = 12,
        DISPID_ParameterSetValueList = 13,
        DISPID_ParameterSetRunList = 14,
        DISPID_ParameterSetAddComment = 15,
        DISPID_ParameterSetParamName = 16,
        DISPID_ParameterSetParamIndex = 17,
        DISPID_ParameterSetParamType = 18,
        DISPID_ParameterSetParamValue = 19,
        DISPID_ParameterSetAddRun = 20,
        DISPID_ParameterSetDeleteRun = 21,
        DISPID_ParameterSetMakeBranch = 22,
        DISPID_ParameterSetFindAnswers = 23,
        DISPID_ParameterSetDeleteBranch = 24,
        DISPID_ParameterSetClearHistory = 25,
        DISPID_ParameterSetDeleteRow = 26,
        DISPID_ParameterSetStateList = 27,
        DISPID_ParameterSetCommentList = 28,
        DISPID_ParameterSetCheckList = 29,
        DISPID_ParameterSetChangeStatus = 30,
        DISPID_ParameterSetAddRow = 31,
        DISPID_ParameterSetSortValueLists = 32,
        DISPID_ParameterSetSolving = 33,
        DISPID_ParameterSetActiveRows = 34,
        DISPID_ParameterSetIsNew = 35,
        DISPID_ParameterSetDefaultColWidth = 36,
        DISPID_ParameterSetAddResultChart = 37,
        DISPID_ParameterSetUpdateCharts = 38,
        DISPID_ParameterSetUpdateGeometry = 39,
        DISPID_ParameterSetUpdateVariableGraph = 40,
        DISPID_ParameterSetCheckCount = 41,
        DISPID_ParameterSetIsInvolvedInSolving = 42,
        DISPID_ParameterSetSuppressed = 43,
        DISPID_ParameterSetUpdateEDAParam = 44,
        DISPID_ParameterSetGetValueList = 45,
        DISPID_ParameterSetDisplayValue = 46,
        DISPID_ParameterSetFindParameter = 47,
        DISPID_ParameterSetSynchronizeStatusWithStateEngine = 48,
        DISPID_ParameterSetImages = 49,
        DISPID_ParameterSetAddImage = 50
    } kDispId_ParameterSet;

    [
      odl,
      uuid(A6132A0C-B492-4669-ABA8-B61608BB9011),
      helpstring("IDSParameterSetAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSParameterSetAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x0000000a), propget, helpstring("property ParamCount")]
        HRESULT ParamCount([out, retval] int* pCount);
        [id(0x0000000b), propget, helpstring("property RunCount")]
        HRESULT RunCount([out, retval] int* pCount);
        [id(0x0000000f), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x0000000c), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x00000010), helpstring("method ParamName")]
        HRESULT paramName(
                        [in] int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00000011), helpstring("method ParamIndex")]
        HRESULT ParamIndex(
                        [in] BSTR paramName, 
                        [out, retval] int* pVal);
        [id(0x00000012), helpstring("method ParamType")]
        HRESULT ParamType(
                        [in] BSTR ParamIndex, 
                        [in] int* pVal, 
                        [out, retval] BSTR* __MIDL__IDSParameterSetAuto0000);
        [id(0x00000013), helpstring("method ParamValue")]
        HRESULT ParamValue(
                        [in] int runIndex, 
                        [in] int ParamIndex, 
                        [out, retval] double* pVal);
        [id(0x00000014), helpstring("method AddRun")]
        HRESULT AddRun([out, retval] int* pVal);
        [id(0x00000015), helpstring("method DeleteRun")]
        HRESULT DeleteRun([in] int runIndex);
        [id(0x00000016), helpstring("method MakeBranch")]
        HRESULT MakeBranch(
                        [in] int runIndex, 
                        [out, retval] IDispatch** pDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000017), helpstring("method FindAnswers")]
        HRESULT FindAnswers();
        [id(0x00000018), helpstring("method DeleteBranch")]
        HRESULT DeleteBranch([in] int modelId);
        [id(0x0000000d), propget, helpstring("property ValueList")]
        HRESULT ValueList(
                        [in] BSTR bsUniqueId, 
                        [out, retval] IDSVariantColl** pVal);
        [id(0x0000000d), propput, helpstring("property ValueList")]
        HRESULT ValueList(
                        [in] BSTR bsUniqueId, 
                        [in] IDSVariantColl* pVal);
        [id(0x00000019), helpstring("method ClearHistory")]
        HRESULT ClearHistory();
        [id(0x0000000e), propget, helpstring("property RunList")]
        HRESULT RunList([out, retval] IDSVariantColl** pVal);
        [id(0x0000001a), helpstring("method DeleteRow")]
        HRESULT DeleteRow([in] int row);
        [id(0x0000001b), propget, helpstring("property StateList")]
        HRESULT StateList([out, retval] IDSVariantColl** pVal);
        [id(0x0000001c), propget, helpstring("property CommentList")]
        HRESULT CommentList([out, retval] IDSVariantColl** pVal);
        [id(0x0000001d), propget, helpstring("property CheckList")]
        HRESULT CheckList([out, retval] IDSVariantColl** pVal);
        [id(0x0000001e), helpstring("method ChangeStatus")]
        HRESULT ChangeStatus(
                        [in] DSParameterSetStatus Status, 
                        [in] BSTR bsUniqueId, 
                        [in] DSParameterSetStatus ParamValue);
        [id(0x0000001f), helpstring("method AddRow")]
        HRESULT AddRow();
        [id(0x00000020), helpstring("method SortValueLists")]
        HRESULT SortValueLists([in] BSTR indexArray);
        [id(0x00000021), propget, helpstring("property Solving")]
        HRESULT Solving([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000022), helpstring("method ActiveRows")]
        HRESULT ActiveRows([out, retval] int* rows);
        [id(0x00000023), propget, helpstring("property IsNew")]
        HRESULT IsNew([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000023), propput, helpstring("property IsNew")]
        HRESULT IsNew([in] VARIANT_BOOL pVal);
        [id(0x00000024), propget, helpstring("property DefaultColWidth")]
        HRESULT DefaultColWidth([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000024), propput, helpstring("property DefaultColWidth")]
        HRESULT DefaultColWidth([in] VARIANT_BOOL pVal);
        [id(0x00000025), helpstring("method AddResultChart")]
        HRESULT AddResultChart(
                        [in] unsigned int resType, 
                        [out, retval] IUnknown** ppVal);
        [id(0x00000026), helpstring("method UpdateCharts")]
        HRESULT UpdateCharts();
        [id(0x00000027), helpstring("method UpdateGeoemtry")]
        HRESULT UpdateGeometry();
        [id(0x00000028), helpstring("method UpdateVariableGraph")]
        HRESULT UpdateVariableGraph(
                        int __MIDL__IDSParameterSetAuto0001, 
                        VARIANT_BOOL __MIDL__IDSParameterSetAuto0002);
        [id(0x00000029), helpstring("method getCheckedRunCount")]
        HRESULT getCheckedRunCount(int* __MIDL__IDSParameterSetAuto0003);
        [id(0x0000002a), propget, helpstring("property IsInvolvedInSolving")]
        HRESULT IsInvolvedInSolving([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000002b), propget, helpstring("property Suppressed")]
        HRESULT Suppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000002c), helpstring("method UpdateEDAParameter")]
        HRESULT UpdateEDAParameter(
                        BSTR __MIDL__IDSParameterSetAuto0004, 
                        VARIANT __MIDL__IDSParameterSetAuto0005);
        [id(0x0000002d), helpstring("method GetValueList")]
        HRESULT GetValueList(
                        [in] IDispatch* __MIDL__IDSParameterSetAuto0006, 
                        [out, retval] IDSVariantColl** pVal);
        [id(0x0000002e), helpstring("method DisplayValue")]
        HRESULT DisplayValue(
                        [in] VARIANT var, 
                        [out, retval] BSTR* pVal);
        [id(0x0000002f), helpstring("method FindParameter")]
        HRESULT FindParameter(
                        [in] VARIANT var, 
                        [in] VARIANT __MIDL__IDSParameterSetAuto0007, 
                        [out, retval] IDispatch** __MIDL__IDSParameterSetAuto0008);
        [id(0x00000030), helpstring("method SynchronizeStatusWithStateEngine")]
        HRESULT SynchronizeStatusWithStateEngine();
        [id(0x00000031), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000032), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
    };

    typedef enum {
        kParamSetDone = 0,
        kParamSetFailed = 1,
        kParamSetAborted = 2,
        kParamSetObsolete = 3,
        kParamSetReady = 4,
        kParamSetInvalid = 5
    } DSParameterSetStatus;

    [
      odl,
      uuid(D67C319B-E765-425B-A161-EF7F9B714C17),
      helpstring("IDSParameter Interface"),
      dual,
      oleautomation
    ]
    interface IDSParameter : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property Type")]
        HRESULT type([out, retval] unsigned short* pVal);
        [id(0x00000002), propput, helpstring("property Type")]
        HRESULT type([in] unsigned short pVal);
        [id(0x00000003), propget, helpstring("property Value")]
        HRESULT Value([out, retval] VARIANT* pVal);
        [id(0x00000003), propput, helpstring("property Value")]
        HRESULT Value([in] VARIANT pVal);
        [id(0x00000004), propget, helpstring("property Active")]
        HRESULT Active([out, retval] long* pVal);
        [id(0x00000004), propput, helpstring("property Active")]
        HRESULT Active([in] long pVal);
        [id(0x00000005), propget, helpstring("property Min")]
        HRESULT Min([out, retval] double* pVal);
        [id(0x00000005), propput, helpstring("property Min")]
        HRESULT Min([in] double pVal);
        [id(0x00000006), propget, helpstring("property Max")]
        HRESULT Max([out, retval] double* pVal);
        [id(0x00000006), propput, helpstring("property Max")]
        HRESULT Max([in] double pVal);
        [id(0x00000007), propget, helpstring("property UnitSystem")]
        HRESULT UnitSystem([out, retval] int* pVal);
        [id(0x00000007), propput, helpstring("property UnitSystem")]
        HRESULT UnitSystem([in] int pVal);
        [id(0x00000008), propget, helpstring("property UnitType")]
        HRESULT unitType([out, retval] int* pVal);
        [id(0x00000008), propput, helpstring("property UnitType")]
        HRESULT unitType([in] int pVal);
        [id(0x00000009), propget, helpstring("property ParentID")]
        HRESULT parentId([out, retval] int* pVal);
        [id(0x00000009), propput, helpstring("property ParentID")]
        HRESULT parentId([in] int pVal);
        [id(0x0000000a), propget, helpstring("property Editable")]
        HRESULT Editable([out, retval] long* pVal);
        [id(0x0000000a), propput, helpstring("property Editable")]
        HRESULT Editable([in] long pVal);
        [id(0x0000000b), propget, helpstring("property ParentName")]
        HRESULT ParentName([out, retval] BSTR* pVal);
        [id(0x0000000b), propput, helpstring("property ParentName")]
        HRESULT ParentName([in] BSTR pVal);
        [id(0x0000000c), propget, helpstring("property InterfacePropertyID")]
        HRESULT InterfacePropertyID([out, retval] int* pVal);
        [id(0x0000000c), propput, helpstring("property InterfacePropertyID")]
        HRESULT InterfacePropertyID([in] int pVal);
        [id(0x0000000d), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x0000000d), propput, helpstring("property ID")]
        HRESULT ID([in] int pVal);
        [id(0x0000000e), propget, helpstring("property UnitString")]
        HRESULT unitString([out, retval] BSTR* pVal);
        [id(0x0000000f), helpstring("method ApplyParameter")]
        HRESULT ApplyParameter();
        [id(0x00000010), helpstring("method RestoreOldParameter")]
        HRESULT RestoreOldParameter();
        [id(0x00000011), helpstring("method GetValueFromParent")]
        HRESULT GetValueFromParent();
        [id(0x00000012), propget, helpstring("property ReferesTo")]
        HRESULT ReferesTo([out, retval] BSTR* pVal);
        [id(0x00000012), propput, restricted, helpstring("property ReferesTo")]
        HRESULT ReferesTo([in] BSTR pVal);
        [id(0x00000013), propget, helpstring("property UniqueID")]
        HRESULT UniqueID([out, retval] BSTR* pVal);
        [id(0x00000013), propput, helpstring("property UniqueID")]
        HRESULT UniqueID([in] BSTR pVal);
        [id(0x00000014), helpstring("method DisplayValue")]
        HRESULT DisplayValue(
                        [in] VARIANT var, 
                        [out, retval] BSTR* pVal);
        [id(0x00000015), helpstring("method HistoryValue")]
        HRESULT HistoryValue(
                        [in] VARIANT var, 
                        [out, retval] VARIANT* pVal);
        [id(0x00000016), propget, helpstring("property OrigValueListParent")]
        HRESULT OrigValueListParent([out, retval] BSTR* pVal);
        [id(0x00000016), propput, helpstring("property OrigValueListParent")]
        HRESULT OrigValueListParent([in] BSTR pVal);
    };

    typedef enum {
        DISPID_PathSuppressed = 11,
        DISPID_PathStartLocationSelection = 12,
        DISPID_PathStartCoordinateSystemSelection = 13,
        DISPID_PathStartLocationX = 14,
        DISPID_PathStartLocationY = 15,
        DISPID_PathStartLocationZ = 16,
        DISPID_PathEndLocationSelection = 17,
        DISPID_PathEndCoordinateSystemSelection = 18,
        DISPID_PathEndLocationX = 19,
        DISPID_PathEndLocationY = 20,
        DISPID_PathEndLocationZ = 21,
        DISPID_PathComments = 22,
        DISPID_PathFigures = 23,
        DISPID_PathImages = 24,
        DISPID_PathNumberOfSamplingPoints = 25,
        DISPID_PathCoordinateSystemSelection = 26,
        DISPID_PathScopingType = 27,
        DISPID_PathEdgeSelection = 28,
        DISPID_PathSnapToMesh = 29,
        DISPID_PathShowMesh = 30,
        DISPID_PathAddComment = 60,
        DISPID_PathAddFigure = 61,
        DISPID_PathAddImage = 62,
        DISPID_PathCreateTabbedFile = 63,
        DISPID_PathUpdateEndPointsComputation = 64,
        DISPID_PathRayNeedUpdate = 65,
        DISPID_PathRayHitUseMesh = 66,
        DISPID_PathDoSnapToMesh = 67,
        DISPID_PathCanSnapToMesh = 68,
        DISPID_PathDoFlip = 69,
        DISPID_PathHasValidGeoSelection = 70
    } kDispId_Path;

    [
      odl,
      uuid(CC051C7B-F474-49C3-9323-42EDB09EBA90),
      helpstring("IDSPathAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSPathAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
        [id(0x0000001b), propget, helpstring("property PathScopingType")]
        HRESULT PathScopingType([out, retval] DSPathScopingType* pVal);
        [id(0x0000001b), propput, helpstring("property PathScopingType")]
        HRESULT PathScopingType([in] DSPathScopingType pVal);
        [id(0x0000000b), propget, helpstring("property Suppressed")]
        HRESULT Suppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000000b), propput, helpstring("property Suppressed")]
        HRESULT Suppressed([in] VARIANT_BOOL pVal);
        [id(0x0000001c), propput, helpstring("property EdgeSelection")]
        HRESULT EdgeSelection([in] IDispatch* rhs);
        [id(0x0000000c), propput, helpstring("property StartLocationSelection")]
        HRESULT StartLocationSelection([in] IDispatch* rhs);
        [id(0x0000000d), propget, helpstring("property StartCoordinateSystemSelection")]
        HRESULT StartCoordinateSystemSelection([out, retval] int* pVal);
        [id(0x0000000d), propput, helpstring("property StartCoordinateSystemSelection")]
        HRESULT StartCoordinateSystemSelection([in] int pVal);
        [id(0x0000000e), propget, helpstring("property StartLocationX")]
        HRESULT StartLocationX([out, retval] double* pVal);
        [id(0x0000000e), propput, helpstring("property StartLocationX")]
        HRESULT StartLocationX([in] double pVal);
        [id(0x0000000f), propget, helpstring("property StartLocationY")]
        HRESULT StartLocationY([out, retval] double* pVal);
        [id(0x0000000f), propput, helpstring("property StartLocationY")]
        HRESULT StartLocationY([in] double pVal);
        [id(0x00000010), propget, helpstring("property StartLocationZ")]
        HRESULT StartLocationZ([out, retval] double* pVal);
        [id(0x00000010), propput, helpstring("property StartLocationZ")]
        HRESULT StartLocationZ([in] double pVal);
        [id(0x00000011), propput, helpstring("property EndLocationSelection")]
        HRESULT EndLocationSelection([in] IDispatch* rhs);
        [id(0x00000012), propget, helpstring("property EndCoordinateSystemSelection")]
        HRESULT EndCoordinateSystemSelection([out, retval] int* pVal);
        [id(0x00000012), propput, helpstring("property EndCoordinateSystemSelection")]
        HRESULT EndCoordinateSystemSelection([in] int pVal);
        [id(0x00000013), propget, helpstring("property EndLocationX")]
        HRESULT EndLocationX([out, retval] double* pVal);
        [id(0x00000013), propput, helpstring("property EndLocationX")]
        HRESULT EndLocationX([in] double pVal);
        [id(0x00000014), propget, helpstring("property EndLocationY")]
        HRESULT EndLocationY([out, retval] double* pVal);
        [id(0x00000014), propput, helpstring("property EndLocationY")]
        HRESULT EndLocationY([in] double pVal);
        [id(0x00000015), propget, helpstring("property EndLocationZ")]
        HRESULT EndLocationZ([out, retval] double* pVal);
        [id(0x00000015), propput, helpstring("property EndLocationZ")]
        HRESULT EndLocationZ([in] double pVal);
        [id(0x00000019), propget, helpstring("property NumberOfSamplingPoints")]
        HRESULT NumberOfSamplingPoints([out, retval] int* pVal);
        [id(0x00000019), propput, helpstring("property NumberOfSamplingPoints")]
        HRESULT NumberOfSamplingPoints([in] int pVal);
        [id(0x0000001a), propget, helpstring("property CoordinateSystemSelection")]
        HRESULT CoordinateSystemSelection([out, retval] int* pVal);
        [id(0x0000001a), propput, helpstring("property CoordinateSystemSelection")]
        HRESULT CoordinateSystemSelection([in] int pVal);
        [id(0x00000016), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x00000017), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x00000018), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x0000003c), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x0000003d), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x0000003e), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x0000003f), helpstring("method CreateTabbedFileForPathSelection")]
        HRESULT CreateTabbedFile(
                        [in] BSTR filePath, 
                        [out, retval] BSTR* fileText);
        [id(0x00000040), helpstring("method UpdateEndPointsComputation")]
        HRESULT UpdateEndPointsComputation();
        [id(0x00000041), propput, helpstring("method PathRayNeedUpdate")]
        HRESULT PathRayNeedUpdate([in] VARIANT_BOOL pbFlag);
        [id(0x00000041), propget, helpstring("method PathRayNeedUpdate")]
        HRESULT PathRayNeedUpdate([out, retval] VARIANT_BOOL* pbFlag);
        [id(0x00000042), propput, helpstring("method PathRayHitUseMesh")]
        HRESULT PathRayHitUseMesh([in] VARIANT_BOOL pbFlag);
        [id(0x00000042), propget, helpstring("method PathRayHitUseMesh")]
        HRESULT PathRayHitUseMesh([out, retval] VARIANT_BOOL* pbFlag);
        [id(0x0000001d), propget, helpstring("property SnapToMesh")]
        HRESULT SnapToMesh([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000001d), propput, helpstring("property SnapToMesh")]
        HRESULT SnapToMesh([in] VARIANT_BOOL pVal);
        [id(0x00000043), helpstring("method DoSnapToMesh")]
        HRESULT DoSnapToMesh([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000044), helpstring("method CanSnapToMesh")]
        HRESULT CanSnapToMesh([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000001e), propget, helpstring("property ShowMesh")]
        HRESULT ShowMesh([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000001e), propput, helpstring("property ShowMesh")]
        HRESULT ShowMesh([in] VARIANT_BOOL pVal);
        [id(0x00000045), helpstring("method DoFlipPath")]
        HRESULT DoFlipPath([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000046), propget, helpstring("method HasValidGeoSelection")]
        HRESULT HasValidGeoSelection([out, retval] VARIANT_BOOL* pVal);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
    };

    typedef enum {
        kPathScopingTypePoints = 0,
        kPathScopingTypeEdge = 1,
        kPathScopingTypeRay = 2
    } DSPathScopingType;

    typedef enum {
        DISPID_SurfaceSuppressed = 11,
        DISPID_SurfaceCoordinateSystemSelection = 12,
        DISPID_SurfaceCylindricalCSysRadius = 13,
        DISPID_SurfaceComments = 22,
        DISPID_SurfaceFigures = 23,
        DISPID_SurfaceImages = 24,
        DISPID_SurfaceUnitTypeByDispid = 25,
        DISPID_SurfaceUnitStringByDispid = 26,
        DISPID_SurfaceParamNameByDispid = 27,
        DISPID_SurfaceAddComment = 60,
        DISPID_SurfaceAddFigure = 61,
        DISPID_SurfaceAddImage = 62,
        DISPID_SurfaceCreateTabbedFile = 63
    } kDispId_Surface;

    [
      odl,
      uuid(B0FFE412-80F7-4423-98F0-124260B1E322),
      helpstring("IDSSurfaceAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSSurfaceAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
        [id(0x0000000b), propget, helpstring("property Suppressed")]
        HRESULT Suppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000000b), propput, helpstring("property Suppressed")]
        HRESULT Suppressed([in] VARIANT_BOOL pVal);
        [id(0x0000000c), propget, helpstring("property CoordinateSystemSelection")]
        HRESULT CoordinateSystemSelection([out, retval] int* pVal);
        [id(0x0000000c), propput, helpstring("property CoordinateSystemSelection")]
        HRESULT CoordinateSystemSelection([in] int pVal);
        [id(0x00000016), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x00000017), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x00000018), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x0000003c), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x0000003d), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x0000003e), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x0000003f), helpstring("method CreateTabbedFileForSurfaceSelection")]
        HRESULT CreateTabbedFile(
                        [in] BSTR fileSurface, 
                        [out, retval] BSTR* fileText);
        [id(0x0000000d), propget, helpstring("property CylindricalCSysRadius")]
        HRESULT CylindricalCSysRadius([out, retval] double* pVal);
        [id(0x0000000d), propput, helpstring("property CylindricalCSysRadius")]
        HRESULT CylindricalCSysRadius([in] double pVal);
        [id(0x00000019), propget, helpstring("property UnitTypeByDispid")]
        HRESULT UnitTypeByDispid(
                        [in] int dispid, 
                        [out, retval] int* unitType);
        [id(0x0000001a), propget, helpstring("property UnitStringByDispid")]
        HRESULT UnitStringByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* unitString);
        [id(0x0000001b), propget, helpstring("property ParamNameByDispid")]
        HRESULT ParamNameByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* paramName);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
    };

    typedef enum {
        DISPID_PretensionBoltLoadLoadVariation = 10,
        DISPID_PretensionBoltLoadGeometrySelection = 11,
        DISPID_PretensionBoltLoadPreload = 12,
        DISPID_PretensionBoltLoadPreadjustment = 13,
        DISPID_PretensionBoltLoadAdjustmentReaction = 14,
        DISPID_PretensionBoltLoadPreloadReaction = 15,
        DISPID_PretensionBoltLoadWorkingLoadReaction = 16,
        DISPID_PretensionBoltLoadHasValidGeoSelection = 17,
        DISPID_PretensionBoltLoadGeometryDefineBy = 18,
        DISPID_PretensionBoltLoadComponentSelection = 19,
        DISPID_PretensionBoltLoadCoordinateSystemSelection = 20,
        DISPID_PretensionBoltLoadBoltLoadDefineBy = 21,
        DISPID_PretensionBoltLoadScopedType = 22,
        DISPID_PretensionBoltLoadPrototypes = 23,
        DISPID_PretensionBoltLoadComments = 24,
        DISPID_PretensionBoltLoadFigures = 25,
        DISPID_PretensionBoltLoadSuppressed = 26,
        DISPID_PretensionBoltLoadDeleteSequenceEntry = 27,
        DISPID_PretensionBoltLoadInsertSequenceEntry = 28,
        DISPID_PretensionBoltLoadSequenceEntryPasteAfter = 29,
        DISPID_PretensionBoltLoadAddComment = 30,
        DISPID_PretensionBoltLoadAddFigure = 31,
        DISPID_PretensionBoltLoadAddImage = 32,
        DISPID_PretensionBoltLoadImages = 33,
        DISPID_PretensionBoltLoadAnsBCType = 34,
        DISPID_PretensionBoltUnitTypeByDispid = 35,
        DISPID_PretensionBoltUnitStringByDispid = 36,
        DISPID_PretensionBoltParamNameByDispid = 37,
        DISPID_PretensionBoltLoadIncrement = 38,
        DISPID_PretensionBoltSetPropertyByStep = 39
    } kDispId_PretensionBoltLoad;

    [
      odl,
      uuid(A4AE4070-4CE8-4322-AC8E-8CD92F508719),
      helpstring("IDSPretensionBoltLoadAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSPretensionBoltLoadAuto : IDispatch {
        [id(0x00000012), propget, helpstring("property GeometryDefineBy")]
        HRESULT GeometryDefineBy([out, retval] DSGeometryDefineByType* pVal);
        [id(0x00000012), propput, helpstring("property GeometryDefineBy")]
        HRESULT GeometryDefineBy([in] DSGeometryDefineByType pVal);
        [id(0x0000000b), propput, helpstring("property GeometrySelection")]
        HRESULT GeometrySelection([in] IDispatch* rhs);
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
        [id(0x00000011), propget, helpstring("property HasValidGeoSelection")]
        HRESULT HasValidGeoSelection([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000013), propget, helpstring("property ComponentSelection")]
        HRESULT ComponentSelection([out, retval] int* pVal);
        [id(0x00000013), propput, helpstring("property ComponentSelection")]
        HRESULT ComponentSelection([in] int pVal);
        [id(0x00000014), propget, helpstring("property CoordinateSystemSelection")]
        HRESULT CoordinateSystemSelection([out, retval] int* pVal);
        [id(0x00000014), propput, helpstring("property CoordinateSystemSelection")]
        HRESULT CoordinateSystemSelection([in] int pVal);
        [id(0x00000022), propget, helpstring("method AnsBCType")]
        HRESULT AnsBCType([out, retval] int* pVal);
        [id(0x0000001a), propget, helpstring("property Suppressed")]
        HRESULT Suppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000001a), propput, helpstring("property Suppressed")]
        HRESULT Suppressed([in] VARIANT_BOOL pVal);
        [id(0x00000015), propget, helpstring("property BoltLoadDefineBy")]
        HRESULT BoltLoadDefineBy([out, retval] DSBoltLoadDefineByType* pVal);
        [id(0x00000015), propput, helpstring("property BoltLoadDefineBy")]
        HRESULT BoltLoadDefineBy([in] DSBoltLoadDefineByType pVal);
        [id(0x0000000c), propget, helpstring("property Preload")]
        HRESULT Preload([out, retval] double* pVal);
        [id(0x0000000c), propput, helpstring("property Preload")]
        HRESULT Preload([in] double pVal);
        [id(0x0000000d), propget, helpstring("property Preadjustment")]
        HRESULT Preadjustment([out, retval] double* pVal);
        [id(0x0000000d), propput, helpstring("property Preadjustment")]
        HRESULT Preadjustment([in] double pVal);
        [id(0x0000000e), propget, helpstring("property AdjustmentReaction")]
        HRESULT AdjustmentReaction([out, retval] double* pVal);
        [id(0x0000000f), propget, helpstring("property PreloadReaction")]
        HRESULT PreloadReaction([out, retval] double* pVal);
        [id(0x00000010), propget, helpstring("property WorkingLoadReaction")]
        HRESULT WorkingLoadReaction([out, retval] double* pVal);
        [id(0x00000016), propget, helpstring("property ScopedType")]
        HRESULT ScopedType([out, retval] unsigned int* pVal);
        [id(0x00000017), propget, helpstring("property Prototypes")]
        HRESULT Prototypes([out, retval] VARIANT* pVal);
        [id(0x00000018), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x00000019), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x0000000a), propget, helpstring("property LoadVariation")]
        HRESULT LoadVariation(
                        [in] int ComponentPosition, 
                        [out, retval] IDispatch** ppDisp);
        [id(0x0000001b), helpstring("method DeleteSequenceEntry")]
        HRESULT DeleteSequenceEntry([in] int index);
        [id(0x0000001c), helpstring("method InsertSequenceEntry")]
        HRESULT InsertSequenceEntry([in] int index);
        [id(0x0000001d), helpstring("method SequenceEntryPasteAfter")]
        HRESULT SequenceEntryPasteAfter(
                        [in] int indexDest, 
                        [in] int indexSrc);
        [id(0x0000001e), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x0000001f), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x00000021), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000020), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00000023), propget, helpstring("property UnitTypeByDispid")]
        HRESULT UnitTypeByDispid(
                        [in] int dispid, 
                        [out, retval] int* unitType);
        [id(0x00000024), propget, helpstring("property UnitStringByDispid")]
        HRESULT UnitStringByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* unitString);
        [id(0x6002002a), helpstring("method GetDisplayString")]
        HRESULT GetDisplayString(
                        [in] long dispid, 
                        [out, retval] BSTR* pVal);
        [id(0x00000025), propget, helpstring("property ParamNameByDispid")]
        HRESULT ParamNameByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* paramName);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x00000026), propget, helpstring("property Increment")]
        HRESULT Increment([out, retval] double* pVal);
        [id(0x00000026), propput, helpstring("property Increment")]
        HRESULT Increment([in] double pVal);
        [id(0x00000027), helpstring("method SetPropertyByStep")]
        HRESULT SetPropertyByStep(
                        [in] int step, 
                        [in] BSTR propertyName, 
                        [in] VARIANT newVal);
    };

    typedef enum {
        DISPID_ProbeToolComments = 10,
        DISPID_ProbeToolFigures = 11,
        DISPID_ProbeToolAddComment = 12,
        DISPID_ProbeToolAddFigure = 13,
        DISPID_ProbeToolProbeToolType = 14,
        DISPID_ProbeToolAddResultProbe = 15,
        DISPID_ProbeToolResultProbes = 16,
        DISPID_ProbeToolDisplayFilter = 17,
        DISPID_ProbeToolSequenceNumber = 18,
        DISPID_ProbeToolTimeDisplayType = 19,
        DISPID_ProbeToolTransientDisplayTime = 20,
        DISPID_ProbeToolImages = 21,
        DISPID_ProbeToolAddImage = 22
    } kDispId_ProbeTool;

    [
      odl,
      uuid(C38A2EEA-C923-48A0-9E06-096C7A7B268A),
      helpstring("IDSProbeToolAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSProbeToolAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x0000000a), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x0000000b), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x0000000c), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x0000000d), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x0000000e), propget, helpstring("property ProbeToolType")]
        HRESULT ProbeToolType([out, retval] DSProbeResultType* pVal);
        [id(0x0000000e), propput, helpstring("property ProbeToolType")]
        HRESULT ProbeToolType([in] DSProbeResultType pVal);
        [id(0x0000000f), helpstring("method AddResultProbe")]
        HRESULT AddResultProbe(
                        [in] IDispatch* piSelectMgr, 
                        [out, retval] IDispatch** ppVal);
        [id(0x00000010), propget, helpstring("property ResultProbes")]
        HRESULT ResultProbes([out, retval] IDispatch** pVal);
        [id(0x00000011), propget, helpstring("property DisplayFilter")]
        HRESULT DisplayFilter([out, retval] DSProbeDisplayFilter* pVal);
        [id(0x00000011), propput, helpstring("property DisplayFilter")]
        HRESULT DisplayFilter([in] DSProbeDisplayFilter pVal);
        [id(0x00000013), propget, helpstring("property TimeDisplayType")]
        HRESULT TimeDisplayType([out, retval] DSTimeDisplayType* pVal);
        [id(0x00000013), propput, helpstring("property TimeDisplayType")]
        HRESULT TimeDisplayType([in] DSTimeDisplayType pVal);
        [id(0x00000012), propget, helpstring("property SequenceNumber")]
        HRESULT SequenceNumber([out, retval] unsigned int* pVal);
        [id(0x00000012), propput, helpstring("property SequenceNumber")]
        HRESULT SequenceNumber([in] unsigned int pVal);
        [id(0x00000014), propget, helpstring("property TransientDisplayTime")]
        HRESULT TransientDisplayTime([out, retval] double* pVal);
        [id(0x00000014), propput, helpstring("property TransientDisplayTime")]
        HRESULT TransientDisplayTime([in] double pVal);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
        [id(0x00000015), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000016), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
    };

    typedef enum {
        kShowAll = 0,
        kShowComponents = 1,
        kShowPrincipals = 2,
        kShowXAxis = 3,
        kShowYAxis = 4,
        kShowZAxis = 5,
        kShowXYPlane = 6,
        kShowYZPlane = 7,
        kShowXZPlane = 8,
        kShowMinPrincipal = 9,
        kShowMiddlePrincipal = 10,
        kShowMaxPrincipal = 11,
        kShowIntensity = 12,
        kShowEquivalent = 13,
        kShowTotal = 14,
        kShowKinetic = 15,
        kShowPotential = 16,
        kShowDissipative = 17,
        kShowSpringForce = 18,
        kShowSpringElongation = 19,
        kShowSpringVelocity = 20,
        kShowSpringDampingForce = 21,
        kShowExternal = 22,
        kShowStrain = 23,
        kShowCoEnergy = 24,
        kShowAxialForce = 25,
        kShowShearForceAtI = 26,
        kShowShearForceAtJ = 27,
        kShowTorque = 28,
        kShowMomentAtI = 29,
        kShowMomentAtJ = 30,
        kShowNetRadiation = 31,
        kShowEmittedRadiation = 32,
        kShowReflectedRadiation = 33,
        kShowIncidentRadiation = 34,
        kShowBearingForce1 = 35,
        kShowBearingForce2 = 36,
        kShowBearingElongation1 = 37,
        kShowBearingElongation2 = 38,
        kShowBearingVelocity1 = 39,
        kShowBearingVelocity2 = 40,
        kShowBearingDampingForce1 = 41,
        kShowBearingDampingForce2 = 42
    } DSProbeDisplayFilter;

    typedef enum {
        kSinglePoint = 0,
        kAllPoints = 1
    } DSTimeDisplayType;

    typedef enum {
        DISPID_ProbeResultComments = 10,
        DISPID_ProbeResultFigures = 11,
        DISPID_ProbeResultAddComment = 12,
        DISPID_ProbeResultAddFigure = 13,
        DISPID_ProbeResultProbeResultType = 14,
        DISPID_ProbeResultOrientationCoordinateSystem = 15,
        DISPID_ProbeResultDeformationXAxis = 16,
        DISPID_ProbeResultDeformationYAxis = 17,
        DISPID_ProbeResultDeformationZAxis = 18,
        DISPID_ProbeResultTotalDeformation = 19,
        DISPID_ProbeResultNormalStressXAxis = 20,
        DISPID_ProbeResultNormalStressYAxis = 21,
        DISPID_ProbeResultNormalStressZAxis = 22,
        DISPID_ProbeResultShearStressXYPlane = 23,
        DISPID_ProbeResultShearStressYZPlane = 24,
        DISPID_ProbeResultShearStressXZPlane = 25,
        DISPID_ProbeResultEquivalentStress = 26,
        DISPID_ProbeResultMaxPrincipalStress = 27,
        DISPID_ProbeResultMiddlePrincipalStress = 28,
        DISPID_ProbeResultMinPrincipalStress = 29,
        DISPID_ProbeResultStressIntensity = 30,
        DISPID_ProbeResultNormalStrainXAxis = 31,
        DISPID_ProbeResultNormalStrainYAxis = 32,
        DISPID_ProbeResultNormalStrainZAxis = 33,
        DISPID_ProbeResultShearStrainXYPlane = 34,
        DISPID_ProbeResultShearStrainYZPlane = 35,
        DISPID_ProbeResultShearStrainXZPlane = 36,
        DISPID_ProbeResultEquivalentStrain = 37,
        DISPID_ProbeResultMaxPrincipalStrain = 38,
        DISPID_ProbeResultMiddlePrincipalStrain = 39,
        DISPID_ProbeResultMinPrincipalStrain = 40,
        DISPID_ProbeResultStrainIntensity = 41,
        DISPID_ProbeResultTemperature = 42,
        DISPID_ProbeResultHeatFluxX = 43,
        DISPID_ProbeResultHeatFluxY = 44,
        DISPID_ProbeResultHeatFluxZ = 45,
        DISPID_ProbeResultHeatFluxTotal = 46,
        DISPID_ProbeResultLocationMethod = 47,
        DISPID_ProbeResultLocationGeometry = 48,
        DISPID_ProbeResultLocationX = 49,
        DISPID_ProbeResultLocationY = 50,
        DISPID_ProbeResultLocationZ = 51,
        DISPID_ProbeResultLocationCoordinateSystem = 52,
        DISPID_ProbeResultMaxXDeformation = 53,
        DISPID_ProbeResultMinXDeformation = 54,
        DISPID_ProbeResultMaxYDeformation = 55,
        DISPID_ProbeResultMinYDeformation = 56,
        DISPID_ProbeResultMaxZDeformation = 57,
        DISPID_ProbeResultMinZDeformation = 58,
        DISPID_ProbeResultMaxTotalDeformation = 59,
        DISPID_ProbeResultMinTotalDeformation = 60,
        DISPID_ProbeResultMaxNormalStressXAxis = 61,
        DISPID_ProbeResultMinNormalStressXAxis = 62,
        DISPID_ProbeResultMaxNormalStressYAxis = 63,
        DISPID_ProbeResultMinNormalStressYAxis = 64,
        DISPID_ProbeResultMaxNormalStressZAxis = 65,
        DISPID_ProbeResultMinNormalStressZAxis = 66,
        DISPID_ProbeResultMaxShearStressXYPlane = 67,
        DISPID_ProbeResultMinShearStressXYPlane = 68,
        DISPID_ProbeResultMaxShearStressYZPlane = 69,
        DISPID_ProbeResultMinShearStressYZPlane = 70,
        DISPID_ProbeResultMaxShearStressXZPlane = 71,
        DISPID_ProbeResultMinShearStressXZPlane = 72,
        DISPID_ProbeResultMaxEquivalentStress = 73,
        DISPID_ProbeResultMinEquivalentStress = 74,
        DISPID_ProbeResultMaxMaxPrincipalStress = 75,
        DISPID_ProbeResultMinMaxPrincipalStress = 76,
        DISPID_ProbeResultMaxMiddlePrincipalStress = 77,
        DISPID_ProbeResultMinMiddlePrincipalStress = 78,
        DISPID_ProbeResultMaxMinPrincipalStress = 79,
        DISPID_ProbeResultMinMinPrincipalStress = 80,
        DISPID_ProbeResultMaxStressIntensity = 81,
        DISPID_ProbeResultMinStressIntensity = 82,
        DISPID_ProbeResultMaxNormalStrainXAxis = 83,
        DISPID_ProbeResultMinNormalStrainXAxis = 84,
        DISPID_ProbeResultMaxNormalStrainYAxis = 85,
        DISPID_ProbeResultMinNormalStrainYAxis = 86,
        DISPID_ProbeResultMaxNormalStrainZAxis = 87,
        DISPID_ProbeResultMinNormalStrainZAxis = 88,
        DISPID_ProbeResultMaxShearStrainXYPlane = 89,
        DISPID_ProbeResultMinShearStrainXYPlane = 90,
        DISPID_ProbeResultMaxShearStrainYZPlane = 91,
        DISPID_ProbeResultMinShearStrainYZPlane = 92,
        DISPID_ProbeResultMaxShearStrainXZPlane = 93,
        DISPID_ProbeResultMinShearStrainXZPlane = 94,
        DISPID_ProbeResultMaxEquivalentStrain = 95,
        DISPID_ProbeResultMinEquivalentStrain = 96,
        DISPID_ProbeResultMaxMaxPrincipalStrain = 97,
        DISPID_ProbeResultMinMaxPrincipalStrain = 98,
        DISPID_ProbeResultMaxMiddlePrincipalStrain = 99,
        DISPID_ProbeResultMinMiddlePrincipalStrain = 100,
        DISPID_ProbeResultMaxMinPrincipalStrain = 101,
        DISPID_ProbeResultMinMinPrincipalStrain = 102,
        DISPID_ProbeResultMaxStrainIntensity = 103,
        DISPID_ProbeResultMinStrainIntensity = 104,
        DISPID_ProbeResultMaxTemperature = 105,
        DISPID_ProbeResultMinTemperature = 106,
        DISPID_ProbeResultMaxHeatFluxX = 107,
        DISPID_ProbeResultMinHeatFluxX = 108,
        DISPID_ProbeResultMaxHeatFluxY = 109,
        DISPID_ProbeResultMinHeatFluxY = 110,
        DISPID_ProbeResultMaxHeatFluxZ = 111,
        DISPID_ProbeResultMinHeatFluxZ = 112,
        DISPID_ProbeResultMaxHeatFluxTotal = 113,
        DISPID_ProbeResultMinHeatFluxTotal = 114,
        DISPID_ProbeResultNumPoints = 115,
        DISPID_ProbeResultXAxisData = 116,
        DISPID_ProbeResultSequenceXDeformation = 117,
        DISPID_ProbeResultSequenceYDeformation = 118,
        DISPID_ProbeResultSequenceZDeformation = 119,
        DISPID_ProbeResultSequenceTotalDeformation = 120,
        DISPID_ProbeResultSequenceNormalStressXAxis = 121,
        DISPID_ProbeResultSequenceNormalStressYAxis = 122,
        DISPID_ProbeResultSequenceNormalStressZAxis = 123,
        DISPID_ProbeResultSequenceShearStressXYPlane = 124,
        DISPID_ProbeResultSequenceShearStressYZPlane = 125,
        DISPID_ProbeResultSequenceShearStressXZPlane = 126,
        DISPID_ProbeResultSequenceEquivalentStress = 127,
        DISPID_ProbeResultSequenceMaxPrincipalStress = 128,
        DISPID_ProbeResultSequenceMiddlePrincipalStress = 129,
        DISPID_ProbeResultSequenceMinPrincipalStress = 130,
        DISPID_ProbeResultSequenceStressIntensity = 131,
        DISPID_ProbeResultSequenceNormalStrainXAxis = 132,
        DISPID_ProbeResultSequenceNormalStrainYAxis = 133,
        DISPID_ProbeResultSequenceNormalStrainZAxis = 134,
        DISPID_ProbeResultSequenceShearStrainXYPlane = 135,
        DISPID_ProbeResultSequenceShearStrainYZPlane = 136,
        DISPID_ProbeResultSequenceShearStrainXZPlane = 137,
        DISPID_ProbeResultSequenceEquivalentStrain = 138,
        DISPID_ProbeResultSequenceMaxPrincipalStrain = 139,
        DISPID_ProbeResultSequenceMiddlePrincipalStrain = 140,
        DISPID_ProbeResultSequenceMinPrincipalStrain = 141,
        DISPID_ProbeResultSequenceStrainIntensity = 142,
        DISPID_ProbeResultSequenceTemperature = 143,
        DISPID_ProbeResultSequenceHeatFluxX = 144,
        DISPID_ProbeResultSequenceHeatFluxY = 145,
        DISPID_ProbeResultSequenceHeatFluxZ = 146,
        DISPID_ProbeResultSequenceHeatFluxTotal = 147,
        DISPID_ProbeResultFluxDensityX = 148,
        DISPID_ProbeResultFluxDensityY = 149,
        DISPID_ProbeResultFluxDensityZ = 150,
        DISPID_ProbeResultFluxDensityTotal = 151,
        DISPID_ProbeResultFieldIntensityX = 152,
        DISPID_ProbeResultFieldIntensityY = 153,
        DISPID_ProbeResultFieldIntensityZ = 154,
        DISPID_ProbeResultFieldIntensityTotal = 155,
        DISPID_ProbeResultHasLocation = 156,
        DISPID_ProbeResultGeometrySelection = 157,
        DISPID_ProbeResultHasValidGeometryData = 158,
        DISPID_ProbeResultProbeType = 159,
        DISPID_ProbeResultRotationX = 160,
        DISPID_ProbeResultRotationY = 161,
        DISPID_ProbeResultRotationZ = 162,
        DISPID_ProbeResultMaxRotationX = 163,
        DISPID_ProbeResultMaxRotationY = 164,
        DISPID_ProbeResultMaxRotationZ = 165,
        DISPID_ProbeResultMinRotationX = 166,
        DISPID_ProbeResultMinRotationY = 167,
        DISPID_ProbeResultMinRotationZ = 168,
        DISPID_ProbeResultSequenceRotationX = 169,
        DISPID_ProbeResultSequenceRotationY = 170,
        DISPID_ProbeResultSequenceRotationZ = 171,
        DISPID_ProbeResultGeometrySelectionString = 172,
        DISPID_ProbeResultImages = 173,
        DISPID_ProbeResultAddImage = 174,
        DISPID_ProbeResultReactionHeat = 175,
        DISPID_ProbeResultMaxReactionHeat = 176,
        DISPID_ProbeResultMinReactionHeat = 177,
        DISPID_ProbeResultSequenceReactionHeat = 178,
        DISPID_ProbeResultUnitTypeByDispid = 179,
        DISPID_ProbeResultUnitStringByDispid = 180,
        DISPID_ProbeResultBoundaryConditionSelection = 181,
        DISPID_ProbeResultDisplayTime = 182,
        DISPID_ProbeResultTimeDisplayType = 183,
        DISPID_ProbeResultSequenceNumber = 184,
        DISPID_ProbeResultDisplayFilter = 185,
        DISPID_ProbeResultParamNameByDispid = 186,
        DISPID_ProbeResultRemotePointSelection = 187,
        DISPID_ProbeResultNominalUnitTypeByDispId = 188,
        DISPID_ProbeResultSelFreqRangeType = 189,
        DISPID_ProbeResultSelFreqRangeMin = 190,
        DISPID_ProbeResultSelFreqRangeMax = 191,
        DISPID_ProbeResultJouleHeat = 192,
        DISPID_ProbeResultMaxJouleHeat = 193,
        DISPID_ProbeResultMinJouleHeat = 194,
        DISPID_ProbeResultSequenceJouleHeat = 195,
        DISPID_ProbeResultMinMaxOutputType = 239,
        DISPID_ProbeResultVectorXAxis = 240,
        DISPID_ProbeResultVectorYAxis = 241,
        DISPID_ProbeResultVectorZAxis = 242,
        DISPID_ProbeResultTotalVector = 243,
        DISPID_ProbeResultMaxXVector = 244,
        DISPID_ProbeResultMinXVector = 245,
        DISPID_ProbeResultMaxYVector = 246,
        DISPID_ProbeResultMinYVector = 247,
        DISPID_ProbeResultMaxZVector = 248,
        DISPID_ProbeResultMinZVector = 249,
        DISPID_ProbeResultMaxTotalVector = 250,
        DISPID_ProbeResultMinTotalVector = 251,
        DISPID_ProbeResultSequenceXVector = 252,
        DISPID_ProbeResultSequenceYVector = 253,
        DISPID_ProbeResultSequenceZVector = 254,
        DISPID_ProbeResultSequenceTotalVector = 255,
        DISPID_ProbeResultPotentialEnergy = 256,
        DISPID_ProbeResultKineticEnergy = 257,
        DISPID_ProbeResultDissipativeEnergy = 258,
        DISPID_ProbeResultTotalEnergy = 259,
        DISPID_ProbeResultMaxPotentialEnergy = 260,
        DISPID_ProbeResultMinPotentialEnergy = 261,
        DISPID_ProbeResultMaxKineticEnergy = 262,
        DISPID_ProbeResultMinKineticEnergy = 263,
        DISPID_ProbeResultMaxDissipativeEnergy = 264,
        DISPID_ProbeResultMinDissipativeEnergy = 265,
        DISPID_ProbeResultMaxTotalEnergy = 266,
        DISPID_ProbeResultMinTotalEnergy = 267,
        DISPID_ProbeResultSequencePotentialEnergy = 268,
        DISPID_ProbeResultSequenceKineticEnergy = 269,
        DISPID_ProbeResultSequenceDissipativeEnergy = 270,
        DISPID_ProbeResultSequenceTotalEnergy = 271,
        DISPID_ProbeResultMomentsAtSummationPoint = 272,
        DISPID_ProbeResultSpringForce = 273,
        DISPID_ProbeResultSpringElongation = 274,
        DISPID_ProbeResultSpringVelocity = 275,
        DISPID_ProbeResultSpringDampingForce = 276,
        DISPID_ProbeResultMaxSpringForce = 277,
        DISPID_ProbeResultMinSpringForce = 278,
        DISPID_ProbeResultMaxSpringElongation = 279,
        DISPID_ProbeResultMinSpringElongation = 280,
        DISPID_ProbeResultMaxSpringVelocity = 281,
        DISPID_ProbeResultMinSpringVelocity = 282,
        DISPID_ProbeResultMaxSpringDampingForce = 283,
        DISPID_ProbeResultMinSpringDampingForce = 284,
        DISPID_ProbeResultSequenceSpringForce = 285,
        DISPID_ProbeResultSequenceSpringElongation = 286,
        DISPID_ProbeResultSequenceSpringVelocity = 287,
        DISPID_ProbeResultSequenceSpringDampingForce = 288,
        DISPID_ProbeResultReactionVoltage = 289,
        DISPID_ProbeResultMaxReactionVoltage = 290,
        DISPID_ProbeResultMinReactionVoltage = 291,
        DISPID_ProbeResultJointResultOutputType = 292,
        DISPID_ProbeResultUseJointCoordinateSystem = 293,
        DISPID_ProbeResultAdjustmentReaction = 294,
        DISPID_ProbeResultPreloadReaction = 295,
        DISPID_ProbeResultSequenceAdjustmentReaction = 296,
        DISPID_ProbeResultSequencePreloadReaction = 297,
        DISPID_ProbeResultMinAdjustmentReaction = 298,
        DISPID_ProbeResultMinPreloadReaction = 299,
        DISPID_ProbeResultMaxAdjustmentReaction = 300,
        DISPID_ProbeResultMaxPreloadReaction = 301,
        DISPID_ProbeResultGenPlaneStrainFiberLengthChange = 302,
        DISPID_ProbeResultGenPlaneStrainMomentX = 303,
        DISPID_ProbeResultGenPlaneStrainMomentY = 304,
        DISPID_ProbeResultGenPlaneStrainForce = 305,
        DISPID_ProbeResultGenPlaneStrainMaxFiberLengthChange = 306,
        DISPID_ProbeResultGenPlaneStrainMaxMomentX = 307,
        DISPID_ProbeResultGenPlaneStrainMaxMomentY = 308,
        DISPID_ProbeResultGenPlaneStrainMaxForce = 309,
        DISPID_ProbeResultGenPlaneStrainMinFiberLengthChange = 310,
        DISPID_ProbeResultGenPlaneStrainMinMomentX = 311,
        DISPID_ProbeResultGenPlaneStrainMinMomentY = 312,
        DISPID_ProbeResultGenPlaneStrainMinForce = 313,
        DISPID_ProbeResultGenPlaneStrainSequenceFiberLengthChange = 314,
        DISPID_ProbeResultGenPlaneStrainSequenceMomentX = 315,
        DISPID_ProbeResultGenPlaneStrainSequenceMomentY = 316,
        DISPID_ProbeResultGenPlaneStrainSequenceForce = 317,
        DISPID_ProbeResultContactSide = 318,
        DISPID_ProbeResultStrainEnergy = 319,
        DISPID_ProbeResultExternalEnergy = 320,
        DISPID_ProbeResultMaxStrainEnergy = 321,
        DISPID_ProbeResultMinStrainEnergy = 322,
        DISPID_ProbeResultMaxExternalEnergy = 323,
        DISPID_ProbeResultMinExternalEnergy = 324,
        DISPID_ProbeResultSequenceExternalEnergy = 325,
        DISPID_ProbeResultSequenceStrainEnergy = 326,
        DISPID_ProbeResultRelativity = 327,
        DISPID_ProbeResultNodeID = 328,
        DISPID_ProbeResultRMSValue = 329,
        DISPID_ProbeResultResultDistance = 330,
        DISPID_ProbeResultElectricPotential = 331,
        DISPID_ProbeResultMinElectricPotential = 332,
        DISPID_ProbeResultMaxElectricPotential = 333,
        DISPID_ProbeResultSequenceElectricPotential = 334,
        DISPID_ProbeResultSequenceReactionVoltage = 335,
        DISPID_ProbeResultSequenceElectricFieldX = 336,
        DISPID_ProbeResultSequenceElectricFieldY = 337,
        DISPID_ProbeResultSequenceElectricFieldZ = 338,
        DISPID_ProbeResultSequenceElectricFieldTotal = 339,
        DISPID_ProbeResultSequenceCurrentDensityX = 340,
        DISPID_ProbeResultSequenceCurrentDensityY = 341,
        DISPID_ProbeResultSequenceCurrentDensityZ = 342,
        DISPID_ProbeResultSequenceCurrentDensityTotal = 343,
        DISPID_ProbeResultTime = 344,
        DISPID_ProbeResultLoadStep = 345,
        DISPID_ProbeResultSubstep = 346,
        DISPID_ProbeResultIterationNumber = 347,
        DISPID_ProbeResultSymmetryMultiplier = 348,
        DISPID_ProbeResultSequenceFluxDensityX = 349,
        DISPID_ProbeResultSequenceFluxDensityY = 350,
        DISPID_ProbeResultSequenceFluxDensityZ = 351,
        DISPID_ProbeResultSequenceFluxDensityTotal = 352,
        DISPID_ProbeResultSequenceFieldIntensityX = 353,
        DISPID_ProbeResultSequenceFieldIntensityY = 354,
        DISPID_ProbeResultSequenceFieldIntensityZ = 355,
        DISPID_ProbeResultSequenceFieldIntensityTotal = 356,
        DISPID_ProbeResultEmagCoEnergy = 357,
        DISPID_ProbeResultMaxEmagCoEnergy = 358,
        DISPID_ProbeResultMinEmagCoEnergy = 359,
        DISPID_ProbeResultSequenceEmagCoEnergy = 360,
        DISPID_ProbeResultEmagEdgeFlux = 361,
        DISPID_ProbeResultMaxEmagEdgeFlux = 362,
        DISPID_ProbeResultMinEmagEdgeFlux = 363,
        DISPID_ProbeResultSequenceEmagEdgeFlux = 364,
        DISPID_ProbeResultWasSolvedFromGraphics = 365,
        DISPID_ProbeResultAxialForce = 366,
        DISPID_ProbeResultTorque = 367,
        DISPID_ProbeResultShearForceAtI = 368,
        DISPID_ProbeResultShearForceAtJ = 369,
        DISPID_ProbeResultMomentAtI = 370,
        DISPID_ProbeResultMomentAtJ = 371,
        DISPID_ProbeResultMaxAxialForce = 372,
        DISPID_ProbeResultMaxTorque = 373,
        DISPID_ProbeResultMaxShearForceAtI = 374,
        DISPID_ProbeResultMaxShearForceAtJ = 375,
        DISPID_ProbeResultMaxMomentAtI = 376,
        DISPID_ProbeResultMaxMomentAtJ = 377,
        DISPID_ProbeResultMinAxialForce = 378,
        DISPID_ProbeResultMinTorque = 379,
        DISPID_ProbeResultMinShearForceAtI = 380,
        DISPID_ProbeResultMinShearForceAtJ = 381,
        DISPID_ProbeResultMinMomentAtI = 382,
        DISPID_ProbeResultMinMomentAtJ = 383,
        DISPID_ProbeResultBeamConnectionSelection = 384,
        DISPID_ProbeResultSequenceAxialForce = 385,
        DISPID_ProbeResultSequenceTorque = 386,
        DISPID_ProbeResultSequenceShearForceAtI = 387,
        DISPID_ProbeResultSequenceShearForceAtJ = 388,
        DISPID_ProbeResultSequenceMomentAtI = 389,
        DISPID_ProbeResultSequenceMomentAtJ = 390,
        DISPID_ProbeResultSetGlobalCoordinateSystemForMigrate = 391,
        DISPID_ProbeResultNetRadiation = 392,
        DISPID_ProbeResultEmittedRadiation = 393,
        DISPID_ProbeResultReflectedRadiation = 394,
        DISPID_ProbeResultIncidentRadiation = 395,
        DISPID_ProbeResultAccelerationG = 396,
        DISPID_ProbeResultDoSnapToMesh = 397,
        DISPID_ProbeResultCanSnapToMesh = 398,
        DISPID_ProbeResultUpdateHitPoint = 399,
        DISPID_ProbeResultIdentifier = 400,
        DISPID_ProbeResultActualFrequency = 401,
        DISPID_ProbeResultSetDriver = 402,
        DISPID_ProbeResultSetNumber = 403,
        DISPID_ProbeResultFrequency = 404,
        DISPID_ProbeResultPhaseAngle = 405,
        DISPID_ProbeResultIsSolved = 406,
        DISPID_ProbeResultCreateTabbedFile = 407,
        DISPID_ProbeResultSuppressed = 408,
        DISPID_ProbeResultScopeBy = 409,
        DISPID_ProbeResultScaleFactor = 410,
        DISPID_ProbeResultPSDProbability = 411,
        DISPID_ProbeResultSpringConnectionSelection = 412,
        DISPID_ProbeResultSurfaceArea = 413,
        DISPID_ProbeResultRenameBasedOnDefinition = 414,
        DISPID_ProbeResultPhaseIncrement = 415,
        DISPID_ProbeResultUnitType = 416,
        DISPID_ProbeResultBearingConnectionSelection = 417,
        DISPID_ProbeResultBearingForce1 = 418,
        DISPID_ProbeResultBearingForce2 = 419,
        DISPID_ProbeResultBearingElongation1 = 420,
        DISPID_ProbeResultBearingElongation2 = 421,
        DISPID_ProbeResultBearingVelocity1 = 422,
        DISPID_ProbeResultBearingVelocity2 = 423,
        DISPID_ProbeResultBearingDampingForce1 = 424,
        DISPID_ProbeResultBearingDampingForce2 = 425,
        DISPID_ProbeResultMaxBearingForce1 = 426,
        DISPID_ProbeResultMaxBearingForce2 = 427,
        DISPID_ProbeResultMinBearingForce1 = 428,
        DISPID_ProbeResultMinBearingForce2 = 429,
        DISPID_ProbeResultMaxBearingElongation1 = 430,
        DISPID_ProbeResultMaxBearingElongation2 = 431,
        DISPID_ProbeResultMinBearingElongation1 = 432,
        DISPID_ProbeResultMinBearingElongation2 = 433,
        DISPID_ProbeResultMaxBearingVelocity1 = 434,
        DISPID_ProbeResultMaxBearingVelocity2 = 435,
        DISPID_ProbeResultMinBearingVelocity1 = 436,
        DISPID_ProbeResultMinBearingVelocity2 = 437,
        DISPID_ProbeResultMaxBearingDampingForce1 = 438,
        DISPID_ProbeResultMaxBearingDampingForce2 = 439,
        DISPID_ProbeResultMinBearingDampingForce1 = 440,
        DISPID_ProbeResultMinBearingDampingForce2 = 441,
        DISPID_ProbeResultSequenceBearingForce1 = 442,
        DISPID_ProbeResultSequenceBearingForce2 = 443,
        DISPID_ProbeResultSequenceBearingElongation1 = 444,
        DISPID_ProbeResultSequenceBearingElongation2 = 445,
        DISPID_ProbeResultSequenceBearingVelocity1 = 446,
        DISPID_ProbeResultSequenceBearingVelocity2 = 447,
        DISPID_ProbeResultSequenceBearingDampingForce1 = 448,
        DISPID_ProbeResultSequenceBearingDampingForce2 = 449,
        DISPID_ProbeResultStringIDForProbeType = 450,
        DISPID_ProbeResultSUpdateRigidHitPoint = 451,
        DISPID_ProbeResultExpFreqValue = 452,
        DISPID_ProbeResultRMSPercentage = 453
    } kDispId_ProbeResult;

    [
      odl,
      uuid(0059E9B9-B178-4D63-9216-BA03E1C2726C),
      helpstring("IDSProbeResultAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSProbeResultAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x0000000a), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x0000000b), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x0000000c), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x0000000d), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x0000000e), propget, helpstring("property ProbeResultType")]
        HRESULT ProbeResultType([out, retval] DSProbeResultType* pVal);
        [id(0x0000002f), propget, helpstring("property LocationMethod")]
        HRESULT LocationMethod([out, retval] DSLocationDefinitionMethod* pVal);
        [id(0x0000002f), propput, helpstring("property LocationMethod")]
        HRESULT LocationMethod([in] DSLocationDefinitionMethod pVal);
        [id(0x000000b5), propget, helpstring("property BoundaryConditionSelection")]
        HRESULT BoundaryConditionSelection([out, retval] int* pVal);
        [id(0x000000b5), propput, helpstring("property BoundaryConditionSelection")]
        HRESULT BoundaryConditionSelection([in] int pVal);
        [id(0x00000125), propget, helpstring("property UseJointCoordinateSystem")]
        HRESULT UseJointCoordinateSystem([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000125), propput, helpstring("property UseJointCoordinateSystem")]
        HRESULT UseJointCoordinateSystem([in] VARIANT_BOOL pVal);
        [id(0x0000000f), propget, helpstring("property OrientationCoordinateSystem")]
        HRESULT OrientationCoordinateSystem([out, retval] int* pVal);
        [id(0x0000000f), propput, helpstring("property OrientationCoordinateSystem")]
        HRESULT OrientationCoordinateSystem([in] int pVal);
        [id(0x00000110), propget, helpstring("property MomentsAtSummationPoint")]
        HRESULT MomentsAtSummationPoint([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000110), propput, helpstring("property MomentsAtSummationPoint")]
        HRESULT MomentsAtSummationPoint([in] VARIANT_BOOL pVal);
        [id(0x00000030), propput, helpstring("property LocationGeometry")]
        HRESULT LocationGeometry([in] IDispatch* rhs);
        [id(0x00000124), propget, helpstring("property JointResultOutputType")]
        HRESULT JointResultOutputType([out, retval] DSProbeResultType* pVal);
        [id(0x00000124), propput, helpstring("property JointResultOutputType")]
        HRESULT JointResultOutputType([in] DSProbeResultType pVal);
        [id(0x000000b9), propget, helpstring("property DisplayFilter")]
        HRESULT DisplayFilter([out, retval] DSProbeDisplayFilter* pVal);
        [id(0x000000b9), propput, helpstring("property DisplayFilter")]
        HRESULT DisplayFilter([in] DSProbeDisplayFilter pVal);
        [id(0x000000bd), propget, helpstring("property SelFreqRangeType")]
        HRESULT SelFreqRangeType([out, retval] DSProbeSelFreqRangeType* pVal);
        [id(0x000000bd), propput, helpstring("property SelFreqRangeType")]
        HRESULT SelFreqRangeType([in] DSProbeSelFreqRangeType pVal);
        [id(0x000000be), propget, helpstring("property SelFreqRangeMin")]
        HRESULT SelFreqRangeMin([out, retval] double* pVal);
        [id(0x000000be), propput, helpstring("property SelFreqRangeMin")]
        HRESULT SelFreqRangeMin([in] double pVal);
        [id(0x000000bf), propget, helpstring("property SelFreqRangeMax")]
        HRESULT SelFreqRangeMax([out, retval] double* pVal);
        [id(0x000000bf), propput, helpstring("property SelFreqRangeMax")]
        HRESULT SelFreqRangeMax([in] double pVal);
        [id(0x000000b7), propget, helpstring("property TimeDisplayType")]
        HRESULT TimeDisplayType([out, retval] DSTimeDisplayType* pVal);
        [id(0x000000b7), propput, helpstring("property TimeDisplayType")]
        HRESULT TimeDisplayType([in] DSTimeDisplayType pVal);
        [id(0x000000b6), propget, helpstring("property DisplayTime")]
        HRESULT DisplayTime([out, retval] double* pVal);
        [id(0x000000b6), propput, helpstring("property DisplayTime")]
        HRESULT DisplayTime([in] double pVal);
        [id(0x000000b8), propget, helpstring("property SequenceNumber")]
        HRESULT SequenceNumber([out, retval] unsigned int* pVal);
        [id(0x000000b8), propput, helpstring("property SequenceNumber")]
        HRESULT SequenceNumber([in] unsigned int pVal);
        [id(0x00000010), propget, helpstring("property DeformationXAxis")]
        HRESULT DeformationXAxis([out, retval] double* pVal);
        [id(0x00000011), propget, helpstring("property DeformationYAxis")]
        HRESULT DeformationYAxis([out, retval] double* pVal);
        [id(0x00000012), propget, helpstring("property DeformationZAxis")]
        HRESULT DeformationZAxis([out, retval] double* pVal);
        [id(0x00000013), propget, helpstring("property TotalDeformation")]
        HRESULT TotalDeformation([out, retval] double* pVal);
        [id(0x00000014), propget, helpstring("property NormalStressXAxis")]
        HRESULT NormalStressXAxis([out, retval] double* pVal);
        [id(0x00000015), propget, helpstring("property NormalStressYAxis")]
        HRESULT NormalStressYAxis([out, retval] double* pVal);
        [id(0x00000016), propget, helpstring("property NormalStressZAxis")]
        HRESULT NormalStressZAxis([out, retval] double* pVal);
        [id(0x00000017), propget, helpstring("property ShearStressXYPlane")]
        HRESULT ShearStressXYPlane([out, retval] double* pVal);
        [id(0x00000018), propget, helpstring("property ShearStressYZPlane")]
        HRESULT ShearStressYZPlane([out, retval] double* pVal);
        [id(0x00000019), propget, helpstring("property ShearStressXZPlane")]
        HRESULT ShearStressXZPlane([out, retval] double* pVal);
        [id(0x0000001a), propget, helpstring("property EquivalentStress")]
        HRESULT EquivalentStress([out, retval] double* pVal);
        [id(0x0000001b), propget, helpstring("property MaxPrincipalStress")]
        HRESULT MaxPrincipalStress([out, retval] double* pVal);
        [id(0x0000001c), propget, helpstring("property MiddlePrincipalStress")]
        HRESULT MiddlePrincipalStress([out, retval] double* pVal);
        [id(0x0000001d), propget, helpstring("property MinPrincipalStress")]
        HRESULT MinPrincipalStress([out, retval] double* pVal);
        [id(0x0000001e), propget, helpstring("property StressIntensity")]
        HRESULT StressIntensity([out, retval] double* pVal);
        [id(0x0000001f), propget, helpstring("property NormalStrainXAxis")]
        HRESULT NormalStrainXAxis([out, retval] double* pVal);
        [id(0x00000020), propget, helpstring("property NormalStrainYAxis")]
        HRESULT NormalStrainYAxis([out, retval] double* pVal);
        [id(0x00000021), propget, helpstring("property NormalStrainZAxis")]
        HRESULT NormalStrainZAxis([out, retval] double* pVal);
        [id(0x00000022), propget, helpstring("property ShearStrainXYPlane")]
        HRESULT ShearStrainXYPlane([out, retval] double* pVal);
        [id(0x00000023), propget, helpstring("property ShearStrainYZPlane")]
        HRESULT ShearStrainYZPlane([out, retval] double* pVal);
        [id(0x00000024), propget, helpstring("property ShearStrainXZPlane")]
        HRESULT ShearStrainXZPlane([out, retval] double* pVal);
        [id(0x00000025), propget, helpstring("property EquivalentStrain")]
        HRESULT EquivalentStrain([out, retval] double* pVal);
        [id(0x00000026), propget, helpstring("property MaxPrincipalStrain")]
        HRESULT MaxPrincipalStrain([out, retval] double* pVal);
        [id(0x00000027), propget, helpstring("property MiddlePrincipalStrain")]
        HRESULT MiddlePrincipalStrain([out, retval] double* pVal);
        [id(0x00000028), propget, helpstring("property MinPrincipalStrain")]
        HRESULT MinPrincipalStrain([out, retval] double* pVal);
        [id(0x00000029), propget, helpstring("property StrainIntensity")]
        HRESULT StrainIntensity([out, retval] double* pVal);
        [id(0x0000002a), propget, helpstring("property Temperature")]
        HRESULT Temperature([out, retval] double* pVal);
        [id(0x0000002b), propget, helpstring("property HeatFluxX")]
        HRESULT HeatFluxX([out, retval] double* pVal);
        [id(0x0000002c), propget, helpstring("property HeatFluxY")]
        HRESULT HeatFluxY([out, retval] double* pVal);
        [id(0x0000002d), propget, helpstring("property HeatFluxZ")]
        HRESULT HeatFluxZ([out, retval] double* pVal);
        [id(0x0000002e), propget, helpstring("property HeatFluxTotal")]
        HRESULT HeatFluxTotal([out, retval] double* pVal);
        [id(0x00000034), propget, helpstring("property LocationCoordinateSystem")]
        HRESULT LocationCoordinateSystem([out, retval] int* pVal);
        [id(0x00000034), propput, helpstring("property LocationCoordinateSystem")]
        HRESULT LocationCoordinateSystem([in] int pVal);
        [id(0x00000031), propget, helpstring("property LocationX")]
        HRESULT LocationX([out, retval] double* pVal);
        [id(0x00000032), propget, helpstring("property LocationY")]
        HRESULT LocationY([out, retval] double* pVal);
        [id(0x00000033), propget, helpstring("property LocationZ")]
        HRESULT LocationZ([out, retval] double* pVal);
        [id(0x000000ef), propget, helpstring("property MinMaxOutputType")]
        HRESULT MinMaxOutputType([out, retval] DSMinMax* pVal);
        [id(0x000000ef), propput, helpstring("property MinMaxOutputType")]
        HRESULT MinMaxOutputType([in] DSMinMax pVal);
        [id(0x00000035), propget, helpstring("property MaxXDeformation")]
        HRESULT MaxXDeformation([out, retval] double* pVal);
        [id(0x00000036), propget, helpstring("property MinXDeformation")]
        HRESULT MinXDeformation([out, retval] double* pVal);
        [id(0x00000037), propget, helpstring("property MaxYDeformation")]
        HRESULT MaxYDeformation([out, retval] double* pVal);
        [id(0x00000038), propget, helpstring("property MinYDeformation")]
        HRESULT MinYDeformation([out, retval] double* pVal);
        [id(0x00000039), propget, helpstring("property MaxZDeformation")]
        HRESULT MaxZDeformation([out, retval] double* pVal);
        [id(0x0000003a), propget, helpstring("property MinZDeformation")]
        HRESULT MinZDeformation([out, retval] double* pVal);
        [id(0x0000003b), propget, helpstring("property MaxTotalDeformation")]
        HRESULT MaxTotalDeformation([out, retval] double* pVal);
        [id(0x0000003c), propget, helpstring("property MinTotalDeformation")]
        HRESULT MinTotalDeformation([out, retval] double* pVal);
        [id(0x0000003d), propget, helpstring("property MaxNormalStressXAxis")]
        HRESULT MaxNormalStressXAxis([out, retval] double* pVal);
        [id(0x0000003e), propget, helpstring("property MinNormalStressXAxis")]
        HRESULT MinNormalStressXAxis([out, retval] double* pVal);
        [id(0x0000003f), propget, helpstring("property MaxNormalStressYAxis")]
        HRESULT MaxNormalStressYAxis([out, retval] double* pVal);
        [id(0x00000040), propget, helpstring("property MinNormalStressYAxis")]
        HRESULT MinNormalStressYAxis([out, retval] double* pVal);
        [id(0x00000041), propget, helpstring("property MaxNormalStressZAxis")]
        HRESULT MaxNormalStressZAxis([out, retval] double* pVal);
        [id(0x00000042), propget, helpstring("property MinNormalStressZAxis")]
        HRESULT MinNormalStressZAxis([out, retval] double* pVal);
        [id(0x00000043), propget, helpstring("property MaxShearStressXYPlane")]
        HRESULT MaxShearStressXYPlane([out, retval] double* pVal);
        [id(0x00000044), propget, helpstring("property MinShearStressXYPlane")]
        HRESULT MinShearStressXYPlane([out, retval] double* pVal);
        [id(0x00000045), propget, helpstring("property MaxShearStressYZPlane")]
        HRESULT MaxShearStressYZPlane([out, retval] double* pVal);
        [id(0x00000046), propget, helpstring("property MinShearStressYZPlane")]
        HRESULT MinShearStressYZPlane([out, retval] double* pVal);
        [id(0x00000047), propget, helpstring("property MaxShearStressXZPlane")]
        HRESULT MaxShearStressXZPlane([out, retval] double* pVal);
        [id(0x00000048), propget, helpstring("property MinShearStressXZPlane")]
        HRESULT MinShearStressXZPlane([out, retval] double* pVal);
        [id(0x00000049), propget, helpstring("property MaxEquivalentStress")]
        HRESULT MaxEquivalentStress([out, retval] double* pVal);
        [id(0x0000004a), propget, helpstring("property MinEquivalentStress")]
        HRESULT MinEquivalentStress([out, retval] double* pVal);
        [id(0x0000004b), propget, helpstring("property MaxMaxPrincipalStress")]
        HRESULT MaxMaxPrincipalStress([out, retval] double* pVal);
        [id(0x0000004c), propget, helpstring("property MinMaxPrincipalStress")]
        HRESULT MinMaxPrincipalStress([out, retval] double* pVal);
        [id(0x0000004d), propget, helpstring("property MaxMiddlePrincipalStress")]
        HRESULT MaxMiddlePrincipalStress([out, retval] double* pVal);
        [id(0x0000004e), propget, helpstring("property MinMiddlePrincipalStress")]
        HRESULT MinMiddlePrincipalStress([out, retval] double* pVal);
        [id(0x0000004f), propget, helpstring("property MaxMinPrincipalStress")]
        HRESULT MaxMinPrincipalStress([out, retval] double* pVal);
        [id(0x00000050), propget, helpstring("property MinMinPrincipalStress")]
        HRESULT MinMinPrincipalStress([out, retval] double* pVal);
        [id(0x00000051), propget, helpstring("property MaxStressIntensity")]
        HRESULT MaxStressIntensity([out, retval] double* pVal);
        [id(0x00000052), propget, helpstring("property MinStressIntensity")]
        HRESULT MinStressIntensity([out, retval] double* pVal);
        [id(0x00000053), propget, helpstring("property MaxNormalStrainXAxis")]
        HRESULT MaxNormalStrainXAxis([out, retval] double* pVal);
        [id(0x00000054), propget, helpstring("property MinNormalStrainXAxis")]
        HRESULT MinNormalStrainXAxis([out, retval] double* pVal);
        [id(0x00000055), propget, helpstring("property MaxNormalStrainYAxis")]
        HRESULT MaxNormalStrainYAxis([out, retval] double* pVal);
        [id(0x00000056), propget, helpstring("property MinNormalStrainYAxis")]
        HRESULT MinNormalStrainYAxis([out, retval] double* pVal);
        [id(0x00000057), propget, helpstring("property MaxNormalStrainZAxis")]
        HRESULT MaxNormalStrainZAxis([out, retval] double* pVal);
        [id(0x00000058), propget, helpstring("property MinNormalStrainZAxis")]
        HRESULT MinNormalStrainZAxis([out, retval] double* pVal);
        [id(0x00000059), propget, helpstring("property MaxShearStrainXYPlane")]
        HRESULT MaxShearStrainXYPlane([out, retval] double* pVal);
        [id(0x0000005a), propget, helpstring("property MinShearStrainXYPlane")]
        HRESULT MinShearStrainXYPlane([out, retval] double* pVal);
        [id(0x0000005b), propget, helpstring("property MaxShearStrainYZPlane")]
        HRESULT MaxShearStrainYZPlane([out, retval] double* pVal);
        [id(0x0000005c), propget, helpstring("property MinShearStrainYZPlane")]
        HRESULT MinShearStrainYZPlane([out, retval] double* pVal);
        [id(0x0000005d), propget, helpstring("property MaxShearStrainXZPlane")]
        HRESULT MaxShearStrainXZPlane([out, retval] double* pVal);
        [id(0x0000005e), propget, helpstring("property MinShearStrainXZPlane")]
        HRESULT MinShearStrainXZPlane([out, retval] double* pVal);
        [id(0x0000005f), propget, helpstring("property MaxEquivalentStrain")]
        HRESULT MaxEquivalentStrain([out, retval] double* pVal);
        [id(0x00000060), propget, helpstring("property MinEquivalentStrain")]
        HRESULT MinEquivalentStrain([out, retval] double* pVal);
        [id(0x00000061), propget, helpstring("property MaxMaxPrincipalStrain")]
        HRESULT MaxMaxPrincipalStrain([out, retval] double* pVal);
        [id(0x00000062), propget, helpstring("property MinMaxPrincipalStrain")]
        HRESULT MinMaxPrincipalStrain([out, retval] double* pVal);
        [id(0x00000063), propget, helpstring("property MaxMiddlePrincipalStrain")]
        HRESULT MaxMiddlePrincipalStrain([out, retval] double* pVal);
        [id(0x00000064), propget, helpstring("property MinMiddlePrincipalStrain")]
        HRESULT MinMiddlePrincipalStrain([out, retval] double* pVal);
        [id(0x00000065), propget, helpstring("property MaxMinPrincipalStrain")]
        HRESULT MaxMinPrincipalStrain([out, retval] double* pVal);
        [id(0x00000066), propget, helpstring("property MinMinPrincipalStrain")]
        HRESULT MinMinPrincipalStrain([out, retval] double* pVal);
        [id(0x00000067), propget, helpstring("property MaxStrainIntensity")]
        HRESULT MaxStrainIntensity([out, retval] double* pVal);
        [id(0x00000068), propget, helpstring("property MinStrainIntensity")]
        HRESULT MinStrainIntensity([out, retval] double* pVal);
        [id(0x00000069), propget, helpstring("property MaxTemperature")]
        HRESULT MaxTemperature([out, retval] double* pVal);
        [id(0x0000006a), propget, helpstring("property MinTemperature")]
        HRESULT MinTemperature([out, retval] double* pVal);
        [id(0x0000006b), propget, helpstring("property MaxHeatFluxX")]
        HRESULT MaxHeatFluxX([out, retval] double* pVal);
        [id(0x0000006c), propget, helpstring("property MinHeatFluxX")]
        HRESULT MinHeatFluxX([out, retval] double* pVal);
        [id(0x0000006d), propget, helpstring("property MaxHeatFluxY")]
        HRESULT MaxHeatFluxY([out, retval] double* pVal);
        [id(0x0000006e), propget, helpstring("property MinHeatFluxY")]
        HRESULT MinHeatFluxY([out, retval] double* pVal);
        [id(0x0000006f), propget, helpstring("property MaxHeatFluxZ")]
        HRESULT MaxHeatFluxZ([out, retval] double* pVal);
        [id(0x00000070), propget, helpstring("property MinHeatFluxZ")]
        HRESULT MinHeatFluxZ([out, retval] double* pVal);
        [id(0x00000071), propget, helpstring("property MaxHeatFluxTotal")]
        HRESULT MaxHeatFluxTotal([out, retval] double* pVal);
        [id(0x00000072), propget, helpstring("property MinHeatFluxTotal")]
        HRESULT MinHeatFluxTotal([out, retval] double* pVal);
        [id(0x00000073), propget, helpstring("property NumPoints")]
        HRESULT NumPoints([out, retval] unsigned int* pVal);
        [id(0x00000074), propget, helpstring("property XAxisData")]
        HRESULT XAxisData(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000075), propget, helpstring("property SequenceXDeformation")]
        HRESULT SequenceXDeformation(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000076), propget, helpstring("property SequenceYDeformation")]
        HRESULT SequenceYDeformation(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000077), propget, helpstring("property SequenceZDeformation")]
        HRESULT SequenceZDeformation(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000078), propget, helpstring("property SequenceTotalDeformation")]
        HRESULT SequenceTotalDeformation(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000079), propget, helpstring("property SequenceNormalStressXAxis")]
        HRESULT SequenceNormalStressXAxis(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x0000007a), propget, helpstring("property SequenceNormalStressYAxis")]
        HRESULT SequenceNormalStressYAxis(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x0000007b), propget, helpstring("property SequenceNormalStressZAxis")]
        HRESULT SequenceNormalStressZAxis(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x0000007c), propget, helpstring("property SequenceShearStressXYPlane")]
        HRESULT SequenceShearStressXYPlane(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x0000007d), propget, helpstring("property SequenceShearStressYZPlane")]
        HRESULT SequenceShearStressYZPlane(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x0000007e), propget, helpstring("property SequenceShearStressXZPlane")]
        HRESULT SequenceShearStressXZPlane(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x0000007f), propget, helpstring("property SequenceEquivalentStress")]
        HRESULT SequenceEquivalentStress(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000080), propget, helpstring("property SequenceMaxPrincipalStress")]
        HRESULT SequenceMaxPrincipalStress(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000081), propget, helpstring("property SequenceMiddlePrincipalStress")]
        HRESULT SequenceMiddlePrincipalStress(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000082), propget, helpstring("property SequenceMinPrincipalStress")]
        HRESULT SequenceMinPrincipalStress(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000083), propget, helpstring("property SequenceStressIntensity")]
        HRESULT SequenceStressIntensity(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000084), propget, helpstring("property SequenceNormalStrainXAxis")]
        HRESULT SequenceNormalStrainXAxis(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000085), propget, helpstring("property SequenceNormalStrainYAxis")]
        HRESULT SequenceNormalStrainYAxis(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000086), propget, helpstring("property SequenceNormalStrainZAxis")]
        HRESULT SequenceNormalStrainZAxis(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000087), propget, helpstring("property SequenceShearStrainXYPlane")]
        HRESULT SequenceShearStrainXYPlane(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000088), propget, helpstring("property SequenceShearStrainYZPlane")]
        HRESULT SequenceShearStrainYZPlane(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000089), propget, helpstring("property SequenceShearStrainXZPlane")]
        HRESULT SequenceShearStrainXZPlane(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x0000008a), propget, helpstring("property SequenceEquivalentStrain")]
        HRESULT SequenceEquivalentStrain(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x0000008b), propget, helpstring("property SequenceMaxPrincipalStrain")]
        HRESULT SequenceMaxPrincipalStrain(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x0000008c), propget, helpstring("property SequenceMiddlePrincipalStrain")]
        HRESULT SequenceMiddlePrincipalStrain(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x0000008d), propget, helpstring("property SequenceMinPrincipalStrain")]
        HRESULT SequenceMinPrincipalStrain(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x0000008e), propget, helpstring("property SequenceStrainIntensity")]
        HRESULT SequenceStrainIntensity(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x0000008f), propget, helpstring("property SequenceTemperature")]
        HRESULT SequenceTemperature(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000090), propget, helpstring("property SequenceHeatFluxX")]
        HRESULT SequenceHeatFluxX(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000091), propget, helpstring("property SequenceHeatFluxY")]
        HRESULT SequenceHeatFluxY(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000092), propget, helpstring("property SequenceHeatFluxZ")]
        HRESULT SequenceHeatFluxZ(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000093), propget, helpstring("property SequenceHeatFluxTotal")]
        HRESULT SequenceHeatFluxTotal(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000094), propget, helpstring("property FluxDensityX")]
        HRESULT FluxDensityX([out, retval] double* pVal);
        [id(0x00000095), propget, helpstring("property FluxDensityY")]
        HRESULT FluxDensityY([out, retval] double* pVal);
        [id(0x00000096), propget, helpstring("property FluxDensityZ")]
        HRESULT FluxDensityZ([out, retval] double* pVal);
        [id(0x00000097), propget, helpstring("property FluxDensityTotal")]
        HRESULT FluxDensityTotal([out, retval] double* pVal);
        [id(0x00000098), propget, helpstring("property FieldIntensityX")]
        HRESULT FieldIntensityX([out, retval] double* pVal);
        [id(0x00000099), propget, helpstring("property FieldIntensityY")]
        HRESULT FieldIntensityY([out, retval] double* pVal);
        [id(0x0000009a), propget, helpstring("property FieldIntensityZ")]
        HRESULT FieldIntensityZ([out, retval] double* pVal);
        [id(0x0000009b), propget, helpstring("property FieldIntensityTotal")]
        HRESULT FieldIntensityTotal([out, retval] double* pVal);
        [id(0x0000009c), propget, helpstring("property HasLocation")]
        HRESULT HasLocation([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
        [id(0x0000009d), propput, helpstring("property GeometrySelection")]
        HRESULT GeometrySelection([in] IDispatch* rhs);
        [id(0x0000009e), propget, helpstring("property HasValidGeometryData")]
        HRESULT HasValidGeometryData([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000009f), propget, helpstring("property ProbeType")]
        HRESULT probeType([out, retval] DSProbeType* pVal);
        [id(0x000000a0), propget, helpstring("property RotationX")]
        HRESULT RotationX([out, retval] double* pVal);
        [id(0x000000a1), propget, helpstring("property RotationY")]
        HRESULT RotationY([out, retval] double* pVal);
        [id(0x000000a2), propget, helpstring("property RotationZ")]
        HRESULT RotationZ([out, retval] double* pVal);
        [id(0x000000a9), propget, helpstring("property SequenceRotationX")]
        HRESULT SequenceRotationX(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x000000aa), propget, helpstring("property SequenceRotationY")]
        HRESULT SequenceRotationY(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x000000ab), propget, helpstring("property SequenceRotationZ")]
        HRESULT SequenceRotationZ(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x000000a3), propget, helpstring("property MaxRotationX")]
        HRESULT MaxRotationX([out, retval] double* pVal);
        [id(0x000000a6), propget, helpstring("property MinRotationX")]
        HRESULT MinRotationX([out, retval] double* pVal);
        [id(0x000000a4), propget, helpstring("property MaxRotationY")]
        HRESULT MaxRotationY([out, retval] double* pVal);
        [id(0x000000a7), propget, helpstring("property MinRotationY")]
        HRESULT MinRotationY([out, retval] double* pVal);
        [id(0x000000a5), propget, helpstring("property MaxRotationZ")]
        HRESULT MaxRotationZ([out, retval] double* pVal);
        [id(0x000000a8), propget, helpstring("property MinRotationZ")]
        HRESULT MinRotationZ([out, retval] double* pVal);
        [id(0x000000ac), propget, helpstring("property GeometrySelectionString")]
        HRESULT GeometrySelectionString([out, retval] BSTR* pVal);
        [id(0x000000ad), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x000000ae), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x000000af), propget, helpstring("property ReactionHeat")]
        HRESULT ReactionHeat([out, retval] double* pVal);
        [id(0x000000b0), propget, helpstring("property MaxReactionHeat")]
        HRESULT MaxReactionHeat([out, retval] double* pVal);
        [id(0x000000b1), propget, helpstring("property MinReactionHeat")]
        HRESULT MinReactionHeat([out, retval] double* pVal);
        [id(0x000000b2), propget, helpstring("property SequenceReactionHeat")]
        HRESULT SequenceReactionHeat(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x000000c0), propget, helpstring("property JouleHeat")]
        HRESULT JouleHeat([out, retval] double* pVal);
        [id(0x000000c1), propget, helpstring("property MaxJouleHeat")]
        HRESULT MaxJouleHeat([out, retval] double* pVal);
        [id(0x000000c2), propget, helpstring("property MinJouleHeat")]
        HRESULT MinJouleHeat([out, retval] double* pVal);
        [id(0x000000c3), propget, helpstring("property SequenceJouleHeat")]
        HRESULT SequenceJouleHeat(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x000000b3), propget, helpstring("property UnitTypeByDispid")]
        HRESULT UnitTypeByDispid(
                        [in] int dispid, 
                        [out, retval] int* unitType);
        [id(0x000000b4), propget, helpstring("property UnitStringByDispid")]
        HRESULT UnitStringByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* unitString);
        [id(0x000000f0), propget, helpstring("property VectorXAxis")]
        HRESULT VectorXAxis([out, retval] double* pVal);
        [id(0x000000f1), propget, helpstring("property VectorYAxis")]
        HRESULT VectorYAxis([out, retval] double* pVal);
        [id(0x000000f2), propget, helpstring("property VectorZAxis")]
        HRESULT VectorZAxis([out, retval] double* pVal);
        [id(0x000000f3), propget, helpstring("property TotalVector")]
        HRESULT TotalVector([out, retval] double* pVal);
        [id(0x000000f4), propget, helpstring("property MaxXVector")]
        HRESULT MaxXVector([out, retval] double* pVal);
        [id(0x000000f5), propget, helpstring("property MinXVector")]
        HRESULT MinXVector([out, retval] double* pVal);
        [id(0x000000f6), propget, helpstring("property MaxYVector")]
        HRESULT MaxYVector([out, retval] double* pVal);
        [id(0x000000f7), propget, helpstring("property MinYVector")]
        HRESULT MinYVector([out, retval] double* pVal);
        [id(0x000000f8), propget, helpstring("property MaxZVector")]
        HRESULT MaxZVector([out, retval] double* pVal);
        [id(0x000000f9), propget, helpstring("property MinZVector")]
        HRESULT MinZVector([out, retval] double* pVal);
        [id(0x000000fa), propget, helpstring("property MaxTotalVector")]
        HRESULT MaxTotalVector([out, retval] double* pVal);
        [id(0x000000fb), propget, helpstring("property MinTotalVector")]
        HRESULT MinTotalVector([out, retval] double* pVal);
        [id(0x000000fc), propget, helpstring("property SequenceXVector")]
        HRESULT SequenceXVector(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x000000fd), propget, helpstring("property SequenceYVector")]
        HRESULT SequenceYVector(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x000000fe), propget, helpstring("property SequenceZVector")]
        HRESULT SequenceZVector(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x000000ff), propget, helpstring("property SequenceTotalVector")]
        HRESULT SequenceTotalVector(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000100), propget, helpstring("property PotentialEnergy")]
        HRESULT PotentialEnergy([out, retval] double* pVal);
        [id(0x00000101), propget, helpstring("property KineticEnergy")]
        HRESULT KineticEnergy([out, retval] double* pVal);
        [id(0x00000102), propget, helpstring("property DissipativeEnergy")]
        HRESULT DissipativeEnergy([out, retval] double* pVal);
        [id(0x00000103), propget, helpstring("property TotalEnergy")]
        HRESULT TotalEnergy([out, retval] double* pVal);
        [id(0x00000104), propget, helpstring("property MaxPotentialEnergy")]
        HRESULT MaxPotentialEnergy([out, retval] double* pVal);
        [id(0x00000105), propget, helpstring("property MinPotentialEnergy")]
        HRESULT MinPotentialEnergy([out, retval] double* pVal);
        [id(0x00000106), propget, helpstring("property MaxKineticEnergy")]
        HRESULT MaxKineticEnergy([out, retval] double* pVal);
        [id(0x00000107), propget, helpstring("property MinKineticEnergy")]
        HRESULT MinKineticEnergy([out, retval] double* pVal);
        [id(0x00000108), propget, helpstring("property MaxDissipativeEnergy")]
        HRESULT MaxDissipativeEnergy([out, retval] double* pVal);
        [id(0x00000109), propget, helpstring("property MinDissipativeEnergy")]
        HRESULT MinDissipativeEnergy([out, retval] double* pVal);
        [id(0x0000010a), propget, helpstring("property MaxTotalEnergy")]
        HRESULT MaxTotalEnergy([out, retval] double* pVal);
        [id(0x0000010b), propget, helpstring("property MinTotalEnergy")]
        HRESULT MinTotalEnergy([out, retval] double* pVal);
        [id(0x0000010c), propget, helpstring("property SequencePotentialEnergy")]
        HRESULT SequencePotentialEnergy(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x0000010d), propget, helpstring("property SequenceKineticEnergy")]
        HRESULT SequenceKineticEnergy(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x0000010e), propget, helpstring("property SequenceZVector")]
        HRESULT SequenceDissipativeEnergy(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x0000010f), propget, helpstring("property SequenceTotalEnergy")]
        HRESULT SequenceTotalEnergy(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000111), propget, helpstring("property SpringForce")]
        HRESULT SpringForce([out, retval] double* pVal);
        [id(0x00000112), propget, helpstring("property SpringElongation")]
        HRESULT SpringElongation([out, retval] double* pVal);
        [id(0x00000113), propget, helpstring("property SpringVelocity")]
        HRESULT SpringVelocity([out, retval] double* pVal);
        [id(0x00000114), propget, helpstring("property SpringDampingForce")]
        HRESULT SpringDampingForce([out, retval] double* pVal);
        [id(0x00000115), propget, helpstring("property MaxSpringForce")]
        HRESULT MaxSpringForce([out, retval] double* pVal);
        [id(0x00000116), propget, helpstring("property MinSpringForce")]
        HRESULT MinSpringForce([out, retval] double* pVal);
        [id(0x00000117), propget, helpstring("property MaxSpringElongation")]
        HRESULT MaxSpringElongation([out, retval] double* pVal);
        [id(0x00000118), propget, helpstring("property MinSpringElongation")]
        HRESULT MinSpringElongation([out, retval] double* pVal);
        [id(0x00000119), propget, helpstring("property MaxSpringVelocity")]
        HRESULT MaxSpringVelocity([out, retval] double* pVal);
        [id(0x0000011a), propget, helpstring("property MinSpringVelocity")]
        HRESULT MinSpringVelocity([out, retval] double* pVal);
        [id(0x0000011b), propget, helpstring("property MaxSpringDampingForce")]
        HRESULT MaxSpringDampingForce([out, retval] double* pVal);
        [id(0x0000011c), propget, helpstring("property MinSpringDampingForce")]
        HRESULT MinSpringDampingForce([out, retval] double* pVal);
        [id(0x0000011d), propget, helpstring("property SequenceSpringForce")]
        HRESULT SequenceSpringForce(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x0000011e), propget, helpstring("property SequenceSpringElongation")]
        HRESULT SequenceSpringElongation(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x0000011f), propget, helpstring("property SequenceSpringVelocity")]
        HRESULT SequenceSpringVelocity(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000120), propget, helpstring("property SequenceSpringDampingForce")]
        HRESULT SequenceSpringDampingForce(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000121), propget, helpstring("property ReactionVoltage")]
        HRESULT ReactionVoltage([out, retval] double* pVal);
        [id(0x00000122), propget, helpstring("property MaxReactionVoltage")]
        HRESULT MaxReactionVoltage([out, retval] double* pVal);
        [id(0x00000123), propget, helpstring("property MinReactionVoltage")]
        HRESULT MinReactionVoltage([out, retval] double* pVal);
        [id(0x60020106), propget]
        HRESULT NumComponents([out, retval] int* plNumComponents);
        [id(0x60020107), propget]
        HRESULT ComponentStr(
                        [in] int lComponent, 
                        [out, retval] BSTR* pVal);
        [id(0x00000126), propget, helpstring("property AdjustmentReaction")]
        HRESULT AdjustmentReaction([out, retval] double* pVal);
        [id(0x00000127), propget, helpstring("property PreloadReaction")]
        HRESULT PreloadReaction([out, retval] double* pVal);
        [id(0x00000128), propget, helpstring("property SequenceAdjustmentReaction")]
        HRESULT SequenceAdjustmentReaction(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000129), propget, helpstring("property SequencePreloadReaction")]
        HRESULT SequencePreloadReaction(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x0000012a), propget, helpstring("property MinAdjustmentReaction")]
        HRESULT MinAdjustmentReaction([out, retval] double* pVal);
        [id(0x0000012b), propget, helpstring("property MinPreloadReaction")]
        HRESULT MinPreloadReaction([out, retval] double* pVal);
        [id(0x0000012c), propget, helpstring("property MaxAdjustmentReaction")]
        HRESULT MaxAdjustmentReaction([out, retval] double* pVal);
        [id(0x0000012d), propget, helpstring("property MaxPreloadReaction")]
        HRESULT MaxPreloadReaction([out, retval] double* pVal);
        [id(0x0000012e), propget, helpstring("property GenPlaneStrainFiberLengthChange")]
        HRESULT GenPlaneStrainFiberLengthChange([out, retval] double* pVal);
        [id(0x0000012f), propget, helpstring("property GenPlaneStrainMomentX")]
        HRESULT GenPlaneStrainMomentX([out, retval] double* pVal);
        [id(0x00000130), propget, helpstring("property GenPlaneStrainMomentY")]
        HRESULT GenPlaneStrainMomentY([out, retval] double* pVal);
        [id(0x00000131), propget, helpstring("property GenPlaneStrainForce")]
        HRESULT GenPlaneStrainForce([out, retval] double* pVal);
        [id(0x00000132), propget, helpstring("property GenPlaneStrainMaxFiberLengthChange")]
        HRESULT GenPlaneStrainMaxFiberLengthChange([out, retval] double* pVal);
        [id(0x00000133), propget, helpstring("property GenPlaneStrainMaxMomentX")]
        HRESULT GenPlaneStrainMaxMomentX([out, retval] double* pVal);
        [id(0x00000134), propget, helpstring("property GenPlaneStrainMaxMomentY")]
        HRESULT GenPlaneStrainMaxMomentY([out, retval] double* pVal);
        [id(0x00000135), propget, helpstring("property GenPlaneStrainMaxForce")]
        HRESULT GenPlaneStrainMaxForce([out, retval] double* pVal);
        [id(0x00000136), propget, helpstring("property GenPlaneStrainMinFiberLengthChange")]
        HRESULT GenPlaneStrainMinFiberLengthChange([out, retval] double* pVal);
        [id(0x00000137), propget, helpstring("property GenPlaneStrainMinMomentX")]
        HRESULT GenPlaneStrainMinMomentX([out, retval] double* pVal);
        [id(0x00000138), propget, helpstring("property GenPlaneStrainMinMomentX")]
        HRESULT GenPlaneStrainMinMomentY([out, retval] double* pVal);
        [id(0x00000139), propget, helpstring("property GenPlaneStrainMinForce")]
        HRESULT GenPlaneStrainMinForce([out, retval] double* pVal);
        [id(0x0000013a), propget, helpstring("property GenPlaneStrainSequenceFiberLengthChange")]
        HRESULT GenPlaneStrainSequenceFiberLengthChange(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x0000013b), propget, helpstring("property GenPlaneStrainSequenceMomentX")]
        HRESULT GenPlaneStrainSequenceMomentX(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x0000013c), propget, helpstring("property GenPlaneStrainSequenceMomentY")]
        HRESULT GenPlaneStrainSequenceMomentY(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x0000013d), propget, helpstring("property GenPlaneStrainSequenceForce")]
        HRESULT GenPlaneStrainSequenceForce(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x0000013e), propget, helpstring("property ContactSide")]
        HRESULT ContactSide([out, retval] DSContactSideScoping* pVal);
        [id(0x0000013e), propput, helpstring("property ContactSide")]
        HRESULT ContactSide([in] DSContactSideScoping pVal);
        [id(0x000000ba), propget, helpstring("property ParamNameByDispid")]
        HRESULT ParamNameByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* paramName);
        [id(0x0000013f), propget, helpstring("property StrainEnergy")]
        HRESULT StrainEnergy([out, retval] double* pVal);
        [id(0x00000140), propget, helpstring("property ExternalEnergy")]
        HRESULT ExternalEnergy([out, retval] double* pVal);
        [id(0x00000141), propget, helpstring("property MaxStrainEnergy")]
        HRESULT MaxStrainEnergy([out, retval] double* pVal);
        [id(0x00000142), propget, helpstring("property MinStrainEnergy")]
        HRESULT MinStrainEnergy([out, retval] double* pVal);
        [id(0x00000143), propget, helpstring("property MaxExternalEnergy")]
        HRESULT MaxExternalEnergy([out, retval] double* pVal);
        [id(0x00000144), propget, helpstring("property MinExternalEnergy")]
        HRESULT MinExternalEnergy([out, retval] double* pVal);
        [id(0x00000145), propget, helpstring("property SequenceExternalEnergy")]
        HRESULT SequenceExternalEnergy(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000146), propget, helpstring("property SequenceStrainEnergy")]
        HRESULT SequenceStrainEnergy(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000147), propget, helpstring("property ResultRelativity")]
        HRESULT ResultRelativity([out, retval] ResultRelativityType* pVal);
        [id(0x00000147), propput, helpstring("property ResultRelativity")]
        HRESULT ResultRelativity([in] ResultRelativityType pVal);
        [id(0x00000148), propget, helpstring("property NodeID")]
        HRESULT NodeId([out, retval] int* pVal);
        [id(0x00000149), propget, helpstring("property RMSValue")]
        HRESULT RMSValue([out, retval] double* pVal);
        [id(0x000001c5), propget, helpstring("property RMSPercentage")]
        HRESULT RMSPercentage([out, retval] double* pVal);
        [id(0x000001c4), propget, helpstring("property ExpFreqValue")]
        HRESULT ExpFreqValue([out, retval] double* pVal);
        [id(0x0000014a), propget, helpstring("property ResultDistance")]
        HRESULT ResultDistance([out, retval] double* pVal);
        [id(0x0000014b), propget, helpstring("property ElectricPotential")]
        HRESULT ElectricPotential([out, retval] double* pVal);
        [id(0x0000014d), propget, helpstring("property MaxElectricPotential")]
        HRESULT MaxElectricPotential([out, retval] double* pVal);
        [id(0x0000014c), propget, helpstring("property MinElectricPotential")]
        HRESULT MinElectricPotential([out, retval] double* pVal);
        [id(0x0000014e), propget, helpstring("property SequenceElectricPotential")]
        HRESULT SequenceElectricPotential(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x0000014f), propget, helpstring("property SequenceReactionVoltage")]
        HRESULT SequenceReactionVoltage(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000150), propget, helpstring("property SequenceElectricFieldX")]
        HRESULT SequenceElectricFieldX(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000151), propget, helpstring("property SequenceElectricFieldY")]
        HRESULT SequenceElectricFieldY(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000152), propget, helpstring("property SequenceElectricFieldZ")]
        HRESULT SequenceElectricFieldZ(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000153), propget, helpstring("property SequenceElectricFieldTotal")]
        HRESULT SequenceElectricFieldTotal(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000154), propget, helpstring("property SequenceCurrentDensityX")]
        HRESULT SequenceCurrentDensityX(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000155), propget, helpstring("property SequenceCurrentDensityY")]
        HRESULT SequenceCurrentDensityY(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000156), propget, helpstring("property SequenceCurrentDensityZ")]
        HRESULT SequenceCurrentDensityZ(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000157), propget, helpstring("property SequenceCurrentDensityTotal")]
        HRESULT SequenceCurrentDensityTotal(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x000000bb), propget, helpstring("property RemotePointSelection")]
        HRESULT RemotePointSelection([out, retval] dsid* pVal);
        [id(0x000000bb), propput, helpstring("property RemotePointSelection")]
        HRESULT RemotePointSelection([in] dsid pVal);
        [id(0x00000158), propget, helpstring("property Time")]
        HRESULT Time([out, retval] double* pVal);
        [id(0x00000159), propget, helpstring("property LoadStep")]
        HRESULT LoadStep([out, retval] int* pVal);
        [id(0x0000015a), propget, helpstring("property Substep")]
        HRESULT Substep([out, retval] int* pVal);
        [id(0x0000015b), propget, helpstring("property IterationNumber")]
        HRESULT IterationNumber([out, retval] double* pVal);
        [id(0x0000015c), propget, helpstring("property SymmetryMultiplier")]
        HRESULT SymmetryMultiplier([out, retval] double* pVal);
        [id(0x0000015c), propput, helpstring("property SymmetryMultiplier")]
        HRESULT SymmetryMultiplier([in] double pVal);
        [id(0x0000015d), propget, helpstring("property SequenceFluxDensityX")]
        HRESULT SequenceFluxDensityX(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x0000015e), propget, helpstring("property SequenceFluxDensityY")]
        HRESULT SequenceFluxDensityY(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x0000015f), propget, helpstring("property SequenceFluxDensityZ")]
        HRESULT SequenceFluxDensityZ(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000160), propget, helpstring("property SequenceFluxDensityTotal")]
        HRESULT SequenceFluxDensityTotal(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000161), propget, helpstring("property SequenceFieldIntensityX")]
        HRESULT SequenceFieldIntensityX(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000162), propget, helpstring("property SequenceFieldIntensityY")]
        HRESULT SequenceFieldIntensityY(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000163), propget, helpstring("property SequenceFieldIntensityZ")]
        HRESULT SequenceFieldIntensityZ(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000164), propget, helpstring("property SequenceFieldIntensityTotal")]
        HRESULT SequenceFieldIntensityTotal(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000165), propget, helpstring("property EmagCoEnergy")]
        HRESULT EmagCoEnergy([out, retval] double* pVal);
        [id(0x00000166), propget, helpstring("property MaxEmagCoEnergy")]
        HRESULT MaxEmagCoEnergy([out, retval] double* pVal);
        [id(0x00000167), propget, helpstring("property MinEmagCoEnergy")]
        HRESULT MinEmagCoEnergy([out, retval] double* pVal);
        [id(0x00000168), propget, helpstring("property SequenceEmagCoEnergy")]
        HRESULT SequenceEmagCoEnergy(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000169), propget, helpstring("property EmagEdgeFlux")]
        HRESULT EmagEdgeFlux([out, retval] double* pVal);
        [id(0x0000016a), propget, helpstring("property MaxEmagEdgeFlux")]
        HRESULT MaxEmagEdgeFlux([out, retval] double* pVal);
        [id(0x0000016b), propget, helpstring("property MinEmagEdgeFlux")]
        HRESULT MinEmagEdgeFlux([out, retval] double* pVal);
        [id(0x0000016c), propget, helpstring("property SequenceEmagEdgeFlux")]
        HRESULT SequenceEmagEdgeFlux(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x0000016d), propget, helpstring("property WasSolvedFromGraphics")]
        HRESULT WasSolvedFromGraphics([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000016d), propput, helpstring("property WasSolvedFromGraphics")]
        HRESULT WasSolvedFromGraphics([in] VARIANT_BOOL pVal);
        [id(0x0000016e), propget, helpstring("property AxialForce")]
        HRESULT AxialForce([out, retval] double* pVal);
        [id(0x0000016f), propget, helpstring("property Torque")]
        HRESULT Torque([out, retval] double* pVal);
        [id(0x00000170), propget, helpstring("property ShearForceAtI")]
        HRESULT ShearForceAtI([out, retval] double* pVal);
        [id(0x00000171), propget, helpstring("property ShearForceAtJ")]
        HRESULT ShearForceAtJ([out, retval] double* pVal);
        [id(0x00000172), propget, helpstring("property MomentAtI")]
        HRESULT MomentAtI([out, retval] double* pVal);
        [id(0x00000173), propget, helpstring("property MomentAtJ")]
        HRESULT MomentAtJ([out, retval] double* pVal);
        [id(0x00000174), propget, helpstring("property MaxAxialForce")]
        HRESULT MaxAxialForce([out, retval] double* pVal);
        [id(0x00000175), propget, helpstring("property MaxTorque")]
        HRESULT MaxTorque([out, retval] double* pVal);
        [id(0x00000176), propget, helpstring("property MaxShearForceAtI")]
        HRESULT MaxShearForceAtI([out, retval] double* pVal);
        [id(0x00000177), propget, helpstring("property MaxShearForceAtJ")]
        HRESULT MaxShearForceAtJ([out, retval] double* pVal);
        [id(0x00000178), propget, helpstring("property MaxMomentAtI")]
        HRESULT MaxMomentAtI([out, retval] double* pVal);
        [id(0x00000179), propget, helpstring("property MaxMomentAtJ")]
        HRESULT MaxMomentAtJ([out, retval] double* pVal);
        [id(0x0000017a), propget, helpstring("property MinAxialForce")]
        HRESULT MinAxialForce([out, retval] double* pVal);
        [id(0x0000017b), propget, helpstring("property MinTorque")]
        HRESULT MinTorque([out, retval] double* pVal);
        [id(0x0000017c), propget, helpstring("property MinShearForceAtI")]
        HRESULT MinShearForceAtI([out, retval] double* pVal);
        [id(0x0000017d), propget, helpstring("property MinShearForceAtJ")]
        HRESULT MinShearForceAtJ([out, retval] double* pVal);
        [id(0x0000017e), propget, helpstring("property MinMomentAtI")]
        HRESULT MinMomentAtI([out, retval] double* pVal);
        [id(0x0000017f), propget, helpstring("property MinMomentAtJ")]
        HRESULT MinMomentAtJ([out, retval] double* pVal);
        [id(0x00000180), propget, helpstring("property BeamConnectionSelection")]
        HRESULT BeamConnectionSelection([out, retval] dsid* pVal);
        [id(0x00000180), propput, helpstring("property BeamConnectionSelection")]
        HRESULT BeamConnectionSelection([in] dsid pVal);
        [id(0x00000181), propget, helpstring("property SequenceAxialForce")]
        HRESULT SequenceAxialForce(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000182), propget, helpstring("property SequenceTorque")]
        HRESULT SequenceTorque(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000183), propget, helpstring("property SequenceShearForceAtI")]
        HRESULT SequenceShearForceAtI(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000184), propget, helpstring("property SequenceShearForceAtJ")]
        HRESULT SequenceShearForceAtJ(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000185), propget, helpstring("property SequenceMomentAtI")]
        HRESULT SequenceMomentAtI(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000186), propget, helpstring("property SequenceMomentAtJ")]
        HRESULT SequenceMomentAtJ(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000188), propget, helpstring("property NetRadiation")]
        HRESULT NetRadiation([out, retval] double* pVal);
        [id(0x00000189), propget, helpstring("property EmittedRadiation")]
        HRESULT EmittedRadiation([out, retval] double* pVal);
        [id(0x0000018a), propget, helpstring("property ReflectedRadiation")]
        HRESULT ReflectedRadiation([out, retval] double* pVal);
        [id(0x0000018b), propget, helpstring("property IncidentRadiation")]
        HRESULT IncidentRadiation([out, retval] double* pVal);
        [id(0x0000018c), propget, helpstring("property AccelerationG")]
        HRESULT AccelerationG([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000018c), propput, helpstring("property AccelerationG")]
        HRESULT AccelerationG([in] VARIANT_BOOL pVal);
        [id(0x0000018d), helpstring("method DoSnapToMesh")]
        HRESULT DoSnapToMesh([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000018e), helpstring("method CanSnapToMesh")]
        HRESULT CanSnapToMesh([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000018f), helpstring("method UpdateHitPoint")]
        HRESULT UpdateHitPoint(
                        [in] double X, 
                        [in] double Y, 
                        [in] double Z);
        [id(0x000001c3), helpstring("method UpdateRigidHitPoint")]
        HRESULT UpdateRigidHitPoint();
        [id(0x00000194), propget, helpstring("property Frequency")]
        HRESULT Frequency([out, retval] double* pVal);
        [id(0x00000194), propput, helpstring("property Frequency")]
        HRESULT Frequency([in] double pVal);
        [id(0x00000195), propget, helpstring("property PhaseAngle")]
        HRESULT PhaseAngle([out, retval] double* pVal);
        [id(0x00000195), propput, helpstring("property PhaseAngle")]
        HRESULT PhaseAngle([in] double pVal);
        [id(0x0000019f), propget, helpstring("property PhaseIncrement")]
        HRESULT PhaseIncrement([out, retval] double* pVal);
        [id(0x0000019f), propput, helpstring("property PhaseIncrement")]
        HRESULT PhaseIncrement([in] double pVal);
        [id(0x00000190), propget, helpstring("method Identifier")]
        HRESULT Identifier([out, retval] BSTR* pVal);
        [id(0x00000190), propput, helpstring("method Identifier")]
        HRESULT Identifier([in] BSTR pVal);
        [id(0x00000191), propget, helpstring("property ActualFrequency")]
        HRESULT ActualFrequency([out, retval] double* pVal);
        [id(0x00000192), propget, helpstring("method SetDriver")]
        HRESULT SetDriver([out, retval] DSSetDriverStyle* pVal);
        [id(0x00000192), propput, helpstring("method SetDriver")]
        HRESULT SetDriver([in] DSSetDriverStyle pVal);
        [id(0x00000193), propget, helpstring("method SetNumber")]
        HRESULT SetNumber([out, retval] unsigned int* pVal);
        [id(0x00000193), propput, helpstring("method SetNumber")]
        HRESULT SetNumber([in] unsigned int pVal);
        [id(0x00000196), propget, helpstring("property IsSolved")]
        HRESULT IsSolved([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000197), helpstring("method CreateTabbedFile")]
        HRESULT CreateTabbedFile(
                        [in] BSTR filePath, 
                        [out, retval] BSTR* fileText);
        [id(0x00000198), propget, helpstring("property Suppressed")]
        HRESULT Suppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000198), propput, helpstring("property Suppressed")]
        HRESULT Suppressed([in] VARIANT_BOOL pVal);
        [id(0x00000199), propget, helpstring("property ResultScopeBy")]
        HRESULT ResultScopeBy([out, retval] ResultScopeByType* pVal);
        [id(0x00000199), propput, helpstring("property ResultScopeBy")]
        HRESULT ResultScopeBy([in] ResultScopeByType pVal);
        [id(0x0000019a), propget, helpstring("property ResultScaleFactor")]
        HRESULT ResultScaleFactor([out, retval] double* pVal);
        [id(0x0000019a), propput, helpstring("property ResultScaleFactor")]
        HRESULT ResultScaleFactor([in] double pVal);
        [id(0x0000019b), propget, helpstring("property ResultPSDProbability")]
        HRESULT ResultPSDProbability([out, retval] double* pVal);
        [id(0x0000019b), propput, helpstring("property ResultPSDProbability")]
        HRESULT ResultPSDProbability([in] double pVal);
        [id(0x0000019c), propget, helpstring("property SpringConnectionSelection")]
        HRESULT SpringConnectionSelection([out, retval] dsid* pVal);
        [id(0x0000019c), propput, helpstring("property SpringConnectionSelection")]
        HRESULT SpringConnectionSelection([in] dsid pVal);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x0000019d), propget, helpstring("property SurfaceArea")]
        HRESULT SurfaceArea([out, retval] double* pVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x0000019e), helpstring("method RenameBasedOnDefinition")]
        HRESULT RenameBasedOnDefinition();
        [id(0x6002019e), propget]
        HRESULT DoesProbeHaveComplexResult([out, retval] VARIANT_BOOL* pVal);
        [id(0x000000bc), propget, helpstring("property NominalUnitTypeByDispid")]
        HRESULT NominalUnitTypeByDispid(
                        [in] int dispid, 
                        [out, retval] int* unitType);
        [id(0x000001a0), propget, helpstring("property UnitType")]
        HRESULT unitType([out, retval] int* unitType);
        [id(0x000001a1), propget, helpstring("property BearingConnectionSelection")]
        HRESULT BearingConnectionSelection([out, retval] dsid* pVal);
        [id(0x000001a1), propput, helpstring("property BearingConnectionSelection")]
        HRESULT BearingConnectionSelection([in] dsid pVal);
        [id(0x000001a2), propget, helpstring("property BearingForce1")]
        HRESULT BearingForce1([out, retval] double* pVal);
        [id(0x000001a3), propget, helpstring("property BearingForce2")]
        HRESULT BearingForce2([out, retval] double* pVal);
        [id(0x000001a4), propget, helpstring("property BearingElongation1")]
        HRESULT BearingElongation1([out, retval] double* pVal);
        [id(0x000001a5), propget, helpstring("property BearingElongation2")]
        HRESULT BearingElongation2([out, retval] double* pVal);
        [id(0x000001a6), propget, helpstring("property BearingVelocity1")]
        HRESULT BearingVelocity1([out, retval] double* pVal);
        [id(0x000001a7), propget, helpstring("property BearingVelocity2")]
        HRESULT BearingVelocity2([out, retval] double* pVal);
        [id(0x000001a8), propget, helpstring("property BearingDampingForce1")]
        HRESULT BearingDampingForce1([out, retval] double* pVal);
        [id(0x000001a9), propget, helpstring("property BearingDampingForce2")]
        HRESULT BearingDampingForce2([out, retval] double* pVal);
        [id(0x000001aa), propget, helpstring("property MaxBearingForce1")]
        HRESULT MaxBearingForce1([out, retval] double* pVal);
        [id(0x000001ab), propget, helpstring("property MaxBearingForce2")]
        HRESULT MaxBearingForce2([out, retval] double* pVal);
        [id(0x000001ac), propget, helpstring("property MinBearingForce1")]
        HRESULT MinBearingForce1([out, retval] double* pVal);
        [id(0x000001ad), propget, helpstring("property MinBearingForce2")]
        HRESULT MinBearingForce2([out, retval] double* pVal);
        [id(0x000001ae), propget, helpstring("property MaxBearingElongation1")]
        HRESULT MaxBearingElongation1([out, retval] double* pVal);
        [id(0x000001af), propget, helpstring("property MaxBearingElongation2")]
        HRESULT MaxBearingElongation2([out, retval] double* pVal);
        [id(0x000001b0), propget, helpstring("property MinBearingElongation1")]
        HRESULT MinBearingElongation1([out, retval] double* pVal);
        [id(0x000001b1), propget, helpstring("property MinBearingElongation2")]
        HRESULT MinBearingElongation2([out, retval] double* pVal);
        [id(0x000001b2), propget, helpstring("property MaxBearingVelocity1")]
        HRESULT MaxBearingVelocity1([out, retval] double* pVal);
        [id(0x000001b3), propget, helpstring("property MaxBearingVelocity2")]
        HRESULT MaxBearingVelocity2([out, retval] double* pVal);
        [id(0x000001b4), propget, helpstring("property MinBearingVelocity1")]
        HRESULT MinBearingVelocity1([out, retval] double* pVal);
        [id(0x000001b5), propget, helpstring("property MinBearingVelocity2")]
        HRESULT MinBearingVelocity2([out, retval] double* pVal);
        [id(0x000001b6), propget, helpstring("property MaxBearingDampingForce1")]
        HRESULT MaxBearingDampingForce1([out, retval] double* pVal);
        [id(0x000001b7), propget, helpstring("property MaxBearingDampingForce2")]
        HRESULT MaxBearingDampingForce2([out, retval] double* pVal);
        [id(0x000001b8), propget, helpstring("property MinBearingDampingForce1")]
        HRESULT MinBearingDampingForce1([out, retval] double* pVal);
        [id(0x000001b9), propget, helpstring("property MinBearingDampingForce2")]
        HRESULT MinBearingDampingForce2([out, retval] double* pVal);
        [id(0x000001ba), propget, helpstring("property SequenceBearingForce1")]
        HRESULT SequenceBearingForce1(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x000001bb), propget, helpstring("property SequenceBearingForce2")]
        HRESULT SequenceBearingForce2(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x000001bc), propget, helpstring("property SequenceBearingElongation1")]
        HRESULT SequenceBearingElongation1(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x000001bd), propget, helpstring("property SequenceBearingElongation2")]
        HRESULT SequenceBearingElongation2(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x000001be), propget, helpstring("property SequenceBearingVelocity1")]
        HRESULT SequenceBearingVelocity1(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x000001bf), propget, helpstring("property SequenceBearingVelocity2")]
        HRESULT SequenceBearingVelocity2(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x000001c0), propget, helpstring("property SequenceBearingDampingForce1")]
        HRESULT SequenceBearingDampingForce1(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x000001c1), propget, helpstring("property SequenceBearingDampingForce2")]
        HRESULT SequenceBearingDampingForce2(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x000001c2), helpstring("method StringIDForProbeType")]
        HRESULT StringIDForProbeType([out, retval] BSTR* STR);
    };

    typedef enum {
        GEOMETRY_SELECTION = 0,
        COORDINATE_SYSTEM_SELECTION = 1,
        NAMED_SELECTION = 2,
        BOUNDARY_CONDITION_SELECTION = 3,
        NO_SELECTION = 4,
        CONTACT_REGION_SELECTION = 5,
        REMOTE_POINT_SELECTION = 6,
        BEAM_CONNECTION_SELECTION = 7,
        USER_DEFINED_COORDINATES = 8,
        MESH_CONNECTION_SELECTION = 9,
        SPRING_CONNECTION_SELECTION = 10,
        SLICE_PLANE_SURFACE_SELECTION = 11,
        BEARING_CONNECTION_SELECTION = 12
    } DSLocationDefinitionMethod;

    typedef enum {
        kSelFreqRangeTypeFull = 0,
        kSelFreqRangeTypeManual = 1
    } DSProbeSelFreqRangeType;

    typedef enum {
        kGeometryScopedProbe = 0,
        kLocationProbe = 1,
        kDSIdScopedProbe = 2,
        kGlobalScopedProbe = 3
    } DSProbeType;

    typedef enum {
        DISPID_PrototypeMaterial = 10,
        DISPID_PrototypeMaterialPath = 11,
        DISPID_PrototypePart = 12,
        DISPID_PrototypeHidden = 13,
        DISPID_PrototypeSuppressed = 14,
        DISPID_PrototypeBoundingBoxLengthX = 15,
        DISPID_PrototypeBoundingBoxLengthY = 16,
        DISPID_PrototypeBoundingBoxLengthZ = 17,
        DISPID_PrototypeVolume = 18,
        DISPID_PrototypeSheetSurfaceArea = 19,
        DISPID_PrototypeMass = 20,
        DISPID_PrototypeMaterialIndex = 21,
        DISPID_PrototypeGeometryType = 22,
        DISPID_PrototypeMaterialName = 23,
        DISPID_PrototypeThickness = 24,
        DISPID_PrototypeComments = 25,
        DISPID_PrototypeFigures = 26,
        DISPID_PrototypeCADParameters = 27,
        DISPID_PrototypeNodes = 28,
        DISPID_PrototypeElements = 29,
        DISPID_PrototypeAddComment = 30,
        DISPID_PrototypeAddFigure = 31,
        DISPID_PrototypeUpdateParameter = 32,
        DISPID_PrototypeGetDefaultParameterValue = 33,
        DISPID_PrototypeCrossSectionArea = 34,
        DISPID_PrototypeCrossSectionIYY = 35,
        DISPID_PrototypeCrossSectionIZZ = 36,
        DISPID_PrototypeWireLength = 37,
        DISPID_PrototypeBrickIntegrationScheme = 38,
        DISPID_PrototypeIsFieldBody = 39,
        DISPID_PrototypeMeshMetric = 40,
        DISPID_PrototypeMeshMetricMin = 41,
        DISPID_PrototypeMeshMetricMax = 42,
        DISPID_PrototypeMeshMetricAverage = 43,
        DISPID_PrototypeMeshMetricSTDV = 44,
        DISPID_PrototypeGetThicknessInPartSystem = 45,
        DISPID_PrototypeSurfaceArea = 51,
        DISPID_PrototypeMeshVolume = 52,
        DISPID_PrototypeVolumeRatio = 53,
        DISPID_PrototypeNumSurfaces = 54,
        DISPID_PrototypeMeshThickness = 55,
        DISPID_PrototypeMeshType = 56,
        DISPID_PrototypeVersion = 57,
        DISPID_PrototypeRefined = 58,
        DISPID_PrototypeMeshOnPart = 59,
        DISPID_PrototypeXCentroid = 60,
        DISPID_PrototypeYCentroid = 61,
        DISPID_PrototypeZCentroid = 62,
        DISPID_PrototypeXXInertia = 63,
        DISPID_PrototypeYYInertia = 64,
        DISPID_PrototypeZZInertia = 65,
        DISPID_PrototypeXYInertia = 66,
        DISPID_PrototypeYZInertia = 67,
        DISPID_PrototypeZXInertia = 68,
        DISPID_PrototypeXXCInertia = 69,
        DISPID_PrototypeYYCInertia = 70,
        DISPID_PrototypeZZCInertia = 71,
        DISPID_PrototypeXYCInertia = 72,
        DISPID_PrototypeYZCInertia = 73,
        DISPID_PrototypeZXCInertia = 74,
        DISPID_Prototype00Principal = 75,
        DISPID_Prototype01Principal = 76,
        DISPID_Prototype02Principal = 77,
        DISPID_Prototype10Principal = 78,
        DISPID_Prototype11Principal = 79,
        DISPID_Prototype12Principal = 80,
        DISPID_Prototype20Principal = 81,
        DISPID_Prototype21Principal = 82,
        DISPID_Prototype22Principal = 83,
        DISPID_PrototypePartMesh = 84,
        DISPID_PrototypeNumRetries = 85,
        DISPID_PrototypeSolidSurfaceArea = 100,
        DISPID_PrototypeMeshBC = 101,
        DISPID_PrototypeTopoId = 102,
        DISPID_PrototypeMaterialFromEDA = 103,
        DISPID_PrototypeModel2DBehavior = 104,
        DISPID_PrototypeCoordinateSystemSelection = 105,
        DISPID_PrototypeNonlinearMaterialEffects = 106,
        DISPID_PrototypeThermalStrainCalculation = 107,
        DISPID_PrototypeAddCommandEditor = 108,
        DISPID_PrototypeNumTurns = 109,
        DISPID_PrototypeEDA = 110,
        DISPID_PrototypeCommandEditors = 111,
        DISPID_PrototypeEDAMaterial = 112,
        DISPID_PrototypeMaterialPolarizationDirection = 113,
        DISPID_PrototypeIsWindingBody = 114,
        DISPID_PrototypeRemoveMaterialIfNotUsed = 115,
        DISPID_PrototypeGasketBody = 116,
        DISPID_PrototypeMassCentroidX = 200,
        DISPID_PrototypeMassCentroidY = 201,
        DISPID_PrototypeMassCentroidZ = 202,
        DISPID_PrototypeMassMomentOfInertiaP1 = 203,
        DISPID_PrototypeMassMomentOfInertiaP2 = 204,
        DISPID_PrototypeMassMomentOfInertiaP3 = 205,
        DISPID_PrototypeStiffnessBehavior = 206,
        DISPID_PrototypeBeamSection = 207,
        DISPID_PrototypeImages = 208,
        DISPID_PrototypeAddImage = 209,
        DISPID_PrototypeStiffnessBehaviorChangeCausedRemesh = 210,
        DISPID_PrototypeThicknessMode = 211,
        DISPID_PrototypeUnitTypeByDispid = 212,
        DISPID_PrototypeUnitStringByDispid = 213,
        DISPID_PrototypeUserNameChange = 214,
        DISPID_PrototypeParamNameByDispid = 215,
        DISPID_PrototypeOffsetType = 216,
        DISPID_PrototypeOffsetX = 217,
        DISPID_PrototypeOffsetY = 218,
        DISPID_PrototypeOffsetAutomaticOrManual = 219,
        DISPID_PrototypeShellOffsetType = 220,
        DISPID_PrototypeUseReferenceTemperature = 221,
        DISPID_PrototypeReferenceTemperature = 222,
        DISPID_PrototypeInfluenceBody = 223,
        DISPID_PrototypePhase = 224,
        DISPID_PrototypeModelType = 225,
        DISPID_PrototypeReferenceFrame = 226,
        DISPID_PrototypeVirtualBody = 227,
        DISPID_PrototypeMaterialPointSelection = 228,
        DISPID_PrototypeMakeThicknessManual = 229,
        DISPID_MaterialDependentAnalysisSettings = 230,
        DISPID_PrototypeGenBody = 231,
        DISPID_PrototypeCellsAlongCircumference = 232,
        DISPID_PrototypeCellsThroughThickness = 233,
        DISPID_PrototypePipeInternalDiameter = 234,
        DISPID_PrototypePipeExternalDiameter = 235,
        DISPID_PrototypePipeThickness = 236,
        DISPID_PrototypeVirtualBodyDefineBy = 237,
        DISPID_PrototypeAddVirtualBodyFluidSurface = 238,
        DISPID_PrototypeGroupThisBody = 239,
        DISPID_PrototypeBodyGroupPriority = 240,
        DISPID_PrototypeEDAMaterialTransferId = 241,
        DISPID_PrototypeTransferId = 242,
        DISPID_PrototypeisRemainSuppressed = 243,
        DISPID_PrototypeIs2DSheetFacingPositiveZ = 244,
        DISPID_PrototypeSuppressedParameterized = 245,
        DISPID_PrototypePropertiesRefreshed = 246,
        DISPID_PrototypeFluidBodyCrossArea = 249,
        DISPID_PrototypeFluidDiscretization = 250,
        DISPID_PrototypeIsComposite = 251,
        DISPID_PrototypeBeamSolverCrossSectionType = 252,
        DISPID_PrototypeCrossSectionType = 253,
        DISPID_PrototypeBehavior = 254,
        DISPID_PrototypeHomogeneousMaterialName = 255,
        DISPID_PrototypeHomogeneousThickness = 256,
        DISPID_PrototypeHomogeneousShellOffsetType = 257,
        DISPID_PrototypeHomogeneousMembraneOffset = 258,
        DISPID_PrototypeMaterialColor = 259
    } kDispId_ProtoType;

    [
      odl,
      uuid(B933905B-6290-4379-8AAF-A02E587A88D8),
      helpstring("IDSPrototypeAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSPrototypeAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x0000000c), propget, helpstring("property Part")]
        HRESULT part([out, retval] IDispatch** ppVal);
        [id(0x0000000d), propget, helpstring("property Hidden")]
        HRESULT Hidden([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000000d), propput, helpstring("property Hidden")]
        HRESULT Hidden([in] VARIANT_BOOL pVal);
        [id(0x0000000e), propget, helpstring("property Suppressed")]
        HRESULT Suppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000000e), propput, helpstring("property Suppressed")]
        HRESULT Suppressed([in] VARIANT_BOOL pVal);
        [id(0x0000000f), propget, helpstring("property BoundingBoxLengthX")]
        HRESULT BoundingBoxLengthX([out, retval] double* pVal);
        [id(0x00000010), propget, helpstring("property BoundingBoxLengthY")]
        HRESULT BoundingBoxLengthY([out, retval] double* pVal);
        [id(0x00000011), propget, helpstring("property BoundingBoxLengthZ")]
        HRESULT BoundingBoxLengthZ([out, retval] double* pVal);
        [id(0x00000012), propget, helpstring("property Volume")]
        HRESULT Volume([out, retval] double* pVal);
        [id(0x00000014), propget, helpstring("property Mass")]
        HRESULT Mass([out, retval] double* pVal);
        [id(0x000000c8), propget, helpstring("property MassCentroidX")]
        HRESULT MassCentroidX([out, retval] double* pVal);
        [id(0x000000c9), propget, helpstring("property MassCentroidY")]
        HRESULT MassCentroidY([out, retval] double* pVal);
        [id(0x000000ca), propget, helpstring("property MassCentroidZ")]
        HRESULT MassCentroidZ([out, retval] double* pVal);
        [id(0x000000cb), propget, helpstring("property MassMomentOfInertiaP1")]
        HRESULT MassMomentOfInertiaP1([out, retval] double* pVal);
        [id(0x000000cc), propget, helpstring("property MassMomentOfInertiaP2")]
        HRESULT MassMomentOfInertiaP2([out, retval] double* pVal);
        [id(0x000000cd), propget, helpstring("property MassMomentOfInertiaP3")]
        HRESULT MassMomentOfInertiaP3([out, retval] double* pVal);
        [id(0x000000f4), propget, helpstring("property Is2DSheetFacingPositiveZ")]
        HRESULT Is2DSheetFacingPositiveZ([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000013), propget, helpstring("property SheetSurfaceArea")]
        HRESULT SheetSurfaceArea([out, retval] double* pVal);
        [id(0x00000025), propget, helpstring("property WireLength")]
        HRESULT WireLength([out, retval] double* pVal);
        [id(0x00000016), propget, helpstring("property GeometryType")]
        HRESULT GeometryType([out, retval] DSGeometryType* pVal);
        [id(0x00000017), propget, helpstring("property MaterialName")]
        HRESULT MaterialName([out, retval] BSTR* pVal);
        [id(0x00000017), propput, helpstring("property MaterialName")]
        HRESULT MaterialName([in] BSTR pVal);
        [id(0x000000ce), propget, helpstring("property StiffnessBehavior")]
        HRESULT StiffnessBehavior([out, retval] DSStiffnessBehavior* pVal);
        [id(0x000000ce), propput, helpstring("property StiffnessBehavior")]
        HRESULT StiffnessBehavior([in] DSStiffnessBehavior pVal);
        [id(0x00000026), propget, helpstring("property BrickIntegrationScheme")]
        HRESULT BrickIntegrationScheme([out, retval] DSBrickIntegrationScheme* pVal);
        [id(0x00000026), propput, helpstring("property BrickIntegrationScheme")]
        HRESULT BrickIntegrationScheme([in] DSBrickIntegrationScheme pVal);
        [id(0x0000006a), propget, helpstring("property NonlinearMaterialEffects")]
        HRESULT NonlinearMaterialEffects([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000006a), propput, helpstring("property NonlinearMaterialEffects")]
        HRESULT NonlinearMaterialEffects([in] VARIANT_BOOL pVal);
        [id(0x0000006b), propget, helpstring("property ThermalStrainCalculation")]
        HRESULT ThermalStrainCalculation([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000006b), propput, helpstring("property ThermalStrainCalculation")]
        HRESULT ThermalStrainCalculation([in] VARIANT_BOOL pVal);
        [id(0x00000069), propget, helpstring("property CoordinateSystemSelection")]
        HRESULT CoordinateSystemSelection([out, retval] int* pVal);
        [id(0x00000069), propput, helpstring("property CoordinateSystemSelection")]
        HRESULT CoordinateSystemSelection([in] int pVal);
        [id(0x0000001e), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x000000cf), propget, helpstring("property BeamSection")]
        HRESULT BeamSection([out, retval] IDispatch** ppDisp);
        [id(0x000000cf), propput, helpstring("property BeamSection")]
        HRESULT BeamSection([in] IDispatch* ppDisp);
        [id(0x00000068), propget, helpstring("property Model2DBehavior")]
        HRESULT Model2DBehavior([out, retval] DS2DModelBehavior* pVal);
        [id(0x00000068), propput, helpstring("property Model2DBehavior")]
        HRESULT Model2DBehavior([in] DS2DModelBehavior pVal);
        [id(0x00000018), propget, helpstring("property Thickness - valid for sheets only")]
        HRESULT Thickness([out, retval] double* pVal);
        [id(0x00000018), propput, helpstring("property Thickness - valid for sheets only")]
        HRESULT Thickness([in] double pVal);
        [id(0x00000019), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x0000001a), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x0000001b), propget, helpstring("property CADParameters")]
        HRESULT CADParameters([out, retval] IDispatch** ppDisp);
        [id(0x0000001f), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x00000020), helpstring("method UpdateParameter")]
        HRESULT UpdateParameter(
                        [in] int index, 
                        [in] VARIANT dValue);
        [id(0x00000021), helpstring("method GetDefaultParameterValue")]
        HRESULT GetDefaultParameterValue(
                        [in] int index, 
                        [out, retval] VARIANT* pValue);
        [id(0x0000001c), propget, helpstring("property Nodes")]
        HRESULT Nodes([out, retval] int* pVal);
        [id(0x0000001d), propget, helpstring("property Elements")]
        HRESULT Elements([out, retval] int* pVal);
        [id(0x00000022), propget, helpstring("property CrossSectionArea")]
        HRESULT CrossSectionArea([out, retval] double* pVal);
        [id(0x00000023), propget, helpstring("property CrossSectionIYY")]
        HRESULT CrossSectionIYY([out, retval] double* pVal);
        [id(0x00000024), propget, helpstring("property CrossSectionIZZ")]
        HRESULT CrossSectionIZZ([out, retval] double* pVal);
        [id(0x00000027), propget, helpstring("property IsFieldBody")]
        HRESULT IsFieldBody([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000028), propget, helpstring("property MeshMetric")]
        HRESULT MeshMetric([out, retval] int* pVal);
        [id(0x00000029), propget, helpstring("property MeshMetricMin")]
        HRESULT MeshMetricMin([out, retval] double* pVal);
        [id(0x0000002a), propget, helpstring("property MeshMetricMax")]
        HRESULT MeshMetricMax([out, retval] double* pVal);
        [id(0x0000002b), propget, helpstring("property MeshMetricAverage")]
        HRESULT MeshMetricAverage([out, retval] double* pVal);
        [id(0x0000002c), propget, helpstring("property MeshMetricSTDV")]
        HRESULT MeshMetricSTDV([out, retval] double* pVal);
        [id(0x00000033), propget, helpstring("property SurfaceArea")]
        HRESULT SurfaceArea([out, retval] double* pVal);
        [id(0x00000034), propget, helpstring("property MeshVolume ")]
        HRESULT MeshVolume([out, retval] double* pVal);
        [id(0x00000035), propget, helpstring("property VolumeRatio")]
        HRESULT VolumeRatio([out, retval] double* pVal);
        [id(0x00000036), propget, helpstring("property NumSurfaces")]
        HRESULT NumSurfaces([out, retval] int* pVal);
        [id(0x00000037), propget, helpstring("property MeshThickness  ")]
        HRESULT MeshThickness([out, retval] double* pVal);
        [id(0x00000038), propget, helpstring("property MeshType   ")]
        HRESULT MeshType([out, retval] int* pVal);
        [id(0x00000039), propget, helpstring("property Version    ")]
        HRESULT Version([out, retval] int* pVal);
        [id(0x0000003a), propget, helpstring("property Refined    ")]
        HRESULT Refined([out, retval] int* pVal);
        [id(0x0000003b), propget, helpstring("property MeshOnPart ")]
        HRESULT MeshOnPart([out, retval] int* pVal);
        [id(0x0000003c), propget, helpstring("property XCentroid  ")]
        HRESULT XCentroid([out, retval] double* pVal);
        [id(0x0000003d), propget, helpstring("property YCentroid  ")]
        HRESULT YCentroid([out, retval] double* pVal);
        [id(0x0000003e), propget, helpstring("property ZCentroid  ")]
        HRESULT ZCentroid([out, retval] double* pVal);
        [id(0x0000003f), propget, helpstring("property XXInertia  ")]
        HRESULT XXInertia([out, retval] double* pVal);
        [id(0x00000040), propget, helpstring("property YYInertia  ")]
        HRESULT YYInertia([out, retval] double* pVal);
        [id(0x00000041), propget, helpstring("property ZZInertia  ")]
        HRESULT ZZInertia([out, retval] double* pVal);
        [id(0x00000042), propget, helpstring("property XYInertia  ")]
        HRESULT XYInertia([out, retval] double* pVal);
        [id(0x00000043), propget, helpstring("property YZInertia  ")]
        HRESULT YZInertia([out, retval] double* pVal);
        [id(0x00000044), propget, helpstring("property ZXInertia  ")]
        HRESULT ZXInertia([out, retval] double* pVal);
        [id(0x00000045), propget, helpstring("property XXCInertia ")]
        HRESULT XXCInertia([out, retval] double* pVal);
        [id(0x00000046), propget, helpstring("property YYCInertia ")]
        HRESULT YYCInertia([out, retval] double* pVal);
        [id(0x00000047), propget, helpstring("property ZZCInertia ")]
        HRESULT ZZCInertia([out, retval] double* pVal);
        [id(0x00000048), propget, helpstring("property XYCInertia ")]
        HRESULT XYCInertia([out, retval] double* pVal);
        [id(0x00000049), propget, helpstring("property YZCInertia ")]
        HRESULT YZCInertia([out, retval] double* pVal);
        [id(0x0000004a), propget, helpstring("property ZXCInertia ")]
        HRESULT ZXCInertia([out, retval] double* pVal);
        [id(0x0000004b), propget, helpstring("property Principal00")]
        HRESULT Principal00([out, retval] double* pVal);
        [id(0x0000004c), propget, helpstring("property Principal01")]
        HRESULT Principal01([out, retval] double* pVal);
        [id(0x0000004d), propget, helpstring("property Principal02")]
        HRESULT Principal02([out, retval] double* pVal);
        [id(0x0000004e), propget, helpstring("property Principal10")]
        HRESULT Principal10([out, retval] double* pVal);
        [id(0x0000004f), propget, helpstring("property Principal11")]
        HRESULT Principal11([out, retval] double* pVal);
        [id(0x00000050), propget, helpstring("property Principal12")]
        HRESULT Principal12([out, retval] double* pVal);
        [id(0x00000051), propget, helpstring("property Principal20")]
        HRESULT Principal20([out, retval] double* pVal);
        [id(0x00000052), propget, helpstring("property Principal21")]
        HRESULT Principal21([out, retval] double* pVal);
        [id(0x00000053), propget, helpstring("property Principal22")]
        HRESULT Principal22([out, retval] double* pVal);
        [id(0x00000054), propget, helpstring("property PartMesh ")]
        HRESULT PartMesh([out, retval] IDispatch** pVal);
        [id(0x00000064), propget, helpstring("property SolidSurfaceArea")]
        HRESULT SolidSurfaceArea([out, retval] double* pVal);
        [id(0x00000065), propget, helpstring("property MeshBC")]
        HRESULT MeshBC(
                        [in] int envID, 
                        [out, retval] IDispatch** pVal);
        [id(0x00000066), propget, helpstring("property TopoId")]
        HRESULT topoId([out, retval] unsigned int* pVal);
        [id(0x00000067), propput, helpstring("property MaterialFromEDA")]
        HRESULT MaterialFromEDA([in] IDispatch* rhs);
        [id(0x0000006c), helpstring("method AddCommandEditor")]
        HRESULT AddCommandEditor([out, retval] IDispatch** ppVal);
        [id(0x0000006d), propget, helpstring("property NumTurns")]
        HRESULT NumTurns([out, retval] unsigned int* pVal);
        [id(0x0000006d), propput, helpstring("property NumTurns")]
        HRESULT NumTurns([in] unsigned int pVal);
        [id(0x0000006e), propget, helpstring("property UseEDA")]
        HRESULT UseEDA([out, retval] VARIANT_BOOL* __MIDL__IDSPrototypeAuto0001);
        [id(0x0000006f), propget, helpstring("property CommandEditors")]
        HRESULT CommandEditors([out, retval] IDispatch** ppDisp);
        [id(0x00000070), propget, helpstring("property EDAMaterial")]
        HRESULT EDAMaterial([out, retval] IDispatch** ppDisp);
        [id(0x000000f1), propget, helpstring("property EDAMaterialTransferId")]
        HRESULT EDAMaterialTransferId([out, retval] BSTR* pVal);
        [id(0x00000071), propget, helpstring("property MaterialPolarizationDirection")]
        HRESULT MaterialPolarizationDirection([out, retval] DSMaterialPolarizationDirection* pVal);
        [id(0x00000071), propput, helpstring("property MaterialPolarizationDirection")]
        HRESULT MaterialPolarizationDirection([in] DSMaterialPolarizationDirection pVal);
        [id(0x00000072), propget, helpstring("property IsWindingBody")]
        HRESULT IsWindingBody([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
        [id(0x000000d3), propget, helpstring("property ThicknessMode")]
        HRESULT ThicknessMode([out, retval] VARIANT_BOOL* pVal);
        [id(0x000000d0), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x000000d1), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x000000d4), propget, helpstring("property UnitTypeByDispid")]
        HRESULT UnitTypeByDispid(
                        [in] int dispid, 
                        [out, retval] int* unitType);
        [id(0x000000d5), propget, helpstring("property UnitStringByDispid")]
        HRESULT UnitStringByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* unitString);
        [id(0x000000d6), propget, helpstring("property UserNameChange")]
        HRESULT UserNameChange([out, retval] VARIANT_BOOL* pVal);
        [id(0x000000d6), propput, helpstring("property UserNameChange")]
        HRESULT UserNameChange([in] VARIANT_BOOL pVal);
        [id(0x000000d7), propget, helpstring("property ParamNameByDispid")]
        HRESULT ParamNameByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* paramName);
        [id(0x000000db), propget, helpstring("property AutomaticOrManual")]
        HRESULT AutomaticOrManual([out, retval] DSAutoOrMan* pVal);
        [id(0x000000db), propput, helpstring("property AutomaticOrManual")]
        HRESULT AutomaticOrManual([in] DSAutoOrMan pVal);
        [id(0x000000d8), propget, helpstring("property OffsetType")]
        HRESULT OffsetType([out, retval] DSBeamOffsetType* pVal);
        [id(0x000000d8), propput, helpstring("property OffsetType")]
        HRESULT OffsetType([in] DSBeamOffsetType pVal);
        [id(0x000000d9), propget, helpstring("property OffsetX")]
        HRESULT OffsetX([out, retval] double* pVal);
        [id(0x000000d9), propput, helpstring("property OffsetX")]
        HRESULT OffsetX([in] double pVal);
        [id(0x000000da), propget, helpstring("property OffsetY")]
        HRESULT OffsetY([out, retval] double* pVal);
        [id(0x000000da), propput, helpstring("property OffsetY")]
        HRESULT OffsetY([in] double pVal);
        [id(0x000000dc), propget, helpstring("property ShellOffsetType")]
        HRESULT ShellOffsetType([out, retval] DSShellOffsetType* pVal);
        [id(0x000000dc), propput, helpstring("property ShellOffsetType")]
        HRESULT ShellOffsetType([in] DSShellOffsetType pVal);
        [id(0x000000ef), propget, helpstring("property GroupThisBody")]
        HRESULT GroupThisBody([out, retval] int* pVal);
        [id(0x000000ef), propput, helpstring("property GroupThisBody")]
        HRESULT GroupThisBody([in] int pVal);
        [id(0x000000f0), propget, helpstring("property BodyGroupPriority")]
        HRESULT BodyGroupPriority([out, retval] int* pVal);
        [id(0x000000f0), propput, helpstring("property BodyGroupPriority")]
        HRESULT BodyGroupPriority([in] int pVal);
        [id(0x000000dd), propget, helpstring("property UseReferenceTemperature")]
        HRESULT UseReferenceTemperature([out, retval] VARIANT_BOOL* pVal);
        [id(0x000000dd), propput, helpstring("property UseReferenceTemperature")]
        HRESULT UseReferenceTemperature([in] VARIANT_BOOL pVal);
        [id(0x000000de), propget, helpstring("property ReferenceTemperature")]
        HRESULT ReferenceTemperature([out, retval] double* pVal);
        [id(0x000000de), propput, helpstring("property ReferenceTemperature")]
        HRESULT ReferenceTemperature([in] double pVal);
        [id(0x000000df), propget, helpstring("method IsInfluenceBody: return 1 if this body simply influences meshing (and is not a real topology)")]
        HRESULT IsInfluenceBody([out, retval] int* piVal);
        [id(0x000000e0), propget, helpstring("property Phase")]
        HRESULT Phase([out, retval] int* pVal);
        [id(0x000000e0), propput, helpstring("property Phase")]
        HRESULT Phase([in] int pVal);
        [id(0x00000055), propget, helpstring("property NumRetries")]
        HRESULT NumRetries([out, retval] int* pVal);
        [id(0x000000e1), propget, helpstring("property ModelType")]
        HRESULT ModelType([out, retval] EPrototypeModelType* pVal);
        [id(0x000000e1), propput, helpstring("property ModelType")]
        HRESULT ModelType([in] EPrototypeModelType pVal);
        [id(0x0000002d), helpstring("method GetThicknessInPartSystem")]
        HRESULT GetThicknessInPartSystem([out, retval] double* pVal);
        [id(0x000000e3), propget, helpstring("method IsVirtualBody: return 1 if this body was created for assembly meshing (and is not a real topology)")]
        HRESULT IsVirtualBody([out, retval] int* piVal);
        [id(0x000000e4), propget, helpstring("property MaterialPointSelection")]
        HRESULT MaterialPointSelection([out, retval] int* pVal);
        [id(0x000000e4), propput, helpstring("property MaterialPointSelection")]
        HRESULT MaterialPointSelection([in] int pVal);
        [id(0x000000e5), helpstring("method MakeThicknessManual")]
        HRESULT MakeThicknessManual([in] dsid thicknessId);
        [id(0x000000e6), helpstring("method InitializeMaterialDependentAnalysisSettings")]
        HRESULT InitializeMaterialDependentAnalysisSettings([in] dsid matDSId);
        [id(0x000000e7), propget, helpstring("method IsGenBody: return 1 if this body is part of a generalized body part")]
        HRESULT IsGenBody([out, retval] int* piVal);
        [id(0x000000e8), propget, helpstring("property CellsAlongCircumference")]
        HRESULT CellsAlongCircumference([out, retval] unsigned int* pVal);
        [id(0x000000e8), propput, helpstring("property CellsAlongCircumference")]
        HRESULT CellsAlongCircumference([in] unsigned int pVal);
        [id(0x000000e9), propget, helpstring("property CellsThroughThickness")]
        HRESULT CellsThroughThickness([out, retval] unsigned int* pVal);
        [id(0x000000e9), propput, helpstring("property CellsThroughThickness")]
        HRESULT CellsThroughThickness([in] unsigned int pVal);
        [id(0x000000ed), propget, helpstring("property VirtualBodyDefineByMeshGroup")]
        HRESULT VirtualBodyDefineByMeshGroup([out, retval] int* pVal);
        [id(0x000000ed), propput, helpstring("property VirtualBodyDefineByMeshGroup")]
        HRESULT VirtualBodyDefineByMeshGroup([in] int pVal);
        [id(0x000000ee), helpstring("method AddVirtualBodyFluidSurface")]
        HRESULT AddVirtualBodyFluidSurface([out, retval] IDispatch** ppVal);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x000000f3), propget, helpstring("property isRemainSuppressed")]
        HRESULT isRemainSuppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x000000f2), propget, helpstring("property TransferId")]
        HRESULT TransferId([out, retval] BSTR* pVal);
        [id(0x000000f2), propput, helpstring("property TransferId")]
        HRESULT TransferId([in] BSTR pVal);
        [id(0x000000f5), propget, helpstring("tells whether suppression is parameterized")]
        HRESULT SuppressedParameterized([out, retval] VARIANT_BOOL* piVal);
        [id(0x000000f9), propget, helpstring("property FluidBodyCrossArea")]
        HRESULT FluidBodyCrossArea([out, retval] double* pVal);
        [id(0x000000f9), propput, helpstring("property FluidBodyCrossArea")]
        HRESULT FluidBodyCrossArea([in] double pVal);
        [id(0x000000fa), propget, helpstring("property FluidDiscretization")]
        HRESULT FluidDiscretization([out, retval] int* pVal);
        [id(0x000000fa), propput, helpstring("property FluidDiscretization")]
        HRESULT FluidDiscretization([in] int pVal);
        [id(0x000000fb), propget, helpstring("property IsCompositeSolid")]
        HRESULT IsComposite([out, retval] VARIANT_BOOL* pvbVal);
        [id(0x00002719), propget, helpstring("property ReadOnly")]
        HRESULT ReadOnly([out, retval] VARIANT_BOOL* pvbVal);
        [id(0x000000fd), propget, helpstring("property CrossSectionType")]
        HRESULT CrossSectionType([out, retval] BSTR* pVal);
        [id(0x000000fe), propget, helpstring("method Behavior")]
        HRESULT Behavior([out, retval] DSPrototypeBehavior* pVal);
        [id(0x000000fe), propput, helpstring("method Behavior")]
        HRESULT Behavior([in] DSPrototypeBehavior pVal);
        [id(0x00000103), propget, helpstring("property MaterialColor")]
        HRESULT MaterialColor([out, retval] unsigned int* piColor);
        [id(0x000000fc), propget, helpstring("property BeamSolverCrossSectionType")]
        HRESULT BeamSolverCrossSectionType([out, retval] eBeamType* pVal);
    };

    typedef enum {
        kStiffnessBehaviorDeformable = 0,
        kStiffnessBehaviorRigid = 1,
        kStiffnessBehaviorBeam = 2,
        kStiffnessBehaviorRigidBeam = 3,
        kStiffnessBehaviorSuperelement = 4,
        kStiffnessBehaviorGasket = 5
    } DSStiffnessBehavior;

    typedef enum {
        kFull = 0,
        kReduced = 1
    } DSBrickIntegrationScheme;

    typedef enum {
        kPlaneStress = 0,
        kAxiSymmetric = 1,
        kPlaneStrain = 2,
        kGeneralizedPlaneStrain = 3,
        kByBody = 4
    } DS2DModelBehavior;

    typedef enum {
        kMatPolarDir_PosX = 0,
        kMatPolarDir_NegX = 1
    } DSMaterialPolarizationDirection;

    typedef enum {
        kDSBeamCentroid = 0,
        kDSBeamShearCenter = 1,
        kDSBeamOrigin = 2,
        kDSBeamUserDefined = 3
    } DSBeamOffsetType;

    typedef enum {
        kDSShellTop = 0,
        kDSShellMiddle = 1,
        kDSShellBottom = 2,
        kDSShellUserDefined = 3
    } DSShellOffsetType;

    typedef enum {
        kPrototypeBeam = 0,
        kPrototypeFluid = 1,
        kPrototypePipe = 2
    } EPrototypeModelType;

    typedef enum {
        kBehaviorNone = 0,
        kBehaviorConstructionBody = 1
    } DSPrototypeBehavior;

    typedef enum {
        kBeamTypeUndefined = 0,
        kBeamTypeRECT = 1,
        kBeamTypeQUAD = 2,
        kBeamTypeCSOL = 3,
        kBeamTypeCTUB = 4,
        kBeamTypeCHAN = 5,
        kBeamTypeZ = 6,
        kBeamTypeL = 7,
        kBeamTypeI = 8,
        kBeamTypeT = 9,
        kBeamTypeHATS = 10,
        kBeamTypeHREC = 11,
        kBeamTypeASEC = 12,
        kBeamTypeMESH = 13,
        kBeamTypeEnd = 14
    } eBeamType;

    typedef enum {
        DISPID_PrototypeGroupCADFile = 10,
        DISPID_PrototypeGroupCADType = 11,
        DISPID_PrototypeGroupCADUnits = 12,
        DISPID_PrototypeGroupElementControl = 13,
        DISPID_PrototypeGroupAssembly = 14,
        DISPID_PrototypeGroupGeometryType = 15,
        DISPID_PrototypeGroupBoundingBoxLengthX = 16,
        DISPID_PrototypeGroupBoundingBoxLengthY = 17,
        DISPID_PrototypeGroupBoundingBoxLengthZ = 18,
        DISPID_PrototypeGroupVolume = 19,
        DISPID_PrototypeGroupMass = 20,
        DISPID_PrototypeGroupSheetSurfaceArea = 21,
        DISPID_PrototypeGroupComments = 22,
        DISPID_PrototypeGroupFigures = 23,
        DISPID_PrototypeGroupPrototypes = 24,
        DISPID_PrototypeGroupNodes = 25,
        DISPID_PrototypeGroupElements = 26,
        DISPID_PrototypeGroupModel2DBehavior = 27,
        DISPID_PrototypeGroupFiberLength = 28,
        DISPID_PrototypeGroupRotationAboutX = 29,
        DISPID_PrototypeGroupRotationAboutY = 30,
        DISPID_PrototypeGroupCADParameters = 100,
        DISPID_PrototypeGroupBodyGroups = 101,
        DISPID_PrototypeGroupImportSolids = 102,
        DISPID_PrototypeGroupImportSheets = 103,
        DISPID_PrototypeGroupImportWires = 104,
        DISPID_PrototypeGroupUseCADAssociativity = 105,
        DISPID_PrototypeGroupUseParamProcessing = 106,
        DISPID_PrototypeGroupParameterKey = 107,
        DISPID_PrototypeGroupUseCADAttribTrans = 108,
        DISPID_PrototypeGroupCADAttribPrefixes = 109,
        DISPID_PrototypeGroupMaterialPropTrans = 110,
        DISPID_PrototypeGroupAttachViaTempFile = 111,
        DISPID_PrototypeGroupReaderSaveFile = 112,
        DISPID_PrototypeGroupAttachTempDirectory = 113,
        DISPID_PrototypeGroupCanChangeCADUnits = 114,
        DISPID_PrototypeGroupUseCADNamedSelTrans = 115,
        DISPID_PrototypeGroupCADNamedSelPrefixes = 116,
        DISPID_PrototypeGroupDoSmartUpdate = 117,
        DISPID_PrototypeGroupProcessFlatAssembly = 118,
        DISPID_PrototypeGroupPointMasses = 119,
        DISPID_PrototypeGroupAnalysisType = 120,
        DISPID_PrototypeGroupSecondaryImportPref = 121,
        DISPID_PrototypeGroupHasEnclosure = 122,
        DISPID_PrototypeGroupImportCoordinateSystems = 123,
        DISPID_PrototypeGroupImages = 124,
        DISPID_PrototypeGroupAddImage = 125,
        DISPID_PrototypeGroupUnitTypeByDispid = 126,
        DISPID_PrototypeGroupUnitStringByDispid = 127,
        DISPID_PrototypeGroupUseInstances = 128,
        DISPID_PrototypeGroupParamNameByDispid = 129,
        DISPID_PrototypeGroupImportEnclosureAndSymmetry = 130,
        DISPID_PrototypeGroupScaleFactor = 131,
        DISPID_PrototypeGroupDecomposeDisjointFaces = 132,
        DISPID_PrototypeGroupComparePartsOnUpdate = 133,
        DISPID_PrototypeGroupComparePartsTolerance = 134,
        DISPID_PrototypeGroupCoordinateSystemKey = 150,
        DISPID_PrototypeGroupMeshMetric = 135,
        DISPID_PrototypeGroupMeshMetricMin = 136,
        DISPID_PrototypeGroupMeshMetricMax = 137,
        DISPID_PrototypeGroupMeshMetricAverage = 138,
        DISPID_PrototypeGroupMeshMetricSTDV = 139,
        DISPID_PrototypeGroupSTLSDTAlgorithm = 140,
        DISPID_PrototypeGroupSTLCurvatureAlgorithmSharpEdgesAngle = 141,
        DISPID_PrototypeGroupSTLCurvatureAlgorithmPlanesToleranceAngle = 142,
        DISPID_PrototypeGroupSTLCurvatureAlgorithmIgnoreSecondaryNodes = 143,
        DISPID_PrototypeGroupSTLAngleAlgorithmCutAngle = 144,
        DISPID_PrototypeGroupSTLAngleAlgorithmToleranceAngle = 145,
        DISPID_PrototypeGroupAddComment = 40,
        DISPID_PrototypeGroupAddFigure = 41,
        DISPID_PrototypeGroupRefreshAssembly = 42,
        DISPID_PrototypeGroupGetSelectedPrototypes = 43,
        DISPID_PrototypeGroupUpdateParameter = 44,
        DISPID_PrototypeGroupGetDefaultParameterValue = 45,
        DISPID_PrototypeGroupNumParts = 46,
        DISPID_PrototypeGroupNumActiveParts = 47,
        DISPID_PrototypeGroupAddPointMass = 48,
        DISPID_PrototypeGroupGenAutomaticConductors = 49,
        DISPID_PrototypeGroupRefreshAssemblyFromParam = 50,
        DISPID_PrototypeGroupGeometryFromModelAssembly = 97,
        DISPID_PrototypeGroupSurfaceArea = 51,
        DISPID_PrototypeGroupMeshVolume = 52,
        DISPID_PrototypeGroupNumSurfaces = 54,
        DISPID_PrototypeGroupXCentroid = 60,
        DISPID_PrototypeGroupYCentroid = 61,
        DISPID_PrototypeGroupZCentroid = 62,
        DISPID_PrototypeGroupMeshCollection = 70,
        DISPID_PrototypeGroupDisplayStyle = 80,
        DISPID_PrototypeGroupConfigurationSet = 90,
        DISPID_PrototypeGroupAddThermalPointMass = 91,
        DISPID_PrototypeGroupAddVirtualBodyGroup = 92,
        DISPID_PrototypeGroupAddThickness = 93,
        DISPID_PrototypeGroupSelectFacesWithMultipleThicknesses = 94,
        DISPID_PrototypeGroupAddExternalThicknessGroup = 95,
        DISPID_PrototypeGroupExternalThicknessGroups = 96,
        DISPID_PrototypeGroupAddElementOrientation = 77,
        DISPID_PrototypeGroupAddDistributedMass = 78,
        DISPID_PrototypeGroupNumActiveBodyGroups = 81,
        DISPID_PrototypeGroupNumGeometryUpdatesInSession = 82,
        DISPID_PrototypeGroupGetJSON = 83
    } kDispId_PrototypeGroup;

    [
      odl,
      uuid(0A22FF4D-BD0E-422E-8889-947A2B3E4FC2),
      helpstring("IDSPrototypeGroupAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSPrototypeGroupAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x0000000a), propget, helpstring("property CADFile")]
        HRESULT CADFile([out, retval] BSTR* pVal);
        [id(0x0000000a), propput, helpstring("property CADFile")]
        HRESULT CADFile([in] BSTR pVal);
        [id(0x0000000b), propget, helpstring("property CADType")]
        HRESULT CADType([out, retval] BSTR* pVal);
        [id(0x0000000c), propget, helpstring("property CADUnits")]
        HRESULT CADUnits([out, retval] WBUnitSystemType* pVal);
        [id(0x0000000c), propput, helpstring("property CADUnits")]
        HRESULT CADUnits([in] WBUnitSystemType pVal);
        [id(0x0000000d), propget, helpstring("property ElementControl")]
        HRESULT ElementControl([out, retval] DSElementControl* pVal);
        [id(0x0000000d), propput, helpstring("property ElementControl")]
        HRESULT ElementControl([in] DSElementControl pVal);
        [id(0x0000000e), propget, helpstring("property Assembly")]
        HRESULT Assembly([out, retval] IDispatch** ppVal);
        [id(0x0000000f), propget, helpstring("property GeometryType")]
        HRESULT GeometryType([out, retval] DSGeometryType* pVal);
        [id(0x00000010), propget, helpstring("property BoundingBoxLengthX")]
        HRESULT BoundingBoxLengthX([out, retval] double* pVal);
        [id(0x00000011), propget, helpstring("property BoundingBoxLengthY")]
        HRESULT BoundingBoxLengthY([out, retval] double* pVal);
        [id(0x00000012), propget, helpstring("property BoundingBoxLengthZ")]
        HRESULT BoundingBoxLengthZ([out, retval] double* pVal);
        [id(0x00000013), propget, helpstring("property Volume")]
        HRESULT Volume([out, retval] double* pVal);
        [id(0x00000014), propget, helpstring("property Mass")]
        HRESULT Mass([out, retval] double* pVal);
        [id(0x00000015), propget, helpstring("property SheetSurfaceArea")]
        HRESULT SheetSurfaceArea([out, retval] double* pVal);
        [id(0x00000028), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x00000030), helpstring("method AddPointMass")]
        HRESULT AddPointMass(
                        [in] IDispatch* piSelectMgr, 
                        [out, retval] IDispatch** pDisp);
        [id(0x0000005b), helpstring("method AddThermalPointMass")]
        HRESULT AddThermalPointMass(
                        [in] IDispatch* piSelectMgr, 
                        [out, retval] IDispatch** pDisp);
        [id(0x00000031), helpstring("method genAutomaticConductors")]
        HRESULT genAutomaticConductors(unsigned int idEnv);
        [id(0x00000016), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x00000017), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000018), propget, helpstring("property Prototypes")]
        HRESULT Prototypes([out, retval] IDispatch** ppDisp);
        [id(0x00000065), propget, helpstring("property BodyGroups")]
        HRESULT BodyGroups([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x00000029), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** ppDisp);
        [id(0x0000002a), helpstring("method RefreshAssembly")]
        HRESULT RefreshAssembly(
                        [in] IDispatch* pDisp, 
                        [out] VARIANT_BOOL* pvbAttachmentsRemoved);
        [id(0x0000002b), helpstring("method GetSelectedPrototypes")]
        HRESULT GetSelectedPrototypes(
                        [in] IDispatch* pSelMgr, 
                        [out, retval] IDispatch** ppSelList);
        [id(0x0000002c), helpstring("method UpdateParameter")]
        HRESULT UpdateParameter(
                        [in] int index, 
                        [in] VARIANT dValue);
        [id(0x0000002d), helpstring("method GetDefaultParameterValue")]
        HRESULT GetDefaultParameterValue(
                        [in] int index, 
                        [out, retval] VARIANT* pValue);
        [id(0x0000002e), propget, helpstring("property NumParts")]
        HRESULT NumParts([out, retval] int* pVal);
        [id(0x0000002f), propget, helpstring("property NumActiveParts")]
        HRESULT NumActiveParts([out, retval] int* pVal);
        [id(0x00000019), propget, helpstring("property Nodes")]
        HRESULT Nodes([out, retval] int* pVal);
        [id(0x0000001a), propget, helpstring("property Elements")]
        HRESULT Elements([out, retval] int* pVal);
        [id(0x00000064), propget, helpstring("property CADParameters")]
        HRESULT CADParameters([out, retval] IDispatch** ppDisp);
        [id(0x00000033), propget, helpstring("property SurfaceArea")]
        HRESULT SurfaceArea([out, retval] double* pVal);
        [id(0x00000034), propget, helpstring("property MeshVolume ")]
        HRESULT MeshVolume([out, retval] double* pVal);
        [id(0x00000036), propget, helpstring("property NumSurfaces")]
        HRESULT NumSurfaces([out, retval] int* pVal);
        [id(0x0000003c), propget, helpstring("property XCentroid  ")]
        HRESULT XCentroid([out, retval] double* pVal);
        [id(0x0000003d), propget, helpstring("property YCentroid  ")]
        HRESULT YCentroid([out, retval] double* pVal);
        [id(0x0000003e), propget, helpstring("property ZCentroid  ")]
        HRESULT ZCentroid([out, retval] double* pVal);
        [id(0x00000066), propget, helpstring("property ImportSolids")]
        HRESULT ImportSolids([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000066), propput, helpstring("property ImportSolids")]
        HRESULT ImportSolids([in] VARIANT_BOOL pVal);
        [id(0x00000067), propget, helpstring("property ImportSheets")]
        HRESULT ImportSheets([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000067), propput, helpstring("property ImportSheets")]
        HRESULT ImportSheets([in] VARIANT_BOOL pVal);
        [id(0x00000068), propget, helpstring("property ImportWires")]
        HRESULT ImportWires([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000068), propput, helpstring("property ImportWires")]
        HRESULT ImportWires([in] VARIANT_BOOL pVal);
        [id(0x0000006a), propget, helpstring("property UseParamProcessing")]
        HRESULT UseParamProcessing([out, retval] unsigned int* pVal);
        [id(0x0000006a), propput, helpstring("property UseParamProcessing")]
        HRESULT UseParamProcessing([in] unsigned int pVal);
        [id(0x0000006b), propget, helpstring("property ParameterKey")]
        HRESULT ParameterKey([out, retval] BSTR* pVal);
        [id(0x0000006b), propput, helpstring("property ParameterKey")]
        HRESULT ParameterKey([in] BSTR pVal);
        [id(0x0000006c), propget, helpstring("property UseCADAttribTrans")]
        HRESULT UseCADAttribTrans([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000006c), propput, helpstring("property UseCADAttribTrans")]
        HRESULT UseCADAttribTrans([in] VARIANT_BOOL pVal);
        [id(0x0000006d), propget, helpstring("property CADAttribPrefixes")]
        HRESULT CADAttribPrefixes([out, retval] BSTR* pVal);
        [id(0x0000006d), propput, helpstring("property CADAttribPrefixes")]
        HRESULT CADAttribPrefixes([in] BSTR pVal);
        [id(0x00000073), propget, helpstring("property UseCADNamedSelTrans")]
        HRESULT UseCADNamedSelTrans([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000073), propput, helpstring("property UseCADNamedSelTrans")]
        HRESULT UseCADNamedSelTrans([in] VARIANT_BOOL pVal);
        [id(0x00000074), propget, helpstring("property CADNamedSelPrefixes")]
        HRESULT CADNamedSelPrefixes([out, retval] BSTR* pVal);
        [id(0x00000074), propput, helpstring("property CADNamedSelPrefixes")]
        HRESULT CADNamedSelPrefixes([in] BSTR pVal);
        [id(0x0000006e), propget, helpstring("property MaterialPropTrans")]
        HRESULT MaterialPropTrans([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000006e), propput, helpstring("property MaterialPropTrans")]
        HRESULT MaterialPropTrans([in] VARIANT_BOOL pVal);
        [id(0x00000069), propget, helpstring("property UseCADAssociativity")]
        HRESULT UseCADAssociativity([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000069), propput, helpstring("property UseCADAssociativity")]
        HRESULT UseCADAssociativity([in] VARIANT_BOOL pVal);
        [id(0x0000007b), propget, helpstring("property ImportCoordinateSystems")]
        HRESULT ImportCoordinateSystems([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000007b), propput, helpstring("property ImportCoordinateSystems")]
        HRESULT ImportCoordinateSystems([in] VARIANT_BOOL pVal);
        [id(0x00000096), propget, helpstring("property CoordinateSystemKey")]
        HRESULT CoordinateSystemKey([out, retval] BSTR* pVal);
        [id(0x00000096), propput, helpstring("property CoordinateSystemKey")]
        HRESULT CoordinateSystemKey([in] BSTR pVal);
        [id(0x00000070), propget, helpstring("property ReaderSaveFile")]
        HRESULT ReaderSaveFile([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000070), propput, helpstring("property ReaderSaveFile")]
        HRESULT ReaderSaveFile([in] VARIANT_BOOL pVal);
        [id(0x00000080), propget, helpstring("property UseInstances")]
        HRESULT UseInstances([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000080), propput, helpstring("property UseInstances")]
        HRESULT UseInstances([in] VARIANT_BOOL pVal);
        [id(0x00000075), propget, helpstring("property DoSmartUpdate")]
        HRESULT DoSmartUpdate([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000075), propput, helpstring("property DoSmartUpdate")]
        HRESULT DoSmartUpdate([in] VARIANT_BOOL pVal);
        [id(0x00000085), propget, helpstring("property ComparePartsOnUpdate")]
        HRESULT ComparePartsOnUpdate([out, retval] unsigned int* pVal);
        [id(0x00000085), propput, helpstring("property ComparePartsOnUpdate")]
        HRESULT ComparePartsOnUpdate([in] unsigned int pVal);
        [id(0x00000086), propget, helpstring("property ComparePartsTolerance")]
        HRESULT ComparePartsTolerance([out, retval] unsigned int* pVal);
        [id(0x00000086), propput, helpstring("property ComparePartsTolerance")]
        HRESULT ComparePartsTolerance([in] unsigned int pVal);
        [id(0x00000076), propget, helpstring("property ProcessFlatAssembly")]
        HRESULT ProcessFlatAssembly([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000076), propput, helpstring("property ProcessFlatAssembly")]
        HRESULT ProcessFlatAssembly([in] VARIANT_BOOL pVal);
        [id(0x0000006f), propget, helpstring("property AttachViaTempFile")]
        HRESULT AttachViaTempFile([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000006f), propput, helpstring("property AttachViaTempFile")]
        HRESULT AttachViaTempFile([in] VARIANT_BOOL pVal);
        [id(0x00000071), propget, helpstring("property AttachTempDirectory")]
        HRESULT AttachTempDirectory([out, retval] BSTR* pVal);
        [id(0x00000071), propput, helpstring("property AttachTempDirectory")]
        HRESULT AttachTempDirectory([in] BSTR pVal);
        [id(0x00000078), propget, helpstring("property AnalysisType")]
        HRESULT AnalysisType([out, retval] unsigned int* pVal);
        [id(0x00000078), propput, helpstring("property AnalysisType")]
        HRESULT AnalysisType([in] unsigned int pVal);
        [id(0x00000079), propget, helpstring("property SecondaryImportPref")]
        HRESULT SecondaryImportPref([out, retval] unsigned int* pVal);
        [id(0x00000079), propput, helpstring("property SecondaryImportPref")]
        HRESULT SecondaryImportPref([in] unsigned int pVal);
        [id(0x00000082), propget, helpstring("property ImportEnclosureAndSymmetry")]
        HRESULT ImportEnclosureAndSymmetry([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000082), propput, helpstring("property ImportEnclosureAndSymmetry")]
        HRESULT ImportEnclosureAndSymmetry([in] VARIANT_BOOL pVal);
        [id(0x0000008c), propget, helpstring("property STLSDTAlgorithm")]
        HRESULT STLSDTAlgorithm([out, retval] unsigned int* pVal);
        [id(0x0000008c), propput, helpstring("property STLSDTAlgorithm")]
        HRESULT STLSDTAlgorithm([in] unsigned int pVal);
        [id(0x0000008d), propget, helpstring("property STLCurvatureAlgorithmSharpEdgesAngle")]
        HRESULT STLCurvatureAlgorithmSharpEdgesAngle([out, retval] double* pVal);
        [id(0x0000008d), propput, helpstring("property STLCurvatureAlgorithmSharpEdgesAngle")]
        HRESULT STLCurvatureAlgorithmSharpEdgesAngle([in] double pVal);
        [id(0x0000008e), propget, helpstring("property STLCurvatureAlgorithmPlanesToleranceAngle")]
        HRESULT STLCurvatureAlgorithmPlanesToleranceAngle([out, retval] double* pVal);
        [id(0x0000008e), propput, helpstring("property STLCurvatureAlgorithmPlanesToleranceAngle")]
        HRESULT STLCurvatureAlgorithmPlanesToleranceAngle([in] double pVal);
        [id(0x0000008f), propget, helpstring("property STLCurvatureAlgorithmIgnoreSecondaryNodes")]
        HRESULT STLCurvatureAlgorithmIgnoreSecondaryNodes([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000008f), propput, helpstring("property STLCurvatureAlgorithmIgnoreSecondaryNodes")]
        HRESULT STLCurvatureAlgorithmIgnoreSecondaryNodes([in] VARIANT_BOOL pVal);
        [id(0x00000090), propget, helpstring("property STLAngleAlgorithmCutAngle")]
        HRESULT STLAngleAlgorithmCutAngle([out, retval] double* pVal);
        [id(0x00000090), propput, helpstring("property STLAngleAlgorithmCutAngle")]
        HRESULT STLAngleAlgorithmCutAngle([in] double pVal);
        [id(0x00000091), propget, helpstring("property STLAngleAlgorithmToleranceAngle")]
        HRESULT STLAngleAlgorithmToleranceAngle([out, retval] double* pVal);
        [id(0x00000091), propput, helpstring("property STLAngleAlgorithmToleranceAngle")]
        HRESULT STLAngleAlgorithmToleranceAngle([in] double pVal);
        [id(0x00000072), propget, helpstring("property CanChangeCADUnits")]
        HRESULT CanChangeCADUnits([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000046), propget, helpstring("property MeshCollection")]
        HRESULT MeshCollection([out, retval] IDispatch** piMeshCollection);
        [id(0x00000077), propget, helpstring("property PointMasses")]
        HRESULT PointMasses([out, retval] IDispatch** ppDisp);
        [id(0x0000007a), propget, helpstring("property HasEnclosure")]
        HRESULT HasEnclosure([out, retval] long* pVal);
        [id(0x0000001b), propget, helpstring("property Model2DBehavior")]
        HRESULT Model2DBehavior([out, retval] DS2DModelBehavior* pVal);
        [id(0x0000001b), propput, helpstring("property Model2DBehavior")]
        HRESULT Model2DBehavior([in] DS2DModelBehavior pVal);
        [id(0x0000001c), propget, helpstring("property FiberLength")]
        HRESULT FiberLength([out, retval] double* pVal);
        [id(0x0000001c), propput, helpstring("property FiberLength")]
        HRESULT FiberLength([in] double pVal);
        [id(0x0000001d), propget, helpstring("property RotationOfEndPlaneAboutX")]
        HRESULT RotationOfEndPlaneAboutX([out, retval] double* pVal);
        [id(0x0000001d), propput, helpstring("property RotationOfEndPlaneAboutX")]
        HRESULT RotationOfEndPlaneAboutX([in] double pVal);
        [id(0x0000001e), propget, helpstring("property RotationOfEndPlaneAboutY")]
        HRESULT RotationOfEndPlaneAboutY([out, retval] double* pVal);
        [id(0x0000001e), propput, helpstring("property RotationOfEndPlaneAboutY")]
        HRESULT RotationOfEndPlaneAboutY([in] double pVal);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
        [id(0x00000032), helpstring("method RefreshAssemblyFromParam")]
        HRESULT RefreshAssemblyFromParam([in] IDispatch* pDisp);
        [id(0x0000007c), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x0000007d), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x0000007e), propget, helpstring("property UnitTypeByDispid")]
        HRESULT UnitTypeByDispid(
                        [in] int dispid, 
                        [out, retval] int* unitType);
        [id(0x0000007f), propget, helpstring("property UnitStringByDispid")]
        HRESULT UnitStringByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* unitString);
        [id(0x00000050), propget, helpstring("property DisplayStyle")]
        HRESULT DisplayStyle([out, retval] DSPrototypeDisplayStyle* pVal);
        [id(0x00000050), propput, helpstring("property DisplayStyle")]
        HRESULT DisplayStyle([in] DSPrototypeDisplayStyle pVal);
        [id(0x0000005a), helpstring("method ConfigurationSet")]
        HRESULT ConfigurationSet();
        [id(0x00000081), propget, helpstring("property ParamNameByDispid")]
        HRESULT ParamNameByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* paramName);
        [id(0x00000083), propget, helpstring("property ScaleFactor")]
        HRESULT ScaleFactor([out, retval] double* pVal);
        [id(0x00000083), propput, helpstring("property ScaleFactor")]
        HRESULT ScaleFactor([in] double pVal);
        [id(0x00000087), propget, helpstring("property MeshMetric")]
        HRESULT MeshMetric([out, retval] int* pVal);
        [id(0x00000088), propget, helpstring("property MeshMetricMin")]
        HRESULT MeshMetricMin([out, retval] double* pVal);
        [id(0x00000089), propget, helpstring("property MeshMetricMax")]
        HRESULT MeshMetricMax([out, retval] double* pVal);
        [id(0x0000008a), propget, helpstring("property MeshMetricAverage")]
        HRESULT MeshMetricAverage([out, retval] double* pVal);
        [id(0x0000008b), propget, helpstring("property MeshMetricSTDV")]
        HRESULT MeshMetricSTDV([out, retval] double* pVal);
        [id(0x60020088), propget, helpstring("return whether or not the geometry preferences are read only")]
        HRESULT GeometryPreferencesReadOnly([out, retval] VARIANT_BOOL* pbVal);
        [id(0x60020088), propput, helpstring("return whether or not the geometry preferences are read only")]
        HRESULT GeometryPreferencesReadOnly([in] VARIANT_BOOL pbVal);
        [id(0x6002008a), helpstring("assigns the default materials")]
        HRESULT AssignDefaultMaterials();
        [id(0x0000005c), helpstring("method AddVirtualBodyGroup")]
        HRESULT AddVirtualBodyGroup([out, retval] IDispatch** ppVal);
        [id(0x0000005d), helpstring("method AddThickness")]
        HRESULT AddThickness(
                        [in] IDispatch* piSelectMgr, 
                        [in] DSThicknessType eThicknessType, 
                        [out, retval] IDispatch** pDisp);
        [id(0x0000005e), helpstring("method SelectFacesWithMultipleThicknesses")]
        HRESULT SelectFacesWithMultipleThicknesses([in] IDispatch* piSelectMgr);
        [id(0x0000005f), helpstring("method AddExternalThicknessGroup")]
        HRESULT AddExternalThicknessGroup(
                        [in] BSTR bsAnalysis, 
                        [out, retval] IDispatch** pDisp);
        [id(0x00000060), propget, helpstring("property ExternalThicknessGroups")]
        HRESULT ExternalThicknessGroups([out, retval] IDispatch** ppDisp);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x0000004d), helpstring("method AddElementOrientation")]
        HRESULT AddElementOrientation(
                        [in] IDispatch* piSelectMgr, 
                        [out, retval] IDispatch** pDisp);
        [id(0x60020097), helpstring("method GetElementOrientationObjects")]
        HRESULT GetElementOrientationObjects([out, retval] IDispatch** ppDisp);
        [id(0x00000061), propget, helpstring("method GeometryFromModelAssembly")]
        HRESULT GeometryFromModelAssembly(
                        [in] unsigned int asmId, 
                        [out, retval] VARIANT_BOOL* vbModelAssembly);
        [id(0x0000004e), helpstring("method AddDistributedMass")]
        HRESULT AddDistributedMass(
                        [in] IDispatch* piSelectMgr, 
                        [out, retval] IDispatch** pDisp);
        [id(0x00000051), propget, helpstring("property NumActiveBodyGroups")]
        HRESULT NumActiveBodyGroups([out, retval] int* pVal);
        [id(0x00000052), propget, helpstring("property NumGeometryUpdatesInSession")]
        HRESULT NumGeometryUpdatesInSession([out, retval] unsigned int* pVal);
        [id(0x00000053), helpstring("method GetJSON")]
        HRESULT GetJSON([out, retval] BSTR* pVal);
    };

    typedef enum {
        kPrograomControl = 0,
        kManual = 1
    } DSElementControl;

    typedef enum {
        kDisplayByBodyColor = 0,
        kDisplayByThickness = 1,
        kDisplayByMaterial = 2,
        kDisplayByNonLinear = 3,
        kDisplayByStiffness = 4,
        kDisplayByPartColor = 5,
        kDisplayByVisibleThickness = 6,
        kDisplayByAssemblyColor = 7,
        kDisplayByCondensedPartsColor = 8
    } DSPrototypeDisplayStyle;

    typedef enum {
        kTypeUnknown = 0,
        kTypeThickness = 1,
        kTypeLayeredSection = 2
    } DSThicknessType;

    typedef enum {
        DISPID_RemotePointGroupComment = 10,
        DISPID_RemotePointGroupRemotePoint = 11,
        DISPID_RemotePointGroupFigure = 12,
        DISPID_RemotePointGroupImage = 13,
        DISPID_RemotePointGroupAddComment = 61,
        DISPID_RemotePointGroupAddRemotePoint = 62,
        DISPID_RemotePointGroupShowLines = 63,
        DISPID_RemotePointGroupAddFigure = 64,
        DISPID_RemotePointGroupAddImage = 65
    } kDispId_RemotePointGroup;

    [
      odl,
      uuid(C8C14127-FEA5-4220-AD2F-AE52B2B371C0),
      helpstring("IDSRemotePointGroupAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSRemotePointGroupAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x0000000a), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x0000000b), propget, helpstring("property RemotePoints")]
        HRESULT RemotePoints([out, retval] IDispatch** ppDisp);
        [id(0x0000003d), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x0000003e), helpstring("method AddRemotePoint")]
        HRESULT AddRemotePoint(
                        [in] IDispatch* piSelectMgr, 
                        [out, retval] IDispatch** pDisp);
        [id(0x0000003f), propget, helpstring("property ShowLines")]
        HRESULT ShowLines([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000003f), propput, helpstring("property ShowLines")]
        HRESULT ShowLines([in] VARIANT_BOOL pVal);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x00000040), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x00000041), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x0000000c), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x0000000d), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
    };

    typedef enum {
        DISPID_RemotePointComment = 10,
        DISPID_RemotePointSuppressed = 11,
        DISPID_RemotePointBehavior = 12,
        DISPID_RemotePointPinballSize = 13,
        DISPID_RemotePointCoordinateSystemSelection = 14,
        DISPID_RemotePointGeometryDefineBy = 15,
        DISPID_RemotePointGeometrySelection = 16,
        DISPID_RemotePointComponentSelection = 17,
        DISPID_RemotePointLocationX = 18,
        DISPID_RemotePointLocationY = 19,
        DISPID_RemotePointLocationZ = 20,
        DISPID_RemotePointLocationSelection = 21,
        DISPID_RemotePointUnitTypeByDispid = 22,
        DISPID_RemotePointUnitStringByDispid = 23,
        DISPID_RemotePointParamNameByDispid = 24,
        DISPID_RemotePointDOFSelection = 25,
        DISPID_RemotePointComponentXActiveOrInactive = 26,
        DISPID_RemotePointComponentYActiveOrInactive = 27,
        DISPID_RemotePointComponentZActiveOrInactive = 28,
        DISPID_RemotePointRotationXActiveOrInactive = 29,
        DISPID_RemotePointRotationYActiveOrInactive = 30,
        DISPID_RemotePointRotationZActiveOrInactive = 31,
        DISPID_RemotePointGloballyAvailable = 32,
        DISPID_RemotePointAddComment = 61,
        DISPID_RemotePointAddFigure = 62,
        DISPID_RemotePointAddCommandEditor = 63,
        DISPID_RemotePointPromoted = 64,
        DISPID_RemotePointAddImage = 65,
        DISPID_RemotePointBeamMaterialName = 67,
        DISPID_RemotePointBeamRadius = 68,
        DISPID_RemotePointBeamMaterialNameWithoutNotify = 69,
        DISPID_RemotePointBeamRadiusWithoutNotify = 70,
        DISPID_RemotePointPilotNodeName = 71
    } kDispId_RemotePoint;

    [
      odl,
      uuid(1F9271DD-B9CA-4157-9BB6-C732E4B4C1FA),
      helpstring("IDSRemotePointAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSRemotePointAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x0000000a), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x0000000f), propget, helpstring("property GeometryDefineBy")]
        HRESULT GeometryDefineBy([out, retval] DSGeometryDefineByType* pVal);
        [id(0x0000000f), propput, helpstring("property GeometryDefineBy")]
        HRESULT GeometryDefineBy([in] DSGeometryDefineByType pVal);
        [id(0x00000010), propput, helpstring("property GeometrySelection")]
        HRESULT GeometrySelection([in] IDispatch* rhs);
        [id(0x00000011), propget, helpstring("property ComponentSelection")]
        HRESULT ComponentSelection([out, retval] int* pVal);
        [id(0x00000011), propput, helpstring("property ComponentSelection")]
        HRESULT ComponentSelection([in] int pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x0000000e), propget, helpstring("property CoordinateSystemSelection")]
        HRESULT CoordinateSystemSelection([out, retval] int* pVal);
        [id(0x0000000e), propput, helpstring("property CoordinateSystemSelection")]
        HRESULT CoordinateSystemSelection([in] int pVal);
        [id(0x00000012), propget, helpstring("property LocationX")]
        HRESULT LocationX([out, retval] double* pVal);
        [id(0x00000012), propput, helpstring("property LocationX")]
        HRESULT LocationX([in] double pVal);
        [id(0x00000013), propget, helpstring("property LocationY")]
        HRESULT LocationY([out, retval] double* pVal);
        [id(0x00000013), propput, helpstring("property LocationY")]
        HRESULT LocationY([in] double pVal);
        [id(0x00000014), propget, helpstring("property LocationZ")]
        HRESULT LocationZ([out, retval] double* pVal);
        [id(0x00000014), propput, helpstring("property LocationZ")]
        HRESULT LocationZ([in] double pVal);
        [id(0x00000015), propput, helpstring("property LocationSelection")]
        HRESULT LocationSelection([in] IDispatch* rhs);
        [id(0x0000000b), propget, helpstring("property Suppressed")]
        HRESULT Suppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000000b), propput, helpstring("property Suppressed")]
        HRESULT Suppressed([in] VARIANT_BOOL pVal);
        [id(0x0000000c), propget, helpstring("property Behavior")]
        HRESULT Behavior([out, retval] DSLoadBehavior* pVal);
        [id(0x0000000c), propput, helpstring("property Behavior")]
        HRESULT Behavior([in] DSLoadBehavior pVal);
        [id(0x0000000d), propget, helpstring("property PinballSize")]
        HRESULT PinballSize([out, retval] double* dVal);
        [id(0x0000000d), propput, helpstring("property PinballSize")]
        HRESULT PinballSize([in] double dVal);
        [id(0x00000019), propget, helpstring("property DOFSelection")]
        HRESULT DOFSelection([out, retval] DSRemotePointDOFSelectionType* pVal);
        [id(0x00000019), propput, helpstring("property DOFSelection")]
        HRESULT DOFSelection([in] DSRemotePointDOFSelectionType pVal);
        [id(0x0000001a), propget, helpstring("property ComponentXActiveOrInactive")]
        HRESULT ComponentXActiveOrInactive([out, retval] DOFActiveOrInactive* pVal);
        [id(0x0000001a), propput, helpstring("property ComponentXActiveOrInactive")]
        HRESULT ComponentXActiveOrInactive([in] DOFActiveOrInactive pVal);
        [id(0x0000001b), propget, helpstring("property ComponentYActiveOrInactive")]
        HRESULT ComponentYActiveOrInactive([out, retval] DOFActiveOrInactive* pVal);
        [id(0x0000001b), propput, helpstring("property ComponentYActiveOrInactive")]
        HRESULT ComponentYActiveOrInactive([in] DOFActiveOrInactive pVal);
        [id(0x0000001c), propget, helpstring("property ComponentZActiveOrInactive")]
        HRESULT ComponentZActiveOrInactive([out, retval] DOFActiveOrInactive* pVal);
        [id(0x0000001c), propput, helpstring("property ComponentZActiveOrInactive")]
        HRESULT ComponentZActiveOrInactive([in] DOFActiveOrInactive pVal);
        [id(0x0000001d), propget, helpstring("property RotationXActiveOrInactive")]
        HRESULT RotationXActiveOrInactive([out, retval] DOFActiveOrInactive* pVal);
        [id(0x0000001d), propput, helpstring("property RotationXActiveOrInactive")]
        HRESULT RotationXActiveOrInactive([in] DOFActiveOrInactive pVal);
        [id(0x0000001e), propget, helpstring("property RotationYActiveOrInactive")]
        HRESULT RotationYActiveOrInactive([out, retval] DOFActiveOrInactive* pVal);
        [id(0x0000001e), propput, helpstring("property RotationYActiveOrInactive")]
        HRESULT RotationYActiveOrInactive([in] DOFActiveOrInactive pVal);
        [id(0x0000001f), propget, helpstring("property RotationZActiveOrInactive")]
        HRESULT RotationZActiveOrInactive([out, retval] DOFActiveOrInactive* pVal);
        [id(0x0000001f), propput, helpstring("property RotationZActiveOrInactive")]
        HRESULT RotationZActiveOrInactive([in] DOFActiveOrInactive pVal);
        [id(0x00000020), propget, helpstring("property GloballyAvailable")]
        HRESULT GloballyAvailable([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000020), propput, helpstring("property GloballyAvailable")]
        HRESULT GloballyAvailable([in] VARIANT_BOOL pVal);
        [id(0x00000016), propget, helpstring("property UnitTypeByDispid")]
        HRESULT UnitTypeByDispid(
                        [in] int dispid, 
                        [out, retval] int* unitType);
        [id(0x00000017), propget, helpstring("property UnitStringByDispid")]
        HRESULT UnitStringByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* unitString);
        [id(0x00000018), propget, helpstring("property ParamNameByDispid")]
        HRESULT ParamNameByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* paramName);
        [id(0x0000003d), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x0000003e), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x0000003f), helpstring("method AddCommandEditor")]
        HRESULT AddCommandEditor([out, retval] IDispatch** ppVal);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x00000041), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00000043), propget, helpstring("property BeamMaterialName")]
        HRESULT BeamMaterialName([out, retval] BSTR* pVal);
        [id(0x00000043), propput, helpstring("property BeamMaterialName")]
        HRESULT BeamMaterialName([in] BSTR pVal);
        [id(0x00000044), propget, helpstring("property BeamRadius")]
        HRESULT BeamRadius([out, retval] double* dVal);
        [id(0x00000044), propput, helpstring("property BeamRadius")]
        HRESULT BeamRadius([in] double dVal);
        [id(0x00000045), propput, helpstring("property BeamMaterialNameWithoutNotify")]
        HRESULT BeamMaterialNameWithoutNotify([in] BSTR rhs);
        [id(0x00000046), propput, helpstring("property BeamRadiusWithoutNotify")]
        HRESULT BeamRadiusWithoutNotify([in] double rhs);
        [id(0x00000047), propget, helpstring("property PilotNodeName")]
        HRESULT PilotNodeName([out, retval] BSTR* pVal);
        [id(0x00000047), propput, helpstring("property PilotNodeName")]
        HRESULT PilotNodeName([in] BSTR pVal);
    };

    typedef enum {
        kDOF_SELECTION_PROGRAM_CHOOSES = 0,
        kDOF_SELECTION_MANUAL = 1
    } DSRemotePointDOFSelectionType;

    typedef enum {
        kDOFActive = 0,
        kDOFInactive = 1
    } DOFActiveOrInactive;

    typedef enum {
        DISPID_ReportSettingsIncludeTitlePage = 10,
        DISPID_ReportSettingsIncludeCustomLogo = 11,
        DISPID_ReportSettingsIncludeDSLogo = 12,
        DISPID_ReportSettingsIncludeSummary = 13,
        DISPID_ReportSettingsIncludeIntro = 14,
        DISPID_ReportSettingsIncludeGlossary = 15,
        DISPID_ReportSettingsIncludePackingList = 16,
        DISPID_ReportSettingsIncludeFigures = 17,
        DISPID_ReportSettingsInsertPageBreak = 18,
        DISPID_ReportSettingsImageType = 19,
        DISPID_ReportSettingsImageHeight = 20,
        DISPID_ReportSettingsImageWidth = 21,
        DISPID_ReportSettingsImageSize = 22,
        DISPID_ReportSettingsCustomLogoURL = 23,
        DISPID_ReportSettingsIDsInUse = 24,
        DISPID_ReportViewed = 25,
        DISPID_ReportSettingsModelIds = 26,
        DISPID_ReportSettingsAllEnvIdsForLastReport = 27
    } kDispId_ReportSettings;

    [
      odl,
      uuid(A67C18DC-D3CB-49EA-80DC-BFA05239C928),
      helpstring("IDSReportSettingsAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSReportSettingsAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x0000000a), propget, helpstring("property IncludeTitlePage")]
        HRESULT IncludeTitlePage([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000000a), propput, helpstring("property IncludeTitlePage")]
        HRESULT IncludeTitlePage([in] VARIANT_BOOL pVal);
        [id(0x0000000b), propget, helpstring("property IncludeCustomLogo")]
        HRESULT IncludeCustomLogo([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000000b), propput, helpstring("property IncludeCustomLogo")]
        HRESULT IncludeCustomLogo([in] VARIANT_BOOL pVal);
        [id(0x0000000c), propget, helpstring("property IncludeDSLogo")]
        HRESULT IncludeDSLogo([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000000c), propput, helpstring("property IncludeDSLogo")]
        HRESULT IncludeDSLogo([in] VARIANT_BOOL pVal);
        [id(0x0000000d), propget, helpstring("property IncludeSummary")]
        HRESULT IncludeSummary([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000000d), propput, helpstring("property IncludeSummary")]
        HRESULT IncludeSummary([in] VARIANT_BOOL pVal);
        [id(0x0000000e), propget, helpstring("property IncludeIntro")]
        HRESULT IncludeIntro([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000000e), propput, helpstring("property IncludeIntro")]
        HRESULT IncludeIntro([in] VARIANT_BOOL pVal);
        [id(0x0000000f), propget, helpstring("property IncludeGlossary")]
        HRESULT IncludeGlossary([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000000f), propput, helpstring("property IncludeGlossary")]
        HRESULT IncludeGlossary([in] VARIANT_BOOL pVal);
        [id(0x00000010), propget, helpstring("property IncludePackingList")]
        HRESULT IncludePackingList([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000010), propput, helpstring("property IncludePackingList")]
        HRESULT IncludePackingList([in] VARIANT_BOOL pVal);
        [id(0x00000011), propget, helpstring("property IncludeFigures")]
        HRESULT IncludeFigures([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000011), propput, helpstring("property IncludeFigures")]
        HRESULT IncludeFigures([in] VARIANT_BOOL pVal);
        [id(0x00000012), propget, helpstring("property InsertPageBreak")]
        HRESULT InsertPageBreak([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000012), propput, helpstring("property InsertPageBreak")]
        HRESULT InsertPageBreak([in] VARIANT_BOOL pVal);
        [id(0x00000013), propget, helpstring("property ImageType")]
        HRESULT ImageType([out, retval] int* pVal);
        [id(0x00000013), propput, helpstring("property ImageType")]
        HRESULT ImageType([in] int pVal);
        [id(0x00000014), propget, helpstring("property ImageHeight")]
        HRESULT ImageHeight([out, retval] int* pVal);
        [id(0x00000014), propput, helpstring("property ImageHeight")]
        HRESULT ImageHeight([in] int pVal);
        [id(0x00000015), propget, helpstring("property ImageWidth")]
        HRESULT ImageWidth([out, retval] int* pVal);
        [id(0x00000015), propput, helpstring("property ImageWidth")]
        HRESULT ImageWidth([in] int pVal);
        [id(0x00000016), propget, helpstring("property ImageSize")]
        HRESULT ImageSize([out, retval] int* pVal);
        [id(0x00000016), propput, helpstring("property ImageSize")]
        HRESULT ImageSize([in] int pVal);
        [id(0x00000017), propget, helpstring("property CustomLogoURL")]
        HRESULT CustomLogoURL([out, retval] BSTR* pVal);
        [id(0x00000017), propput, helpstring("property CustomLogoURL")]
        HRESULT CustomLogoURL([in] BSTR pVal);
        [id(0x00000018), propget, helpstring("property IDsInUse")]
        HRESULT IDsInUse([out, retval] BSTR* pVal);
        [id(0x00000018), propput, helpstring("property IDsInUse")]
        HRESULT IDsInUse([in] BSTR pVal);
        [id(0x00000019), propget, helpstring("property ReportViewed")]
        HRESULT ReportViewed([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000019), propput, helpstring("property ReportViewed")]
        HRESULT ReportViewed([in] VARIANT_BOOL pVal);
        [id(0x0000001a), propget, helpstring("property ModelIds")]
        HRESULT ModelIds([out, retval] BSTR* pVal);
        [id(0x0000001a), propput, helpstring("property ModelIds")]
        HRESULT ModelIds([in] BSTR pVal);
        [id(0x0000001b), propget, helpstring("property AllEnvIdsForLastReport")]
        HRESULT AllEnvIdsForLastReport([out, retval] BSTR* pVal);
        [id(0x0000001b), propput, helpstring("property AllEnvIdsForLastReport")]
        HRESULT AllEnvIdsForLastReport([in] BSTR pVal);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
    };

    typedef enum {
        DISPID_ResultGeometrySelection = 10,
        DISPID_ResultMinimum = 11,
        DISPID_ResultMaximum = 12,
        DISPID_ResultTargetReduction = 13,
        DISPID_ResultOriginalMass = 14,
        DISPID_ResultOptimizedMass = 15,
        DISPID_ResultMarginalMass = 16,
        DISPID_ResultUnitString = 17,
        DISPID_ResultConvergences = 18,
        DISPID_ResultComments = 19,
        DISPID_ResultAlerts = 20,
        DISPID_ResultFigures = 21,
        DISPID_ResultTargetLife = 22,
        DISPID_ResultCriticalValue = 23,
        DISPID_ResultMode = 24,
        DISPID_ResultFrequency = 25,
        DISPID_IsSolved = 26,
        DISPID_ResultGenerateVRMLFile = 27,
        DISPID_ResultAddConvergence = 28,
        DISPID_ResultAddAlert = 29,
        DISPID_ResultAddComment = 30,
        DISPID_ResultAddFigure = 31,
        DISPID_ResultNormalOrientation = 32,
        DISPID_ResultShearOrientation = 33,
        DISPID_ResultDeformationHeatFluxType = 34,
        DISPID_ResultResultType = 35,
        DISPID_ResultStressStrainType = 36,
        DISPID_ResultPrototypes = 37,
        DISPID_ResultScopedType = 38,
        DISPID_ResultLoadFrom = 39,
        DISPID_ResultUpdatePlot = 40,
        DISPID_ResultUnitType = 41,
        DISPID_ResultLoadMultiplier = 42,
        DISPID_ResultPhaseAngle = 44,
        DISPID_ResultArrays = 45,
        DISPID_ResultNodeCountForPart = 46,
        DISPID_ResultNodeForPart = 47,
        DISPID_ResultElementCountForPart = 48,
        DISPID_ResultElementForPart = 49,
        DISPID_ResultCreateTabbedFile = 50,
        DISPID_ResultContactResultType = 51,
        DISPID_ResultCoordinateSystemSelection = 52,
        DISPID_ResultBiaxialityType = 53,
        DISPID_ResultIterationNumber = 54,
        DISPID_ResultEdgeNumVals = 55,
        DISPID_ResultEdgeXVal = 56,
        DISPID_ResultEdgeYVal = 57,
        DISPID_ResultEdgeCollectVals = 58,
        DISPID_ResultUseParentScoping = 59,
        DISPID_ResultTime = 60,
        DISPID_ResultSubstep = 61,
        DISPID_ResultRefreshScoping = 62,
        DISPID_ResultLoadStep = 63,
        DISPID_ResultConvergenceCriterion = 64,
        DISPID_ResultConvergenceValue = 65,
        DISPID_ResultBeamToolStressResultType = 67,
        DISPID_ResultGeometrySelectionString = 68,
        DISPID_ResultResultTypeString = 69,
        DISPID_ResultOrientationString = 70,
        DISPID_ResultFrequencyString = 72,
        DISPID_ResultMinimumBodyName = 73,
        DISPID_ResultMaximumBodyName = 74,
        DISPID_ResultSequenceNumber = 75,
        DISPID_ResultSummedFMAG = 76,
        DISPID_ResultTorque = 77,
        DISPID_ResultSymmetryMultiplier = 78,
        DISPID_ResultTransientDisplayTime = 79,
        DISPID_ResultContactRegionSourceName = 80,
        DISPID_ResultIsThermalResult = 81,
        DISPID_ResultIsConvergencePresent = 82,
        DISPID_ResultRelativity = 83,
        DISPID_ResultScopeBy = 84,
        DISPID_ResultScaleFactor = 85,
        DISPID_ResultPSDProbability = 86,
        DISPID_ResultImages = 87,
        DISPID_ResultAddImage = 88,
        DISPID_ResultIsHarmonicResult = 89,
        DISPID_ResultShellFaceEnum = 90,
        DISPID_ResultLayer = 91,
        DISPID_ResultMultipleResultPoints = 92,
        DISPID_ResultUnitTypeByDispid = 93,
        DISPID_ResultUnitStringByDispid = 94,
        DISPID_ResultParamNameByDispid = 95,
        DISPID_ResultActualFrequency = 96,
        DISPID_ResultIdentifier = 97,
        DISPID_ResultCalculateTimeHistory = 98,
        DISPID_ResultSetDriver = 99,
        DISPID_ResultSetNumber = 100,
        DISPID_ResultRequestedFrequency = 101,
        DISPID_ResultIsElectricResult = 102,
        DISPID_ResultRenameBasedOnDefinition = 103,
        DISPID_ResultGeometryDefineBy = 104,
        DISPID_ResultPathSelection = 105,
        DISPID_ResultGraphControlsXAxis = 106,
        DISPID_ResultCreateTabbedFileForPathSelection = 107,
        DISPID_ResultAveraging = 108,
        DISPID_ResultMinimumOfMinimumOverTime = 109,
        DISPID_ResultMaximumOfMinimumOverTime = 110,
        DISPID_ResultMinimumOfMaximumOverTime = 111,
        DISPID_ResultMaximumOfMaximumOverTime = 112,
        DISPID_ResultGetLinearizedStressParameterArray = 113,
        DISPID_ResultAverage = 114,
        DISPID_ResultFlow = 115,
        DISPID_ResultCyclicMinimumOverPhase = 116,
        DISPID_ResultCyclicMaximumOverPhase = 117,
        DISPID_ResultCyclicPhaseForMinimum = 118,
        DISPID_ResultCyclicPhaseForMaximum = 119,
        DISPID_ResultCyclicHarmonicIndex = 120,
        DISPID_ResultCyclicPhaseAngle = 121,
        DISPID_ResultCyclicMode = 122,
        DISPID_ResultComponentSelection = 123,
        DISPID_ResultCyclicPhaseHistory = 124,
        DISPID_ResultActualStability = 125,
        DISPID_ResultActualModalDampingRatio = 126,
        DISPID_ResultActualLogarithmicDecrement = 127,
        DISPID_ResultCintResultType = 129,
        DISPID_ResultContourStart = 130,
        DISPID_ResultContourEnd = 131,
        DISPID_ResultActiveContour = 132,
        DISPID_ResultFractureSubType = 133,
        DISPID_ResultAmplitude = 134,
        DISPID_ResultCalculateFreqHistory = 135,
        DISPID_ResultLinearizedSubtype = 200,
        DISPID_ResultLinearizedResultFlag = 201,
        DISPID_ResultLinearized2DBehavior = 202,
        DISPID_ResultAverageRadiusCurvature = 203,
        DISPID_ResultThroughThicknessBendingStress = 204,
        DISPID_ResultMembraneStress = 210,
        DISPID_ResultBendingStressInside = 211,
        DISPID_ResultBendingStressOutside = 212,
        DISPID_ResultMembraneBendingStressInside = 213,
        DISPID_ResultMembraneBendingStressCenter = 214,
        DISPID_ResultMembraneBendingStressOutside = 215,
        DISPID_ResultPeakStressInside = 216,
        DISPID_ResultPeakStressCenter = 217,
        DISPID_ResultPeakStressOutside = 218,
        DISPID_ResultTotalStressInside = 219,
        DISPID_ResultTotalStressCenter = 220,
        DISPID_ResultTotalStressOutside = 221,
        DISPID_ResultAccelerationG = 222,
        DISPID_ResultAdjustLegend = 223,
        DISPID_ResultGetShearMomentDiagramParameter = 224,
        DISPID_ResultShearMomentType = 225,
        DISPID_ResultMomentDiagramComponents = 226,
        DISPID_ResultMomentDiagramNumVals = 227,
        DISPID_ResultMomentDiagramXVals = 228,
        DISPID_ResultMomentDiagramYVals = 229,
        DISPID_ResultUnitSystemFromRepository = 230,
        DISPID_ResultClearDiagramData = 231,
        DISPID_ResultShellMBPType = 232,
        DISPID_ResultDisplayS = 300,
        DISPID_ResultGasketResultType = 301,
        DISPID_ResultShearMomentDiagramOrientation = 302,
        DISPID_ResultSuppressed = 303,
        DISPID_ResultContourResultInput = 305,
        DISPID_ResultAlignCoordinateSystem = 306,
        DISPID_ResultPhaseIncrement = 307,
        DISPID_ResultDamageType = 308,
        DISPID_ResultAveragingAcross = 309,
        DISPID_NodalExportResults = 310,
        DISPID_ResultBoltResultType = 311,
        DISPID_ResultActualFrequencyDamped = 312,
        DISPID_ResultPlySelection = 313,
        DISPID_ResultSubScopeDefineBy = 314,
        DISPID_ResultLegendStyle = 315,
        DISPID_ResultShowCriticalFailureMode = 316,
        DISPID_ResultShowCriticalLayer = 317,
        DISPID_ResultTextVisualization = 318,
        DISPID_ResultTextVisualizationValue = 319,
        DISPID_ResultCompositeFailureResultType = 320
    } kDispId_Result;

    [
      odl,
      uuid(59636E65-7A86-45F5-A455-FC533AA6D40F),
      helpstring("IDSResultAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSResultAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x0000003b), propget, helpstring("property UseParentScoping")]
        HRESULT UseParentScoping([out, retval] VARIANT_BOOL* pFlag);
        [id(0x0000003b), propput, helpstring("property UseParentScoping")]
        HRESULT UseParentScoping([in] VARIANT_BOOL pFlag);
        [id(0x00000068), propget, helpstring("property GeometryDefineBy")]
        HRESULT GeometryDefineBy([out, retval] DSGeometryDefineByType* pVal);
        [id(0x00000068), propput, helpstring("property GeometryDefineBy")]
        HRESULT GeometryDefineBy([in] DSGeometryDefineByType pVal);
        [id(0x0000000a), propput, helpstring("property GeometrySelection")]
        HRESULT GeometrySelection([in] IDispatch* rhs);
        [id(0x00000044), propget, helpstring("property GeometrySelectionString")]
        HRESULT GeometrySelectionString([out, retval] BSTR* pVal);
        [id(0x00000069), propget, helpstring("property PathSelection")]
        HRESULT PathSelection([out, retval] dsid* pVal);
        [id(0x00000069), propput, helpstring("property PathSelection")]
        HRESULT PathSelection([in] dsid pVal);
        [id(0x0000000d), propget, helpstring("property TargetReduction")]
        HRESULT TargetReduction([out, retval] int* pVal);
        [id(0x0000000d), propput, helpstring("property TargetReduction")]
        HRESULT TargetReduction([in] int pVal);
        [id(0x0000000e), propget, helpstring("property OriginalMass")]
        HRESULT OriginalMass([out, retval] double* pVal);
        [id(0x0000000f), propget, helpstring("property OptimizedMass")]
        HRESULT OptimizedMass([out, retval] double* pVal);
        [id(0x00000010), propget, helpstring("property MarginalMass")]
        HRESULT MarginalMass([out, retval] double* pVal);
        [id(0x00000011), propget, helpstring("property UnitString")]
        HRESULT unitString([out, retval] BSTR* pVal);
        [id(0x0000001b), helpstring("method GenerateVRMLFile")]
        HRESULT GenerateVRMLFile(BSTR bsFilename);
        [id(0x0000001c), helpstring("method AddConvergence")]
        HRESULT AddConvergence([out, retval] IDispatch** ppConv);
        [id(0x0000001d), helpstring("method AddAlert")]
        HRESULT AddAlert(
                        [in] DSMinMax trackingType, 
                        [out, retval] IDispatch** ppVal);
        [id(0x0000001e), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x00000012), propget, helpstring("property Convergences")]
        HRESULT Convergences([out, retval] IDispatch** ppDisp);
        [id(0x00000013), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x00000014), propget, helpstring("property Alerts")]
        HRESULT Alerts([out, retval] IDispatch** ppDisp);
        [id(0x00000015), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** __MIDL__IDSResultAuto0000);
        [id(0x0000001f), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x00000016), propget, helpstring("property TargetLife")]
        HRESULT TargetLife([out, retval] double* pVal);
        [id(0x00000016), propput, helpstring("property TargetLife")]
        HRESULT TargetLife([in] double pVal);
        [id(0x00000017), propget, helpstring("property CriticalValue")]
        HRESULT CriticalValue([out, retval] double* pVal);
        [id(0x0000001a), propget, helpstring("property IsSolved")]
        HRESULT IsSolved([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000022), propget, helpstring("property DeformationHeatFluxType")]
        HRESULT DeformationHeatFluxType([out, retval] DSDeformationHeatFluxType* pVal);
        [id(0x00000022), propput, helpstring("property DeformationHeatFluxType")]
        HRESULT DeformationHeatFluxType([in] DSDeformationHeatFluxType pVal);
        [id(0x00000024), propget, helpstring("property StressStrainType")]
        HRESULT StressStrainType([out, retval] DSStressStrainType* pVal);
        [id(0x00000024), propput, helpstring("property StressStrainType")]
        HRESULT StressStrainType([in] DSStressStrainType pVal);
        [id(0x00000033), propget, helpstring("property ContactResultType")]
        HRESULT ContactResultType([out, retval] DSResultType* pVal);
        [id(0x00000033), propput, helpstring("property ContactResultType")]
        HRESULT ContactResultType([in] DSResultType pVal);
        [id(0x0000005a), propget, helpstring("method ShellFaceEnum")]
        HRESULT ShellFaceEnum([out, retval] DSShellFaceEnum* pShellFace);
        [id(0x0000005a), propput, helpstring("method ShellFaceEnum")]
        HRESULT ShellFaceEnum([in] DSShellFaceEnum pShellFace);
        [id(0x0000005b), propget, helpstring("property Layer")]
        HRESULT Layer([out, retval] int* pVal);
        [id(0x0000005b), propput, helpstring("property Layer")]
        HRESULT Layer([in] int pVal);
        [id(0x00000043), propget, helpstring("property BeamToolStressResultType")]
        HRESULT BeamToolStressResultType([out, retval] DSResultType* pVal);
        [id(0x00000043), propput, helpstring("property BeamToolStressResultType")]
        HRESULT BeamToolStressResultType([in] DSResultType pVal);
        [id(0x00000020), propget, helpstring("property NormalOrientation")]
        HRESULT NormalOrientation([out, retval] NormalOrientationType* pVal);
        [id(0x00000020), propput, helpstring("property NormalOrientation")]
        HRESULT NormalOrientation([in] NormalOrientationType pVal);
        [id(0x00000021), propget, helpstring("property ShearOrientation")]
        HRESULT ShearOrientation([out, retval] ShearOrientationType* pVal);
        [id(0x00000021), propput, helpstring("property ShearOrientation")]
        HRESULT ShearOrientation([in] ShearOrientationType pVal);
        [id(0x00000081), propget, helpstring("property CintResultType")]
        HRESULT CintResultType([out, retval] DSResultType* pVal);
        [id(0x00000081), propput, helpstring("property CintResultType")]
        HRESULT CintResultType([in] DSResultType pVal);
        [id(0x00000053), propget, helpstring("property ResultRelativity")]
        HRESULT ResultRelativity([out, retval] ResultRelativityType* pVal);
        [id(0x00000053), propput, helpstring("property ResultRelativity")]
        HRESULT ResultRelativity([in] ResultRelativityType pVal);
        [id(0x00000054), propget, helpstring("property ResultScopeBy")]
        HRESULT ResultScopeBy([out, retval] ResultScopeByType* pVal);
        [id(0x00000054), propput, helpstring("property ResultScopeBy")]
        HRESULT ResultScopeBy([in] ResultScopeByType pVal);
        [id(0x00000055), propget, helpstring("property ResultScaleFactor")]
        HRESULT ResultScaleFactor([out, retval] double* pVal);
        [id(0x00000055), propput, helpstring("property ResultScaleFactor")]
        HRESULT ResultScaleFactor([in] double pVal);
        [id(0x00000056), propget, helpstring("property ResultPSDProbability")]
        HRESULT ResultPSDProbability([out, retval] double* pVal);
        [id(0x00000056), propput, helpstring("property ResultPSDProbability")]
        HRESULT ResultPSDProbability([in] double pVal);
        [id(0x00000023), propget, helpstring("property ResultType")]
        HRESULT ResultType([out, retval] unsigned int* pVal);
        [id(0x00000023), propput, helpstring("property ResultType")]
        HRESULT ResultType([in] unsigned int pVal);
        [id(0x00000063), propget, helpstring("method SetDriver")]
        HRESULT SetDriver([out, retval] DSSetDriverStyle* pVal);
        [id(0x00000063), propput, helpstring("method SetDriver")]
        HRESULT SetDriver([in] DSSetDriverStyle pVal);
        [id(0x00000064), propget, helpstring("method SetNumber")]
        HRESULT SetNumber([out, retval] unsigned int* pVal);
        [id(0x00000064), propput, helpstring("method SetNumber")]
        HRESULT SetNumber([in] unsigned int pVal);
        [id(0x00000019), propget, helpstring("property Frequency")]
        HRESULT Frequency([out, retval] double* pVal);
        [id(0x00000019), propput, helpstring("property Frequency")]
        HRESULT Frequency([in] double pVal);
        [id(0x0000002a), propget, helpstring("property LoadMultiplier")]
        HRESULT LoadMultiplier([out, retval] double* pVal);
        [id(0x0000000b), propget, helpstring("property Minimum")]
        HRESULT Minimum([out, retval] double* pVal);
        [id(0x0000000c), propget, helpstring("property Maximum")]
        HRESULT Maximum([out, retval] double* pVal);
        [id(0x00000049), propget, helpstring("property MinimumBodyName")]
        HRESULT MinimumBodyName([out, retval] BSTR* pVal);
        [id(0x0000004a), propget, helpstring("property MaximumBodyName")]
        HRESULT MaximumBodyName([out, retval] BSTR* pVal);
        [id(0x00000025), propget, helpstring("property Prototypes")]
        HRESULT Prototypes([out, retval] VARIANT* pVal);
        [id(0x00000026), propget, helpstring("property ScopedType")]
        HRESULT ScopedType([out, retval] unsigned int* pVal);
        [id(0x00000027), helpstring("method LoadFrom")]
        HRESULT LoadFrom(
                        [in] BSTR bsFilename, 
                        [in] unsigned int ulColumn, 
                        [in] VARIANT_BOOL bInterpolateMidSides, 
                        [in] BSTR bsBotFileName);
        [id(0x00000028), helpstring("method UpdatePlot")]
        HRESULT UpdatePlot();
        [id(0x00000029), propget, helpstring("property UnitType")]
        HRESULT unitType([out, retval] int* unitType);
        [id(0x00000029), propput, helpstring("property UnitType")]
        HRESULT unitType([in] int unitType);
        [id(0x00000018), propget, helpstring("property Mode")]
        HRESULT Mode([out, retval] unsigned int* pVal);
        [id(0x00000018), propput, helpstring("property Mode")]
        HRESULT Mode([in] unsigned int pVal);
        [id(0x00000065), propget, helpstring("property RequestedFrequency")]
        HRESULT RequestedFrequency([out, retval] double* pVal);
        [id(0x00000065), propput, helpstring("property RequestedFrequency")]
        HRESULT RequestedFrequency([in] double pVal);
        [id(0x00000086), propget, helpstring("property Amplitude")]
        HRESULT Amplitude([out, retval] VARIANT_BOOL* pFlag);
        [id(0x00000086), propput, helpstring("property Amplitude")]
        HRESULT Amplitude([in] VARIANT_BOOL pFlag);
        [id(0x0000002c), propget, helpstring("property PhaseAngle")]
        HRESULT PhaseAngle([out, retval] double* pVal);
        [id(0x0000002c), propput, helpstring("property PhaseAngle")]
        HRESULT PhaseAngle([in] double pVal);
        [id(0x00000133), propget, helpstring("property PhaseIncrement")]
        HRESULT PhaseIncrement([out, retval] double* pVal);
        [id(0x00000133), propput, helpstring("property PhaseIncrement")]
        HRESULT PhaseIncrement([in] double pVal);
        [id(0x0000002d), propget, helpstring("property Arrays")]
        HRESULT Arrays([out, retval] IDispatch** ppVal);
        [id(0x0000002e), propget, helpstring("property NodeCountForPart")]
        HRESULT NodeCountForPart(
                        int partIndex, 
                        [out, retval] VARIANT* pVal);
        [id(0x0000002f), propget, helpstring("property NodeForPart")]
        HRESULT NodeForPart(
                        int partIndex, 
                        int index, 
                        [out, retval] VARIANT* pVal);
        [id(0x00000030), propget, helpstring("property ElementCountForPart")]
        HRESULT ElementCountForPart(
                        int partIndex, 
                        [out, retval] VARIANT* pVal);
        [id(0x00000031), propget, helpstring("property ElementForPart")]
        HRESULT ElementForPart(
                        int partIndex, 
                        int index, 
                        [out, retval] VARIANT* pVal);
        [id(0x00000032), helpstring("method CreateTabbedFile")]
        HRESULT CreateTabbedFile(
                        [in] BSTR filePath, 
                        [out, retval] BSTR* fileText);
        [id(0x00000034), propget, helpstring("property CoordinateSystemSelection")]
        HRESULT CoordinateSystemSelection([out, retval] int* pVal);
        [id(0x00000034), propput, helpstring("property CoordinateSystemSelection")]
        HRESULT CoordinateSystemSelection([in] int pVal);
        [id(0x00000035), propget, helpstring("property BiaxialityType")]
        HRESULT BiaxialityType([out, retval] int* pVal);
        [id(0x00000035), propput, helpstring("property BiaxialityType")]
        HRESULT BiaxialityType([in] int pVal);
        [id(0x00000040), propget, helpstring("property ConvergenceCriterion")]
        HRESULT ConvergenceCriterion([out, retval] double* pVal);
        [id(0x00000041), propget, helpstring("property ConvergenceValue")]
        HRESULT ConvergenceValue([out, retval] double* pVal);
        [id(0x0000003c), propget, helpstring("property Time")]
        HRESULT Time([out, retval] double* pVal);
        [id(0x0000003f), propget, helpstring("property LoadStep")]
        HRESULT LoadStep([out, retval] int* pVal);
        [id(0x0000003d), propget, helpstring("property Substep")]
        HRESULT Substep([out, retval] int* pVal);
        [id(0x00000036), propget, helpstring("property IterationNumber")]
        HRESULT IterationNumber([out, retval] double* pVal);
        [id(0x00000037), propget, helpstring("property EdgeNumVals")]
        HRESULT EdgeNumVals([out, retval] int* pVal);
        [id(0x00000038), propget, helpstring("property EdgeXVal")]
        HRESULT EdgeXVal(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000039), propget, helpstring("property EdgeYVal")]
        HRESULT EdgeYVal(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x0000003a), helpstring("method EdgeCollectVals")]
        HRESULT EdgeCollectVals();
        [id(0x0000003e), helpstring("method RefreshScoping")]
        HRESULT RefreshScoping();
        [id(0x00000050), propget, helpstring("property AttatchedSourceName")]
        HRESULT AttatchedSourceName([out, retval] BSTR* pVal);
        [id(0x00000045), propget, helpstring("property ResultTypeString")]
        HRESULT ResultTypeString([out, retval] BSTR* pVal);
        [id(0x00000046), propget, helpstring("property OrientationString")]
        HRESULT OrientationString([out, retval] BSTR* pVal);
        [id(0x00000048), propget, helpstring("property FrequencyString")]
        HRESULT FrequencyString([out, retval] BSTR* pVal);
        [id(0x0000004b), propget, helpstring("property SequenceNumber")]
        HRESULT SequenceNumber([out, retval] unsigned int* pVal);
        [id(0x0000004b), propput, helpstring("property SequenceNumber")]
        HRESULT SequenceNumber([in] unsigned int pVal);
        [id(0x0000004c), propget, helpstring("property SummedFMAG")]
        HRESULT SummedFMAG([out, retval] double* pVal);
        [id(0x0000004d), propget, helpstring("property Torque")]
        HRESULT Torque([out, retval] double* pVal);
        [id(0x0000004e), propget, helpstring("property SymmetryMultiplier")]
        HRESULT SymmetryMultiplier([out, retval] double* pVal);
        [id(0x0000004e), propput, helpstring("property SymmetryMultiplier")]
        HRESULT SymmetryMultiplier([in] double pVal);
        [id(0x00000051), propget, helpstring("property IsThermalResult")]
        HRESULT IsThermalResult([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000052), propget, helpstring("property IsConvergencePresent")]
        HRESULT IsConvergencePresent([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000057), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000058), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00000059), propget, helpstring("property IsHarmonicResult")]
        HRESULT IsHarmonicResult([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000005c), propget, helpstring("property MultipleResultPoints")]
        HRESULT MultipleResultPoints([out, retval] int* pVal);
        [id(0x0000005d), propget, helpstring("property UnitTypeByDispid")]
        HRESULT UnitTypeByDispid(
                        [in] int dispid, 
                        [out, retval] int* unitType);
        [id(0x0000005e), propget, helpstring("property UnitStringByDispid")]
        HRESULT UnitStringByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* unitString);
        [id(0x0000005f), propget, helpstring("property ParamNameByDispid")]
        HRESULT ParamNameByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* paramName);
        [id(0x00000060), propget, helpstring("property ActualFrequency")]
        HRESULT ActualFrequency([out, retval] double* pVal);
        [id(0x0000007d), propget, helpstring("property ActualStability")]
        HRESULT ActualStability([out, retval] double* pVal);
        [id(0x0000007e), propget, helpstring("property ActualModalDampingRatio")]
        HRESULT ActualModalDampingRatio([out, retval] double* pVal);
        [id(0x0000007f), propget, helpstring("property ActualLogarithmicDecrement")]
        HRESULT ActualLogarithmicDecrement([out, retval] double* pVal);
        [id(0x00000062), propget, helpstring("method CalculateTimeHistory")]
        HRESULT CalculateTimeHistory([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000062), propput, helpstring("method CalculateTimeHistory")]
        HRESULT CalculateTimeHistory([in] VARIANT_BOOL pVal);
        [id(0x0000004f), propget, helpstring("property TransientDisplayTime")]
        HRESULT TransientDisplayTime([out, retval] double* pVal);
        [id(0x0000004f), propput, helpstring("property TransientDisplayTime")]
        HRESULT TransientDisplayTime([in] double pVal);
        [id(0x00000061), propget, helpstring("method Identifier")]
        HRESULT Identifier([out, retval] BSTR* pVal);
        [id(0x00000061), propput, helpstring("method Identifier")]
        HRESULT Identifier([in] BSTR pVal);
        [id(0x00000066), propget, helpstring("property IsElectricResult")]
        HRESULT IsElectricResult([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000067), helpstring("method RenameBasedOnDefinition")]
        HRESULT RenameBasedOnDefinition();
        [id(0x0000006a), propget, helpstring("property GraphControlsXAxis")]
        HRESULT GraphControlsXAxis([out, retval] int* pVal);
        [id(0x0000006a), propput, helpstring("property GraphControlsXAxis")]
        HRESULT GraphControlsXAxis([in] int pVal);
        [id(0x0000006b), helpstring("method CreateTabbedFileForPathSelection")]
        HRESULT CreateTabbedFileForPathSelection(
                        [in] BSTR filePath, 
                        [out, retval] BSTR* fileText);
        [id(0x0000006c), propget, helpstring("method ResultAveraging")]
        HRESULT ResultAveraging([out, retval] int* pVal);
        [id(0x0000006c), propput, helpstring("method ResultAveraging")]
        HRESULT ResultAveraging([in] int pVal);
        [id(0x0000006d), propget, helpstring("property MinimumOfMinimumOverTime")]
        HRESULT MinimumOfMinimumOverTime([out, retval] double* pVal);
        [id(0x0000006e), propget, helpstring("property MaximumOfMinimumOverTime")]
        HRESULT MaximumOfMinimumOverTime([out, retval] double* pVal);
        [id(0x00000074), propget, helpstring("property CyclicMinimumOverPhase")]
        HRESULT CyclicMinimumOverPhase([out, retval] double* pVal);
        [id(0x00000075), propget, helpstring("property CyclicMaximumOverPhase")]
        HRESULT CyclicMaximumOverPhase([out, retval] double* pVal);
        [id(0x00000076), propget, helpstring("property CyclicPhaseForMinimum")]
        HRESULT CyclicPhaseForMinimum([out, retval] double* pVal);
        [id(0x00000077), propget, helpstring("property CyclicPhaseForMaximum")]
        HRESULT CyclicPhaseForMaximum([out, retval] double* pVal);
        [id(0x00000078), propget, helpstring("method CyclicHarmonicIndex")]
        HRESULT CyclicHarmonicIndex([out, retval] unsigned int* pVal);
        [id(0x00000078), propput, helpstring("method CyclicHarmonicIndex")]
        HRESULT CyclicHarmonicIndex([in] unsigned int pVal);
        [id(0x00000079), propget, helpstring("method CyclicPhaseAngle")]
        HRESULT CyclicPhaseAngle([out, retval] double* pVal);
        [id(0x00000079), propput, helpstring("method CyclicPhaseAngle")]
        HRESULT CyclicPhaseAngle([in] double pVal);
        [id(0x0000007a), propget, helpstring("property CyclicMode")]
        HRESULT CyclicMode([out, retval] unsigned int* pVal);
        [id(0x0000007a), propput, helpstring("property CyclicMode")]
        HRESULT CyclicMode([in] unsigned int pVal);
        [id(0x0000007c), propget, helpstring("property CyclicPhaseHistory")]
        HRESULT CyclicPhaseHistory([out, retval] unsigned int* pVal);
        [id(0x0000007c), propput, helpstring("property CyclicPhaseHistory")]
        HRESULT CyclicPhaseHistory([in] unsigned int pVal);
        [id(0x000000c9), propget, helpstring("property LinearizedResultFlag")]
        HRESULT LinearizedResultFlag([out, retval] VARIANT_BOOL* pVal);
        [id(0x000000c9), propput, helpstring("property LinearizedResultFlag")]
        HRESULT LinearizedResultFlag([in] VARIANT_BOOL pVal);
        [id(0x000000c8), propget, helpstring("property LinearizedSubtype")]
        HRESULT LinearizedSubtype([out, retval] DSLinearizedSubtype* pVal);
        [id(0x000000c8), propput, helpstring("property LinearizedSubtype")]
        HRESULT LinearizedSubtype([in] DSLinearizedSubtype pVal);
        [id(0x000000ca), propget, helpstring("property Linearized2DBehavior")]
        HRESULT Linearized2DBehavior([out, retval] DSLinearized2DBehavior* pVal);
        [id(0x000000ca), propput, helpstring("property Linearized2DBehavior")]
        HRESULT Linearized2DBehavior([in] DSLinearized2DBehavior pVal);
        [id(0x000000cb), propget, helpstring("property AverageRadiusCurvature")]
        HRESULT AverageRadiusCurvature([out, retval] double* pVal);
        [id(0x000000cb), propput, helpstring("property AverageRadiusCurvature")]
        HRESULT AverageRadiusCurvature([in] double pVal);
        [id(0x000000cc), propget, helpstring("property ThroughThicknessBendingStress")]
        HRESULT ThroughThicknessBendingStress([out, retval] DSThroughThicknessBendingStress* pVal);
        [id(0x000000cc), propput, helpstring("property ThroughThicknessBendingStress")]
        HRESULT ThroughThicknessBendingStress([in] DSThroughThicknessBendingStress pVal);
        [id(0x000000d2), propget, helpstring("property MembraneStress")]
        HRESULT MembraneStress([out, retval] double* pVal);
        [id(0x000000d3), propget, helpstring("property BendingStressInside")]
        HRESULT BendingStressInside([out, retval] double* pVal);
        [id(0x000000d4), propget, helpstring("property BendingStressOutside")]
        HRESULT BendingStressOutside([out, retval] double* pVal);
        [id(0x000000d5), propget, helpstring("property MembraneBendingStressInside")]
        HRESULT MembraneBendingStressInside([out, retval] double* pVal);
        [id(0x000000d6), propget, helpstring("property MembraneBendingStressCenter")]
        HRESULT MembraneBendingStressCenter([out, retval] double* pVal);
        [id(0x000000d7), propget, helpstring("property MembraneBendingStressOutside")]
        HRESULT MembraneBendingStressOutside([out, retval] double* pVal);
        [id(0x000000d8), propget, helpstring("property PeakStressInside")]
        HRESULT PeakStressInside([out, retval] double* pVal);
        [id(0x000000d9), propget, helpstring("property PeakStressCenter")]
        HRESULT PeakStressCenter([out, retval] double* pVal);
        [id(0x000000da), propget, helpstring("property PeakStressOutside")]
        HRESULT PeakStressOutside([out, retval] double* pVal);
        [id(0x000000db), propget, helpstring("property TotalStressInside")]
        HRESULT TotalStressInside([out, retval] double* pVal);
        [id(0x000000dc), propget, helpstring("property TotalStressCenter")]
        HRESULT TotalStressCenter([out, retval] double* pVal);
        [id(0x000000dd), propget, helpstring("property TotalStressOutside")]
        HRESULT TotalStressOutside([out, retval] double* pVal);
        [id(0x0000006f), propget, helpstring("property MinimumOfMaximumOverTime")]
        HRESULT MinimumOfMaximumOverTime([out, retval] double* pVal);
        [id(0x00000070), propget, helpstring("property MaximumOfMaximumOverTime")]
        HRESULT MaximumOfMaximumOverTime([out, retval] double* pVal);
        [id(0x00000071), helpstring("method GetLinearizedStressParameterArray")]
        HRESULT GetLinearizedStressParameterArray(
                        [in] int iRow, 
                        [in] int iColumn, 
                        [out, retval] double* pVal);
        [id(0x00000072), propget, helpstring("property Average")]
        HRESULT Average([out, retval] double* pVal);
        [id(0x00000073), propget, helpstring("property Flow")]
        HRESULT Flow([out, retval] double* pVal);
        [id(0x000000de), propget, helpstring("property AccelerationG")]
        HRESULT AccelerationG([out, retval] VARIANT_BOOL* pVal);
        [id(0x000000de), propput, helpstring("property AccelerationG")]
        HRESULT AccelerationG([in] VARIANT_BOOL pVal);
        [id(0x0000007b), propget, helpstring("property ComponentSelection")]
        HRESULT ComponentSelection([out, retval] dsid* pVal);
        [id(0x0000007b), propput, helpstring("property ComponentSelection")]
        HRESULT ComponentSelection([in] dsid pVal);
        [id(0x000000e1), propget, helpstring("property ShearMomentType")]
        HRESULT ShearMomentType([out, retval] DSShearMomentType* pVal);
        [id(0x000000e1), propput, helpstring("property ShearMomentType")]
        HRESULT ShearMomentType([in] DSShearMomentType pVal);
        [id(0x000000e2), propget, helpstring("property ResultMomentDiagramComponents")]
        HRESULT ResultMomentDiagramComponents(
                        [in] int indexOfType, 
                        [out, retval] _eMomentDiagramType* pVal);
        [id(0x000000e3), propget, helpstring("property ResultMomentDiagramNumVals")]
        HRESULT ResultMomentDiagramNumVals([out, retval] int* pVal);
        [id(0x000000e4), propget, helpstring("property ResultMomentDiagramXVals")]
        HRESULT ResultMomentDiagramXVals(
                        [in] _eMomentDiagramType dType, 
                        [in] int indexVal, 
                        [out, retval] double* pVal);
        [id(0x000000e5), propget, helpstring("property ResultMomentDiagramYVals")]
        HRESULT ResultMomentDiagramYVals(
                        [in] _eMomentDiagramType dType, 
                        [in] int indexVal, 
                        [out, retval] double* pVal);
        [id(0x000000e6), propget, helpstring("property ResultUnitSystemFromRepository")]
        HRESULT ResultUnitSystemFromRepository([out, retval] int* pVal);
        [id(0x000000e7), helpstring("property ResultClearDiagramData")]
        HRESULT ResultClearDiagramData();
        [id(0x0000012c), propget, helpstring("property ResultDisplayS")]
        HRESULT ResultDisplayS([out, retval] double* pVal);
        [id(0x0000012c), propput, helpstring("property ResultDisplayS")]
        HRESULT ResultDisplayS([in] double pVal);
        [id(0x0000012d), propget, helpstring("property GasketResultType")]
        HRESULT GasketResultType([out, retval] DSGasketResultType* pVal);
        [id(0x0000012d), propput, helpstring("property GasketResultType")]
        HRESULT GasketResultType([in] DSGasketResultType pVal);
        [id(0x0000012e), propget, helpstring("property ShearMomentDiagramOrientation")]
        HRESULT ShearMomentDiagramOrientation([out, retval] ShearMomentDiagramOrientationType* pVal);
        [id(0x0000012e), propput, helpstring("property ShearMomentDiagramOrientation")]
        HRESULT ShearMomentDiagramOrientation([in] ShearMomentDiagramOrientationType pVal);
        [id(0x0000012f), propget, helpstring("property Suppressed")]
        HRESULT Suppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000012f), propput, helpstring("property Suppressed")]
        HRESULT Suppressed([in] VARIANT_BOOL pVal);
        [id(0x000000e8), propget, helpstring("property ShellMBPType")]
        HRESULT ShellMBPType([out, retval] DSShellMBPType* pVal);
        [id(0x000000e8), propput, helpstring("property ShellMBPType")]
        HRESULT ShellMBPType([in] DSShellMBPType pVal);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00000131), helpstring("method ContourResultInput")]
        HRESULT ContourResultInput(
                        [in] double dPhase, 
                        [in] double dFrequency);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x00000132), helpstring("method alignCoordinateSystem")]
        HRESULT alignCoordinateSystem(
                        [in] IDispatch* piSelectMgr, 
                        [in] int coordSysID);
        [id(0x00000082), propget, helpstring("property ContourStart")]
        HRESULT ContourStart([out, retval] unsigned int* pVal);
        [id(0x00000082), propput, helpstring("property ContourStart")]
        HRESULT ContourStart([in] unsigned int pVal);
        [id(0x00000083), propget, helpstring("property ContourEnd")]
        HRESULT ContourEnd([out, retval] unsigned int* pVal);
        [id(0x00000083), propput, helpstring("property ContourEnd")]
        HRESULT ContourEnd([in] unsigned int pVal);
        [id(0x00000084), propget, helpstring("property ActiveContour")]
        HRESULT ActiveContour([out, retval] unsigned int* pVal);
        [id(0x00000084), propput, helpstring("property ActiveContour")]
        HRESULT ActiveContour([in] unsigned int pVal);
        [id(0x00000134), propget, helpstring("property DamageResultType")]
        HRESULT DamageResultType([out, retval] DSResultType* pVal);
        [id(0x00000134), propput, helpstring("property DamageResultType")]
        HRESULT DamageResultType([in] DSResultType pVal);
        [id(0x00000135), propget, helpstring("method ResultAveragingAcross")]
        HRESULT ResultAveragingAcross([out, retval] int* pVal);
        [id(0x00000135), propput, helpstring("method ResultAveragingAcross")]
        HRESULT ResultAveragingAcross([in] int pVal);
        [id(0x00000136), helpstring("method ExportNodalResults")]
        HRESULT ExportNodalResults(
                        [in] IDispatch* piSelectMgr, 
                        [out, retval] BSTR* fileText);
        [id(0x00000137), propget, helpstring("property BoltResultType")]
        HRESULT BoltResultType([out, retval] DSResultType* pVal);
        [id(0x00000137), propput, helpstring("property BoltResultType")]
        HRESULT BoltResultType([in] DSResultType pVal);
        [id(0x00000138), propget, helpstring("property ActualFrequencyDamped")]
        HRESULT ActualFrequencyDamped([out, retval] double* pVal);
        [id(0x0000013a), propget, helpstring("property GeometryDefineBy")]
        HRESULT SubScopeDefineBy([out, retval] DSSubScopingDefineByType* pVal);
        [id(0x0000013a), propput, helpstring("property GeometryDefineBy")]
        HRESULT SubScopeDefineBy([in] DSSubScopingDefineByType pVal);
        [id(0x00000139), propget, helpstring("property PlySelection")]
        HRESULT PlySelection([out, retval] IDispatch** ppIAnsEnumULONGsDisp);
        [id(0x00000139), propput, helpstring("property PlySelection")]
        HRESULT PlySelection([in] IDispatch* ppIAnsEnumULONGsDisp);
        [id(0x600200ed), propget]
        HRESULT CanAddId(
                        [in] int lDSId, 
                        [out, retval] VARIANT_BOOL* pvbCanAdd);
        [id(0x600200ee), propget, helpstring("property StressOrStrainTypeIfStressStrainResult")]
        HRESULT StressOrStrainTypeIfStressStrainResult([out, retval] unsigned int* pVal);
        [id(0x0000013b), propget, helpstring("property ResultLegendStyle")]
        HRESULT ResultLegendStyle([out, retval] BSTR* pStyle);
        [id(0x0000013b), propput, helpstring("property ResultLegendStyle")]
        HRESULT ResultLegendStyle([in] BSTR pStyle);
        [id(0x00000140), propget, helpstring("property CompositeFailureResultType")]
        HRESULT CompositeFailureResultType([out, retval] DSResultType* pVal);
        [id(0x00000140), propput, helpstring("property CompositeFailureResultType")]
        HRESULT CompositeFailureResultType([in] DSResultType pVal);
    };

    typedef enum {
        kTotal = 0,
        kDirectional = 1
    } DSDeformationHeatFluxType;

    typedef enum {
        kEquivalent = 0,
        kMaxPrincipal = 1,
        kMidPrincipal = 2,
        kMinPrincipal = 3,
        kMaxShear = 4,
        kIntensity = 5,
        knormal = 6,
        kShear = 7,
        kThermal = 8,
        kStressStrainNone = 9
    } DSStressStrainType;

    typedef enum {
        UNDEFINED_RESULT_TYPE = 0,
        EFFECTIVE_STRESS = 1,
        MAXIMUM_PRINCIPAL_STRESS = 2,
        INTERMEDIATE_PRINCIPAL_STRESS = 3,
        MINIMUM_PRINCIPAL_STRESS = 4,
        MAXIMUM_SHEAR_STRESS = 5,
        STRESS_INTENSITY = 6,
        X_STRESS = 7,
        Y_STRESS = 8,
        Z_STRESS = 9,
        XY_SHEAR_STRESS = 10,
        YZ_SHEAR_STRESS = 11,
        XZ_SHEAR_STRESS = 12,
        EFFECTIVE_STRAIN = 13,
        MAXIMUM_PRINCIPAL_STRAIN = 14,
        INTERMEDIATE_PRINCIPAL_STRAIN = 15,
        MINIMUM_PRINCIPAL_STRAIN = 16,
        MAXIMUM_SHEAR_STRAIN = 17,
        STRAIN_INTENSITY = 18,
        X_STRAIN = 19,
        Y_STRAIN = 20,
        Z_STRAIN = 21,
        XY_SHEAR_STRAIN = 22,
        YZ_SHEAR_STRAIN = 23,
        XZ_SHEAR_STRAIN = 24,
        DEFORMED_SHAPE = 25,
        X_DISPLACEMENT = 26,
        Y_DISPLACEMENT = 27,
        Z_DISPLACEMENT = 28,
        MARGIN_SAFETY_STRESS_SAFETY_TOOL = 29,
        FACTOR_SAFETY_STRESS_SAFETY_TOOL = 30,
        STRESS_RATIO_STRESS_SAFETY_TOOL = 31,
        MARGIN_SAFETY_MAX_SHEAR_STRESS_TOOL = 32,
        FACTOR_SAFETY_MAX_SHEAR_STRESS_TOOL = 33,
        STRESS_RATIO_MAX_SHEAR_STRESS_TOOL = 34,
        MARGIN_SAFETY_MAX_COULOMB_MOHR_STRESS_TOOL = 35,
        FACTOR_SAFETY_MAX_COULOMB_MOHR_STRESS_TOOL = 36,
        STRESS_RATIO_MAX_COULOMB_MOHR_STRESS_TOOL = 37,
        MARGIN_SAFETY_MAX_TENSILE_STRESS_TOOL = 38,
        FACTOR_SAFETY_MAX_TENSILE_STRESS_TOOL = 39,
        STRESS_RATIO_MAX_TENSILE_STRESS_TOOL = 40,
        FREQUENCY_MODE1 = 41,
        FREQUENCY_MODE2 = 42,
        FREQUENCY_MODE3 = 43,
        FREQUENCY_MODE4 = 44,
        FREQUENCY_MODE5 = 45,
        FREQUENCY_MODE6 = 46,
        VOLUME_REDUCTION = 47,
        FREQUENCY_MODE = 48,
        Temperature = 49,
        THERMAL_HEAT_FLUX_SUM = 50,
        X_THERMAL_HEAT_FLUX = 51,
        Y_THERMAL_HEAT_FLUX = 52,
        Z_THERMAL_HEAT_FLUX = 53,
        MAXIMUM_PRINCIPAL_THERMAL_STRAIN = 54,
        INTERMEDIATE_PRINCIPAL_THERMAL_STRAIN = 55,
        MINIMUM_PRINCIPAL_THERMAL_STRAIN = 56,
        X_THERMAL_STRAIN = 57,
        Y_THERMAL_STRAIN = 58,
        Z_THERMAL_STRAIN = 59,
        LIFE_FATIGUE_STRESS_TOOL = 60,
        FACTOR_SAFETY_FATIGUE_STRESS_TOOL = 61,
        DAMAGE_FATIGUE_STRESS_TOOL = 62,
        BIAXIALITY_INDICATION_FATIGUE_TOOL = 63,
        RAINFLOW_MATRIX_FATIGUE_TOOL = 64,
        DAMAGE_MATRIX_FATIGUE_TOOL = 65,
        FATIGUE_SENSITIVITY = 66,
        PARAMETER_RESULT_CHART = 67,
        CONTACT_PRESSURE = 68,
        CONTACT_PENETRATION = 69,
        CONTACT_GAP = 70,
        CONTACT_FRICTIONAL_STRESS = 71,
        CONTACT_SLIDING_DISTANCE = 72,
        CONTACT_STATUS = 73,
        FATIGUE_EQUIVALENT_REVERSED_STRESS = 74,
        DEFORMATION_VECTOR = 75,
        THERMAL_HEAT_FLUX_VECTOR = 76,
        PRINCIPAL_STRESS_VECTOR = 77,
        PRINCIPAL_STRAIN_VECTOR = 78,
        TOTAL_ACCELERATION = 79,
        X_ACCELERATION = 80,
        Y_ACCELERATION = 81,
        Z_ACCELERATION = 82,
        CONTACT_MIN_MU = 83,
        EQUIVALENT_PLASTIC_STRAIN = 84,
        NR_RESIDUAL_FORCE = 85,
        NR_RESIDUAL_MOMENT = 86,
        NR_RESIDUAL_HEAT = 87,
        TOTAL_MAG_FLUX_DENSITY = 88,
        X_MAG_FLUX_DENSITY = 89,
        Y_MAG_FLUX_DENSITY = 90,
        Z_MAG_FLUX_DENSITY = 91,
        TOTAL_MAG_FIELD_INTENSITY = 92,
        X_MAG_FIELD_INTENSITY = 93,
        Y_MAG_FIELD_INTENSITY = 94,
        Z_MAG_FIELD_INTENSITY = 95,
        TOTAL_MAG_FORCES = 96,
        X_MAG_FORCES = 97,
        Y_MAG_FORCES = 98,
        Z_MAG_FORCES = 99,
        CONTACT_NO_ELEMENTS_IN_CONTACT = 100,
        CONTACT_CNOS = 101,
        CONTACT_ELASTIC_SLIP = 102,
        CONTACT_MAX_NORMAL_STIFFNESS = 103,
        CONTACT_MAX_TANGENTIAL_STIFFNESS = 104,
        CONTACT_RESULTING_PINBALL = 105,
        CONTACT_NO_ELEMENTS_IN_STICKING_CONTACT = 106,
        CONTACT_MIN_NORMAL_STIFFNESS = 107,
        CONTACT_MIN_TANGENTIAL_STIFFNESS = 108,
        DIRECT_STRESS = 109,
        MIN_BENDING_STRESS = 110,
        MAX_BENDING_STRESS = 111,
        MIN_COMBINED_STRESS = 112,
        MAX_COMBINED_STRESS = 113,
        ELECTRIC_POTENTIAL = 114,
        FATIGUE_HYSTERESIS = 115,
        ERROR_STRESS = 116,
        ERROR_THERMAL = 117,
        CURRENT_DENSITY = 118,
        INDUCTANCE = 119,
        MEMBRANE_STRESS_EQUIVALENT = 120,
        BENDING_STRESS_EQUIVALENT = 121,
        MEMBRANE_STRESS_INTENSITY = 122,
        BENDING_STRESS_INTENSITY = 123,
        TOTAL_VELOCITY = 124,
        X_VELOCITY = 125,
        Y_VELOCITY = 126,
        Z_VELOCITY = 127,
        X_VELOCITY_PSD = 128,
        Y_VELOCITY_PSD = 129,
        Z_VELOCITY_PSD = 130,
        X_ACCELERATION_PSD = 131,
        Y_ACCELERATION_PSD = 132,
        Z_ACCELERATION_PSD = 133,
        ERROR_MAGNETIC = 134,
        ELEMENTAL_ENERGY = 135,
        STRUCTURAL_ENERGY = 136,
        THERMAL_ENERGY = 137,
        EFFECTIVE_STRESS_PSD = 138,
        KINETIC_ENERGY = 139,
        STIFFNESS_ENERGY = 140,
        TOTAL_ELEC_FLUX_DENSITY = 141,
        X_ELEC_FLUX_DENSITY = 142,
        Y_ELEC_FLUX_DENSITY = 143,
        Z_ELEC_FLUX_DENSITY = 144,
        TOTAL_ELEC_FIELD_INTENSITY = 145,
        X_ELEC_FIELD_INTENSITY = 146,
        Y_ELEC_FIELD_INTENSITY = 147,
        Z_ELEC_FIELD_INTENSITY = 148,
        TOTAL_ELEC_CURRENT_DENSITY = 149,
        X_ELEC_CURRENT_DENSITY = 150,
        Y_ELEC_CURRENT_DENSITY = 151,
        Z_ELEC_CURRENT_DENSITY = 152,
        ELEC_VOLTAGE = 153,
        ELEC_HEAT_RATE = 154,
        TOTAL_ANGULAR_DISPLACEMENT = 155,
        X_ANGULAR_DISPLACEMENT = 156,
        Y_ANGULAR_DISPLACEMENT = 157,
        Z_ANGULAR_DISPLACEMENT = 158,
        TOTAL_ANGULAR_VELOCITY = 159,
        X_ANGULAR_VELOCITY = 160,
        Y_ANGULAR_VELOCITY = 161,
        Z_ANGULAR_VELOCITY = 162,
        TOTAL_ANGULAR_ACCELERATION = 163,
        X_ANGULAR_ACCELERATION = 164,
        Y_ANGULAR_ACCELERATION = 165,
        Z_ANGULAR_ACCELERATION = 166,
        X_VELOCITY_RS = 167,
        Y_VELOCITY_RS = 168,
        Z_VELOCITY_RS = 169,
        X_ACCELERATION_RS = 170,
        Y_ACCELERATION_RS = 171,
        Z_ACCELERATION_RS = 172,
        EFFECTIVE_STRESS_RS = 173,
        TOTAL_ENERGY = 174,
        INTERNAL_ENERGY = 175,
        PLASTIC_WORK = 176,
        X_MOMENTUM = 177,
        Y_MOMENTUM = 178,
        Z_MOMENTUM = 179,
        X_TOTAL_MASS_AVE_VELOCITY = 180,
        Y_TOTAL_MASS_AVE_VELOCITY = 181,
        Z_TOTAL_MASS_AVE_VELOCITY = 182,
        VOLUME_REDUCTION_ELEMENTAL = 185,
        X_CONTACT_FORCE = 186,
        Y_CONTACT_FORCE = 187,
        Z_CONTACT_FORCE = 188,
        X_EXTERNAL_FORCE = 189,
        Y_EXTERNAL_FORCE = 190,
        Z_EXTERNAL_FORCE = 191,
        Z_MAG_POTENTIAL = 192,
        MAGNETIC_COENERGY = 193,
        Pressure = 194,
        DENSITY = 195,
        POSITION_TRACKER = 196,
        X_ELEMENTAL_CSYS = 197,
        Y_ELEMENTAL_CSYS = 198,
        Z_ELEMENTAL_CSYS = 199,
        VECTOR_ELEMENTAL_CSYS = 200,
        X_NODAL_CSYS = 201,
        Y_NODAL_CSYS = 202,
        Z_NODAL_CSYS = 203,
        VECTOR_NODAL_CSYS = 204,
        X_AXIAL_FORCE_DIAGRAM = 205,
        Y_AXIAL_FORCE_DIAGRAM = 206,
        Z_AXIAL_FORCE_DIAGRAM = 207,
        TOTAL_AXIAL_FORCE_DIAGRAM = 208,
        VECTOR_AXIAL_FORCE_DIAGRAM = 209,
        X_BENDING_MOMENT_DIAGRAM = 210,
        Y_BENDING_MOMENT_DIAGRAM = 211,
        Z_BENDING_MOMENT_DIAGRAM = 212,
        TOTAL_BENDING_MOMENT_DIAGRAM = 213,
        VECTOR_BENDING_MOMENT_DIAGRAM = 214,
        X_TORSIONAL_MOMENT_DIAGRAM = 215,
        Y_TORSIONAL_MOMENT_DIAGRAM = 216,
        Z_TORSIONAL_MOMENT_DIAGRAM = 217,
        TOTAL_TORSIONAL_MOMENT_DIAGRAM = 218,
        VECTOR_TORSIONAL_MOMENT_DIAGRAM = 219,
        X_SHEAR_FORCE_DIAGRAM = 220,
        Y_SHEAR_FORCE_DIAGRAM = 221,
        Z_SHEAR_FORCE_DIAGRAM = 222,
        TOTAL_SHEAR_FORCE_DIAGRAM = 223,
        VECTOR_SHEAR_FORCE_DIAGRAM = 224,
        SHEAR_MOMENT_DIAGRAM_MY = 225,
        SHEAR_MOMENT_DIAGRAM_MZ = 226,
        SHEAR_MOMENT_DIAGRAM_SFY = 227,
        SHEAR_MOMENT_DIAGRAM_SFZ = 228,
        SHEAR_MOMENT_DIAGRAM_UY = 229,
        SHEAR_MOMENT_DIAGRAM_UZ = 230,
        SHEAR_MOMENT_DIAGRAM_MSUM = 231,
        SHEAR_MOMENT_DIAGRAM_SFSUM = 232,
        SHEAR_MOMENT_DIAGRAM_USUM = 233,
        SHEAR_MOMENT_DIAGRAM_TOTAL = 234,
        SHEAR_MOMENT_DIAGRAM_VECTOR = 235,
        GASKET_PRESSURE_X = 236,
        GASKET_PRESSURE_XY = 237,
        GASKET_PRESSURE_XZ = 238,
        GASKET_TOTAL_CLOSURE_X = 239,
        GASKET_TOTAL_CLOSURE_XY = 240,
        GASKET_TOTAL_CLOSURE_XZ = 241,
        EQUIVALENT_CREEP_STRAIN = 242,
        EQUIVALENT_TOTAL_STRAIN_RST = 243,
        STABILIZATION_ENERGY = 244,
        CONTACT_CONTACTING_AREA = 245,
        FORCE_REACTION_TRACKER = 246,
        MOMENT_REACTION_TRACKER = 247,
        ROTORDYNAMIC_CAMPBELL_DIAGRAM = 248,
        CONTACT_MAX_DAMPING_PRESSURE = 249,
        EFFECTIVE_STRAIN_RST = 250,
        EQUIVALENT_PLASTIC_STRAIN_RST = 251,
        EQUIVALENT_CREEP_STRAIN_RST = 252,
        SHELL_MEMBRANE_STRESS_11 = 253,
        SHELL_MEMBRANE_STRESS_22 = 254,
        SHELL_MEMBRANE_STRESS_12 = 255,
        SHELL_BENDING_STRESS_11 = 256,
        SHELL_BENDING_STRESS_22 = 257,
        SHELL_BENDING_STRESS_12 = 258,
        SHELL_BOTTOM_PEAK_STRESS_11 = 259,
        SHELL_BOTTOM_PEAK_STRESS_22 = 260,
        SHELL_BOTTOM_PEAK_STRESS_12 = 261,
        SHELL_TOP_PEAK_STRESS_11 = 262,
        SHELL_TOP_PEAK_STRESS_22 = 263,
        SHELL_TOP_PEAK_STRESS_12 = 264,
        CONTACT_FLUID_PRESSURE = 265,
        FRACTURE_JINT = 266,
        FRACTURE_SIFS_K1 = 267,
        FRACTURE_SIFS_K2 = 268,
        FRACTURE_SIFS_K3 = 269,
        FRACTURE_VCCT_G1 = 270,
        FRACTURE_VCCT_G2 = 271,
        FRACTURE_VCCT_G3 = 272,
        FRACTURE_VCCT_GT = 273,
        DAMAGE_VARIABLE = 274,
        MAXIMUM_PREVIOUS_STRAIN_ENERGY = 275,
        MAX_FAILURE_CRITERIA = 276,
        FIBER_TENSILE_FAILURE = 277,
        FIBER_COMPRESSIVE_FAILURE = 278,
        MATRIX_TENSILE_FAILURE = 279,
        MATRIX_COMPRESSIVE_FAILURE = 280,
        DAMAGE_STATUS = 281,
        FIBER_TENSILE_DAMAGE_VARIABLE = 282,
        FIBER_COMPRESSIVE_DAMAGE_VARIABLE = 283,
        MATRIX_TENSILE_DAMAGE_VARIABLE = 284,
        MATRIX_COMPRESSIVE_DAMAGE_VARIABLE = 285,
        SHEAR_DAMAGE_VARIABLE = 286,
        ENERGY_DISSIPATED_PER_UNIT_VOLUME = 287,
        CONTACT_MIN_GEOMETRIC_SLIDING_DISTANCE = 288,
        CONTACT_MAX_GEOMETRIC_SLIDING_DISTANCE = 289,
        SPRING_ELONGATION_TRACKER = 290,
        SPRING_VELOCITY_TRACKER = 291,
        SPRING_ELASTIC_FORCE_TRACKER = 292,
        SPRING_DAMPING_FORCE_TRACKER = 293,
        BOLT_ADJUSTMENT = 294,
        BOLT_WORKLOAD = 295,
        FLUID116_FLOW_RATE = 296,
        FLUID116_HT_COND_RATE = 297,
        FLUID116_HT_TRANSP_RATE = 298,
        CONTACT_DEPTH = 299,
        CONTACT_MAX_CLOSEDPENETRATION = 300,
        CONTACT_NUM_POINTSTOOMUCHPENETRATION = 301,
        CONTACT_MAX_DAMPING_STRESS = 302,
        CONTACT_VOLUME_LOSS_DUETOWEAR = 303,
        CONTACT_STRAIN_ENERGY = 304,
        CONTACT_FRICTIONAL_DISSIPATION_ENERGY = 305,
        CONTACT_DAMPING_DISSIPATION_ENERGY = 306,
        FRACTURE_TSTRESS = 307,
        FRACTURE_MFOR_TX = 308,
        FRACTURE_MFOR_TY = 309,
        FRACTURE_MFOR_TZ = 310,
        FRACTURE_CSTAR = 311,
        FACTOR_RESERVE_INVERSE_COMPOSITE_FAILURE_TOOL = 321,
        FACTOR_SAFETY_COMPOSITE_FAILURE_TOOL = 322,
        MARGIN_SAFETY_COMPOSITE_FAILURE_TOOL = 323,
        CONTACT_TOTAL_FORCE_CONTACT_PRESSURE_X = 324,
        CONTACT_TOTAL_FORCE_CONTACT_PRESSURE_Y = 325,
        CONTACT_TOTAL_FORCE_CONTACT_PRESSURE_Z = 326,
        CONTACT_TOTAL_FORCE_TANGENTIAL_PRESSURE_X = 327,
        CONTACT_TOTAL_FORCE_TANGENTIAL_PRESSURE_Y = 328,
        CONTACT_TOTAL_FORCE_TANGENTIAL_PRESSURE_Z = 329,
        CONTACT_SLIDING_INDICATION = 330,
        X_FLEXIBLE_ROTATION = 331,
        Y_FLEXIBLE_ROTATION = 332,
        Z_FLEXIBLE_ROTATION = 333,
        CONTACT_HEAT_FLUX = 334
    } DSResultType;

    typedef enum {
        kWorldXYPlane = 0,
        kWorldYZPlane = 1,
        kWorldXZPlane = 2
    } ShearOrientationType;

    typedef enum {
        lsAll = 0,
        lsMembrane = 1,
        lsBending = 2,
        lsMembraneBending = 3,
        lsPeak = 4,
        lsTotal = 5
    } DSLinearizedSubtype;

    typedef enum {
        kPlanar = 0,
        kAxisymStraight = 1,
        kAxisymCurve = 2
    } DSLinearized2DBehavior;

    typedef enum {
        kIncludeBendingStress = 0,
        kIgnoreBendingStress = 1,
        kIncludeBendingStressUsingYDirFormula = 2
    } DSThroughThicknessBendingStress;

    typedef enum {
        kTotalSM = 0,
        kDirectionalSM1 = 1,
        kDirectionalSM2 = 2
    } DSShearMomentType;

    typedef enum {
        kMD_None = 0,
        kMD_MY = 1,
        kMD_MZ = 2,
        kMD_VY = 3,
        kMD_VZ = 4,
        kMD_UY = 5,
        kMD_UZ = 6,
        kMD_MSUM = 7,
        kMD_VSUM = 8,
        kMD_USUM = 9
    } _eMomentDiagramType;

    typedef enum {
        kGasketNormal = 0,
        kGasketShear = 1
    } DSGasketResultType;

    typedef enum {
        kV = 0,
        kM = 1,
        kU = 2
    } ShearMomentDiagramOrientationType;

    typedef enum {
        kShellMembraneStress = 0,
        kShellBendingStress = 1,
        kShellBottomPeakStress = 2,
        kShellTopPeakStress = 3
    } DSShellMBPType;

    typedef enum {
        DISPID_ResultArrayCount = 10,
        DISPID_ResultArrayValue = 11,
        DISPID_ResultArrayTopValue = 12,
        DISPID_ResultArrayBottomValue = 13
    } kDispId_ResultArray;

    [
      odl,
      uuid(03CE82A1-197A-477D-B1CC-E15424375446),
      helpstring("IDSResultArrayAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSResultArrayAuto : IDispatch {
        [id(0x0000000a), propget, helpstring("property Count")]
        HRESULT Count([out, retval] int* pVal);
        [id(0x0000000b), propget, helpstring("property Value")]
        HRESULT Value(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x0000000c), propget, helpstring("property TopValue")]
        HRESULT TopValue(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x0000000d), propget, helpstring("property BottomValue")]
        HRESULT BottomValue(
                        [in] int index, 
                        [out, retval] double* pVal);
    };

    typedef enum {
        DISPID_ResultChartComment = 10,
        DISPID_ResultChartUnitString = 11,
        DISPID_ResultChartAddComment = 12,
        DISPID_ResultChartXVal = 13,
        DISPID_ResultChartYVal = 14,
        DISPID_ResultChartZVal = 15,
        DISPID_ResultChartNumX = 16,
        DISPID_ResultChartNumY = 17,
        DISPID_ResultChartNumZ = 18,
        DISPID_ResultChartMinX = 19,
        DISPID_ResultChartMaxX = 20,
        DISPID_ResultChartMinY = 21,
        DISPID_ResultChartMaxY = 22,
        DISPID_ResultChartMinZ = 23,
        DISPID_ResultChartMaxZ = 24,
        DISPID_ResultChartChartType = 25,
        DISPID_ResultChartHasResults = 26,
        DISPID_ResultChartResultType = 27,
        DISPID_ResultChartTargetLife = 28,
        DISPID_ResultChartShow3D = 29,
        DISPID_ResultChartIsSolved = 30,
        DISPID_ResultChartSensitivityFor = 31,
        DISPID_ResultChartLowerVariation = 32,
        DISPID_ResultChartUpperVariation = 33,
        DISPID_ResultChartNumFillPoints = 34,
        DISPID_ResultChartGeometrySelection = 35,
        DISPID_ResultChartAxisScaleType = 36,
        DISPID_ResultChartXAxisSelection = 37,
        DISPID_ResultChartYAxisSelection = 38,
        DISPID_ResultChartXAxisTitle = 39,
        DISPID_ResultChartYAxisTitle = 40,
        DISPID_ResultChartMinFrequency = 41,
        DISPID_ResultChartMaxFrequency = 42,
        DISPID_ResultChartUseParentRange = 43,
        DISPID_ResultChartDeformationType = 44,
        DISPID_ResultChartNormalOrientation = 45,
        DISPID_ResultChartTimeHistoryDisplayType = 46,
        DISPID_ResultChartYValImg = 47,
        DISPID_ResultChartMaxAmplitude = 48,
        DISPID_ResultChartFrequencyAtMaxAmp = 49,
        DISPID_ResultChartPhaseAngleAtMaxAmp = 50,
        DISPID_ResultChartRealAtMaxAmp = 51,
        DISPID_ResultChartImgAtMaxAmp = 52,
        DISPID_ResultChartStressStrainType = 53,
        DISPID_ResultChartShearOrientation = 54,
        DISPID_ResultChartMultipleNodeType = 55,
        DISPID_ResultChartXAxisUnchecked = 56,
        DISPID_ResultChartYAxisUnchecked = 57,
        DISPID_ResultChartResponseType = 58,
        DISPID_ResultChartDuration = 60,
        DISPID_ResultChartLineProps = 61,
        DISPID_ResultChartXAxisProps = 62,
        DISPID_ResultChartYAxisProps = 63,
        DISPID_ResultChartGetRealAtFrequency = 64,
        DISPID_ResultChartGetImgAtFrequency = 65,
        DISPID_ResultChartGetPhaseAtFrequency = 66,
        DISPID_ResultChartGetAmpAtFrequency = 67,
        DISPID_ResultChartMinXBSTR = 68,
        DISPID_ResultChartMaxXBSTR = 69,
        DISPID_ResultChartMinYBSTR = 70,
        DISPID_ResultChartMaxYBSTR = 71,
        DISPID_ResultChartCreateTabbedFile = 72,
        DISPID_ResultChartScopedType = 73,
        DISPID_ResultChartPrototypes = 74,
        DISPID_ResultChartAccelerationType = 75,
        DISPID_ResultChartContactRegionID = 76,
        DISPID_ResultChartGeometrySelectionString = 77,
        DISPID_ResultChartResultTrackerXAxisDisplay = 78,
        DISPID_ResultChartGeometryDefineBy = 79,
        DISPID_ResultChartContactRegionSourceName = 80,
        DISPID_ResultChartImages = 81,
        DISPID_ResultChartAddImage = 82,
        DISPID_ResultChartIsHarmonic = 83,
        DISPID_ResultChartUnitTypeByDispid = 84,
        DISPID_ResultChartUnitStringByDispid = 85,
        DISPID_ResultChartParamNameByDispid = 86,
        DISPID_ResultChartRequestedFrequency = 87,
        DISPID_ResultChartActualFrequency = 88,
        DISPID_ResultChartVelocityType = 89,
        DISPID_ResultChartLocationX = 90,
        DISPID_ResultChartLocationY = 91,
        DISPID_ResultChartLocationZ = 92,
        DISPID_ResultChartLocationMethod = 93,
        DISPID_ResultChartLocationCoordinateSystem = 94,
        DISPID_ResultChartFilterType = 95,
        DISPID_ResultChartFilterCutFrequency = 96,
        DISPID_ResultChartFilterMin = 97,
        DISPID_ResultChartFilterMax = 98,
        DISPID_ResultChartFilterValid = 99,
        DISPID_ResultChartFilterYVal = 100,
        DISPID_ResultChartCurvesAppearance = 101,
        DISPID_ResultChartFilterNumX = 102,
        DISPID_ResultChartDFT = 103,
        DISPID_ResultChartSetNeedUpdateFilteredData = 104,
        DISPID_ResultChartLocationSelection = 105,
        DISPID_ResultChartBoundaryConditionSelection = 106,
        DISPID_ResultChartBoundarySelectionString = 107,
        DISPID_ResultChartForceComponentSelection = 108,
        DISPID_ResultChartCampbellYAxisDataType = 109,
        DISPID_ResultChartCampbellXAxisRotationalVelocity = 110,
        DISPID_ResultChartCampbellExcitationOption = 111,
        DISPID_ResultChartCampbellExcitationRatio = 112,
        DISPID_ResultChartCampbellSetLowestFrequency = 113,
        DISPID_ResultChartCampbellLowestFrequencyValue = 114,
        DISPID_ResultChartCampbellXAxisUnit = 115,
        DISPID_ResultChartCampbellXAxisLabel = 116,
        DISPID_ResultChartCampbellXAxisMin = 117,
        DISPID_ResultChartCampbellXAxisMax = 118,
        DISPID_ResultChartCampbellYAxisLabel = 119,
        DISPID_ResultChartCampbellYAxisMin = 120,
        DISPID_ResultChartCampbellYAxisMax = 121,
        DISPID_ResultChartCampbellContentType = 122,
        DISPID_ResultChartCampbellWhirlVal = 123,
        DISPID_ResultChartCampbellNumMode = 124,
        DISPID_ResultChartCampbellNumRotVel = 125,
        DISPID_ResultChartCampbellCriticalSpeed = 126,
        DISPID_ResultChartCampbellSortingOption = 127,
        DISPID_ResultChartCampbellCriticalSpeedFreq = 128,
        DISPID_ResultChartCampbellStabilityKey = 129,
        DISPID_ResultChartCampbellXAxisRange = 130,
        DISPID_ResultChartCampbellYAxisRange = 131,
        DISPID_ResultChartCampbellRotationalVelocitySelection = 132,
        DISPID_ResultChartSuppressed = 133,
        DISPID_ResultChartCampbellCriticalSpeedParamName = 134,
        DISPID_ResultChartClearChartData = 135,
        DISPID_ResultChartBuildChartData = 136,
        DISPID_ResultChartGetNumDataPoints = 137,
        DISPID_ResultChartGetNumDependents = 138,
        DISPID_ResultChartGetDependentNames = 139,
        DISPID_ResultChartGetDependentUnits = 140,
        DISPID_ResultChartGetIndependentValueColl = 141,
        DISPID_ResultChartGetDependentValueColl = 142,
        DISPID_ResultChartGetIndependentUnit = 143,
        DISPID_ResultChartComponentSelection = 144,
        DISPID_ResultChartCintOrientation = 145,
        DISPID_ResultChartSpringResultType = 146,
        DISPID_ResultChartSpringConnectionSelection = 147,
        DISPID_ResultChartUseCNDFileForContactTracker = 148,
        DISPID_ResultChartContactSide = 149,
        DISPID_ResultChartLabel = 150,
        DISPID_ResultChartCampbellLogarithmicDecrementStableSign = 151
    } kDispId_ResultChart;

    [
      odl,
      uuid(C1CCA7DB-688F-407C-A7B8-5AF7E906CF3F),
      helpstring("IDSResultChartAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSResultChartAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000087), helpstring("method ClearChartData")]
        HRESULT ClearChartData();
        [id(0x00000088), helpstring("method BuildChartData")]
        HRESULT BuildChartData();
        [id(0x00000089), helpstring("method GetNumDataPoints")]
        HRESULT GetNumDataPoints([out, retval] int* pVal);
        [id(0x0000008a), helpstring("method GetNumDependents")]
        HRESULT GetNumDependents([out, retval] int* pVal);
        [id(0x0000008b), helpstring("method GetDependentNames")]
        HRESULT GetDependentNames([out, retval] IAnsBSTRColl** pValueColl);
        [id(0x0000008c), helpstring("method GetDependentUnits")]
        HRESULT GetDependentUnits([out, retval] IAnsIntColl** pIntColl);
        [id(0x0000008d), helpstring("method GetIndependentValueColl")]
        HRESULT GetIndependentValueColl([out, retval] IAnsDoubleColl** pValueColl);
        [id(0x0000008e), helpstring("method GetDependentValueColl")]
        HRESULT GetDependentValueColl(
                        [in] int index, 
                        [out, retval] IAnsDoubleColl** pValueColl);
        [id(0x0000008f), helpstring("method GetIndependentUnit")]
        HRESULT GetIndependentUnit([out, retval] int* pVal);
        [id(0x0000000d), propget, helpstring("property XVal")]
        HRESULT XVal(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x0000000e), propget, helpstring("property YVal")]
        HRESULT YVal(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x0000002f), propget, helpstring("property YValImg")]
        HRESULT YValImg(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x0000000f), propget, helpstring("property ZVal")]
        HRESULT ZVal(
                        [in] int xindex, 
                        [in] int yindex, 
                        [out, retval] double* pVal);
        [id(0x00000010), propget, helpstring("property NumX")]
        HRESULT NumX([out, retval] int* pVal);
        [id(0x00000011), propget, helpstring("property NumY")]
        HRESULT NumY([out, retval] int* pVal);
        [id(0x00000012), propget, helpstring("property NumZ")]
        HRESULT NumZ([out, retval] int* pVal);
        [id(0x00000044), propget, helpstring("property MinXBSTR")]
        HRESULT MinXBSTR([out, retval] BSTR* pVal);
        [id(0x00000045), propget, helpstring("property MaxXBSTR")]
        HRESULT MaxXBSTR([out, retval] BSTR* pVal);
        [id(0x00000046), propget, helpstring("property MinYBSTR")]
        HRESULT MinYBSTR([out, retval] BSTR* pVal);
        [id(0x00000047), propget, helpstring("property MaxYBSTR")]
        HRESULT MaxYBSTR([out, retval] BSTR* pVal);
        [id(0x0000004f), propget, helpstring("property GeometryDefineBy")]
        HRESULT GeometryDefineBy([out, retval] DSGeometryDefineByType* pVal);
        [id(0x0000004f), propput, helpstring("property GeometryDefineBy")]
        HRESULT GeometryDefineBy([in] DSGeometryDefineByType pVal);
        [id(0x00000023), propput, helpstring("property GeometrySelection")]
        HRESULT GeometrySelection([in] IDispatch* rhs);
        [id(0x0000004d), propget, helpstring("property GeometrySelectionString")]
        HRESULT GeometrySelectionString([out, retval] BSTR* pVal);
        [id(0x00000050), propget, helpstring("property AttatchedSourceName")]
        HRESULT AttatchedSourceName([out, retval] BSTR* pVal);
        [id(0x0000004c), propget, helpstring("property ContactRegionID")]
        HRESULT ContactRegionID([out, retval] unsigned int* pVal);
        [id(0x0000004c), propput, helpstring("property ContactRegionID")]
        HRESULT ContactRegionID([in] unsigned int pVal);
        [id(0x00000019), propget, helpstring("property ChartType")]
        HRESULT ChartType([out, retval] int* pVal);
        [id(0x0000001b), propget, helpstring("property ResultChartType")]
        HRESULT ResultChartType([out, retval] unsigned int* pVal);
        [id(0x0000001b), propput, helpstring("property ResultChartType")]
        HRESULT ResultChartType([in] unsigned int pVal);
        [id(0x0000001f), propget, helpstring("property SensitivityFor")]
        HRESULT SensitivityFor([out, retval] unsigned int* pVal);
        [id(0x0000001f), propput, helpstring("property SensitivityFor")]
        HRESULT SensitivityFor([in] unsigned int pVal);
        [id(0x0000001c), propget, helpstring("property TargetLife")]
        HRESULT TargetLife([out, retval] double* pVal);
        [id(0x0000001c), propput, helpstring("property TargetLife")]
        HRESULT TargetLife([in] double pVal);
        [id(0x0000001a), propget, helpstring("property HasResults")]
        HRESULT HasResults([out, retval] VARIANT_BOOL* pFlag);
        [id(0x00000035), propget, helpstring("property StressStrainType")]
        HRESULT StressStrainType([out, retval] DSStressStrainType* pVal);
        [id(0x00000035), propput, helpstring("property StressStrainType")]
        HRESULT StressStrainType([in] DSStressStrainType pVal);
        [id(0x0000002c), propget, helpstring("property DeformationType")]
        HRESULT DeformationType([out, retval] DSDeformationHeatFluxType* pVal);
        [id(0x0000002c), propput, helpstring("property DeformationType")]
        HRESULT DeformationType([in] DSDeformationHeatFluxType pVal);
        [id(0x0000004b), propget, helpstring("property AccelerationType")]
        HRESULT AccelerationType([out, retval] DSDeformationHeatFluxType* pVal);
        [id(0x0000004b), propput, helpstring("property AccelerationType")]
        HRESULT AccelerationType([in] DSDeformationHeatFluxType pVal);
        [id(0x0000002d), propget, helpstring("property NormalOrientation")]
        HRESULT NormalOrientation([out, retval] NormalOrientationType* pVal);
        [id(0x0000002d), propput, helpstring("property NormalOrientation")]
        HRESULT NormalOrientation([in] NormalOrientationType pVal);
        [id(0x00000036), propget, helpstring("property ShearOrientation")]
        HRESULT ShearOrientation([out, retval] ShearOrientationType* pVal);
        [id(0x00000036), propput, helpstring("property ShearOrientation")]
        HRESULT ShearOrientation([in] ShearOrientationType pVal);
        [id(0x0000002b), propget, helpstring("property UseParentRange")]
        HRESULT UseParentRange([out, retval] VARIANT_BOOL* pFlag);
        [id(0x0000002b), propput, helpstring("property UseParentRange")]
        HRESULT UseParentRange([in] VARIANT_BOOL pFlag);
        [id(0x00000029), propget, helpstring("property MinFrequency")]
        HRESULT MinFrequency([out, retval] double* pVal);
        [id(0x00000029), propput, helpstring("property MinFrequency")]
        HRESULT MinFrequency([in] double pVal);
        [id(0x0000002a), propget, helpstring("property MaxFrequency")]
        HRESULT MaxFrequency([out, retval] double* pVal);
        [id(0x0000002a), propput, helpstring("property MaxFrequency")]
        HRESULT MaxFrequency([in] double pVal);
        [id(0x00000057), propget, helpstring("property RequestedFrequency")]
        HRESULT RequestedFrequency([out, retval] double* pVal);
        [id(0x00000057), propput, helpstring("property RequestedFrequency")]
        HRESULT RequestedFrequency([in] double pVal);
        [id(0x0000003c), propget, helpstring("property Duration")]
        HRESULT Duration([out, retval] double* pVal);
        [id(0x0000003c), propput, helpstring("property Duration")]
        HRESULT Duration([in] double pVal);
        [id(0x0000000b), propget, helpstring("property UnitString")]
        HRESULT unitString([out, retval] BSTR* pVal);
        [id(0x0000000c), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x0000000a), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** pDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x0000001d), propget, helpstring("property Show3D")]
        HRESULT Show3D([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000001d), propput, helpstring("property Show3D")]
        HRESULT Show3D([in] VARIANT_BOOL pVal);
        [id(0x00000020), propget, helpstring("property LowerVariation")]
        HRESULT LowerVariation([out, retval] int* pVal);
        [id(0x00000020), propput, helpstring("property LowerVariation")]
        HRESULT LowerVariation([in] int pVal);
        [id(0x00000021), propget, helpstring("property UpperVariation")]
        HRESULT UpperVariation([out, retval] int* pVal);
        [id(0x00000021), propput, helpstring("property UpperVariation")]
        HRESULT UpperVariation([in] int pVal);
        [id(0x00000022), propget, helpstring("property NumFillPoints")]
        HRESULT NumFillPoints([out, retval] int* pVal);
        [id(0x00000022), propput, helpstring("property NumFillPoints")]
        HRESULT NumFillPoints([in] int pVal);
        [id(0x0000002e), propget, helpstring("property TimeHistoryDisplayType")]
        HRESULT TimeHistoryDisplayType([out, retval] int* pVal);
        [id(0x0000002e), propput, helpstring("property TimeHistoryDisplayType")]
        HRESULT TimeHistoryDisplayType([in] int pVal);
        [id(0x00000024), propget, helpstring("property AxisScaleType")]
        HRESULT AxisScaleType([out, retval] int* pVal);
        [id(0x00000024), propput, helpstring("property AxisScaleType")]
        HRESULT AxisScaleType([in] int pVal);
        [id(0x0000001e), propget, helpstring("property IsSolved")]
        HRESULT IsSolved([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000025), propget, helpstring("property XAxisSelection")]
        HRESULT XAxisSelection([out, retval] unsigned int* pVal);
        [id(0x00000025), propput, helpstring("property XAxisSelection")]
        HRESULT XAxisSelection([in] unsigned int pVal);
        [id(0x00000026), propget, helpstring("property YAxisSelection")]
        HRESULT YAxisSelection([out, retval] unsigned int* pVal);
        [id(0x00000026), propput, helpstring("property YAxisSelection")]
        HRESULT YAxisSelection([in] unsigned int pVal);
        [id(0x00000027), propget, helpstring("property XAxisTitle")]
        HRESULT XAxisTitle([out, retval] BSTR* pVal);
        [id(0x00000028), propget, helpstring("property YAxisTitle")]
        HRESULT YAxisTitle([out, retval] BSTR* pVal);
        [id(0x00000030), propget, helpstring("property MaxAmplitude")]
        HRESULT MaxAmplitude([out, retval] double* pVal);
        [id(0x00000031), propget, helpstring("property FrequencyAtMaxAmp")]
        HRESULT FrequencyAtMaxAmp([out, retval] double* pVal);
        [id(0x00000032), propget, helpstring("property PhaseAngleAtMaxAmp")]
        HRESULT PhaseAngleAtMaxAmp([out, retval] double* pVal);
        [id(0x00000033), propget, helpstring("property RealAtMaxAmp")]
        HRESULT RealAtMaxAmp([out, retval] double* pVal);
        [id(0x00000034), propget, helpstring("property ImgAtMaxAmp")]
        HRESULT ImgAtMaxAmp([out, retval] double* pVal);
        [id(0x00000037), propget, helpstring("property MultipleNodeType")]
        HRESULT MultipleNodeType([out, retval] DSMultipleNodeType* pVal);
        [id(0x00000037), propput, helpstring("property MultipleNodeType")]
        HRESULT MultipleNodeType([in] DSMultipleNodeType pVal);
        [id(0x00000038), propget, helpstring("property XAxisUnchecked")]
        HRESULT XAxisSelectionUnchecked([out, retval] unsigned int* pVal);
        [id(0x00000038), propput, helpstring("property XAxisUnchecked")]
        HRESULT XAxisSelectionUnchecked([in] unsigned int pVal);
        [id(0x00000039), propget, helpstring("property YAxisUnchecked")]
        HRESULT YAxisSelectionUnchecked([out, retval] unsigned int* pVal);
        [id(0x00000039), propput, helpstring("property YAxisUnchecked")]
        HRESULT YAxisSelectionUnchecked([in] unsigned int pVal);
        [id(0x0000003a), propget, helpstring("property ResponseType")]
        HRESULT responseType([out, retval] int* pVal);
        [id(0x0000003d), propget, helpstring("property LineProps")]
        HRESULT LineProps([out, retval] BSTR* pVal);
        [id(0x0000003d), propput, helpstring("property LineProps")]
        HRESULT LineProps([in] BSTR pVal);
        [id(0x0000003e), propget, helpstring("property XAxisProps")]
        HRESULT XAxisProps([out, retval] BSTR* pVal);
        [id(0x0000003e), propput, helpstring("property XAxisProps")]
        HRESULT XAxisProps([in] BSTR pVal);
        [id(0x0000003f), propget, helpstring("property YAxisProps")]
        HRESULT YAxisProps([out, retval] BSTR* pVal);
        [id(0x0000003f), propput, helpstring("property YAxisProps")]
        HRESULT YAxisProps([in] BSTR pVal);
        [id(0x00000040), helpstring("method GetRealAtFrequency")]
        HRESULT GetRealAtFrequency(
                        [in] double dFrequency, 
                        [out, retval] double* pVal);
        [id(0x00000041), helpstring("method GetImgAtFrequency")]
        HRESULT GetImgAtFrequency(
                        [in] double dFrequency, 
                        [out, retval] double* pVal);
        [id(0x00000042), helpstring("method GetPhaseAtFrequency")]
        HRESULT GetPhaseAtFrequency(
                        [in] double dFrequency, 
                        [out, retval] double* pVal);
        [id(0x00000043), helpstring("method GetAmpAtFrequency")]
        HRESULT GetAmpAtFrequency(
                        [in] double dFrequency, 
                        [in] VARIANT_BOOL vbHarmRMS, 
                        [out, retval] double* pVal);
        [id(0x00000048), helpstring("method CreateTabbedFile")]
        HRESULT CreateTabbedFile(
                        [in] BSTR filePath, 
                        [out, retval] BSTR* fileText);
        [id(0x00000049), propget, helpstring("property ScopedType")]
        HRESULT ScopedType([out, retval] DSScopingType* type);
        [id(0x0000004a), propget, helpstring("property Prototypes")]
        HRESULT Prototypes([out, retval] VARIANT* pVal);
        [id(0x0000004e), propget, helpstring("property ResultTrackerXAxisDisplay")]
        HRESULT ResultTrackerXAxisDisplay([out, retval] DSResultTrackerXAxisDisplay* pVal);
        [id(0x0000004e), propput, helpstring("property ResultTrackerXAxisDisplay")]
        HRESULT ResultTrackerXAxisDisplay([in] DSResultTrackerXAxisDisplay pVal);
        [id(0x00000013), propget, helpstring("property MinX")]
        HRESULT MinX([out, retval] double* pVal);
        [id(0x00000014), propget, helpstring("property MaxX")]
        HRESULT MaxX([out, retval] double* pVal);
        [id(0x00000015), propget, helpstring("property MinY")]
        HRESULT MinY([out, retval] double* pVal);
        [id(0x00000016), propget, helpstring("property MaxY")]
        HRESULT MaxY([out, retval] double* pVal);
        [id(0x00000017), propget, helpstring("property MinZ")]
        HRESULT MinZ([out, retval] double* pVal);
        [id(0x00000018), propget, helpstring("property MaxZ")]
        HRESULT MaxZ([out, retval] double* pVal);
        [id(0x00000051), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000052), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00000053), propget, helpstring("method IsHarmonic")]
        HRESULT IsHarmonic([out, retval] VARIANT_BOOL* pDisp);
        [id(0x00000054), propget, helpstring("property UnitTypeByDispid")]
        HRESULT UnitTypeByDispid(
                        [in] int dispid, 
                        [out, retval] int* unitType);
        [id(0x00000055), propget, helpstring("property UnitStringByDispid")]
        HRESULT UnitStringByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* unitString);
        [id(0x00000056), propget, helpstring("property ParamNameByDispid")]
        HRESULT ParamNameByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* paramName);
        [id(0x00000058), propget, helpstring("property ActualFrequency")]
        HRESULT ActualFrequency([out, retval] double* pVal);
        [id(0x00000059), propget, helpstring("property VelocityType")]
        HRESULT VelocityType([out, retval] DSDeformationHeatFluxType* pVal);
        [id(0x00000059), propput, helpstring("property VelocityType")]
        HRESULT VelocityType([in] DSDeformationHeatFluxType pVal);
        [id(0x0000005a), propget, helpstring("property LocationX")]
        HRESULT LocationX([out, retval] double* pVal);
        [id(0x0000005b), propget, helpstring("property LocationY")]
        HRESULT LocationY([out, retval] double* pVal);
        [id(0x0000005c), propget, helpstring("property LocationZ")]
        HRESULT LocationZ([out, retval] double* pVal);
        [id(0x0000005d), propget, helpstring("property LocationMethod")]
        HRESULT LocationMethod([out, retval] DSLocationDefinitionMethod* pVal);
        [id(0x0000005d), propput, helpstring("property LocationMethod")]
        HRESULT LocationMethod([in] DSLocationDefinitionMethod pVal);
        [id(0x0000005e), propget, helpstring("property LocationCoordinateSystem")]
        HRESULT LocationCoordinateSystem([out, retval] int* pVal);
        [id(0x0000005e), propput, helpstring("property LocationCoordinateSystem")]
        HRESULT LocationCoordinateSystem([in] int pVal);
        [id(0x0000005f), propget, helpstring("property FilterType")]
        HRESULT FilterType([out, retval] DSLPFilterType* pVal);
        [id(0x0000005f), propput, helpstring("property FilterType")]
        HRESULT FilterType([in] DSLPFilterType pVal);
        [id(0x00000060), propget, helpstring("property FilterCutFrequency")]
        HRESULT FilterCutFrequency([out, retval] double* pVal);
        [id(0x00000060), propput, helpstring("property FilterCutFrequency")]
        HRESULT FilterCutFrequency([in] double pVal);
        [id(0x00000061), propget, helpstring("property FilterMin")]
        HRESULT FilterMin([out, retval] double* pVal);
        [id(0x00000062), propget, helpstring("property FilterMax")]
        HRESULT FilterMax([out, retval] double* pVal);
        [id(0x00000063), propget, helpstring("property FilterValid")]
        HRESULT FilterValid([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000066), propget, helpstring("property FilterNumX")]
        HRESULT FilterNumX([out, retval] int* pVal);
        [id(0x00000064), propget, helpstring("property FilterYVal")]
        HRESULT FilterYVal(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000065), propget, helpstring("ResultChartCurvesAppearance")]
        HRESULT ResultChartCurvesAppearance([out, retval] DSChartPlotStyle* pVal);
        [id(0x00000065), propput, helpstring("ResultChartCurvesAppearance")]
        HRESULT ResultChartCurvesAppearance([in] DSChartPlotStyle pVal);
        [id(0x00000067), helpstring("method GetDFT")]
        HRESULT GetDFT(
                        [in] VARIANT_BOOL vbUseFilteredData, 
                        [in] VARIANT_BOOL vbSorted, 
                        [in] int cnt, 
                        [out, retval] IAnsDoubleColl** pDblColl);
        [id(0x00000068), helpstring("method SetNeedUpdateFilteredData")]
        HRESULT SetNeedUpdateFilteredData([in] VARIANT_BOOL vbNeedUpdateData);
        [id(0x00000069), propput, helpstring("property LocationSelection")]
        HRESULT LocationSelection([in] IDispatch* rhs);
        [id(0x0000005a), propput, helpstring("property LocationX")]
        HRESULT LocationX([in] double pVal);
        [id(0x0000005b), propput, helpstring("property LocationY")]
        HRESULT LocationY([in] double pVal);
        [id(0x0000005c), propput, helpstring("property LocationZ")]
        HRESULT LocationZ([in] double pVal);
        [id(0x00000084), propget, helpstring("property CampbellRotationalVelocitySelection")]
        HRESULT CampbellRotationalVelocitySelection([out, retval] int* pVal);
        [id(0x00000084), propput, helpstring("property CampbellRotationalVelocitySelection")]
        HRESULT CampbellRotationalVelocitySelection([in] int pVal);
        [id(0x0000006d), propget, helpstring("property CampbellYAxisDataType")]
        HRESULT CampbellYAxisDataType([out, retval] DSCampbellYAxisDataType* pVal);
        [id(0x0000006d), propput, helpstring("property CampbellYAxisDataType")]
        HRESULT CampbellYAxisDataType([in] DSCampbellYAxisDataType pVal);
        [id(0x0000006f), propget, helpstring("property CampbellExcitationOption")]
        HRESULT CampbellExcitationOption([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000006f), propput, helpstring("property CampbellExcitationOption")]
        HRESULT CampbellExcitationOption([in] VARIANT_BOOL pVal);
        [id(0x00000070), propget, helpstring("property CampbellExcitationRatio")]
        HRESULT CampbellExcitationRatio([out, retval] double* pVal);
        [id(0x00000070), propput, helpstring("property CampbellExcitationRatio")]
        HRESULT CampbellExcitationRatio([in] double pVal);
        [id(0x00000071), propget, helpstring("property CampbellSetLowestFrequency")]
        HRESULT CampbellSetLowestFrequency([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000071), propput, helpstring("property CampbellSetLowestFrequency")]
        HRESULT CampbellSetLowestFrequency([in] VARIANT_BOOL pVal);
        [id(0x00000072), propget, helpstring("property CampbellLowestFrequencyValue")]
        HRESULT CampbellLowestFrequencyValue([out, retval] double* pVal);
        [id(0x00000072), propput, helpstring("property CampbellLowestFrequencyValue")]
        HRESULT CampbellLowestFrequencyValue([in] double pVal);
        [id(0x0000007f), propget, helpstring("property CampbellSortingOption")]
        HRESULT CampbellSortingOption([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000007f), propput, helpstring("property CampbellSortingOption")]
        HRESULT CampbellSortingOption([in] VARIANT_BOOL pVal);
        [id(0x00000097), propget, helpstring("property CampbellLogarithmicDecrementStableSign")]
        HRESULT CampbellLogarithmicDecrementStableSign([out, retval] DSCampbellLogarithmicDecrementStableSign* pVal);
        [id(0x00000097), propput, helpstring("property CampbellLogarithmicDecrementStableSign")]
        HRESULT CampbellLogarithmicDecrementStableSign([in] DSCampbellLogarithmicDecrementStableSign pVal);
        [id(0x00000073), propget, helpstring("property CampbellXAxisUnit")]
        HRESULT CampbellXAxisUnit([out, retval] DSCampbellXAxisUnit* pVal);
        [id(0x00000073), propput, helpstring("property CampbellXAxisUnit")]
        HRESULT CampbellXAxisUnit([in] DSCampbellXAxisUnit pVal);
        [id(0x00000074), propget, helpstring("property CampbellXAxisLabel")]
        HRESULT CampbellXAxisLabel([out, retval] BSTR* pVal);
        [id(0x00000074), propput, helpstring("property CampbellXAxisLabel")]
        HRESULT CampbellXAxisLabel([in] BSTR pVal);
        [id(0x00000082), propget, helpstring("property CampbellXAxisRange")]
        HRESULT CampbellXAxisRange([out, retval] DSCampbellAxisRange* pVal);
        [id(0x00000082), propput, helpstring("property CampbellXAxisRange")]
        HRESULT CampbellXAxisRange([in] DSCampbellAxisRange pVal);
        [id(0x00000075), propget, helpstring("property CampbellXAxisMin")]
        HRESULT CampbellXAxisMin([out, retval] double* pVal);
        [id(0x00000075), propput, helpstring("property CampbellXAxisMin")]
        HRESULT CampbellXAxisMin([in] double pVal);
        [id(0x00000076), propget, helpstring("property CampbellXAxisMax")]
        HRESULT CampbellXAxisMax([out, retval] double* pVal);
        [id(0x00000076), propput, helpstring("property CampbellXAxisMax")]
        HRESULT CampbellXAxisMax([in] double pVal);
        [id(0x00000077), propget, helpstring("property CampbellYAxisLabel")]
        HRESULT CampbellYAxisLabel([out, retval] BSTR* pVal);
        [id(0x00000077), propput, helpstring("property CampbellYAxisLabel")]
        HRESULT CampbellYAxisLabel([in] BSTR pVal);
        [id(0x00000083), propget, helpstring("property CampbellYAxisRange")]
        HRESULT CampbellYAxisRange([out, retval] DSCampbellAxisRange* pVal);
        [id(0x00000083), propput, helpstring("property CampbellYAxisRange")]
        HRESULT CampbellYAxisRange([in] DSCampbellAxisRange pVal);
        [id(0x00000078), propget, helpstring("property CampbellYAxisMin")]
        HRESULT CampbellYAxisMin([out, retval] double* pVal);
        [id(0x00000078), propput, helpstring("property CampbellYAxisMin")]
        HRESULT CampbellYAxisMin([in] double pVal);
        [id(0x00000079), propget, helpstring("property CampbellYAxisMax")]
        HRESULT CampbellYAxisMax([out, retval] double* pVal);
        [id(0x00000079), propput, helpstring("property CampbellYAxisMax")]
        HRESULT CampbellYAxisMax([in] double pVal);
        [id(0x0000007a), propget, helpstring("property CampbellContentType")]
        HRESULT CampbellContentType([out, retval] DSCampbellContentType* pVal);
        [id(0x0000007a), propput, helpstring("property CampbellContentType")]
        HRESULT CampbellContentType([in] DSCampbellContentType pVal);
        [id(0x0000007b), propget, helpstring("property CampbellWhirlVal")]
        HRESULT CampbellWhirlVal(
                        [in] int index, 
                        [out, retval] int* pVal);
        [id(0x0000007c), propget, helpstring("property CampbellNumMode")]
        HRESULT CampbellNumMode([out, retval] int* pVal);
        [id(0x0000007d), propget, helpstring("property CampbellNumRotVel")]
        HRESULT CampbellNumRotVel([out, retval] int* pVal);
        [id(0x0000007e), propget, helpstring("property CampbellCriticalSpeed")]
        HRESULT CampbellCriticalSpeed(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000080), propget, helpstring("property CampbellCriticalSpeedFreq")]
        HRESULT CampbellCriticalSpeedFreq(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000081), propget, helpstring("property CampbellStabilityKey")]
        HRESULT CampbellStabilityKey(
                        [in] int index, 
                        [out, retval] int* pVal);
        [id(0x00000086), propget, helpstring("property CampbellCriticalSpeedParamName")]
        HRESULT CampbellCriticalSpeedParamName(
                        [in] int index, 
                        [out, retval] BSTR* pVal);
        [id(0x0000006a), propget, helpstring("property BoundaryConditionSelection")]
        HRESULT BoundaryConditionSelection([out, retval] int* pVal);
        [id(0x0000006a), propput, helpstring("property BoundaryConditionSelection")]
        HRESULT BoundaryConditionSelection([in] int pVal);
        [id(0x0000006b), propget, helpstring("property BoundarySelectionString")]
        HRESULT BoundarySelectionString([out, retval] BSTR* pVal);
        [id(0x0000006c), propget, helpstring("property ForceComponentSelection")]
        HRESULT ForceComponentSelection([out, retval] int* pVal);
        [id(0x0000006c), propput, helpstring("property ForceComponentSelection")]
        HRESULT ForceComponentSelection([in] int pVal);
        [id(0x00000085), propget, helpstring("property Suppressed")]
        HRESULT Suppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000085), propput, helpstring("property Suppressed")]
        HRESULT Suppressed([in] VARIANT_BOOL pVal);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00000090), propget, helpstring("property ComponentSelection")]
        HRESULT ComponentSelection([out, retval] int* pVal);
        [id(0x00000090), propput, helpstring("property ComponentSelection")]
        HRESULT ComponentSelection([in] int pVal);
        [id(0x00000096), propget, helpstring("property Label")]
        HRESULT Label([out, retval] BSTR* pVal);
        [id(0x00000096), propput, helpstring("property Label")]
        HRESULT Label([in] BSTR pVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x00000093), propget, helpstring("property SpringConnectionSelection")]
        HRESULT SpringConnectionSelection([out, retval] dsid* pVal);
        [id(0x00000093), propput, helpstring("property SpringConnectionSelection")]
        HRESULT SpringConnectionSelection([in] dsid pVal);
        [id(0x00000092), propget, helpstring("property SpringResultType")]
        HRESULT SpringResultType([out, retval] DSSpringResultType* pVal);
        [id(0x00000092), propput, helpstring("property SpringResultType")]
        HRESULT SpringResultType([in] DSSpringResultType pVal);
        [id(0x00000094), propget, helpstring("property UseCNDFileForContactTracker")]
        HRESULT UseCNDFileForContactTracker([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000094), propput, helpstring("property UseCNDFileForContactTracker")]
        HRESULT UseCNDFileForContactTracker([in] VARIANT_BOOL pVal);
        [id(0x00000095), propget, helpstring("property ContactSide")]
        HRESULT ContactSide([out, retval] DSContactSideScoping* pVal);
        [id(0x00000095), propput, helpstring("property ContactSide")]
        HRESULT ContactSide([in] DSContactSideScoping pVal);
        [id(0x600200dc), helpstring("property ClassName")]
        HRESULT GetClassName([out, retval] BSTR* pVal);
        [id(0x600200dd), propget, helpstring("property StressOrStrainTypeIfStressStrainResult")]
        HRESULT StressOrStrainTypeIfStressStrainResult([out, retval] unsigned int* pVal);
        [id(0x600200de), propget, helpstring("method IsHarmonicRMS")]
        HRESULT IsHarmonicRMS([out, retval] int* pVal);
    };

    typedef enum {
        thMINIMUM = 0,
        thMAXIMUM = 1,
        thAVERAGE = 2
    } DSMultipleNodeType;

    typedef enum {
        kTimeValues = 0,
        kCumulativeIterationValues = 1
    } DSResultTrackerXAxisDisplay;

    typedef enum {
        LPFILTER_NONE = 0,
        LPFILTER_BUTTERWORTH = 1
    } DSLPFilterType;

    typedef enum {
        Frequency = 0,
        STABILITY = 1,
        LOGARITHMIC_DECREMENT = 2,
        MODAL_DAMPING_RATIO = 3
    } DSCampbellYAxisDataType;

    typedef enum {
        kCAMPBELL_LOGDECREMENT_STABLE_SIGN_UNKNOWN = 0,
        kCAMPBELL_LOGDECREMENT_STABLE_SIGN_POSITIVE = 1,
        kCAMPBELL_LOGDECREMENT_STABLE_SIGN_NEGATIVE = 2
    } DSCampbellLogarithmicDecrementStableSign;

    typedef enum {
        RAD_PER_SECOND = 0,
        kHZ = 1,
        RPM = 2
    } DSCampbellXAxisUnit;

    typedef enum {
        kCAMPBELL_AXIS_RANGE_PROGRAM_CONTROLLED = 0,
        kCAMPBELL_AXIS_RANGE_MANUAL = 1
    } DSCampbellAxisRange;

    typedef enum {
        CHART = 0,
        TABLE = 1,
        CHART_AND_TABLE = 2
    } DSCampbellContentType;

    typedef enum {
        ELONGATION = 290,
        VELOCITY = 291,
        ELASTIC_FORCE = 292,
        DAMPING_FORCE = 293
    } DSSpringResultType;

    typedef enum {
        DISPID_ResultTableComments = 10,
        DISPID_ResultTableAddComment = 11,
        DISPID_ResultTableTableType = 12,
        DISPID_ResultTableNumConductors = 13,
        DISPID_ResultTableColumnHeading = 14,
        DISPID_ResultTableInductanceVal = 15,
        DISPID_ResultTableFluxLinkVal = 16,
        DISPID_ResultTableConductorId = 17,
        DISPID_ResultTableSymmetryMultiplier = 18,
        DISPID_ResultTableIsEntryParameterized = 20,
        DISPID_ResultTableForceDisplayFilter = 22,
        DISPID_ResultTableMomentDisplayFilter = 23,
        DISPID_ResultTableCoordinateSystemSelection = 24,
        DISPID_ResultTableMomentsAtSummationPoint = 25,
        DISPID_ResultTableImages = 26,
        DISPID_ResultTableAddImage = 27,
        DISPID_ResultTableGetValueFromConductorIds = 28,
        DISPID_ResultTableUnitTypeByDispid = 29,
        DISPID_ResultTableUnitStringByDispid = 30,
        DISPID_ResultTableParamNameByDispid = 31
    } kDispId_ResultGeneralTable;

    [
      odl,
      uuid(637D3A55-D81D-4F66-880A-DD2F6847C53B),
      helpstring("IDSLoadGroupAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSResultTableAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** __MIDL__IDSResultTableAuto0000);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x0000000a), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x0000000b), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x0000000c), propget, helpstring("property TableType")]
        HRESULT tableType([out, retval] DSResultTableType* pVal);
        [id(0x0000000d), propget, helpstring("property NumConductors")]
        HRESULT NumConductors([out, retval] int* pVal);
        [id(0x0000000e), propget, helpstring("property ColumnHeading")]
        HRESULT ColumnHeading(
                        [in] int index, 
                        [out, retval] BSTR* pVal);
        [id(0x0000000f), propget, helpstring("property InductanceVal")]
        HRESULT InductanceVal(
                        [in] int index1, 
                        [in] int index2, 
                        [out, retval] double* pVal);
        [id(0x00000010), propget, helpstring("property FluxLinkVal")]
        HRESULT FluxLinkVal(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000011), propget, helpstring("property ConductorId")]
        HRESULT ConductorId(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000012), propget, helpstring("property SymmetryMultiplier")]
        HRESULT SymmetryMultiplier([out, retval] double* pVal);
        [id(0x00000012), propput, helpstring("property SymmetryMultiplier")]
        HRESULT SymmetryMultiplier([in] double pVal);
        [id(0x00000014), helpstring("method IsEntryParameterized")]
        HRESULT IsEntryParameterized(
                        [in] unsigned int conductor1ID, 
                        [in] unsigned int conductor2ID, 
                        [out, retval] VARIANT_BOOL* Flag);
        [id(0x00000018), propget, helpstring("property CoordinateSystemSelection")]
        HRESULT CoordinateSystemSelection([out, retval] unsigned int* pVal);
        [id(0x00000018), propput, helpstring("property CoordinateSystemSelection")]
        HRESULT CoordinateSystemSelection([in] unsigned int pVal);
        [id(0x00000019), propget, helpstring("property MomentsAtSummationPoint")]
        HRESULT MomentsAtSummationPoint([out, retval] VARIANT_BOOL* pFlag);
        [id(0x00000019), propput, helpstring("property MomentsAtSummationPoint")]
        HRESULT MomentsAtSummationPoint([in] VARIANT_BOOL pFlag);
        [id(0x00000016), propget, helpstring("property ForceDisplayFilter")]
        HRESULT ForceDisplayFilter([out, retval] DSReactionDisplayFilter* pVal);
        [id(0x00000016), propput, helpstring("property ForceDisplayFilter")]
        HRESULT ForceDisplayFilter([in] DSReactionDisplayFilter pVal);
        [id(0x00000017), propget, helpstring("property MomentDisplayFilter")]
        HRESULT MomentDisplayFilter([out, retval] DSReactionDisplayFilter* pVal);
        [id(0x00000017), propput, helpstring("property MomentDisplayFilter")]
        HRESULT MomentDisplayFilter([in] DSReactionDisplayFilter pVal);
        [id(0x0000001a), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x0000001b), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x0000001c), helpstring("property GetValueFromConductorIds")]
        HRESULT GetValueFromConductorIds(
                        [in] int dsId1, 
                        [in] int dsId2, 
                        [out, retval] double* pVal);
        [id(0x0000001d), propget, helpstring("property UnitTypeByDispid")]
        HRESULT UnitTypeByDispid(
                        [in] int dispid, 
                        [out, retval] int* unitType);
        [id(0x0000001e), propget, helpstring("property UnitStringByDispid")]
        HRESULT UnitStringByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* unitString);
        [id(0x0000001f), propget, helpstring("property ParamNameByDispid")]
        HRESULT ParamNameByDispid(
                        [in] int dispid, 
                        [in] int conductor1ID, 
                        [in] int conductor2ID, 
                        [out, retval] BSTR* paramName);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
    };

    typedef enum {
        kInductanceTable = 0,
        kFluxLinkageTable = 1,
        kForceTable = 2,
        kTorqueTable = 3,
        kReactionTable = 4
    } DSResultTableType;

    typedef enum {
        kShowAllReactions = 0,
        kShowNoReactions = 1,
        kShowComponentReactions = 2,
        kShowMagnitudeReactions = 3
    } DSReactionDisplayFilter;

    typedef enum {
        DISPID_ContactDataTableComment = 10,
        DISPID_ContactDataTableUnitString = 11,
        DISPID_ContactDataTableAddComment = 12,
        DISPID_ContactDataTableGeometryNum = 34,
        DISPID_ContactDataTableUseParentScoping = 35,
        DISPID_ContactDataTableScopingMethod = 37,
        DISPID_ContactDataTableGeometrySelection = 40,
        DISPID_ContactDataTableScopedType = 73,
        DISPID_ContactDataTablePrototypes = 74,
        DISPID_ContactDataTableGetField = 100,
        DISPID_ContactDataTableSetField = 110,
        DISPID_ContactDataTableGetColumnName = 120,
        DISPID_ContactDataTableSetColumnName = 125,
        DISPID_ContactDataTableNumEntries = 130,
        DISPID_ContactDataTableNumColumns = 135,
        DISPID_ContactDataTableEntryId = 140,
        DISPID_ContactDataTableContactSide = 150,
        DISPID_ContactDataTableRefreshScoping = 160,
        DISPID_ContactDataTableShowForce = 170,
        DISPID_ContactDataTableShowMoment = 171,
        DISPID_ContactDataTableShowSummationPoint = 172,
        DISPID_ContactDataTableShowFMMagnitude = 173,
        DISPID_ContactDataTableShowFMComponents = 174,
        DISPID_ContactDataTableIsSolved = 175,
        DISPID_ContactDataTableFigure = 176,
        DISPID_ContactDataTableAddFigure = 177,
        DISPID_ContactDataTableResultTableType = 178,
        DISPID_ContactDataTableParameterizeEntry = 179,
        DISPID_ContactDataTableIsEntryParameterized = 180,
        DISPID_ContactDataTableCoordinateSystemSelection = 181,
        DISPID_ContactDataTableUpdateParameter = 182,
        DISPID_ContactDataTableGetDefaultParameterValue = 183,
        DISPID_ContactDataTableMomentsAtSummationPoint = 184,
        DISPID_ContactDataTableSequenceNumber = 185,
        DISPID_ContactDataTableGetReactionEntry = 186,
        DISPID_ContactDataTableGetReactionName = 187,
        DISPID_ContactDataTableConvertLegacyParameterIndex = 188,
        DISPID_ContactDataTableTimeDisplayType = 189,
        DISPID_ContactDataTableResultType = 190,
        DISPID_ContactDataTableNumContactScoping = 191,
        DISPID_ContactDataTableContactScopingId = 192,
        DISPID_ContactDataTableGetDataForResultType = 193,
        DISPID_ContactDataTableUnitTypeByDispid = 194,
        DISPID_ContactDataTableUnitStringByDispid = 195,
        DISPID_ContactDataTableParamNameByDispid = 196
    } kDispId_ContactDataTable;

    [
      odl,
      uuid(55B639FA-A597-48A3-873F-6DD5EE81709F),
      helpstring("IDSContactDataTableAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSContactDataTableAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x0000000b), propget, helpstring("property UnitString")]
        HRESULT unitString([out, retval] BSTR* pVal);
        [id(0x0000000c), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x0000000a), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** pDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x00000049), propget, helpstring("property ScopedType")]
        HRESULT ScopedType([out, retval] DSScopingType* type);
        [id(0x0000004a), propget, helpstring("property Prototypes")]
        HRESULT Prototypes([out, retval] VARIANT* pVal);
        [id(0x00000022), propget, helpstring("property GeometryNum")]
        HRESULT GeometryNum([out, retval] int* pVal);
        [id(0x00000023), propget, helpstring("property UseParentScoping")]
        HRESULT UseParentScoping([out, retval] VARIANT_BOOL* pFlag);
        [id(0x00000023), propput, helpstring("property UseParentScoping")]
        HRESULT UseParentScoping([in] VARIANT_BOOL pFlag);
        [id(0x00000025), propput, helpstring("property ScopingMethod")]
        HRESULT ScopingMethod([in] DSGeometryDefineByType Method);
        [id(0x00000025), propget, helpstring("property ScopingMethod")]
        HRESULT ScopingMethod([out, retval] DSGeometryDefineByType* Method);
        [id(0x00000028), propput, helpstring("property GeometrySelection")]
        HRESULT GeometrySelection([in] IDispatch* rhs);
        [id(0x00000064), helpstring("method GetEntry")]
        HRESULT GetEntry(
                        [in] unsigned int ID, 
                        [in] int Entry, 
                        [out, retval] VARIANT* pValue);
        [id(0x0000007d), helpstring("method SetColumnName")]
        HRESULT SetColumnName(
                        [in] int Entry, 
                        [in] BSTR Name);
        [id(0x00000078), helpstring("method GetColumnName")]
        HRESULT GetColumnName(
                        [in] int Entry, 
                        [out, retval] BSTR* pName);
        [id(0x00000082), propget, helpstring("property NumEntries")]
        HRESULT NumEntries([out, retval] int* NumberOfEntries);
        [id(0x0000008c), propget, helpstring("property EntryId")]
        HRESULT EntryId(
                        [in] int index, 
                        [out, retval] unsigned int* ID);
        [id(0x00000087), propget, helpstring("property NumColumns")]
        HRESULT numColumns([out, retval] int* NumberOfColumns);
        [id(0x00000096), propget, helpstring("property ContactSide")]
        HRESULT ContactSide(
                        [in] unsigned int ID, 
                        [out, retval] DSContactSideScoping* eSide);
        [id(0x000000a0), helpstring("method RefreshScoping")]
        HRESULT RefreshScoping();
        [id(0x000000aa), propget, helpstring("property ShowForce")]
        HRESULT ShowForce([out, retval] VARIANT_BOOL* pFlag);
        [id(0x000000aa), propput, helpstring("property ShowForce")]
        HRESULT ShowForce([in] VARIANT_BOOL pFlag);
        [id(0x000000ab), propget, helpstring("property ShowMoment")]
        HRESULT ShowMoment([out, retval] VARIANT_BOOL* pFlag);
        [id(0x000000ab), propput, helpstring("property ShowMoment")]
        HRESULT ShowMoment([in] VARIANT_BOOL pFlag);
        [id(0x000000ac), propget, helpstring("property ShowSummationPoint")]
        HRESULT ShowSummationPoint([out, retval] VARIANT_BOOL* pFlag);
        [id(0x000000ac), propput, helpstring("property ShowSummationPoint")]
        HRESULT ShowSummationPoint([in] VARIANT_BOOL pFlag);
        [id(0x000000ad), propget, helpstring("property ShowFMMagnitude")]
        HRESULT ShowFMMagnitude([out, retval] VARIANT_BOOL* pFlag);
        [id(0x000000ad), propput, helpstring("property ShowFMMagnitude")]
        HRESULT ShowFMMagnitude([in] VARIANT_BOOL pFlag);
        [id(0x000000ae), propget, helpstring("property ShowFMComponents")]
        HRESULT ShowFMComponents([out, retval] VARIANT_BOOL* pFlag);
        [id(0x000000ae), propput, helpstring("property ShowFMComponents")]
        HRESULT ShowFMComponents([in] VARIANT_BOOL pFlag);
        [id(0x000000af), propget, helpstring("property IsSolved")]
        HRESULT IsSolved([out, retval] VARIANT_BOOL* pVal);
        [id(0x000000b0), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x000000b1), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x000000b2), propget, helpstring("property ResultTableType")]
        HRESULT ResultTableType([out, retval] unsigned int* pVal);
        [id(0x000000b3), helpstring("method ParameterizeEntry")]
        HRESULT ParameterizeEntry(
                        [in] unsigned int ID, 
                        [in] int Entry, 
                        [in] VARIANT_BOOL Flag);
        [id(0x000000b4), helpstring("method IsEntryParameterized")]
        HRESULT IsEntryParameterized(
                        [in] unsigned int ID, 
                        [in] int Entry, 
                        [out, retval] VARIANT_BOOL* Flag);
        [id(0x000000b5), propget, helpstring("property CoordinateSystemSelection")]
        HRESULT CoordinateSystemSelection([out, retval] unsigned int* pVal);
        [id(0x000000b5), propput, helpstring("property CoordinateSystemSelection")]
        HRESULT CoordinateSystemSelection([in] unsigned int pVal);
        [id(0x000000b6), helpstring("method UpdateParameter")]
        HRESULT UpdateParameter(
                        [in] int index, 
                        [in] VARIANT dValue);
        [id(0x000000b7), helpstring("method GetDefaultParameterValue")]
        HRESULT GetDefaultParameterValue(
                        [in] int index, 
                        [out, retval] VARIANT* pValue);
        [id(0x000000b8), propget, helpstring("property MomentsAtSummationPoint")]
        HRESULT MomentsAtSummationPoint([out, retval] VARIANT_BOOL* pVal);
        [id(0x000000b8), propput, helpstring("property MomentsAtSummationPoint")]
        HRESULT MomentsAtSummationPoint([in] VARIANT_BOOL pVal);
        [id(0x000000bd), propget, helpstring("property TimeDisplayType")]
        HRESULT TimeDisplayType([out, retval] DSTimeDisplayType* pVal);
        [id(0x000000bd), propput, helpstring("property TimeDisplayType")]
        HRESULT TimeDisplayType([in] DSTimeDisplayType pVal);
        [id(0x000000b9), propget, helpstring("property SequenceNumber")]
        HRESULT SequenceNumber([out, retval] unsigned int* pVal);
        [id(0x000000b9), propput, helpstring("property SequenceNumber")]
        HRESULT SequenceNumber([in] unsigned int pVal);
        [id(0x000000be), propget, helpstring("property ResultChartType")]
        HRESULT ResultChartType([out, retval] unsigned int* pVal);
        [id(0x000000be), propput, helpstring("property ResultChartType")]
        HRESULT ResultChartType([in] unsigned int pVal);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** __MIDL__IDSContactDataTableAuto0000);
        [id(0x000000ba), helpstring("method GetReactionEntry")]
        HRESULT GetReactionEntry(
                        [in] unsigned int ContactId, 
                        [in] int Field, 
                        [out] VARIANT* pValue, 
                        [out] int* unitType);
        [id(0x000000bb), helpstring("method GetReactionName")]
        HRESULT GetReactionName(
                        [in] unsigned int ContactId, 
                        [in] int Field, 
                        [out, retval] BSTR* pValue);
        [id(0x000000bc), helpstring("method ConvertLegacyParameterIndex")]
        HRESULT ConvertLegacyParameterIndex(
                        [in] unsigned int iParameterIndex, 
                        [out] unsigned int* ContactId, 
                        [out] int* pField);
        [id(0x000000bf), propget, helpstring("property NumContactScoping")]
        HRESULT NumContactScoping([out, retval] int* pNumberScoping);
        [id(0x000000c0), propget, helpstring("property ContactScopingId")]
        HRESULT ContactScopingId(
                        [in] int index, 
                        [out, retval] unsigned int* ID);
        [id(0x000000c1), helpstring("method GetDataForResultType")]
        HRESULT GetDataForResultType(
                        [in] unsigned int ID, 
                        [in] int LoadStep, 
                        [in] int ResultType, 
                        [out, retval] VARIANT* pResult);
        [id(0x000000c2), propget, helpstring("property UnitTypeByDispid")]
        HRESULT UnitTypeByDispid(
                        [in] int dispid, 
                        [in] int idContact, 
                        [in] int iEntry, 
                        [out, retval] int* unitType);
        [id(0x000000c3), propget, helpstring("property UnitStringByDispid")]
        HRESULT UnitStringByDispid(
                        [in] int dispid, 
                        [in] int idContact, 
                        [in] int iEntry, 
                        [out, retval] BSTR* unitString);
        [id(0x000000c4), propget, helpstring("property ParamNameByDispid")]
        HRESULT ParamNameByDispid(
                        [in] int dispid, 
                        [in] int idContact, 
                        [in] int iEntry, 
                        [out, retval] BSTR* paramName);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
    };

    typedef enum {
        DISPID_RotationGeometrySelection = 10,
        DISPID_RotationDefineBy = 11,
        DISPID_RotationComponentX = 12,
        DISPID_RotationComponentY = 13,
        DISPID_RotationComponentZ = 14,
        DISPID_RotationLocationX = 15,
        DISPID_RotationLocationY = 16,
        DISPID_RotationLocationZ = 17,
        DISPID_RotationMagnitude = 18,
        DISPID_RotationComments = 19,
        DISPID_RotationFigures = 20,
        DISPID_RotationAxis = 21,
        DISPID_RotationSuppressed = 22,
        DISPID_RotationCoordinateSystemSelection = 23,
        DISPID_RotationUsesRadSeconds = 24,
        DISPID_RotationNumSequenceEntries = 25,
        DISPID_RotationSequenceComponentX = 26,
        DISPID_RotationSequenceComponentY = 27,
        DISPID_RotationSequenceComponentZ = 28,
        DISPID_RotationImages = 29,
        DISPID_RotationUnitTypeByDispid = 50,
        DISPID_RotationUnitStringByDispid = 51,
        DISPID_RotationLoadVariation = 52,
        DISPID_RotationParamNameByDispid = 53,
        DISPID_RotationFunctionUnitSystem = 54,
        DISPID_RotationFunctionAngleMeasure = 55,
        DISPID_RotationFunctionAngularVelocityMeasure = 56,
        DISPID_RotationFunctionNumberOfSegments = 57,
        DISPID_RotationGeometryDefineBy = 58,
        DISPID_RotationComponentSelection = 59,
        DISPID_RotationAddComment = 30,
        DISPID_RotationAddFigure = 31,
        DISPID_RotationAddImage = 32,
        DISPID_RotationSetPropertyByStep = 33
    } kDispId_Rotation;

    [
      odl,
      uuid(4A958781-B717-4793-82A8-C55984298A6B),
      helpstring("IDSRotationAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSRotationAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x0000000a), propget, helpstring("property GeometrySelection")]
        HRESULT GeometrySelection([out, retval] BSTR* pVal);
        [id(0x0000000b), propget, helpstring("property DefineBy")]
        HRESULT DefineBy([out, retval] DefineByType* pVal);
        [id(0x0000000b), propput, helpstring("property DefineBy")]
        HRESULT DefineBy([in] DefineByType pVal);
        [id(0x00000017), propget, helpstring("property CoordinateSystemSelection")]
        HRESULT CoordinateSystemSelection([out, retval] int* pVal);
        [id(0x00000017), propput, helpstring("property CoordinateSystemSelection")]
        HRESULT CoordinateSystemSelection([in] int pVal);
        [id(0x0000000c), propget, helpstring("property ComponentX")]
        HRESULT ComponentX([out, retval] VARIANT* pVal);
        [id(0x0000000c), propput, helpstring("property ComponentX")]
        HRESULT ComponentX([in] VARIANT pVal);
        [id(0x0000000d), propget, helpstring("property ComponentY")]
        HRESULT ComponentY([out, retval] VARIANT* pVal);
        [id(0x0000000d), propput, helpstring("property ComponentY")]
        HRESULT ComponentY([in] VARIANT pVal);
        [id(0x0000000e), propget, helpstring("property ComponentZ")]
        HRESULT ComponentZ([out, retval] VARIANT* pVal);
        [id(0x0000000e), propput, helpstring("property ComponentZ")]
        HRESULT ComponentZ([in] VARIANT pVal);
        [id(0x0000000f), propget, helpstring("property LocationX")]
        HRESULT LocationX([out, retval] double* pVal);
        [id(0x0000000f), propput, helpstring("property LocationX")]
        HRESULT LocationX([in] double pVal);
        [id(0x00000010), propget, helpstring("property LocationY")]
        HRESULT LocationY([out, retval] double* pVal);
        [id(0x00000010), propput, helpstring("property LocationY")]
        HRESULT LocationY([in] double pVal);
        [id(0x00000011), propget, helpstring("property LocationZ")]
        HRESULT LocationZ([out, retval] double* pVal);
        [id(0x00000011), propput, helpstring("property LocationZ")]
        HRESULT LocationZ([in] double pVal);
        [id(0x00000012), propget, helpstring("property Magnitude")]
        HRESULT Magnitude([out, retval] VARIANT* pVal);
        [id(0x00000012), propput, helpstring("property Magnitude")]
        HRESULT Magnitude([in] VARIANT pVal);
        [id(0x00000036), propput, helpstring("property FunctionUnitSystem")]
        HRESULT FunctionUnitSystem([in] VARIANT vtVal);
        [id(0x00000036), propget, helpstring("property FunctionUnitSystem")]
        HRESULT FunctionUnitSystem([out, retval] VARIANT* vtVal);
        [id(0x00000037), propput, helpstring("property FunctionAngleMeasure")]
        HRESULT FunctionAngleMeasure([in] VARIANT vtVal);
        [id(0x00000037), propget, helpstring("property FunctionAngleMeasure")]
        HRESULT FunctionAngleMeasure([out, retval] VARIANT* vtVal);
        [id(0x00000038), propput, helpstring("property FunctionAngularVelocityMeasure")]
        HRESULT FunctionAngularVelocityMeasure([in] VARIANT vtVal);
        [id(0x00000038), propget, helpstring("property FunctionAngularVelocityMeasure")]
        HRESULT FunctionAngularVelocityMeasure([out, retval] VARIANT* vtVal);
        [id(0x0000001e), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x0000001f), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x00000013), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x00000014), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** __MIDL__IDSRotationAuto0000);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x00000015), propput, helpstring("property Axis")]
        HRESULT Axis([in] IDispatch* rhs);
        [id(0x00000016), propget, helpstring("property Suppressed")]
        HRESULT Suppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000016), propput, helpstring("property Suppressed")]
        HRESULT Suppressed([in] VARIANT_BOOL pVal);
        [id(0x00000019), propget, helpstring("property NumSequenceEntries")]
        HRESULT NumSequenceEntries([out, retval] unsigned int* pVal);
        [id(0x00000019), propput, helpstring("property NumSequenceEntries")]
        HRESULT NumSequenceEntries([in] unsigned int pVal);
        [id(0x0000001a), propget, helpstring("property SequenceComponentX")]
        HRESULT SequenceComponentX(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x0000001a), propput, helpstring("property SequenceComponentX")]
        HRESULT SequenceComponentX(
                        [in] int index, 
                        [in] double pVal);
        [id(0x0000001b), propget, helpstring("property SequenceComponentY")]
        HRESULT SequenceComponentY(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x0000001b), propput, helpstring("property SequenceComponentY")]
        HRESULT SequenceComponentY(
                        [in] int index, 
                        [in] double pVal);
        [id(0x0000001c), propget, helpstring("property SequenceComponentZ")]
        HRESULT SequenceComponentZ(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x0000001c), propput, helpstring("property SequenceComponentZ")]
        HRESULT SequenceComponentZ(
                        [in] int index, 
                        [in] double pVal);
        [id(0x0000001d), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000020), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00000032), propget, helpstring("property UnitTypeByDispid")]
        HRESULT UnitTypeByDispid(
                        [in] int dispid, 
                        [out, retval] int* unitType);
        [id(0x00000033), propget, helpstring("property UnitStringByDispid")]
        HRESULT UnitStringByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* unitString);
        [id(0x60020035), propget, helpstring("Get whether the BC is active at a step")]
        HRESULT ActiveAtLoadStep(
                        [in] unsigned int stepNumber, 
                        [out, retval] VARIANT_BOOL* bActive);
        [id(0x60020035), propput, helpstring("Get whether the BC is active at a step")]
        HRESULT ActiveAtLoadStep(
                        [in] unsigned int stepNumber, 
                        [in] VARIANT_BOOL bActive);
        [id(0x00000034), propget, helpstring("property LoadVariation")]
        HRESULT LoadVariation(
                        [in] int ComponentPosition, 
                        [out, retval] IDispatch** ppDisp);
        [id(0x60020038), propget, helpstring("property DataViewType ")]
        HRESULT DataViewType(
                        [in] int iAnsBCLVType, 
                        [out, retval] int* pVal);
        [id(0x00000035), propget, helpstring("property ParamNameByDispid")]
        HRESULT ParamNameByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* paramName);
        [id(0x00000039), propget, helpstring("property FunctionNumberOfSegments")]
        HRESULT FunctionNumberOfSegments([out, retval] int* pVal);
        [id(0x00000039), propput, helpstring("property FunctionNumberOfSegments")]
        HRESULT FunctionNumberOfSegments([in] int pVal);
        [id(0x0000003a), propget, helpstring("property GeometryDefineBy")]
        HRESULT GeometryDefineBy([out, retval] DSGeometryDefineByType* pVal);
        [id(0x0000003a), propput, helpstring("property GeometryDefineBy")]
        HRESULT GeometryDefineBy([in] DSGeometryDefineByType pVal);
        [id(0x0000000a), propput, helpstring("property GeometrySelection")]
        HRESULT GeometrySelection([in] IDispatch* pVal);
        [id(0x0000003b), propget, helpstring("property ComponentSelection")]
        HRESULT ComponentSelection([out, retval] int* pVal);
        [id(0x0000003b), propput, helpstring("property ComponentSelection")]
        HRESULT ComponentSelection([in] int pVal);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x00000021), helpstring("method SetPropertyByStep")]
        HRESULT SetPropertyByStep(
                        [in] int step, 
                        [in] BSTR propertyName, 
                        [in] VARIANT newVal);
    };

    [
      odl,
      uuid(37CD495F-394C-416D-BF06-446E36D2FEAD),
      helpstring("IDSScalarLoadAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSScalarLoadAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property ID")]
        HRESULT ID([out, retval] VARIANT* pVal);
        [id(0x00000002), propget, helpstring("property Name")]
        HRESULT Name([out, retval] VARIANT* pVal);
        [id(0x00000002), propput, helpstring("property Name")]
        HRESULT Name([in] VARIANT pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
    };

    [
      odl,
      uuid(4BCC6F6C-EB37-48CC-96D6-A6C94ABF7028),
      helpstring("IDSScope Interface"),
      dual,
      oleautomation
    ]
    interface IDSScope : IDispatch {
    };

    [
      odl,
      uuid(58769602-1567-4EA3-8049-FF6BA5E58258),
      helpstring("IDSSolConvergence Interface"),
      dual,
      oleautomation
    ]
    interface IDSSolConvergence : IDispatch {
    };

    [
      odl,
      uuid(16CED4D7-8FAB-45E9-A036-8E8679FC93D3),
      helpstring("IDSSolutionAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSSolutionAuto : IDispatch {
    };

    typedef enum {
        DISPID_SolutionSettingsComments = 10,
        DISPID_SolutionSettingsTransientEndTime = 11,
        DISPID_SolutionSettingsNonLinearFormulation = 12,
        DISPID_SolutionSettingsReformulationTolerance = 13,
        DISPID_SolutionSettingsUseAutoTimeStepping = 14,
        DISPID_SolutionSettingsTimeStepDefineby = 15,
        DISPID_SolutionSettingsInitialSteps = 16,
        DISPID_SolutionSettingsMinimumSteps = 17,
        DISPID_SolutionSettingsMaximumSteps = 18,
        DISPID_SolutionSettingsNumberOfSteps = 19,
        DISPID_SolutionSettingsInitialTimeStep = 20,
        DISPID_SolutionSettingsMinimumTimeStep = 21,
        DISPID_SolutionSettingsMaximumTimeStep = 22,
        DISPID_SolutionSettingsTimeStep = 23,
        DISPID_SolutionSettingsNumManualStepResets = 24,
        DISPID_SolutionSettingsManualStepReset = 25,
        DISPID_SolutionSettingsNumResultSets = 26,
        DISPID_SolutionSettingsResultSet = 27,
        DISPID_SolutionSettingsResultSetsCriteria = 28,
        DISPID_SolutionSettingsAutomaticStepResetCriteria = 29,
        DISPID_SolutionSettingsNumAutoStepResets = 30,
        DISPID_SoltuionSettingsAutoStepReset = 31,
        DISPID_SolutionSettingsHTMLPageChartLegendVisible = 32,
        DISPID_SolutionSettingsHTMLPageDeltaTLegendVisible = 33,
        DISPID_SolutionSettingsHTMLPageTabularDataVisible = 34,
        DISPID_SolutionSettingsHTMLPageCurveTypeColVisible = 35,
        DISPID_SolutionSettingsNumValidStepResets = 36,
        DISPID_SolutionSettingsValidStepReset = 37,
        DISPID_SolutionSettingsValidStepResetType = 38,
        DISPID_SolutionSettingsFigures = 39,
        DISPID_SolutionSettingsPhysicsType = 40,
        DISPID_SolutionSettingsAnalysisType = 41,
        DISPID_SolutionSettingsAddComment = 60,
        DISPID_SolutionSettingsIsTransientSettingsLoadItemActive = 61,
        DISPID_SolutionSettingsChangeTransientSettingsLoadItemActive = 62,
        DISPID_SolutionSettingsIsTransientSettingsLoadItemVisible = 63,
        DISPID_SolutionSettingsChangeTransientSettingsLoadItemVisible = 64,
        DISPID_SolutionSettingsDeleteAllManualResets = 65,
        DISPID_SolutionSettingsDeleteManualReset = 66,
        DISPID_SolutionSettingsAddManualReset = 67,
        DISPID_SolutionSettingsDeleteManualResetsInRange = 68,
        DISPID_SolutionSettingsUnlockData = 69,
        DISPID_SolutionSettingsIsTransientSettings2ndLoadItemActive = 70,
        DISPID_SolutionSettingsChangeTransientSettings2ndLoadItemActive = 71,
        DISPID_SolutionSettingsIsTransientSettings2ndLoadItemVisible = 72,
        DISPID_SolutionSettingsChangeTransientSettings2ndLoadItemVisible = 73,
        DISPID_SolutionSettingsDetermineAutoResetPoints = 74,
        DISPID_SolutionSettingsDeleteAllResultSets = 75,
        DISPID_SolutionSettingsDeleteResultSet = 76,
        DISPID_SolutionSettingsAddResultSet = 77,
        DISPID_SolutionSettingsDeleteResultSetsInRange = 78,
        DISPID_SolutionSettingsAddFigure = 79,
        DISPID_SolutionSettingsImages = 80,
        DISPID_SolutionSettingsAddImage = 81
    } kDispId_SolutionSettings;

    [
      odl,
      uuid(B6ED8C2A-FD15-4213-B1C4-D06FB026EC80),
      helpstring("IDSSolutionSettingsAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSSolutionSettingsAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x0000000a), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x00000028), propget, helpstring("property PhysicsType")]
        HRESULT PhysicsType([out, retval] DSPhysicsType* pVal);
        [id(0x00000028), propput, helpstring("property PhysicsType")]
        HRESULT PhysicsType([in] DSPhysicsType pVal);
        [id(0x00000029), propget, helpstring("property AnalysisType")]
        HRESULT AnalysisType([out, retval] DSSimulationType* pVal);
        [id(0x00000029), propput, helpstring("property AnalysisType")]
        HRESULT AnalysisType([in] DSSimulationType pVal);
        [id(0x0000000b), propget, helpstring("property TransientEndTime")]
        HRESULT TransientEndTime([out, retval] double* pVal);
        [id(0x0000000b), propput, helpstring("property TransientEndTime")]
        HRESULT TransientEndTime([in] double pVal);
        [id(0x0000000c), propget, helpstring("property NonLinearFormulation")]
        HRESULT NonLinearFormulation([out, retval] DSNonlinearFormulationType* pVal);
        [id(0x0000000c), propput, helpstring("property NonLinearFormulation")]
        HRESULT NonLinearFormulation([in] DSNonlinearFormulationType pVal);
        [id(0x0000000d), propget, helpstring("property ReformulationTolerance")]
        HRESULT ReformulationTolerance([out, retval] double* pVal);
        [id(0x0000000d), propput, helpstring("property ReformulationTolerance")]
        HRESULT ReformulationTolerance([in] double pVal);
        [id(0x0000000e), propget, helpstring("property UseAutoTimeStepping")]
        HRESULT UseAutoTimeStepping([out, retval] DSAutoTimeSteppingType* pVal);
        [id(0x0000000e), propput, helpstring("property UseAutoTimeStepping")]
        HRESULT UseAutoTimeStepping([in] DSAutoTimeSteppingType pVal);
        [id(0x0000000f), propget, helpstring("property TimeStepDefineby")]
        HRESULT TimeStepDefineby([out, retval] DSTimeStepDefineByType* pVal);
        [id(0x0000000f), propput, helpstring("property TimeStepDefineby")]
        HRESULT TimeStepDefineby([in] DSTimeStepDefineByType pVal);
        [id(0x00000010), propget, helpstring("property InitialSteps")]
        HRESULT InitialSteps([out, retval] unsigned int* pVal);
        [id(0x00000010), propput, helpstring("property InitialSteps")]
        HRESULT InitialSteps([in] unsigned int pVal);
        [id(0x00000011), propget, helpstring("property MinimumSteps")]
        HRESULT MinimumSteps([out, retval] unsigned int* pVal);
        [id(0x00000011), propput, helpstring("property MinimumSteps")]
        HRESULT MinimumSteps([in] unsigned int pVal);
        [id(0x00000012), propget, helpstring("property MaximumSteps")]
        HRESULT MaximumSteps([out, retval] unsigned int* pVal);
        [id(0x00000012), propput, helpstring("property MaximumSteps")]
        HRESULT MaximumSteps([in] unsigned int pVal);
        [id(0x00000013), propget, helpstring("property NumberOfSteps")]
        HRESULT NumberOfSteps([out, retval] unsigned int* pVal);
        [id(0x00000013), propput, helpstring("property NumberOfSteps")]
        HRESULT NumberOfSteps([in] unsigned int pVal);
        [id(0x00000014), propget, helpstring("property InitialTimeStep")]
        HRESULT InitialTimeStep([out, retval] double* pVal);
        [id(0x00000014), propput, helpstring("property InitialTimeStep")]
        HRESULT InitialTimeStep([in] double pVal);
        [id(0x00000015), propget, helpstring("property MinimumTimeStep")]
        HRESULT MinimumTimeStep([out, retval] double* pVal);
        [id(0x00000015), propput, helpstring("property MinimumTimeStep")]
        HRESULT MinimumTimeStep([in] double pVal);
        [id(0x00000016), propget, helpstring("property MaximumTimeStep")]
        HRESULT MaximumTimeStep([out, retval] double* pVal);
        [id(0x00000016), propput, helpstring("property MaximumTimeStep")]
        HRESULT MaximumTimeStep([in] double pVal);
        [id(0x00000017), propget, helpstring("property TimeStep")]
        HRESULT TimeStep([out, retval] double* pVal);
        [id(0x00000017), propput, helpstring("property TimeStep")]
        HRESULT TimeStep([in] double pVal);
        [id(0x00000018), propget, helpstring("property NumManualStepResets")]
        HRESULT NumManualStepResets([out, retval] unsigned int* pVal);
        [id(0x00000018), propput, helpstring("property NumManualStepResets")]
        HRESULT NumManualStepResets([in] unsigned int pVal);
        [id(0x00000019), propget, helpstring("property ManualStepReset")]
        HRESULT ManualStepReset(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000019), propput, helpstring("property ManualStepReset")]
        HRESULT ManualStepReset(
                        [in] int index, 
                        [in] double pVal);
        [id(0x0000001a), propget, helpstring("property NumResultSets")]
        HRESULT NumResultSets([out, retval] unsigned int* pVal);
        [id(0x0000001a), propput, helpstring("property NumResultSets")]
        HRESULT NumResultSets([in] unsigned int pVal);
        [id(0x0000001b), propget, helpstring("property ResultSet")]
        HRESULT ResultSet(
                        [in] int index, 
                        [out, retval] VARIANT* pVal);
        [id(0x0000001b), propput, helpstring("property ResultSet")]
        HRESULT ResultSet(
                        [in] int index, 
                        [in] VARIANT pVal);
        [id(0x0000001c), propget, helpstring("property ResultSetsCriteria")]
        HRESULT ResultSetsCriteria([out, retval] DSResultSetsType* pVal);
        [id(0x0000001c), propput, helpstring("property ResultSetsCriteria")]
        HRESULT ResultSetsCriteria([in] DSResultSetsType pVal);
        [id(0x0000001d), propget, helpstring("property AutomaticStepResetCriteria")]
        HRESULT AutomaticStepResetCriteria([out, retval] int* pVal);
        [id(0x0000001d), propput, helpstring("property AutomaticStepResetCriteria")]
        HRESULT AutomaticStepResetCriteria([in] int pVal);
        [id(0x0000003c), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x0000003d), helpstring("method IsTransientSettingsLoadItemActive")]
        HRESULT IsTransientSettingsLoadItemActive(
                        [in] unsigned int ulId, 
                        [out, retval] VARIANT_BOOL* pVal);
        [id(0x0000003e), helpstring("method ChangeTransientSettingsLoadItemActive")]
        HRESULT ChangeTransientSettingsLoadItemActive(
                        [in] VARIANT_BOOL vbIsActive, 
                        [in] unsigned int ulId);
        [id(0x0000001e), propget, helpstring("property NumAutoStepResets")]
        HRESULT NumAutoStepResets([out, retval] unsigned int* pVal);
        [id(0x0000001f), propget, helpstring("property AutoStepReset")]
        HRESULT AutoStepReset(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000020), propget, helpstring("property HTMLPageChartLegendVisible")]
        HRESULT HTMLPageChartLegendVisible([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000020), propput, helpstring("property HTMLPageChartLegendVisible")]
        HRESULT HTMLPageChartLegendVisible([in] VARIANT_BOOL pVal);
        [id(0x00000021), propget, helpstring("property HTMLPageDeltaTLegendVisible")]
        HRESULT HTMLPageDeltaTLegendVisible([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000021), propput, helpstring("property HTMLPageDeltaTLegendVisible")]
        HRESULT HTMLPageDeltaTLegendVisible([in] VARIANT_BOOL pVal);
        [id(0x00000022), propget, helpstring("property HTMLPageTabularDataVisible")]
        HRESULT HTMLPageTabularDataVisible([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000022), propput, helpstring("property HTMLPageTabularDataVisible")]
        HRESULT HTMLPageTabularDataVisible([in] VARIANT_BOOL pVal);
        [id(0x00000023), propget, helpstring("property HTMLPageCurveTypeColVisible")]
        HRESULT HTMLPageCurveTypeColVisible([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000023), propput, helpstring("property HTMLPageCurveTypeColVisible")]
        HRESULT HTMLPageCurveTypeColVisible([in] VARIANT_BOOL pVal);
        [id(0x0000003f), helpstring("method IsTransientSettingsLoadItemVisible")]
        HRESULT IsTransientSettingsLoadItemVisible(
                        [in] unsigned int ulId, 
                        [out, retval] VARIANT_BOOL* pVal);
        [id(0x00000040), helpstring("method ChangeTransientSettingsLoadItemVisible")]
        HRESULT ChangeTransientSettingsLoadItemVisible(
                        [in] VARIANT_BOOL vbIsVisible, 
                        [in] unsigned int ulId);
        [id(0x00000024), propget, helpstring("property NumValidStepResets")]
        HRESULT NumValidStepResets([out, retval] unsigned int* pVal);
        [id(0x00000025), propget, helpstring("property ValidStepReset")]
        HRESULT ValidStepReset(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000026), propget, helpstring("property ValidStepResetType")]
        HRESULT ValidStepResetType(
                        [in] int index, 
                        [out, retval] DSSolutionSettingsResetType* pVal);
        [id(0x00000041), helpstring("method DeleteAllManualResets")]
        HRESULT DeleteAllManualResets();
        [id(0x00000042), helpstring("method DeleteManualReset")]
        HRESULT DeleteManualReset([in] double resetValToRemove);
        [id(0x00000043), helpstring("method AddManualReset")]
        HRESULT AddManualReset([in] double resetValToAdd);
        [id(0x00000044), helpstring("method DeleteManualResetsInRange")]
        HRESULT DeleteManualResetsInRange(
                        [in] double beginVal, 
                        [in] double endVal);
        [id(0x00000045), helpstring("method UnlockData")]
        HRESULT UnlockData();
        [id(0x00000046), helpstring("method IsTransientSettings2ndLoadItemActive")]
        HRESULT IsTransientSettings2ndLoadItemActive(
                        [in] unsigned int ulId, 
                        [out, retval] VARIANT_BOOL* pVal);
        [id(0x00000047), helpstring("method ChangeTransientSettings2ndLoadItemActive")]
        HRESULT ChangeTransientSettings2ndLoadItemActive(
                        [in] VARIANT_BOOL vbIsActive, 
                        [in] unsigned int ulId);
        [id(0x00000048), helpstring("method IsTransientSettings2ndLoadItemVisible")]
        HRESULT IsTransientSettings2ndLoadItemVisible(
                        [in] unsigned int ulId, 
                        [out, retval] VARIANT_BOOL* pVal);
        [id(0x00000049), helpstring("method ChangeTransientSettings2ndLoadItemVisible")]
        HRESULT ChangeTransientSettings2ndLoadItemVisible(
                        [in] VARIANT_BOOL vbIsVisible, 
                        [in] unsigned int ulId);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
        [id(0x0000004a), helpstring("method DetermineAutoResetPoints")]
        HRESULT DetermineAutoResetPoints();
        [id(0x0000004b), helpstring("method DeleteAllResultSets")]
        HRESULT DeleteAllResultSets();
        [id(0x0000004c), helpstring("method DeleteResultSet")]
        HRESULT DeleteResultSet([in] double resultSetValToRemove);
        [id(0x0000004d), helpstring("method AddResultSet")]
        HRESULT AddResultSet([in] double resultSetValToAdd);
        [id(0x0000004e), helpstring("method DeleteResultSetsInRange")]
        HRESULT DeleteResultSetsInRange(
                        [in] double beginVal, 
                        [in] double endVal);
        [id(0x00000027), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x0000004f), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x00000050), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000051), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
    };

    typedef enum {
        kResetManual = 0,
        kResetAuto = 1
    } DSSolutionSettingsResetType;

    typedef enum {
        DISPID_TransientThermalSettingsComments = 10,
        DISPID_TransientThermalSettingsEndTime = 11,
        DISPID_TransientThermalSettingsNonLinearFormulation = 12,
        DISPID_TransientThermalSettingsReformulationTolerance = 13,
        DISPID_TransientThermalSettingsUseAutoTimeStepping = 14,
        DISPID_TransientThermalSettingsTimeStepDefineby = 15,
        DISPID_TransientThermalSettingsInitialSteps = 16,
        DISPID_TransientThermalSettingsMinimumSteps = 17,
        DISPID_TransientThermalSettingsMaximumSteps = 18,
        DISPID_TransientThermalSettingsNumberOfSteps = 19,
        DISPID_TransientThermalSettingsInitialTimeStep = 20,
        DISPID_TransientThermalSettingsMinimumTimeStep = 21,
        DISPID_TransientThermalSettingsMaximumTimeStep = 22,
        DISPID_TransientThermalSettingsTimeStep = 23,
        DISPID_TransientThermalSettingsNumManualStepResets = 24,
        DISPID_TransientThermalSettingsManualStepReset = 25,
        DISPID_TransientThermalSettingsNumResultSets = 26,
        DISPID_TransientThermalSettingsResultSet = 27,
        DISPID_TransientThermalSettingsResultSetsCriteria = 28,
        DISPID_TransientThermalSettingsAutomaticStepResetCriteria = 29,
        DISPID_TransientThermalSettingsNumAutoStepResets = 30,
        DISPID_TransientThermalSettingsAutoStepReset = 31,
        DISPID_TransientThermalSettingsHTMLPageChartLegendVisible = 32,
        DISPID_TransientThermalSettingsHTMLPageDeltaTLegendVisible = 33,
        DISPID_TransientThermalSettingsHTMLPageTabularDataVisible = 34,
        DISPID_TransientThermalSettingsHTMLPageCurveTypeColVisible = 35,
        DISPID_TransientThermalSettingsNumValidStepResets = 36,
        DISPID_TransientThermalSettingsValidStepReset = 37,
        DISPID_TransientThermalSettingsValidStepResetType = 38,
        DISPID_TransientThermalSettingsFigures = 39,
        DISPID_TransientThermalSettingsPhysicsType = 40,
        DISPID_TransientThermalSettingsAnalysisType = 41,
        DISPID_TransientThermalSettingsAllStepResets = 42,
        DISPID_TransientThermalSettingsResultSets = 43,
        DISPID_TransientThermalSettingsImages = 44,
        DISPID_TransientThermalSettingsAddComment = 60,
        DISPID_TransientThermalSettingsIsTransientSettingsLoadItemActive = 61,
        DISPID_TransientThermalSettingsChangeTransientSettingsLoadItemActive = 62,
        DISPID_TransientThermalSettingsIsTransientSettingsLoadItemVisible = 63,
        DISPID_TransientThermalSettingsChangeTransientSettingsLoadItemVisible = 64,
        DISPID_TransientThermalSettingsDeleteAllManualResets = 65,
        DISPID_TransientThermalSettingsDeleteManualReset = 66,
        DISPID_TransientThermalSettingsAddManualReset = 67,
        DISPID_TransientThermalSettingsDeleteManualResetsInRange = 68,
        DISPID_TransientThermalSettingsUnlockData = 69,
        DISPID_TransientThermalSettingsIsTransientSettings2ndLoadItemActive = 70,
        DISPID_TransientThermalSettingsChangeTransientSettings2ndLoadItemActive = 71,
        DISPID_TransientThermalSettingsIsTransientSettings2ndLoadItemVisible = 72,
        DISPID_TransientThermalSettingsChangeTransientSettings2ndLoadItemVisible = 73,
        DISPID_TransientThermalSettingsDetermineAutoResetPoints = 74,
        DISPID_TransientThermalSettingsDeleteAllResultSets = 75,
        DISPID_TransientThermalSettingsDeleteResultSet = 76,
        DISPID_TransientThermalSettingsAddResultSet = 77,
        DISPID_TransientThermalSettingsDeleteResultSetsInRange = 78,
        DISPID_TransientThermalSettingsAddFigure = 79,
        DISPID_TransientThermalSettingsAddImage = 80
    } kDispId_TransientThermalSettings;

    [
      odl,
      uuid(5CDEBF18-4C39-4476-82CD-E26E7866845F),
      helpstring("IDSTransientThermalSettingsAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSTransientThermalSettingsAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x0000000a), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x0000000c), propget, helpstring("property NonLinearFormulation")]
        HRESULT NonLinearFormulation([out, retval] DSNonlinearFormulationType* pVal);
        [id(0x0000000c), propput, helpstring("property NonLinearFormulation")]
        HRESULT NonLinearFormulation([in] DSNonlinearFormulationType pVal);
        [id(0x0000000b), propget, helpstring("property EndTime")]
        HRESULT EndTime([out, retval] double* pVal);
        [id(0x0000000b), propput, helpstring("property EndTime")]
        HRESULT EndTime([in] double pVal);
        [id(0x0000000d), propget, helpstring("property ReformulationTolerance")]
        HRESULT ReformulationTolerance([out, retval] double* pVal);
        [id(0x0000000d), propput, helpstring("property ReformulationTolerance")]
        HRESULT ReformulationTolerance([in] double pVal);
        [id(0x0000000e), propget, helpstring("property UseAutoTimeStepping")]
        HRESULT UseAutoTimeStepping([out, retval] DSAutoTimeSteppingType* pVal);
        [id(0x0000000e), propput, helpstring("property UseAutoTimeStepping")]
        HRESULT UseAutoTimeStepping([in] DSAutoTimeSteppingType pVal);
        [id(0x0000000f), propget, helpstring("property TimeStepDefineby")]
        HRESULT TimeStepDefineby([out, retval] DSTimeStepDefineByType* pVal);
        [id(0x0000000f), propput, helpstring("property TimeStepDefineby")]
        HRESULT TimeStepDefineby([in] DSTimeStepDefineByType pVal);
        [id(0x00000010), propget, helpstring("property InitialSteps")]
        HRESULT InitialSteps([out, retval] unsigned int* pVal);
        [id(0x00000010), propput, helpstring("property InitialSteps")]
        HRESULT InitialSteps([in] unsigned int pVal);
        [id(0x00000011), propget, helpstring("property MinimumSteps")]
        HRESULT MinimumSteps([out, retval] unsigned int* pVal);
        [id(0x00000011), propput, helpstring("property MinimumSteps")]
        HRESULT MinimumSteps([in] unsigned int pVal);
        [id(0x00000012), propget, helpstring("property MaximumSteps")]
        HRESULT MaximumSteps([out, retval] unsigned int* pVal);
        [id(0x00000012), propput, helpstring("property MaximumSteps")]
        HRESULT MaximumSteps([in] unsigned int pVal);
        [id(0x00000013), propget, helpstring("property NumberOfSteps")]
        HRESULT NumberOfSteps([out, retval] unsigned int* pVal);
        [id(0x00000013), propput, helpstring("property NumberOfSteps")]
        HRESULT NumberOfSteps([in] unsigned int pVal);
        [id(0x00000014), propget, helpstring("property InitialTimeStep")]
        HRESULT InitialTimeStep([out, retval] double* pVal);
        [id(0x00000014), propput, helpstring("property InitialTimeStep")]
        HRESULT InitialTimeStep([in] double pVal);
        [id(0x00000015), propget, helpstring("property MinimumTimeStep")]
        HRESULT MinimumTimeStep([out, retval] double* pVal);
        [id(0x00000015), propput, helpstring("property MinimumTimeStep")]
        HRESULT MinimumTimeStep([in] double pVal);
        [id(0x00000016), propget, helpstring("property MaximumTimeStep")]
        HRESULT MaximumTimeStep([out, retval] double* pVal);
        [id(0x00000016), propput, helpstring("property MaximumTimeStep")]
        HRESULT MaximumTimeStep([in] double pVal);
        [id(0x00000017), propget, helpstring("property TimeStep")]
        HRESULT TimeStep([out, retval] double* pVal);
        [id(0x00000017), propput, helpstring("property TimeStep")]
        HRESULT TimeStep([in] double pVal);
        [id(0x00000018), propget, helpstring("property NumManualStepResets")]
        HRESULT NumManualStepResets([out, retval] unsigned int* pVal);
        [id(0x00000018), propput, helpstring("property NumManualStepResets")]
        HRESULT NumManualStepResets([in] unsigned int pVal);
        [id(0x00000019), propget, helpstring("property ManualStepReset")]
        HRESULT ManualStepReset(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000019), propput, helpstring("property ManualStepReset")]
        HRESULT ManualStepReset(
                        [in] int index, 
                        [in] double pVal);
        [id(0x0000001a), propget, helpstring("property NumResultSets")]
        HRESULT NumResultSets([out, retval] unsigned int* pVal);
        [id(0x0000001a), propput, helpstring("property NumResultSets")]
        HRESULT NumResultSets([in] unsigned int pVal);
        [id(0x0000001b), propget, helpstring("property ResultSet")]
        HRESULT ResultSet(
                        [in] int index, 
                        [out, retval] VARIANT* pVal);
        [id(0x0000001b), propput, helpstring("property ResultSet")]
        HRESULT ResultSet(
                        [in] int index, 
                        [in] VARIANT pVal);
        [id(0x0000001c), propget, helpstring("property ResultSetsCriteria")]
        HRESULT ResultSetsCriteria([out, retval] DSResultSetsType* pVal);
        [id(0x0000001c), propput, helpstring("property ResultSetsCriteria")]
        HRESULT ResultSetsCriteria([in] DSResultSetsType pVal);
        [id(0x0000001d), propget, helpstring("property AutomaticStepResetCriteria")]
        HRESULT AutomaticStepResetCriteria([out, retval] int* pVal);
        [id(0x0000001d), propput, helpstring("property AutomaticStepResetCriteria")]
        HRESULT AutomaticStepResetCriteria([in] int pVal);
        [id(0x0000003c), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x0000003d), helpstring("method IsTransientSettingsLoadItemActive")]
        HRESULT IsTransientSettingsLoadItemActive(
                        [in] unsigned int ulId, 
                        [out, retval] VARIANT_BOOL* pVal);
        [id(0x0000003e), helpstring("method ChangeTransientSettingsLoadItemActive")]
        HRESULT ChangeTransientSettingsLoadItemActive(
                        [in] VARIANT_BOOL vbIsActive, 
                        [in] unsigned int ulId);
        [id(0x0000001e), propget, helpstring("property NumAutoStepResets")]
        HRESULT NumAutoStepResets([out, retval] unsigned int* pVal);
        [id(0x0000001f), propget, helpstring("property AutoStepReset")]
        HRESULT AutoStepReset(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x0000001f), propput, helpstring("property AutoStepReset")]
        HRESULT AutoStepReset(
                        [in] int index, 
                        [in] double pVal);
        [id(0x00000020), propget, helpstring("property HTMLPageChartLegendVisible")]
        HRESULT HTMLPageChartLegendVisible([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000020), propput, helpstring("property HTMLPageChartLegendVisible")]
        HRESULT HTMLPageChartLegendVisible([in] VARIANT_BOOL pVal);
        [id(0x00000021), propget, helpstring("property HTMLPageDeltaTLegendVisible")]
        HRESULT HTMLPageDeltaTLegendVisible([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000021), propput, helpstring("property HTMLPageDeltaTLegendVisible")]
        HRESULT HTMLPageDeltaTLegendVisible([in] VARIANT_BOOL pVal);
        [id(0x00000022), propget, helpstring("property HTMLPageTabularDataVisible")]
        HRESULT HTMLPageTabularDataVisible([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000022), propput, helpstring("property HTMLPageTabularDataVisible")]
        HRESULT HTMLPageTabularDataVisible([in] VARIANT_BOOL pVal);
        [id(0x00000023), propget, helpstring("property HTMLPageCurveTypeColVisible")]
        HRESULT HTMLPageCurveTypeColVisible([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000023), propput, helpstring("property HTMLPageCurveTypeColVisible")]
        HRESULT HTMLPageCurveTypeColVisible([in] VARIANT_BOOL pVal);
        [id(0x0000003f), helpstring("method IsTransientSettingsLoadItemVisible")]
        HRESULT IsTransientSettingsLoadItemVisible(
                        [in] unsigned int ulId, 
                        [out, retval] VARIANT_BOOL* pVal);
        [id(0x00000040), helpstring("method ChangeTransientSettingsLoadItemVisible")]
        HRESULT ChangeTransientSettingsLoadItemVisible(
                        [in] VARIANT_BOOL vbIsVisible, 
                        [in] unsigned int ulId);
        [id(0x00000024), propget, helpstring("property NumValidStepResets")]
        HRESULT NumValidStepResets([out, retval] unsigned int* pVal);
        [id(0x00000025), propget, helpstring("property ValidStepReset")]
        HRESULT ValidStepReset(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000026), propget, helpstring("property ValidStepResetType")]
        HRESULT ValidStepResetType(
                        [in] int index, 
                        [out, retval] DSSolutionSettingsResetType* pVal);
        [id(0x00000041), helpstring("method DeleteAllManualResets")]
        HRESULT DeleteAllManualResets();
        [id(0x00000042), helpstring("method DeleteManualReset")]
        HRESULT DeleteManualReset([in] double resetValToRemove);
        [id(0x00000043), helpstring("method AddManualReset")]
        HRESULT AddManualReset([in] double resetValToAdd);
        [id(0x00000044), helpstring("method DeleteManualResetsInRange")]
        HRESULT DeleteManualResetsInRange(
                        [in] double beginVal, 
                        [in] double endVal);
        [id(0x00000045), helpstring("method UnlockData")]
        HRESULT UnlockData();
        [id(0x00000046), helpstring("method IsTransientSettings2ndLoadItemActive")]
        HRESULT IsTransientSettings2ndLoadItemActive(
                        [in] unsigned int ulId, 
                        [out, retval] VARIANT_BOOL* pVal);
        [id(0x00000047), helpstring("method ChangeTransientSettings2ndLoadItemActive")]
        HRESULT ChangeTransientSettings2ndLoadItemActive(
                        [in] VARIANT_BOOL vbIsActive, 
                        [in] unsigned int ulId);
        [id(0x00000048), helpstring("method IsTransientSettings2ndLoadItemVisible")]
        HRESULT IsTransientSettings2ndLoadItemVisible(
                        [in] unsigned int ulId, 
                        [out, retval] VARIANT_BOOL* pVal);
        [id(0x00000049), helpstring("method ChangeTransientSettings2ndLoadItemVisible")]
        HRESULT ChangeTransientSettings2ndLoadItemVisible(
                        [in] VARIANT_BOOL vbIsVisible, 
                        [in] unsigned int ulId);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
        [id(0x0000004a), helpstring("method DetermineAutoResetPoints")]
        HRESULT DetermineAutoResetPoints();
        [id(0x0000004b), helpstring("method DeleteAllResultSets")]
        HRESULT DeleteAllResultSets();
        [id(0x0000004c), helpstring("method DeleteResultSet")]
        HRESULT DeleteResultSet([in] double resultSetValToRemove);
        [id(0x0000004d), helpstring("method AddResultSet")]
        HRESULT AddResultSet([in] double resultSetValToAdd);
        [id(0x0000004e), helpstring("method DeleteResultSetsInRange")]
        HRESULT DeleteResultSetsInRange(
                        [in] double beginVal, 
                        [in] double endVal);
        [id(0x00000027), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x0000004f), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x0000002a), propget, helpstring("property AllStepResets")]
        HRESULT AllStepResets([out, retval] IDSListWrapper** pStepResets);
        [id(0x0000002b), propget, helpstring("property ResultSets")]
        HRESULT ResultSets([out, retval] IDSListWrapper** pResultSets);
        [id(0x0000002c), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000050), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
    };

    typedef enum {
        DISPID_TransientMechanicalSettingsComments = 10,
        DISPID_TransientMechanicalSettingsEndTime = 11,
        DISPID_TransientMechanicalSettingsUseAutoTimeStepping = 12,
        DISPID_TransientMechanicalSettingsTimeStepDefineby = 13,
        DISPID_TransientMechanicalSettingsInitialSteps = 14,
        DISPID_TransientMechanicalSettingsMinimumSteps = 15,
        DISPID_TransientMechanicalSettingsMaximumSteps = 16,
        DISPID_TransientMechanicalSettingsNumberOfSteps = 17,
        DISPID_TransientMechanicalSettingsInitialTimeStep = 18,
        DISPID_TransientMechanicalSettingsMinimumTimeStep = 19,
        DISPID_TransientMechanicalSettingsMaximumTimeStep = 20,
        DISPID_TransientMechanicalSettingsTimeStep = 21,
        DISPID_TransientMechanicalSettingsNumManualStepResets = 22,
        DISPID_TransientMechanicalSettingsManualStepReset = 23,
        DISPID_TransientMechanicalSettingsNumResultSets = 24,
        DISPID_TransientMechanicalSettingsResultSet = 25,
        DISPID_TransientMechanicalSettingsResultSetsCriteria = 26,
        DISPID_TransientMechanicalSettingsAutomaticStepResetCriteria = 27,
        DISPID_TransientMechanicalSettingsNumAutoStepResets = 28,
        DISPID_TransientMechanicalSettingsAutoStepReset = 29,
        DISPID_TransientMechanicalSettingsHTMLPageChartLegendVisible = 30,
        DISPID_TransientMechanicalSettingsHTMLPageDeltaTLegendVisible = 31,
        DISPID_TransientMechanicalSettingsHTMLPageTabularDataVisible = 32,
        DISPID_TransientMechanicalSettingsHTMLPageCurveTypeColVisible = 33,
        DISPID_TransientMechanicalSettingsNumValidStepResets = 34,
        DISPID_TransientMechanicalSettingsValidStepReset = 35,
        DISPID_TransientMechanicalSettingsValidStepResetType = 36,
        DISPID_TransientMechanicalSettingsConstantDampingValue = 37,
        DISPID_TransientMechanicalSettingsBetaDampingDefineBy = 38,
        DISPID_TransientMechanicalSettingsBetaDampingBeta = 39,
        DISPID_TransientMechanicalSettingsBetaDampingFrequency = 40,
        DISPID_TransientMechanicalSettingsBetaDampingMeasure = 41,
        DISPID_TransientMechanicalSettingsNumericalDampingValue = 42,
        DISPID_TransientMechanicalSettingsFigures = 43,
        DISPID_TransientMechanicalSettingsImages = 44,
        DISPID_TransientMechanicalSettingsTransientEndTime = 45,
        DISPID_TransientMechanicalSettingsNumericalDampingType = 46,
        DISPID_TransientMechanicalSettingsAddComment = 60,
        DISPID_TransientMechanicalSettingsIsTransientSettingsLoadItemActive = 61,
        DISPID_TransientMechanicalSettingsChangeTransientSettingsLoadItemActive = 62,
        DISPID_TransientMechanicalSettingsIsTransientSettingsLoadItemVisible = 63,
        DISPID_TransientMechanicalSettingsChangeTransientSettingsLoadItemVisible = 64,
        DISPID_TransientMechanicalSettingsDeleteAllManualResets = 65,
        DISPID_TransientMechanicalSettingsDeleteManualReset = 66,
        DISPID_TransientMechanicalSettingsAddManualReset = 67,
        DISPID_TransientMechanicalSettingsDeleteManualResetsInRange = 68,
        DISPID_TransientMechanicalSettingsUnlockData = 69,
        DISPID_TransientMechanicalSettingsIsTransientSettings2ndLoadItemActive = 70,
        DISPID_TransientMechanicalSettingsChangeTransientSettings2ndLoadItemActive = 71,
        DISPID_TransientMechanicalSettingsIsTransientSettings2ndLoadItemVisible = 72,
        DISPID_TransientMechanicalSettingsChangeTransientSettings2ndLoadItemVisible = 73,
        DISPID_TransientMechanicalSettingsDetermineAutoResetPoints = 74,
        DISPID_TransientMechanicalSettingsDeleteAllResultSets = 75,
        DISPID_TransientMechanicalSettingsDeleteResultSet = 76,
        DISPID_TransientMechanicalSettingsAddResultSet = 77,
        DISPID_TransientMechanicalSettingsDeleteResultSetsInRange = 78,
        DISPID_TransientMechanicalSettingsAddFigure = 79,
        DISPID_TransientMechanicalSettingsAddImage = 80
    } kDispId_TransientMechanicalSettings;

    [
      odl,
      uuid(1B14E1C6-D04D-4BF8-BB51-DF36EEF6F209),
      helpstring("IDSTransientMechanicalSettingsAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSTransientMechanicalSettingsAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x0000000a), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x0000000b), propget, helpstring("property EndTime")]
        HRESULT EndTime([out, retval] double* pVal);
        [id(0x0000000b), propput, helpstring("property EndTime")]
        HRESULT EndTime([in] double pVal);
        [id(0x0000000c), propget, helpstring("property UseAutoTimeStepping")]
        HRESULT UseAutoTimeStepping([out, retval] DSAutoTimeSteppingType* pVal);
        [id(0x0000000c), propput, helpstring("property UseAutoTimeStepping")]
        HRESULT UseAutoTimeStepping([in] DSAutoTimeSteppingType pVal);
        [id(0x0000000d), propget, helpstring("property TimeStepDefineby")]
        HRESULT TimeStepDefineby([out, retval] DSTimeStepDefineByType* pVal);
        [id(0x0000000d), propput, helpstring("property TimeStepDefineby")]
        HRESULT TimeStepDefineby([in] DSTimeStepDefineByType pVal);
        [id(0x0000000e), propget, helpstring("property InitialSteps")]
        HRESULT InitialSteps([out, retval] unsigned int* pVal);
        [id(0x0000000e), propput, helpstring("property InitialSteps")]
        HRESULT InitialSteps([in] unsigned int pVal);
        [id(0x0000000f), propget, helpstring("property MinimumSteps")]
        HRESULT MinimumSteps([out, retval] unsigned int* pVal);
        [id(0x0000000f), propput, helpstring("property MinimumSteps")]
        HRESULT MinimumSteps([in] unsigned int pVal);
        [id(0x00000010), propget, helpstring("property MaximumSteps")]
        HRESULT MaximumSteps([out, retval] unsigned int* pVal);
        [id(0x00000010), propput, helpstring("property MaximumSteps")]
        HRESULT MaximumSteps([in] unsigned int pVal);
        [id(0x00000011), propget, helpstring("property NumberOfSteps")]
        HRESULT NumberOfSteps([out, retval] unsigned int* pVal);
        [id(0x00000011), propput, helpstring("property NumberOfSteps")]
        HRESULT NumberOfSteps([in] unsigned int pVal);
        [id(0x00000012), propget, helpstring("property InitialTimeStep")]
        HRESULT InitialTimeStep([out, retval] double* pVal);
        [id(0x00000012), propput, helpstring("property InitialTimeStep")]
        HRESULT InitialTimeStep([in] double pVal);
        [id(0x00000013), propget, helpstring("property MinimumTimeStep")]
        HRESULT MinimumTimeStep([out, retval] double* pVal);
        [id(0x00000013), propput, helpstring("property MinimumTimeStep")]
        HRESULT MinimumTimeStep([in] double pVal);
        [id(0x00000014), propget, helpstring("property MaximumTimeStep")]
        HRESULT MaximumTimeStep([out, retval] double* pVal);
        [id(0x00000014), propput, helpstring("property MaximumTimeStep")]
        HRESULT MaximumTimeStep([in] double pVal);
        [id(0x00000015), propget, helpstring("property TimeStep")]
        HRESULT TimeStep([out, retval] double* pVal);
        [id(0x00000015), propput, helpstring("property TimeStep")]
        HRESULT TimeStep([in] double pVal);
        [id(0x00000016), propget, helpstring("property NumManualStepResets")]
        HRESULT NumManualStepResets([out, retval] unsigned int* pVal);
        [id(0x00000016), propput, helpstring("property NumManualStepResets")]
        HRESULT NumManualStepResets([in] unsigned int pVal);
        [id(0x00000017), propget, helpstring("property ManualStepReset")]
        HRESULT ManualStepReset(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000017), propput, helpstring("property ManualStepReset")]
        HRESULT ManualStepReset(
                        [in] int index, 
                        [in] double pVal);
        [id(0x00000018), propget, helpstring("property NumResultSets")]
        HRESULT NumResultSets([out, retval] unsigned int* pVal);
        [id(0x00000018), propput, helpstring("property NumResultSets")]
        HRESULT NumResultSets([in] unsigned int pVal);
        [id(0x00000019), propget, helpstring("property ResultSet")]
        HRESULT ResultSet(
                        [in] int index, 
                        [out, retval] VARIANT* pVal);
        [id(0x00000019), propput, helpstring("property ResultSet")]
        HRESULT ResultSet(
                        [in] int index, 
                        [in] VARIANT pVal);
        [id(0x0000001a), propget, helpstring("property ResultSetsCriteria")]
        HRESULT ResultSetsCriteria([out, retval] DSResultSetsType* pVal);
        [id(0x0000001a), propput, helpstring("property ResultSetsCriteria")]
        HRESULT ResultSetsCriteria([in] DSResultSetsType pVal);
        [id(0x0000001b), propget, helpstring("property AutomaticStepResetCriteria")]
        HRESULT AutomaticStepResetCriteria([out, retval] int* pVal);
        [id(0x0000001b), propput, helpstring("property AutomaticStepResetCriteria")]
        HRESULT AutomaticStepResetCriteria([in] int pVal);
        [id(0x0000003c), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x0000003d), helpstring("method IsTransientSettingsLoadItemActive")]
        HRESULT IsTransientSettingsLoadItemActive(
                        [in] unsigned int ulId, 
                        [out, retval] VARIANT_BOOL* pVal);
        [id(0x0000003e), helpstring("method ChangeTransientSettingsLoadItemActive")]
        HRESULT ChangeTransientSettingsLoadItemActive(
                        [in] VARIANT_BOOL vbIsActive, 
                        [in] unsigned int ulId);
        [id(0x00000025), propget, helpstring("property ConstantDampingValue")]
        HRESULT ConstantDampingValue([out, retval] double* pVal);
        [id(0x00000025), propput, helpstring("property ConstantDampingValue")]
        HRESULT ConstantDampingValue([in] double pVal);
        [id(0x00000026), propget, helpstring("property BetaDampingDefineBy")]
        HRESULT BetaDampingDefineBy([out, retval] DSBetaDampingType* pVal);
        [id(0x00000026), propput, helpstring("property BetaDampingDefineBy")]
        HRESULT BetaDampingDefineBy([in] DSBetaDampingType pVal);
        [id(0x00000028), propget, helpstring("property BetaDampingFrequency")]
        HRESULT BetaDampingFrequency([out, retval] double* pVal);
        [id(0x00000028), propput, helpstring("property BetaDampingFrequency")]
        HRESULT BetaDampingFrequency([in] double pVal);
        [id(0x00000029), propget, helpstring("property BetaDampingMeasure")]
        HRESULT BetaDampingMeasure([out, retval] double* pVal);
        [id(0x00000029), propput, helpstring("property BetaDampingMeasure")]
        HRESULT BetaDampingMeasure([in] double pVal);
        [id(0x00000027), propget, helpstring("property BetaDampingBeta")]
        HRESULT BetaDampingBeta([out, retval] double* pVal);
        [id(0x00000027), propput, helpstring("property BetaDampingBeta")]
        HRESULT BetaDampingBeta([in] double pVal);
        [id(0x0000002a), propget, helpstring("property NumericalDampingValue")]
        HRESULT NumericalDampingValue([out, retval] double* pVal);
        [id(0x0000002a), propput, helpstring("property NumericalDampingValue")]
        HRESULT NumericalDampingValue([in] double pVal);
        [id(0x0000001c), propget, helpstring("property NumAutoStepResets")]
        HRESULT NumAutoStepResets([out, retval] unsigned int* pVal);
        [id(0x0000001d), propget, helpstring("property AutoStepReset")]
        HRESULT AutoStepReset(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x0000001d), propput, helpstring("property AutoStepReset")]
        HRESULT AutoStepReset(
                        [in] int index, 
                        [in] double pVal);
        [id(0x0000001e), propget, helpstring("property HTMLPageChartLegendVisible")]
        HRESULT HTMLPageChartLegendVisible([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000001e), propput, helpstring("property HTMLPageChartLegendVisible")]
        HRESULT HTMLPageChartLegendVisible([in] VARIANT_BOOL pVal);
        [id(0x0000001f), propget, helpstring("property HTMLPageDeltaTLegendVisible")]
        HRESULT HTMLPageDeltaTLegendVisible([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000001f), propput, helpstring("property HTMLPageDeltaTLegendVisible")]
        HRESULT HTMLPageDeltaTLegendVisible([in] VARIANT_BOOL pVal);
        [id(0x00000020), propget, helpstring("property HTMLPageTabularDataVisible")]
        HRESULT HTMLPageTabularDataVisible([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000020), propput, helpstring("property HTMLPageTabularDataVisible")]
        HRESULT HTMLPageTabularDataVisible([in] VARIANT_BOOL pVal);
        [id(0x00000021), propget, helpstring("property HTMLPageCurveTypeColVisible")]
        HRESULT HTMLPageCurveTypeColVisible([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000021), propput, helpstring("property HTMLPageCurveTypeColVisible")]
        HRESULT HTMLPageCurveTypeColVisible([in] VARIANT_BOOL pVal);
        [id(0x0000003f), helpstring("method IsTransientSettingsLoadItemVisible")]
        HRESULT IsTransientSettingsLoadItemVisible(
                        [in] unsigned int ulId, 
                        [out, retval] VARIANT_BOOL* pVal);
        [id(0x00000040), helpstring("method ChangeTransientSettingsLoadItemVisible")]
        HRESULT ChangeTransientSettingsLoadItemVisible(
                        [in] VARIANT_BOOL vbIsVisible, 
                        [in] unsigned int ulId);
        [id(0x00000022), propget, helpstring("property NumValidStepResets")]
        HRESULT NumValidStepResets([out, retval] unsigned int* pVal);
        [id(0x00000023), propget, helpstring("property ValidStepReset")]
        HRESULT ValidStepReset(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000024), propget, helpstring("property ValidStepResetType")]
        HRESULT ValidStepResetType(
                        [in] int index, 
                        [out, retval] DSSolutionSettingsResetType* pVal);
        [id(0x00000041), helpstring("method DeleteAllManualResets")]
        HRESULT DeleteAllManualResets();
        [id(0x00000042), helpstring("method DeleteManualReset")]
        HRESULT DeleteManualReset([in] double resetValToRemove);
        [id(0x00000043), helpstring("method AddManualReset")]
        HRESULT AddManualReset([in] double resetValToAdd);
        [id(0x00000044), helpstring("method DeleteManualResetsInRange")]
        HRESULT DeleteManualResetsInRange(
                        [in] double beginVal, 
                        [in] double endVal);
        [id(0x00000045), helpstring("method UnlockData")]
        HRESULT UnlockData();
        [id(0x00000046), helpstring("method IsTransientSettings2ndLoadItemActive")]
        HRESULT IsTransientSettings2ndLoadItemActive(
                        [in] unsigned int ulId, 
                        [out, retval] VARIANT_BOOL* pVal);
        [id(0x00000047), helpstring("method ChangeTransientSettings2ndLoadItemActive")]
        HRESULT ChangeTransientSettings2ndLoadItemActive(
                        [in] VARIANT_BOOL vbIsActive, 
                        [in] unsigned int ulId);
        [id(0x00000048), helpstring("method IsTransientSettings2ndLoadItemVisible")]
        HRESULT IsTransientSettings2ndLoadItemVisible(
                        [in] unsigned int ulId, 
                        [out, retval] VARIANT_BOOL* pVal);
        [id(0x00000049), helpstring("method ChangeTransientSettings2ndLoadItemVisible")]
        HRESULT ChangeTransientSettings2ndLoadItemVisible(
                        [in] VARIANT_BOOL vbIsVisible, 
                        [in] unsigned int ulId);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
        [id(0x0000004a), helpstring("method DetermineAutoResetPoints")]
        HRESULT DetermineAutoResetPoints();
        [id(0x0000004b), helpstring("method DeleteAllResultSets")]
        HRESULT DeleteAllResultSets();
        [id(0x0000004c), helpstring("method DeleteResultSet")]
        HRESULT DeleteResultSet([in] double resultSetValToRemove);
        [id(0x0000004d), helpstring("method AddResultSet")]
        HRESULT AddResultSet([in] double resultSetValToAdd);
        [id(0x0000004e), helpstring("method DeleteResultSetsInRange")]
        HRESULT DeleteResultSetsInRange(
                        [in] double beginVal, 
                        [in] double endVal);
        [id(0x0000002b), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x0000004f), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x0000002c), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000050), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x0000002d), propget, helpstring("property TransientEndTime")]
        HRESULT TransientEndTime([out, retval] double* pVal);
        [id(0x0000002e), propget, helpstring("property NumericalDampingValue")]
        HRESULT NumericalDampingType([out, retval] DSTransientDampingType* pVal);
        [id(0x0000002e), propput, helpstring("property NumericalDampingValue")]
        HRESULT NumericalDampingType([in] DSTransientDampingType pVal);
    };

    typedef enum {
        kTransient_Damping_Program_Chooses = 0,
        kTransient_Damping_Manual = 1
    } DSTransientDampingType;

    typedef enum {
        DISPID_SolutionStepComments = 10,
        DISPID_SolutionStepEnvironmentId = 11,
        DISPID_SolutionStepResults = 12,
        DISPID_SolutionStepUseAutoTimeStepping = 13,
        DISPID_SolutionStepInitialSteps = 14,
        DISPID_SolutionStepMaximumSteps = 15,
        DISPID_SolutionStepMinimumSteps = 16,
        DISPID_SolutionStepNumberOfSteps = 17,
        DISPID_SolutionStepLineSearch = 18,
        DISPID_SolutionStepSolverType = 19,
        DISPID_SolutionStepImages = 20,
        DISPID_SolutionStepAddComment = 30,
        DISPID_SolutionStepAddResult = 31,
        DISPID_SolutionStepAddStressSafetyTool = 32,
        DISPID_SolutionStepAddContactTool = 33,
        DISPID_SolutionStepAddImage = 34
    } kDispId_SolutionStep;

    [
      odl,
      uuid(0192F73D-2F84-4B94-8751-017C9F67851A),
      helpstring("IDSSolutionStepAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSSolutionStepAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x0000000a), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x0000000b), propget, helpstring("property EnvironmentId")]
        HRESULT EnvironmentId([out, retval] int* pVal);
        [id(0x0000000b), propput, helpstring("property EnvironmentId")]
        HRESULT EnvironmentId([in] int pVal);
        [id(0x0000000c), propget, helpstring("property Results")]
        HRESULT Results([out, retval] IDispatch** pVal);
        [id(0x00000013), propget, helpstring("property SolverType")]
        HRESULT SolverType([out, retval] DSSolverType* pVal);
        [id(0x00000013), propput, helpstring("property SolverType")]
        HRESULT SolverType([in] DSSolverType pVal);
        [id(0x0000000d), propget, helpstring("property UseAutoTimeStepping")]
        HRESULT UseAutoTimeStepping([out, retval] DSAutoTimeSteppingType* pVal);
        [id(0x0000000d), propput, helpstring("property UseAutoTimeStepping")]
        HRESULT UseAutoTimeStepping([in] DSAutoTimeSteppingType pVal);
        [id(0x0000000e), propget, helpstring("property InitialSteps")]
        HRESULT InitialSteps([out, retval] unsigned int* pVal);
        [id(0x0000000e), propput, helpstring("property InitialSteps")]
        HRESULT InitialSteps([in] unsigned int pVal);
        [id(0x0000000f), propget, helpstring("property MaximumSteps")]
        HRESULT MaximumSteps([out, retval] unsigned int* pVal);
        [id(0x0000000f), propput, helpstring("property MaximumSteps")]
        HRESULT MaximumSteps([in] unsigned int pVal);
        [id(0x00000010), propget, helpstring("property MinimumSteps")]
        HRESULT MinimumSteps([out, retval] unsigned int* pVal);
        [id(0x00000010), propput, helpstring("property MinimumSteps")]
        HRESULT MinimumSteps([in] unsigned int pVal);
        [id(0x00000011), propget, helpstring("property NumberOfSteps")]
        HRESULT NumberOfSteps([out, retval] unsigned int* pVal);
        [id(0x00000011), propput, helpstring("property NumberOfSteps")]
        HRESULT NumberOfSteps([in] unsigned int pVal);
        [id(0x00000012), propget, helpstring("property LineSearch")]
        HRESULT LineSearch([out, retval] DSLineSearchType* pVal);
        [id(0x00000012), propput, helpstring("property LineSearch")]
        HRESULT LineSearch([in] DSLineSearchType pVal);
        [id(0x0000001e), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x0000001f), helpstring("method AddResult")]
        HRESULT AddResult(
                        [in] IDispatch* piSelectMgr, 
                        [in] unsigned int resType, 
                        [out, retval] IDispatch** ppVal);
        [id(0x00000020), helpstring("method AddStressSafetyTool")]
        HRESULT AddStressSafetyTool(
                        [in] unsigned int toolType, 
                        [out, retval] IDispatch** pDisp);
        [id(0x00000021), helpstring("method AddContactTool")]
        HRESULT AddContactTool(
                        [in] IDispatch* piSelectMgr, 
                        [out, retval] IDispatch** ppVal);
        [id(0x00000014), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000022), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
    };

    typedef enum {
        DISPID_SolutionStepsGroupComments = 10,
        DISPID_SolutionStepsGroupNumSolutionSteps = 11,
        DISPID_SolutionStepsGroupEnvironmentId = 12,
        DISPID_SolutionStepsGroupSolutionStepId = 13,
        DISPID_SolutionStepsGroupResultCharts = 14,
        DISPID_SolutionStepsGroupUseWeakSprings = 15,
        DISPID_SolutionStepsGroupUseLargeDeformation = 16,
        DISPID_SolutionStepsGroupAnalysisType = 17,
        DISPID_SolutionStepsGroupNonLinear = 18,
        DISPID_SolutionStepsGroupWorkingDir = 19,
        DISPID_SolutionStepsGroupSolverMessages = 20,
        DISPID_SolutionStepsGroupImages = 21,
        DISPID_SolutionStepsGroupAddComment = 30,
        DISPID_SolutionStepsGroupAddSolutionStep = 31,
        DISPID_SolutionStepsGroupDeleteSolutionStep = 32,
        DISPID_SolutionStepsGroupAddResultChart = 33,
        DISPID_SolutionStepsGroupAddImage = 34
    } kDispId_SolutionStepsGroup;

    [
      odl,
      uuid(268B4E05-63E9-4E3B-B051-001E388E33CD),
      helpstring("IDSSolutionStepsGroupAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSSolutionStepsGroupAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x0000000a), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x0000000b), propget, helpstring("property NumSolutionSteps")]
        HRESULT NumSolutionSteps([out, retval] int* iNum);
        [id(0x0000000c), propget, helpstring("property EnvironmentId")]
        HRESULT EnvironmentId(
                        [in] int index, 
                        [out, retval] int* pVal);
        [id(0x0000000c), propput, helpstring("property EnvironmentId")]
        HRESULT EnvironmentId(
                        [in] int index, 
                        [in] int pVal);
        [id(0x0000000d), propget, helpstring("property SolutionStepId")]
        HRESULT SolutionStepId(
                        [in] int index, 
                        [out, retval] int* pVal);
        [id(0x0000000d), propput, helpstring("property SolutionStepId")]
        HRESULT SolutionStepId(
                        [in] int index, 
                        [in] int pVal);
        [id(0x0000000e), propget, helpstring("property ResultCharts")]
        HRESULT ResultCharts([out, retval] IDispatch** ppDisp);
        [id(0x0000000f), propget, helpstring("property UseWeakSprings")]
        HRESULT UseWeakSprings([out, retval] DSWeakSpringsType* pVal);
        [id(0x0000000f), propput, helpstring("property UseWeakSprings")]
        HRESULT UseWeakSprings([in] DSWeakSpringsType pVal);
        [id(0x00000010), propget, helpstring("property UseLargeDeformation")]
        HRESULT UseLargeDeformation([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000010), propput, helpstring("property UseLargeDeformation")]
        HRESULT UseLargeDeformation([in] VARIANT_BOOL pVal);
        [id(0x00000011), propget, helpstring("property AnalysisType")]
        HRESULT AnalysisType([out, retval] DSSolutionType* pVal);
        [id(0x00000012), propget, helpstring("property NonLinear")]
        HRESULT NonLinear([out, retval] unsigned int* pVal);
        [id(0x00000013), propget, helpstring("property WorkingDir")]
        HRESULT WorkingDir([out, retval] BSTR* pBSWorkDir);
        [id(0x00000014), propget, helpstring("property SolverMessages")]
        HRESULT SolverMessages([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000001e), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x0000001f), helpstring("method AddSolutionStep")]
        HRESULT AddSolutionStep([out, retval] IDispatch** pDisp);
        [id(0x00000020), helpstring("method DeleteSolutionStep")]
        HRESULT DeleteSolutionStep([in] int index);
        [id(0x00000021), helpstring("method AddResultChart")]
        HRESULT AddResultChart(
                        [in] IDispatch* piSelectMgr, 
                        [in] unsigned int resType, 
                        [out, retval] IDispatch** ppVal);
        [id(0x00000015), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000022), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
    };

    typedef enum {
        DISPID_SolutionSummaryFilename = 10,
        DISPID_SolutionSummaryText = 11,
        DISPID_SolutionSummaryType = 12,
        DISPID_SolutionSummarySize = 13,
        DISPID_SolutionSummaryXVal = 14,
        DISPID_SolutionSummaryYVal = 15,
        DISPID_SolutionSummaryY2Val = 16,
        DISPID_SolutionSummaryUnitsForSolveData = 17,
        DISPID_SolutionSummaryYValCol = 18,
        DISPID_SolutionSummaryNumYValCols = 19,
        DISPID_SolutionSummaryParticipationFactor = 20,
        DISPID_SolutionSummaryNumAvailableModes = 21,
        DISPID_SolutionSummarySolverUnitString = 22,
        DISPID_SolutionSummaryRefresh = 31,
        DISPID_SolutionSummaryCollectDataByType = 32
    } kDispId_SolutionSummary;

    [
      odl,
      uuid(1A039906-C836-40EE-B599-7CB24E076AC7),
      helpstring("IDSSolutionSummaryAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSSolutionSummaryAuto : IDispatch {
        [id(0x0000000b), propget, helpstring("property Text")]
        HRESULT Text([out, retval] BSTR* pVal);
        [id(0x0000000c), propget, helpstring("property Type")]
        HRESULT type([out, retval] DSSolutionOutputType* pVal);
        [id(0x0000000d), propget, helpstring("property Size")]
        HRESULT Size([out, retval] int* pVal);
        [id(0x0000000e), propget, helpstring("property XYal")]
        HRESULT XVal(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x0000000f), propget, helpstring("property YVal")]
        HRESULT YVal(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000010), propget, helpstring("property Y2Val")]
        HRESULT Y2Val(
                        [in] int index, 
                        [out, retval] double* pVal);
        [id(0x00000011), propget, helpstring("property UnitsForSolveData")]
        HRESULT UnitsForSolveData([out, retval] int* pVal);
        [id(0x0000001f), helpstring("method Refresh, updates 'text' only")]
        HRESULT Refresh(unsigned int ansSetId);
        [id(0x00000020), helpstring("method CollectDataByType, collects info from text")]
        HRESULT CollectDataByType([in] DSSolutionOutputType outputType);
        [id(0x00000012), propget, helpstring("property YValCol")]
        HRESULT YValCol(
                        [in] int index, 
                        [out, retval] IDispatch** pDisp);
        [id(0x00000013), propget, helpstring("property NumYValCols")]
        HRESULT NumYValCols([out, retval] unsigned int* Count);
        [id(0x00000014), propget, helpstring("property ParticipationFactor")]
        HRESULT ParticipationFactor(
                        [in] int modeNo, 
                        [in] int Component, 
                        [out, retval] double* pVal);
        [id(0x00000015), propget, helpstring("property NumAvailableModes")]
        HRESULT NumAvailableModes([out, retval] int* iNumAvailableModes);
        [id(0x00000016), propget, helpstring("property SolverUnitString")]
        HRESULT SolverUnitString(
                        [in] int iSolverUnitSys, 
                        [in] int unit, 
                        [out, retval] BSTR* bsUnitString);
    };

    typedef enum {
        DISPID_StressSafetyToolComments = 10,
        DISPID_StressSafetyToolFigures = 11,
        DISPID_StressSafetyToolResults = 12,
        DISPID_StressSafetyToolSafetyTheory = 13,
        DISPID_StressSafetyToolLimitFactor = 14,
        DISPID_StressSafetyToolStressLimit = 15,
        DISPID_StressSafetyToolTensileLimit = 16,
        DISPID_StressSafetyToolCompressiveLimit = 17,
        DISPID_StressSafetyToolStressLimitType = 18,
        DISPID_StressSafetyToolTensileLimitType = 19,
        DISPID_StressSafetyToolCompressiveLimitType = 20,
        DISPID_StressSafetyToolImages = 21,
        DISPID_StressSafetyToolAddComment = 30,
        DISPID_StressSafetyToolAddFigure = 31,
        DISPID_StressSafetyToolAddResult = 32,
        DISPID_StressSafetyToolAddImage = 33,
        DISPID_StessSafetyToolUnitTypeByDispid = 34,
        DISPID_StessSafetyToolUnitStringByDispid = 35,
        DISPID_StressSafetyToolParamNameByDispid = 36
    } kDispId_StressSafetyTool;

    [
      odl,
      uuid(936F5733-122B-43C8-AF18-3442C6CD07FA),
      helpstring("IDSStressSafetyToolAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSStressSafetyToolAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x0000000a), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x0000000c), propget, helpstring("property Results")]
        HRESULT Results([out, retval] IDispatch** ppDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
        [id(0x0000000d), propget, helpstring("property SafetyTheory")]
        HRESULT SafetyTheory([out, retval] int* pVal);
        [id(0x0000000d), propput, helpstring("property SafetyTheory")]
        HRESULT SafetyTheory([in] int pVal);
        [id(0x0000000e), propget, helpstring("property LimitFactor")]
        HRESULT LimitFactor([out, retval] double* pVal);
        [id(0x0000000e), propput, helpstring("property LimitFactor")]
        HRESULT LimitFactor([in] double pVal);
        [id(0x0000000f), propget, helpstring("property StressLimit")]
        HRESULT StressLimit([out, retval] double* pVal);
        [id(0x0000000f), propput, helpstring("property StressLimit")]
        HRESULT StressLimit([in] double pVal);
        [id(0x00000010), propget, helpstring("property TensileLimit")]
        HRESULT TensileLimit([out, retval] double* pVal);
        [id(0x00000010), propput, helpstring("property TensileLimit")]
        HRESULT TensileLimit([in] double pVal);
        [id(0x00000011), propget, helpstring("property CompressiveLimit")]
        HRESULT CompressiveLimit([out, retval] double* pVal);
        [id(0x00000011), propput, helpstring("property CompressiveLimit")]
        HRESULT CompressiveLimit([in] double pVal);
        [id(0x00000012), propget, helpstring("property StressLimitType")]
        HRESULT StressLimitType([out, retval] int* pVal);
        [id(0x00000012), propput, helpstring("property StressLimitType")]
        HRESULT StressLimitType([in] int pVal);
        [id(0x00000013), propget, helpstring("property TensileLimitType")]
        HRESULT TensileLimitType([out, retval] int* pVal);
        [id(0x00000013), propput, helpstring("property TensileLimitType")]
        HRESULT TensileLimitType([in] int pVal);
        [id(0x00000014), propget, helpstring("property CompressiveLimitType")]
        HRESULT CompressiveLimitType([out, retval] int* pVal);
        [id(0x00000014), propput, helpstring("property CompressiveLimitType")]
        HRESULT CompressiveLimitType([in] int pVal);
        [id(0x0000001e), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x0000001f), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x00000020), helpstring("method AddResult")]
        HRESULT AddResult(
                        [in] IDispatch* piSelectMgr, 
                        [in] unsigned int resType, 
                        [out, retval] IDispatch** ppVal);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x0000000b), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x00000015), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000021), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00000022), propget, helpstring("property UnitTypeByDispid")]
        HRESULT UnitTypeByDispid(
                        [in] int dispid, 
                        [out, retval] int* unitType);
        [id(0x00000023), propget, helpstring("property UnitStringByDispid")]
        HRESULT UnitStringByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* unitString);
        [id(0x00000024), propget, helpstring("property ParamNameByDispid")]
        HRESULT ParamNameByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* paramName);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
    };

    typedef enum {
        DISPID_SupportGeometryNum = 10,
        DISPID_SupportGeometrySelection = 11,
        DISPID_SupportNodeCount = 12,
        DISPID_SupportNode = 13,
        DISPID_SupportNodeCountForPart = 14,
        DISPID_SupportNodeForPart = 15,
        DISPID_SupportPrototypes = 16,
        DISPID_SupportReactionComponent = 17,
        DISPID_SupportSupportType = 18,
        DISPID_SupportReactionMagnitude = 19,
        DISPID_SupportReactionComponentX = 20,
        DISPID_SupportReactionComponentY = 21,
        DISPID_SupportReactionComponentZ = 22,
        DISPID_SupportComments = 23,
        DISPID_SupportFigures = 24,
        DISPID_SupportSuppressed = 25,
        DISPID_SupportReaction = 26,
        DISPID_SupportAttachedNodes = 27,
        DISPID_SupportReactionAddComment = 28,
        DISPID_SupportReactionAddFigure = 29
    } kDispId_Support;

    [
      odl,
      uuid(824BCA1B-29C8-4662-A43B-38D8611971AD),
      helpstring("IDSSupportAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSSupportAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x0000000a), propget, helpstring("property GeometryNum")]
        HRESULT GeometryNum([out, retval] int* pVal);
        [id(0x0000000b), propput, helpstring("property GeometrySelection")]
        HRESULT GeometrySelection([in] IDispatch* rhs);
        [id(0x0000000c), propget, helpstring("property NodeCount (obsolete)")]
        HRESULT NodeCount([out, retval] int* pVal);
        [id(0x0000000d), propget, helpstring("property Node (obsolete)")]
        HRESULT Node(
                        int index, 
                        [out, retval] int* pVal);
        [id(0x0000000e), propget, helpstring("property NodeCountForPart")]
        HRESULT NodeCountForPart(
                        int partIndex, 
                        [out, retval] int* pVal);
        [id(0x0000000f), propget, helpstring("property NodeForPart")]
        HRESULT NodeForPart(
                        int partIndex, 
                        int index, 
                        [out, retval] int* pVal);
        [id(0x00000010), propget, helpstring("property Prototypes")]
        HRESULT Prototypes([out, retval] IDispatch** pVal);
        [id(0x00000011), propget, helpstring("property ReactionComponent")]
        HRESULT ReactionComponent(
                        int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00000012), propget, helpstring("property SupportType")]
        HRESULT SupportType([out, retval] unsigned int* pVal);
        [id(0x00000013), propget, helpstring("property ReactionMagnitude")]
        HRESULT ReactionMagnitude([out, retval] double* pVal);
        [id(0x00000014), propget, helpstring("property ReactionComponentX")]
        HRESULT ReactionComponentX([out, retval] BSTR* pVal);
        [id(0x00000015), propget, helpstring("property ReactionComponentY")]
        HRESULT ReactionComponentY([out, retval] BSTR* pVal);
        [id(0x00000016), propget, helpstring("property ReactionComponentZ")]
        HRESULT ReactionComponentZ([out, retval] BSTR* pVal);
        [id(0x0000001c), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x00000017), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x00000018), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x0000001d), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x00000019), propget, helpstring("property Suppressed")]
        HRESULT Suppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000019), propput, helpstring("property Suppressed")]
        HRESULT Suppressed([in] VARIANT_BOOL pVal);
        [id(0x0000001a), propget, helpstring("property Reaction")]
        HRESULT Reaction([out, retval] IDispatch** pDisp);
        [id(0x0000001b), propget, helpstring("property AttachedNodes")]
        HRESULT AttachedNodes([out, retval] IDispatch** pDisp);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
    };

    typedef enum {
        DISPID_TemplateOutputName = 9,
        DISPID_TemplateOutput = 10,
        DISPID_TemplateFileName = 11,
        DISPID_TemplateFileStatus = 12,
        DISPID_TemplateText = 13,
        DISPID_TemplateComment = 14,
        DISPID_TemplateLinkTo = 15,
        DISPID_TemplateSaveTo = 16,
        DISPID_TemplateSave = 17,
        DISPID_TemplateRefresh = 18,
        DISPID_TemplateAddComment = 19,
        DISPID_TemplateAddOutput = 20,
        DISPID_TemplateImages = 98,
        DISPID_TemplateAddImage = 99,
        DISPID_TemplateAddUserObject = 100,
        DISPID_TemplateClearUserObjects = 101
    } kDispId_Template;

    [
      odl,
      uuid(57FB118C-6128-42EF-A9C7-78E05CAB9ACA),
      helpstring("IDSTemplateAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSTemplateAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x0000000a), propget, helpstring("property Output")]
        HRESULT Output([out, retval] IDispatch** pDisp);
        [id(0x0000000b), propget, helpstring("property FileName")]
        HRESULT filename([out, retval] BSTR* pVal);
        [id(0x0000000c), propget, helpstring("property FileStatus")]
        HRESULT FileStatus([out, retval] int* pVal);
        [id(0x0000000d), propget, helpstring("property Text")]
        HRESULT Text([out, retval] BSTR* pVal);
        [id(0x0000000d), propput, helpstring("property Text")]
        HRESULT Text([in] BSTR pVal);
        [id(0x0000000f), helpstring("method LinkTo")]
        HRESULT LinkTo([in] BSTR filePath);
        [id(0x00000010), helpstring("method SaveTo")]
        HRESULT SaveTo([in] BSTR filePath);
        [id(0x00000011), helpstring("method Save")]
        HRESULT Save();
        [id(0x00000012), helpstring("method Refresh")]
        HRESULT Refresh();
        [id(0x00000013), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x00000014), helpstring("method AddOutput")]
        HRESULT AddOutput(
                        [in, optional, defaultvalue("")] BSTR filePath, 
                        [out, retval] IDispatch** pDisp);
        [id(0x00000015), propget]
        HRESULT OutputName([out, retval] BSTR* pbsFilename);
        [id(0x00000016), propput]
        HRESULT InstallDir([in] BSTR pbsDirPath);
        [id(0x00000016), propget]
        HRESULT InstallDir([out, retval] BSTR* pbsDirPath);
        [id(0x00000017), propget]
        HRESULT TemplateName([out, retval] BSTR* pbsFilename);
        [id(0x00000018), propget]
        HRESULT TemplateSkip([out, retval] int* pVal);
        [id(0x00000019), propget]
        HRESULT TemplateDir([out, retval] BSTR* pbsDirPath);
        [id(0x0000001a), propget]
        HRESULT Target([out, retval] BSTR* pbsTargetName);
        [id(0x0000001b), propget]
        HRESULT TargetComment([out, retval] BSTR* pbsMarker);
        [id(0x0000001c), propget]
        HRESULT Debug([out, retval] BSTR* pbsSetting);
        [id(0x0000001d), propget]
        HRESULT ExtractDelimLeft([out, retval] BSTR* pbsDelim);
        [id(0x0000001e), propget]
        HRESULT ExtractDelimRight([out, retval] BSTR* pbsDelim);
        [id(0x0000001f), propget]
        HRESULT ScriptDelimLeft([out, retval] BSTR* pbsDelim);
        [id(0x00000020), propget]
        HRESULT ScriptDelimRight([out, retval] BSTR* pbsDelim);
        [id(0x00000021), propget]
        HRESULT SelectedBranchId([out, retval] int* pVal);
        [id(0x00000022), propput]
        HRESULT UnitSystem([in] BSTR rhs);
        [id(0x00000023), propput]
        HRESULT SetFeedbackCode([in] int rhs);
        [id(0x00000024), propput]
        HRESULT SetFeedbackString([in] BSTR rhs);
        [id(0x00000025), propput]
        HRESULT BigItemCount([in] VARIANT rhs);
        [id(0x00000026)]
        HRESULT EndBigItem();
        [id(0x00000027), propget]
        HRESULT ExpectedSolutionType([out, retval] BSTR* pbsType);
        [id(0x00000028), propget, helpstring("Obsolete")]
        HRESULT ExpectedSolutionSubType([out, retval] BSTR* pbsType);
        [id(0x00000029), propget]
        HRESULT IsContactActive([out, retval] long* pbFlag);
        [id(0x0000002a), propget]
        HRESULT IsNonLinear([out, retval] long* pbFlag);
        [id(0x0000002b), propget]
        HRESULT IsThinWalled([out, retval] long* pbFlag);
        [id(0x0000002c), propput]
        HRESULT IntermediateFileName([in] BSTR pbsFilename);
        [id(0x0000002c), propget]
        HRESULT IntermediateFileName([out, retval] BSTR* pbsFilename);
        [id(0x0000002d), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x00000031), helpstring("method Finish")]
        HRESULT Finish();
        [id(0x00000032), helpstring("method Process")]
        HRESULT Process();
        [id(0x00000033), helpstring("method ConvertNumberByColumns")]
        HRESULT ConvertNumberByColumns(
                        [in] VARIANT vNum, 
                        [in] unsigned int numColumns, 
                        [out, retval] BSTR* pbsNum);
        [id(0x00000034), helpstring("method ConvertNumberByDigits")]
        HRESULT ConvertNumberByDigits(
                        [in] VARIANT vNum, 
                        [in] unsigned int numDigits, 
                        [out, retval] BSTR* pbsNum);
        [id(0x00000064), helpstring("method AddUserObject")]
        HRESULT AddUserObject([in] IDispatch* pUsreObj);
        [id(0x00000065), helpstring("method ClearUserObjects")]
        HRESULT ClearUserObjects();
        [id(0x00000035), propput]
        HRESULT Locale([in] BSTR rhs);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
        [id(0x00000062), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000063), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
    };

    typedef enum {
        DISPID_TemplateOutputFileName = 10,
        DISPID_TemplateOutputFileStatus = 11,
        DISPID_TemplateOutputText = 12,
        DISPID_TemplateOutputComment = 13,
        DISPID_TemplateOutputSaveTo = 14,
        DISPID_TemplateOutputSave = 15,
        DISPID_TemplateOutputRefresh = 16,
        DISPID_TemplateOutputAddComment = 17,
        DISPID_TemplateOutputDirValid = 18,
        DISPID_TemplateOutputStatusCode = 19,
        DISPID_TemplateOutputUserMessage = 20,
        DISPID_TemplateOutputImages = 21,
        DISPID_TemplateOutputAddImage = 22
    } kDispId_TemplateOutput;

    [
      odl,
      uuid(11C6BD73-AE28-4042-9A1F-727216B98D70),
      helpstring("IDSTemplateOutputAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSTemplateOutputAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x0000000a), propput, helpstring("property FileName")]
        HRESULT filename([in] BSTR pVal);
        [id(0x0000000a), propget, helpstring("property FileName")]
        HRESULT filename([out, retval] BSTR* pVal);
        [id(0x0000000b), propget, helpstring("property FileStatus")]
        HRESULT FileStatus([out, retval] int* pVal);
        [id(0x0000000c), propget, helpstring("property Text")]
        HRESULT Text([out, retval] BSTR* pVal);
        [id(0x00000012), propget, helpstring("property DirValid")]
        HRESULT DirValid([out, retval] int* pVal);
        [id(0x0000000e), helpstring("method SaveTo")]
        HRESULT SaveTo([in] BSTR filePath);
        [id(0x0000000f), helpstring("method Save")]
        HRESULT Save();
        [id(0x00000010), helpstring("method Refresh")]
        HRESULT Refresh();
        [id(0x00000011), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x0000000d), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x00000013), propget, helpstring("property StatusCode")]
        HRESULT StatusCode([out, retval] int* pVal);
        [id(0x00000014), propget, helpstring("property UserMessage")]
        HRESULT UserMessage([out, retval] BSTR* pVal);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
        [id(0x00000015), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000016), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
    };

    typedef enum {
        DISPID_TreeGroupingFolderMoveItemToNextHighestGroup = 10,
        DISPID_TreeGroupingFolderMoveSelectedItemsToFolder = 11,
        DISPID_TreeGroupingFolderChildCount = 12,
        DISPID_TreeGroupingFolderSuppressed = 13,
        DISPID_TreeGroupingFolderAddChildToGroup = 14
    } kDispId_TreeGroupingFolder;

    [
      odl,
      uuid(C2F3ABFC-1D77-49F1-B9B4-E301DD30732E),
      helpstring("IDSTreeGroupingFolderAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSTreeGroupingFolderAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x0000000a), helpstring("method Removes and item from this group and put in under the next highest group")]
        HRESULT MoveItemToNextHighestGroup([in] dsid idToMove);
        [id(0x0000000b), helpstring("moves items in the tree selection to this folder")]
        HRESULT MoveSelectedItemsToFolder();
        [id(0x6002000f), propget, helpstring("return whether or not the Folder is a Descendant of AnswerSet")]
        HRESULT IsDescendantOfAnswerSet([out, retval] VARIANT_BOOL* pbVal);
        [id(0x0000000d), propget, helpstring("property Suppressed")]
        HRESULT Suppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000000d), propput, helpstring("property Suppressed")]
        HRESULT Suppressed([in] VARIANT_BOOL pVal);
        [id(0x60020012), propget, helpstring("return whether or not the Folder is a Descendant of Environment")]
        HRESULT IsDescendantOfEnvironment([out, retval] VARIANT_BOOL* pbVal);
        [id(0x60020013), propget, helpstring("return whether or not the Folder is a Descendant of Component Group")]
        HRESULT IsDescendantOfComponentGroup([out, retval] VARIANT_BOOL* pbVal);
        [id(0x60020014), propget, helpstring("return whether or not the Folder is a Descendant of Contact Group")]
        HRESULT IsDescendantOfContactGroup([out, retval] VARIANT_BOOL* pbVal);
        [id(0x0000000e), helpstring("method adds child to group")]
        HRESULT AddChildToGroup([in] dsid idToMove);
        [id(0x60020016), helpstring("property InitiateNotifyChangeForAddingChildren")]
        HRESULT InitiateNotifyChangeForAddingChildren();
        [id(0x60020017), propget, helpstring("return whether or not the Folder is a Descendant of External Layered Section (Imported Plies)")]
        HRESULT IsDescendantOfExternalLayeredSectionObject([out, retval] VARIANT_BOOL* pbVal);
        [id(0x60020018), propget, helpstring("property IgnoreNotify")]
        HRESULT IgnoreNotify([out, retval] VARIANT_BOOL* pVal);
        [id(0x60020018), propput, helpstring("property IgnoreNotify")]
        HRESULT IgnoreNotify([in] VARIANT_BOOL pVal);
        [id(0x6002001a), helpstring("property ShowHideGeometry")]
        HRESULT ShowHideGeometry([out, retval] VARIANT_BOOL* vbHide);
        [id(0x6002001b), helpstring("property ShowUnHideGeometry")]
        HRESULT ShowUnHideGeometry([out, retval] VARIANT_BOOL* vbHide);
        [id(0x6002001c), helpstring("property HideBodiesInGroup")]
        HRESULT HideBodiesInGroup();
        [id(0x6002001d), helpstring("property UnHideBodiesInGroup")]
        HRESULT UnHideBodiesInGroup();
        [id(0x6002001e), helpstring("property ShowHideBodiesOutsideGroup")]
        HRESULT ShowHideBodiesOutsideGroup([out, retval] VARIANT_BOOL* vbHide);
        [id(0x6002001f), propget, helpstring("property ContextProtosInGroup")]
        HRESULT ContextProtosInGroup([out, retval] IDispatch** pDisp);
    };

    [
      odl,
      uuid(84E04043-925F-4DE9-AD12-DBA0EDF2B023),
      helpstring("IDSTreePlaceHolder Interface"),
      dual,
      oleautomation
    ]
    interface IDSTreePlaceHolder : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
    };

    typedef enum {
        DISPID_TreeRootProjects = 10,
        DISPID_TreeRootBranches = 11,
        DISPID_TreeRootGetObject = 12,
        DISPID_TreeRootGetFirstBranch = 13,
        DISPID_TreeRootCopyObject = 14,
        DISPID_TreeRootDeleteObject = 15,
        DISPID_TreeRootNewAssemblyBranch = 16,
        DISPID_TreeRootNewEmptyBranch = 17,
        DISPID_TreeRootName = 18,
        DISPID_TreeRootActiveObject = 19,
        DISPID_TreeRootActiveObjectID = 20,
        DISPID_TreeRootMoveObject = 21,
        DISPID_TreeRootCanParent = 22,
        DISPID_TreeRootActiveBranch = 23,
        DISPID_TreeRootGetPMBranches = 24,
        DISPID_TreeRootActiveObjects = 25,
        DISPID_TreeRootActiveObjectIDs = 26,
        DISPID_TreeRootActiveBranches = 27,
        DISPID_TreeRootSelectedObjects = 28,
        DISPID_TreeRootAddActiveObject = 29,
        DISPID_TreeRootFirstActiveObject = 30,
        DISPID_TreeRootNextActiveObject = 31,
        DISPID_TreeRootFirstActiveObjectID = 32,
        DISPID_TreeRootNextActiveObjectID = 33,
        DISPID_TreeRootAddActiveObjectID = 34,
        DISPID_TreeRootClearActiveObjects = 35,
        DISPID_TreeRootFirstActiveBranch = 36,
        DISPID_TreeRootAllObjects = 37,
        DISPID_TreeRootLastActiveObject = 38,
        DISPID_TreeRootLastActiveObjectID = 39,
        DISPID_TreeRootCanDelete = 40,
        DISPID_TreeRootCanDeleteItems = 50,
        DISPID_TreeRootDeleteItems = 51,
        DISPID_TreeRootCanCopyItems = 52,
        DISPID_TreeRootCopySelectedItems = 53,
        DISPID_TreeRootCanPasteItems = 54,
        DISPID_TreeRootPasteItems = 55,
        DISPID_TreeRootCanCutItems = 56,
        DISPID_TreeRootCutSelectedItems = 57,
        DISPID_TreeRootCanMoveItems = 58,
        DISPID_TreeRootMoveItems = 59,
        DISPID_TreeRootClipboardOption = 60,
        DISPID_TreeRootZeroIndexActiveObjectID = 61,
        DISPID_TreeRootCleanDSDB = 62,
        DISPID_TreeRootDeleteItem = 63,
        DISPID_TreeRootIsSourceOrTargetSolving = 64,
        DISPID_TreeRootIsClosestAnswerSetSolving = 65,
        DISPID_TreeRootActiveSolveProcessSettingsSourceId = 66,
        DISPID_TreeRootRelatedBranches = 67,
        DISPID_TreeRootIsObjectBusy = 68,
        DISPID_TreeRootIsDBBusy = 69,
        DISPID_TreeGeometryUpdating = 70,
        DISPID_TreeRootStateEngineObject = 71,
        DISPID_TreeRootCreateParameter = 72,
        DISPID_TreeRootCreateTableParameter = 73,
        DISPID_TreeRootCreateCADParameter = 74,
        DISPID_TreeRootGetObjectByName = 75,
        DISPID_TreeRootRemoveParameter = 76,
        DISPID_TreeRootRefreshParameters = 77,
        DISPID_TreeRootRefreshAllParameters = 78,
        DISPID_TreeRootRemoveTableParameter = 79,
        DISPID_TreeRootHasLicenseConflicts = 80,
        DISPID_TreeRootCollectParameters = 81,
        DISPID_TreeGeometryUpdatingId = 82,
        DISPID_TreeRootRefreshCADParameters = 83,
        DISPID_TreeRootFirstActiveModel = 84,
        DISPID_TreeRootCreateNewAnalysisBranch = 85,
        DISPID_TreeRootFilterParamters = 86,
        DISPID_TreeRootAttachUnitSystemInfo = 87,
        DISPID_TreeRootAttachUnitTypeInfo = 88,
        DISPID_TreeRootAttachUnitStringInfo = 89,
        DISPID_TreeRootAttachAngularVelocityInfo = 90,
        DISPID_TreeRootAttachAngleUnitsInfo = 91,
        DISPID_TreeRootUseInputParameterValues = 92,
        DISPID_TreeRootUpdateInputParameters = 93,
        DISPID_TreeRootUpdateOutputParameters = 94,
        DISPID_TreeRootCreateNewChart = 95,
        DISPID_TreeRootSelectingObjects = 96,
        DISPID_TreeRootSetDefaultSolveHandler = 97,
        DISPID_TreeRootDefaultSolveProcessSiteType = 98,
        DISPID_TreeRootMessageDatabase = 99,
        DISPID_TreeRootGeometryUpdateWithMesh = 100,
        DISPID_TreeRootParameterSetItf = 101,
        DISPID_TreeRootUpdatingGeometryConfiguration = 102,
        DISPID_TreeRootParametersInDifferentUnitSystem = 103,
        DISPID_TreeRootParametersInDifferentAngularVelocity = 104,
        DISPID_TreeRootParametersInDifferentAngleUnits = 105,
        DISPID_TreeRootAttachCaptionInfo = 106,
        DISPID_TreeRootNextAvailableId = 107,
        DISPID_TreeRootRemoveCADParameters = 108,
        DISPID_TreeRootDuplicateWithoutResults = 109,
        DISPID_TreeRootCanDeactivateChildren = 110,
        DISPID_TreeRootDoDeactivateChildren = 111,
        DISPID_TreeRootCanReactivateChildren = 112,
        DISPID_TreeRootDoReactivateChildren = 113,
        DISPID_TreeRootIsFilteringEnabled = 114,
        DISPID_TreeRootCanCopySelectedItemsToClipboard = 115,
        DISPID_TreeRootCopySelectedItemsToClipboard = 116,
        DISPID_TreeRootCanPasteItemsFromClipboard = 117,
        DISPID_TreeRootPasteItemsFromClipboard = 118,
        DISPID_TreeRootFindObjectByString = 119,
        DISPID_TreeRootApplyFilterBasedOnEnvironments = 120,
        DISPID_TreeRootValidLicenseForSpatiallyVarryingLoads = 121,
        DISPID_TreeRootGetObjectTreeSection = 122,
        DISPID_TreeRootRelativeByClsId = 124,
        DISPID_TreeRootIsBetaKeyOn = 125,
        DISPID_TreeRootCheckOutACLE = 126,
        DISPID_TreeRootCheckInACLE = 127,
        DISPID_TreeRootCheckACLEAvailability = 128,
        DISPID_TreeRootPushMessageForTime = 129,
        DISPID_TreeRootAddMessage = 130,
        DISPID_TreeRootFilteringIsPropertySupported = 131,
        DISPID_TreeRootCreateNewSimplorerPin = 132,
        DISPID_TreeRootFilteringIsObjectSupported = 133,
        DISPID_TreeRootSetContactDefaultSettingPreferences = 134,
        DISPID_TreeRootCleanImportedData = 135,
        DISPID_TreeRootFilteringIsObjectClassSupported = 136,
        DISPID_TreeRootAddGeneralLoad = 137,
        DISPID_TreeRootDuplicateWithoutParameters = 138,
        DISPID_TreeRootDuplicateWithoutGeometry = 139,
        DISPID_TreeRootSetIntelligentName = 140,
        DISPID_TreeRootGetItemsUsingCoordniateSystem = 141,
        DISPID_TreeRootDeleteGroupandChildren = 142,
        DISPID_TreeRootSetResultDefaultSettingPreferences = 143,
        DISPID_TreeRootfireObjProcessingStateEvent = 144,
        DISPID_TreeRootSourceAssemblyInternalNames = 145,
        DISPID_TreeRootSourceAssemblyDisplayNames = 146,
        DISPID_TreeRootAssemblySourceNames = 147,
        DISPID_TreeRootAssemblySourceNumCopies = 148,
        DISPID_TreeRootAssemblySourceInternalName = 149,
        DISPID_KeepObjectDeleteChildren = 150,
        DISPID_TreeRootCanRename = 151,
        DISPID_TreeRootAnalyticsObjects = 152,
        DISPID_TreeRootDoEKMExtractionToFiles = 153,
        DISPID_TreeRootDoEKMExtractionToMemory = 154,
        DISPID_TreeRootDoEKMImageExtraction = 155,
        DISPID_TreeRootCleanCondensedGeometry = 156,
        DISPID_TreeRootDeleteObjectRequestedByWB2 = 157,
        DISPID_TreeRootIsMeshSelectionDialogOpen = 158
    } kDispId_TreeRoot;

    [
      odl,
      uuid(79F7D1CF-554A-4CAA-B8E7-0D232289D5AC),
      helpstring("IDSTreeRootAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSTreeRootAuto : IDispatch {
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x0000000a), propget, helpstring("property Projects")]
        HRESULT Projects([out, retval] VARIANT* pVal);
        [id(0x0000000b), propget, helpstring("property Branches")]
        HRESULT Branches([out, retval] VARIANT* pVal);
        [id(0x0000000c), helpstring("method GetObject")]
        HRESULT GetObject(
                        [in] unsigned int ulId, 
                        [out, retval] VARIANT* pVal);
        [id(0x0000000d), helpstring("method GetFirstBranch")]
        HRESULT GetFirstBranch(
                        [in] unsigned int ulId, 
                        [out, retval] VARIANT* pVal);
        [id(0x0000000e), helpstring("method CopyObject")]
        HRESULT CopyObject(
                        [in] unsigned int objId, 
                        [in] unsigned int newParentId, 
                        [out, retval] VARIANT* pVal);
        [id(0x0000000f), helpstring("method DeleteObject")]
        HRESULT DeleteObject([in] unsigned int ulId);
        [id(0x00000010), helpstring("method NewAssemblyBranch")]
        HRESULT NewAssemblyBranch(
                        [in] IDispatch* pAsmDisp, 
                        [out, retval] IDispatch** pNewBranch);
        [id(0x00000011), helpstring("method NewEmptyBranch")]
        HRESULT NewEmptyBranch(
                        [in] unsigned int ulParentId, 
                        [out, retval] IDispatch** pNewBranch);
        [id(0x00000012), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000012), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000015), helpstring("method MoveObject")]
        HRESULT MoveObject(
                        [in] unsigned int objectId, 
                        [in] unsigned int parentId);
        [id(0x00000016), helpstring("method CanParent")]
        HRESULT canParent(
                        [in] unsigned int childId, 
                        [in] unsigned int parentId, 
                        [out, retval] VARIANT_BOOL* pVal);
        [id(0x00000018), helpstring("method GetPMBranches")]
        HRESULT GetPMBranches(
                        [in] unsigned int ulId, 
                        [out, retval] VARIANT* pVal);
        [id(0x00000019), propget, helpstring("property ActiveObjects")]
        HRESULT ActiveObjects([out, retval] IDispatch** pVal);
        [id(0x0000001a), propget, helpstring("property ActiveObjectIDs")]
        HRESULT ActiveObjectIDs([out, retval] IDispatch** ppDisp);
        [id(0x0000001b), propget, helpstring("method ActiveBranches")]
        HRESULT ActiveBranches([out, retval] IDispatch** pVal);
        [id(0x0000001c), propget, helpstring("property SelectedObjects")]
        HRESULT SelectedObjects([out, retval] int* Count);
        [id(0x0000001d), helpstring("method AddActiveObject")]
        HRESULT AddActiveObject([in] VARIANT* __MIDL__IDSTreeRootAuto0000);
        [id(0x0000001e), propget, helpstring("property FirstActiveObject")]
        HRESULT FirstActiveObject([out, retval] VARIANT* newVal);
        [id(0x0000001f), propget, helpstring("property NextActiveObject")]
        HRESULT NextActiveObject(
                        [in] VARIANT* pVal, 
                        [out, retval] VARIANT* newVal);
        [id(0x00000020), propget, helpstring("property FirstActiveObjectID")]
        HRESULT FirstActiveObjectID([out, retval] int* newVal);
        [id(0x00000020), propput, helpstring("property FirstActiveObjectID")]
        HRESULT FirstActiveObjectID([in] int newVal);
        [id(0x00000021), propget, helpstring("property NextActiveObjectID")]
        HRESULT NextActiveObjectID(
                        [in] int pVal, 
                        [out, retval] int* newVal);
        [id(0x00000022), helpstring("method AddActiveObjectID")]
        HRESULT AddActiveObjectID([in] BSTR* newVal);
        [id(0x00000023), helpstring("method ClearActiveObjects")]
        HRESULT ClearActiveObjects();
        [id(0x00000024), propget, helpstring("property FirstActiveBranch")]
        HRESULT FirstActiveBranch([out, retval] VARIANT* pVal);
        [id(0x00000025), propget, helpstring("property AllObjects")]
        HRESULT AllObjects([out, retval] VARIANT* pVal);
        [id(0x00000026), propget, helpstring("property LastActiveObject")]
        HRESULT LastActiveObject([out, retval] VARIANT* pVal);
        [id(0x00000027), propget, helpstring("property LastActiveObjectID")]
        HRESULT LastActiveObjectID([out, retval] unsigned int* pVal);
        [id(0x00000027), propput, helpstring("property LastActiveObjectID")]
        HRESULT LastActiveObjectID([in] unsigned int pVal);
        [id(0x00000028), helpstring("method CanDelete")]
        HRESULT canDelete(
                        [in] unsigned int objId, 
                        [out, retval] VARIANT_BOOL* pVal);
        [id(0x00000032), helpstring("method CanDeleteItems")]
        HRESULT CanDeleteItems(
                        [in, optional] VARIANT pObjectList, 
                        [out, retval] VARIANT_BOOL* pVal);
        [id(0x00000033), helpstring("method DeleteItems")]
        HRESULT DeleteItems([in, optional] VARIANT pObjectList);
        [id(0x0000003f), helpstring("method DeleteItem")]
        HRESULT DeleteItem([in] int newVal);
        [id(0x00000034), helpstring("method CanCopyItems")]
        HRESULT CanCopyItems(
                        [in, optional] VARIANT pObjectList, 
                        [out, retval] VARIANT_BOOL* pVal);
        [id(0x00000035), helpstring("method CopySelectedItems")]
        HRESULT CopySelectedItems();
        [id(0x00000036), helpstring("method CanPasteItems")]
        HRESULT CanPasteItems(
                        [in] unsigned int targetID, 
                        [in, optional] VARIANT pObjectList, 
                        [out, retval] VARIANT_BOOL* pVal);
        [id(0x00000037), helpstring("method PasteItems")]
        HRESULT PasteItems(
                        [in] unsigned int targetID, 
                        [in, optional] VARIANT pObjectList);
        [id(0x00000038), helpstring("method CanCutItems")]
        HRESULT CanCutItems(
                        [in, optional] VARIANT pObjectList, 
                        [out, retval] VARIANT_BOOL* pVal);
        [id(0x00000039), helpstring("method CutSelectedItems")]
        HRESULT CutSelectedItems();
        [id(0x0000003a), helpstring("method CanMoveItems")]
        HRESULT CanMoveItems(
                        [in] unsigned int targetID, 
                        [in, optional] VARIANT pObjectList, 
                        [out, retval] VARIANT_BOOL* pVal);
        [id(0x0000003b), helpstring("method MoveItems")]
        HRESULT MoveItems(
                        [in] unsigned int targetID, 
                        [in, optional] VARIANT pObjectList);
        [id(0x0000003c), propget, helpstring("property ClipboardOption")]
        HRESULT ClipboardOption([out, retval] DSClipboardOption* pVal);
        [id(0x0000003d), propget, helpstring("property ZeroIndexActiveObjectID")]
        HRESULT ZeroIndexActiveObjectID([out, retval] unsigned int* pVal);
        [id(0x0000003e), helpstring("method CleanDSDB")]
        HRESULT CleanDSDB([in] unsigned int startId);
        [id(0x00000040), helpstring("method IsSourceOrTargetSolving")]
        HRESULT IsSourceOrTargetSolving(
                        [in] unsigned int targetID, 
                        [in] IDispatch* __MIDL__IDSTreeRootAuto0001, 
                        [out] VARIANT_BOOL* __MIDL__IDSTreeRootAuto0002);
        [id(0x00000041), helpstring("method IsClosestAnswerSetSolving")]
        HRESULT IsClosestAnswerSetSolving(
                        [in] unsigned int objId, 
                        [out] VARIANT_BOOL* __MIDL__IDSTreeRootAuto0003);
        [id(0x00000042), propget, helpstring("property ActiveSolveProcessSettingsSourceId")]
        HRESULT ActiveSolveProcessSettingsSourceId([out, retval] unsigned int* pdsId);
        [id(0x00000042), propput, helpstring("property ActiveSolveProcessSettingsSourceId")]
        HRESULT ActiveSolveProcessSettingsSourceId([in] unsigned int pdsId);
        [id(0x00000043), propget, helpstring("method RelatedBranches: gets branches that have relatives of the input DSId")]
        HRESULT RelatedBranches(
                        [in] unsigned int idRelative, 
                        [out, retval] IDispatch** pVal);
        [id(0x00000044), helpstring("method IsObjectBusy")]
        HRESULT IsObjectBusy(
                        [in] unsigned int objectId, 
                        [out, retval] VARIANT_BOOL* bBusy);
        [id(0x00000045), helpstring("method IsDBBusy")]
        HRESULT IsDBBusy([out, retval] VARIANT_BOOL* bBusy);
        [id(0x00000046), propput, helpstring("property GeometryUpdating")]
        HRESULT GeometryUpdating([in] VARIANT_BOOL rhs);
        [id(0x00000047), propget, helpstring("method StateEngineObject")]
        HRESULT StateEngineObject([out, retval] IDispatch** pStateEngineObject);
        [id(0x00000048), helpstring("method CreateParameter")]
        HRESULT CreateParameter(
                        [in] int classid, 
                        [in] int dispid, 
                        [in] int parentId, 
                        [in] VARIANT val, 
                        [out, retval] IDispatch** __MIDL__IDSTreeRootAuto0004);
        [id(0x00000049), helpstring("method CreateTableParameter")]
        HRESULT CreateTableParameter(
                        [in] unsigned int conductor1ID, 
                        [in] unsigned int conductor2ID, 
                        [in] unsigned int resultTableID, 
                        [in] double val, 
                        [out, retval] IDispatch** pNewParamDisp);
        [id(0x0000004a), helpstring("method CreateCADParameter")]
        HRESULT CreateCADParameter(
                        [in] int classid, 
                        [in] int dispid, 
                        [in] int parentId, 
                        [in] VARIANT val, 
                        [out, retval] IDispatch** __MIDL__IDSTreeRootAuto0005);
        [id(0x0000004b), helpstring("method GetObjectByName")]
        HRESULT GetObjectByName(
                        [in] BSTR __MIDL__IDSTreeRootAuto0006, 
                        [out, retval] IDispatch** __MIDL__IDSTreeRootAuto0007);
        [id(0x0000004c), helpstring("method RemoveParameter")]
        HRESULT RemoveParameter([in] IDispatch* __MIDL__IDSTreeRootAuto0008);
        [id(0x0000004d), helpstring("method RefreshParameters")]
        HRESULT RefreshParameters([in] IDispatch* __MIDL__IDSTreeRootAuto0009);
        [id(0x0000004e), helpstring("method RefreshAllParameters")]
        HRESULT RefreshAllParameters();
        [id(0x0000004f), helpstring("method RemoveTableParameter")]
        HRESULT RemoveTableParameter(
                        [in] unsigned int resultTableID, 
                        [in] unsigned int index1, 
                        [in] unsigned int index2);
        [id(0x00000050), helpstring("method HasLicenseConflicts")]
        HRESULT HasLicenseConflicts([out, retval] VARIANT_BOOL* vbLicConflict);
        [id(0x00000051), helpstring("returns an IParameterSet containing all parameters at or below the specified object")]
        HRESULT CollectParameters(
                        [in] unsigned int objectId, 
                        [out, retval] IDispatch** ppParameterSet);
        [id(0x00000052), propput, helpstring("id for the GeometryFolder that will undergo the update when GeometryUpdating method is called")]
        HRESULT GeometryUpdatingId([in] unsigned int rhs);
        [id(0x00000053), helpstring("method RefreshCADParameters")]
        HRESULT RefreshCADParameters(
                        [in] IDispatch* piParamSet, 
                        [in] int lParentId);
        [id(0x00000054), propget, helpstring("property FirstActiveModel")]
        HRESULT FirstActiveModel([out, retval] VARIANT* newVal);
        [id(0x00000055), helpstring("method CreateNewAnalysisBranch")]
        HRESULT CreateNewAnalysisBranch(
                        [in] unsigned int ulModelId, 
                        [in] unsigned int ulPhysicsType, 
                        [in] unsigned int ulAnalysisType, 
                        [out, retval] IDispatch** pNewBranch);
        [id(0x00000056), helpstring("method Filter Parameters")]
        HRESULT FilterParameters(
                        [in] IDispatch* pIDispParamMgr, 
                        [in] unsigned int ulModelId, 
                        [out, retval] IDispatch** ppFilteredParamSet);
        [id(0x00000057), helpstring("method AttachUnitSystemInfo")]
        HRESULT AttachUnitSystemInfo([in] IDispatch* pIDispParamItf);
        [id(0x00000058), helpstring("method AttachUnitSystemInfo")]
        HRESULT AttachUnitTypeInfo([in] IDispatch* pIDispParamItf);
        [id(0x00000059), helpstring("method AttachUnitSystemInfo")]
        HRESULT AttachUnitStringInfo([in] IDispatch* pIDispParamItf);
        [id(0x0000005a), helpstring("method AttachUnitSystemInfo")]
        HRESULT AttachAngularVelocityInfo([in] IDispatch* pIDispParamItf);
        [id(0x0000005b), helpstring("method AttachUnitSystemInfo")]
        HRESULT AttachAngleUnitsInfo([in] IDispatch* pIDispParamItf);
        [id(0x0000005c), helpstring("method UseInputParameterValues")]
        HRESULT UseInputParameterValues([in] IDispatch* pIDispParamSetItf);
        [id(0x0000005d), helpstring("method UpdateInputParameters")]
        HRESULT UpdateInputParameters([in] IDispatch* pIDispParamSetItf);
        [id(0x0000005e), helpstring("method UpdateOutputParameters")]
        HRESULT UpdateOutputParameters([in] IDispatch* pIDispParamSetItf);
        [id(0x0000005f), helpstring("method CreateNewChart")]
        HRESULT CreateNewChart(
                        [in] unsigned int ulModelId, 
                        [out, retval] IDispatch** pNewBranch);
        [id(0x00000060), propput, helpstring("property SelectingObjects")]
        HRESULT SelectingObjects([in] VARIANT_BOOL pvbSelectingObjects);
        [id(0x00000060), propget, helpstring("property SelectingObjects")]
        HRESULT SelectingObjects([out, retval] VARIANT_BOOL* pvbSelectingObjects);
        [id(0x00000061), helpstring("method SetDefaultSolveHandler")]
        HRESULT SetDefaultSolveHandler([in] IDispatch* pIDispModel);
        [id(0x00000062), propget, helpstring("property DefaultSolveProcessSiteType")]
        HRESULT DefaultSolveProcessSiteType([out, retval] DSSolveProcessSiteType* pType);
        [id(0x00000063), propget, helpstring("method MessageDatabase")]
        HRESULT MessageDatabase([out, retval] IDispatch** pMessageDatabase);
        [id(0x00000064), propput, helpstring("Flag to prevent reset call which invalidates the mesh")]
        HRESULT GeometryUpdateWithMesh([in] VARIANT_BOOL rhs);
        [id(0x00000065), propget, helpstring("property Name")]
        HRESULT ParameterSetItf([out, retval] IDispatch** pVal);
        [id(0x00000065), propput, helpstring("property Name")]
        HRESULT ParameterSetItf([in] IDispatch* pVal);
        [id(0x00000066), helpstring("method UpdatingGeometryConfiguration")]
        HRESULT UpdatingGeometryConfiguration(
                        [in] unsigned int ulPrototypeGroupId, 
                        [in] VARIANT_BOOL newVal);
        [id(0x00000067), propget, helpstring("property ParametersInDifferentUnitSystem")]
        HRESULT ParametersInDifferentUnitSystem([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000068), propget, helpstring("property ParametersInDifferentAngularVelocity")]
        HRESULT ParametersInDifferentAngularVelocity([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000069), propget, helpstring("property ParametersInDifferentAngleUnits")]
        HRESULT ParametersInDifferentAngleUnits([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000006a), helpstring("method AttachCaptionInfo")]
        HRESULT AttachCaptionInfo([in] IDispatch* pIDispParamItf);
        [id(0x0000006b), propget, helpstring("property NextAvailableId")]
        HRESULT NextAvailableId([out, retval] unsigned int* pVal);
        [id(0x0000006c), helpstring("method RemoveCADParameters")]
        HRESULT RemoveCADParameters([in] unsigned int ulModelId);
        [id(0x0000006d), propget, helpstring("property DuplicateWithoutResults")]
        HRESULT DuplicateWithoutResults([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000006d), propput, helpstring("property DuplicateWithoutResults")]
        HRESULT DuplicateWithoutResults([in] VARIANT_BOOL pVal);
        [id(0x0000006e), propget, helpstring("property CanDeactivateChildren")]
        HRESULT CanDeactivateChildren(
                        [in, optional] VARIANT pObjectList, 
                        [out, retval] VARIANT_BOOL* pVal);
        [id(0x0000006f), helpstring("property DoDeactivateChildren")]
        HRESULT DoDeactivateChildren([in, optional] VARIANT pObjectList);
        [id(0x00000070), propget, helpstring("property CanDeactivateChildren")]
        HRESULT CanReactivateChildren(
                        [in, optional] VARIANT pObjectList, 
                        [out, retval] VARIANT_BOOL* pVal);
        [id(0x00000071), helpstring("property DoDeactivateChildren")]
        HRESULT DoReactivateChildren([in, optional] VARIANT pObjectList);
        [id(0x00000072), helpstring("method IsFilteringEnabled")]
        HRESULT IsFilteringEnabled([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000073), helpstring("method CanCopySelectedItemsToClipboard")]
        HRESULT CanCopySelectedItemsToClipboard([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000074), helpstring("method CopySelectedItemsToClipboard")]
        HRESULT CopySelectedItemsToClipboard([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000075), helpstring("method CanPasteItemsFromClipboard")]
        HRESULT CanPasteItemsFromClipboard([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000076), helpstring("method PasteItemsFromClipboard")]
        HRESULT PasteItemsFromClipboard([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000077), helpstring("method FindObjectByString")]
        HRESULT FindObjectByString(
                        [in] BSTR findStr, 
                        [in] VARIANT_BOOL searchUp, 
                        [in] VARIANT_BOOL vbCaseSensitive, 
                        [out, retval] unsigned int* retID);
        [id(0x00000078), helpstring("method ApplyFilterBasedOnEnvironments")]
        HRESULT ApplyFilterBasedOnEnvironments(
                        [in] VARIANT_BOOL vbAddEnvironment, 
                        [in] VARIANT_BOOL vbNotifyChange);
        [id(0x00000079), helpstring("method HasvalidlicenseForSpatiallyvarryingLoads")]
        HRESULT HasValidLicenseForSpatiallyVarryingloads(
                        [in] int iAnalysisType, 
                        [out, retval] VARIANT_BOOL* vbValidLicense);
        [id(0x0000007a), helpstring("method GetObjectTreeSection")]
        HRESULT GetObjectTreeSection(
                        [in] unsigned int idInputObject, 
                        [out] unsigned int* idTreeSectionId, 
                        [out] DSTreeSectionType* eTreeSectionType);
        [id(0x0000007c), propget, helpstring("property RelativeByClsId")]
        HRESULT RelativeByClsId(
                        [in] unsigned int iObjId, 
                        [in] unsigned int iClsId, 
                        [out, retval] IDispatch** ppDisp);
        [id(0x0000007d), helpstring("method IsBetaKeyOn")]
        HRESULT IsBetaKeyOn([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000007e), helpstring("method checkOutACLEIfAvailable")]
        HRESULT CheckOutACLEIfAvailable();
        [id(0x0000007f), helpstring("method checkInACLE")]
        HRESULT CheckInACLE();
        [id(0x00000080), helpstring("method checkACLEAvailability")]
        HRESULT CheckACLEAvailability();
        [id(0x00000081), helpstring("method pushMessageForTime")]
        HRESULT pushMessageForTime();
        [id(0x00000082), helpstring("method AddMessage")]
        HRESULT AddMessage(
                        [in] BSTR bsMessage, 
                        [in] int iFormatType, 
                        [in] dsid idObj);
        [id(0x00000083), helpstring("method FilteringIsPropertySupported")]
        HRESULT FilteringIsPropertySupported(
                        [in] BSTR bsPropName, 
                        [in] BSTR bsClassName, 
                        [out, retval] VARIANT_BOOL* pVal);
        [id(0x00000084), helpstring("method CreateNewSimplorerPin")]
        HRESULT CreateNewSimplorerPin(
                        [in] unsigned int ulModelId, 
                        [in] IDispatch* piSelectMgr, 
                        [out, retval] IDispatch** pNewBranch);
        [id(0x00000085), helpstring("method FilteringIsObjectSupported")]
        HRESULT FilteringIsObjectSupported(
                        [in] dsid idObj, 
                        [out, retval] VARIANT_BOOL* pVal);
        [id(0x00000086), helpstring("method SetContactDefaultSettingPreferences")]
        HRESULT SetContactDefaultSettingPreferences();
        [id(0x00000087), helpstring("method CleanImportedData")]
        HRESULT CleanImportedData([in] unsigned int startId);
        [id(0x00000088), helpstring("method FilteringIsObjectClassSupported")]
        HRESULT FilteringIsObjectClassSupported(
                        [in] BSTR bsClassName, 
                        [out, retval] VARIANT_BOOL* pVal);
        [id(0x00000089), helpstring("method AddGeneralLoad")]
        HRESULT AddGeneralLoad(
                        [in] IDispatch* piSelectMgr, 
                        [in] int parentId, 
                        [out, retval] IDispatch** ppVal);
        [id(0x0000008a), propget, helpstring("property DuplicateWithoutParameters")]
        HRESULT DuplicateWithoutParameters([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000008a), propput, helpstring("property DuplicateWithoutParameters")]
        HRESULT DuplicateWithoutParameters([in] VARIANT_BOOL pVal);
        [id(0x0000008b), propget, helpstring("property DuplicateWithoutGeometry")]
        HRESULT DuplicateWithoutGeometry([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000008b), propput, helpstring("property DuplicateWithoutGeometry")]
        HRESULT DuplicateWithoutGeometry([in] VARIANT_BOOL pVal);
        [id(0x0000008c), helpstring("method SetIntelligentName")]
        HRESULT SetIntelligentName(
                        [in] unsigned int objectId, 
                        [in] unsigned int relativeId, 
                        [in] BSTR bsName, 
                        [in] VARIANT_BOOL vbEnsureUnique);
        [id(0x0000008d), helpstring("method get_ItemsUsingCoordinateSystem")]
        HRESULT get_ItemsUsingCoordinateSystem(
                        [in] unsigned int coordSysID, 
                        [in] IDSListWrapper* CSList);
        [id(0x0000008e), helpstring("method DeleteGroupandChildren")]
        HRESULT DeleteGroupandChildren();
        [id(0x0000008f), helpstring("method SetResultDefaultSettingPreferences")]
        HRESULT SetResultDefaultSettingPreferences();
        [id(0x00000090), helpstring("method fireObjProcessingStateEvent")]
        HRESULT fireObjProcessingStateEvent(
                        unsigned int eventType, 
                        VARIANT_BOOL bStarted);
        [id(0x00000091), helpstring("method GetImportedSourceAssemblyInternalNames")]
        HRESULT GetImportedSourceAssemblyInternalNames([out, retval] IAnsBSTRColl** InternalNameColl);
        [id(0x00000092), helpstring("method GetImportedSourceAssemblyDisplayNames")]
        HRESULT GetImportedSourceAssemblyDisplayNames(
                        [in] IAnsBSTRColl* InternalNameColl, 
                        [out, retval] IAnsBSTRColl** DisplayNameColl);
        [id(0x00000093), helpstring("method GetImportedAssemblySourceNames")]
        HRESULT GetImportedAssemblySourceNames(
                        [in] ModelAssemblyInputSourceType SourceType, 
                        [out, retval] IAnsBSTRColl** InternalNameColl);
        [id(0x00000094), helpstring("method GetNumCopiesForImportedAssemblySource")]
        HRESULT GetNumCopiesForImportedAssemblySource(
                        [in] BSTR bsSource, 
                        [out, retval] int* pNumCopies);
        [id(0x00000095), helpstring("method GetImportedSourceAssemblyInternalName")]
        HRESULT GetImportedSourceAssemblyInternalName(
                        [in] BSTR bsSource, 
                        [in] int numCopies, 
                        [out, retval] BSTR* pbsInternalName);
        [id(0x00000096), helpstring("method KeepObjectDeleteChildren")]
        HRESULT KeepObjectDeleteChildren([in] unsigned int newVal);
        [id(0x00000097), helpstring("method CanRename")]
        HRESULT CanRename(
                        [in] unsigned int objId, 
                        [out, retval] VARIANT_BOOL* pVal);
        [id(0x6002008c), propget, helpstring("property CanGroup")]
        HRESULT CanGroup([out, retval] VARIANT_BOOL* pVal);
        [id(0x6002008c), propput, helpstring("property CanGroup")]
        HRESULT CanGroup([in] VARIANT_BOOL pVal);
        [id(0x00000098), propget, helpstring("property AnalyticsObjects")]
        HRESULT AnalyticsObjects([out, retval] VARIANT* pVal);
        [id(0x00000099), helpstring("method DoEKMExtractionToFiles")]
        HRESULT DoEKMExtractionToFiles(
                        [in] int extractType, 
                        [in] BSTR bsFilePath);
        [id(0x0000009a), helpstring("method DoEKMExtractionToMemory")]
        HRESULT DoEKMExtractionToMemory([out, retval] IAnsBSTRColl** pEKMBlockColl);
        [id(0x0000009b), helpstring("method DoEKMImageExtraction")]
        HRESULT DoEKMImageExtraction([in] IStream* pStream);
        [id(0x0000009c), helpstring("method CleanCondensedGeometry")]
        HRESULT CleanCondensedGeometry([in] unsigned int startId);
        [id(0x0000009d), helpstring("method DeleteObjectRequestedByWB2")]
        HRESULT DeleteObjectRequestedByWB2([in] unsigned int ulId);
        [id(0x0000009e), propget, helpstring("property IsMeshSelectionDialogOpen")]
        HRESULT IsMeshSelectionDialogOpen([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000009e), propput, helpstring("property IsMeshSelectionDialogOpen")]
        HRESULT IsMeshSelectionDialogOpen([in] VARIANT_BOOL pVal);
    };

    typedef enum {
        DS_COPY_MODE = 1,
        DS_CUT_MODE = 2
    } DSClipboardOption;

    typedef enum {
        kDSTreeSectionUnknown = 0,
        kDSTreeSectionBranch = 1,
        kDSTreeSectionSolComb = 2,
        kDSTreeSectionTrunk = 3,
        kDSTreeSectionRoot = 4,
        kDSTreeSectionChart = 5
    } DSTreeSectionType;

    typedef enum {
        AcmoPmdbPair = 1,
        MechDb = 2,
        FromMechanical = 4
    } ModelAssemblyInputSourceType;

    [
      odl,
      uuid(1C012515-8A19-46EF-9B20-8199DA27CF44),
      helpstring("IDSVectorLoadAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSVectorLoadAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property ID")]
        HRESULT ID([out, retval] VARIANT* pVal);
        [id(0x00000002), propget, helpstring("property Name")]
        HRESULT Name([out, retval] VARIANT* pVal);
        [id(0x00000002), propput, helpstring("property Name")]
        HRESULT Name([in] VARIANT pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
    };

    typedef enum {
        DISPID_VCellRefresh = 11,
        DISPID_VCellClass = 20,
        DISPID_VCellSuppressed = 21,
        DISPID_VCellGeometryNum = 22,
        DISPID_VCellGeometrySelection = 23,
        DISPID_VCellAddComment = 30,
        DISPID_VCellComment = 31,
        DISPID_VCellAddFigure = 32,
        DISPID_VCellFigures = 33,
        DISPID_VCellPrototypes = 34,
        DISPID_VCellImages = 35,
        DISPID_VCellAddImage = 36,
        DISPID_VCellProject = 37,
        DISPID_VCellIsAutomatic = 100,
        DISPID_VCellPartId = 101,
        DISPID_VCellRefId = 102,
        DISPID_VCellAutomatic = 103,
        DISPID_VCellDisabled = 104,
        DISPID_VCellCompound = 105,
        DISPID_VCellHasDependents = 106,
        DISPID_VCellDependents = 107,
        DISPID_VCellADependent = 108
    } kDispId_VirtualCell;

    [
      odl,
      uuid(B9F706F0-A589-496D-A32A-10B9E44E3258),
      helpstring("IDSVirtualCellAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSVirtualCellAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000006), propget, helpstring("property")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x00000014), propget, helpstring("property")]
        HRESULT VTClass([out, retval] int* VTClass);
        [id(0x00000015), propget, helpstring("property")]
        HRESULT Suppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000015), propput, helpstring("property")]
        HRESULT Suppressed([in] VARIANT_BOOL pVal);
        [id(0x00000016), propget, helpstring("property")]
        HRESULT GeometryNum([out, retval] int* pVal);
        [id(0x00000017), propput, helpstring("property")]
        HRESULT GeometrySelection([in] IDispatch* rhs);
        [id(0x0000001e), helpstring("method")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x0000001f), propget, helpstring("property")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x00000020), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x00000021), propget, helpstring("property")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x00000065), propget, helpstring("property")]
        HRESULT partId([out, retval] unsigned int* ulPartId);
        [id(0x00000022), propget, helpstring("property")]
        HRESULT Prototypes([out, retval] IDispatch** pVal);
        [id(0x00000066), propget, helpstring("property")]
        HRESULT RefId([out, retval] unsigned int* pVal);
        [id(0x00000067), propget, helpstring("property")]
        HRESULT IsAutomatic([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000008), propget, helpstring("property")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
        [id(0x00000068), propget, helpstring("property")]
        HRESULT IsDisabled([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000069), propget, helpstring("property")]
        HRESULT IsCompound([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000006a), propget, helpstring("property")]
        HRESULT HasDependents([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000006b), propget, helpstring("property")]
        HRESULT Dependents([out, retval] IDispatch** pDisp);
        [id(0x0000006c), propget, helpstring("property")]
        HRESULT IsADependent([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000023), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000024), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00000025), propget, helpstring("Project to Underlying Geometry")]
        HRESULT ProjectToGeometry([out, retval] int* pVal);
        [id(0x00000025), propput, helpstring("Project to Underlying Geometry")]
        HRESULT ProjectToGeometry([in] int pVal);
        [id(0x6002001f), helpstring("method DeleteVCell")]
        HRESULT DeleteVCell();
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
    };

    typedef enum {
        DISPID_VSplitEdgeRefresh = 11,
        DISPID_VSplitEdgeRatio = 20,
        DISPID_VSplitEdgeSuppressed = 21,
        DISPID_VSplitEdgeGeometryNum = 22,
        DISPID_VSplitEdgeGeometrySelection = 23,
        DISPID_VSplitEdgeAddComment = 30,
        DISPID_VSplitEdgeComment = 31,
        DISPID_VSplitEdgeAddFigure = 32,
        DISPID_VSplitEdgeFigures = 33,
        DISPID_VSplitEdgeDisabled = 34,
        DISPID_VSplitEdgeHasDependents = 35,
        DISPID_VSplitEdgeImages = 36,
        DISPID_VSplitEdgeAddImage = 37
    } kDispId_VirtualSplitEdge;

    [
      odl,
      uuid(3FBF9204-68DA-48AB-9617-27D7AC5E30B5),
      helpstring("IDSVirtualSplitEdgeAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSVirtualSplitEdgeAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000006), propget, helpstring("property")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x00000014), propget, helpstring("property")]
        HRESULT SplitEdgeRatio([out, retval] double* pVal);
        [id(0x00000014), propput, helpstring("property")]
        HRESULT SplitEdgeRatio([in] double pVal);
        [id(0x00000015), propget, helpstring("property")]
        HRESULT Suppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000015), propput, helpstring("property")]
        HRESULT Suppressed([in] VARIANT_BOOL pVal);
        [id(0x00000016), propget, helpstring("property")]
        HRESULT GeometryNum([out, retval] int* pVal);
        [id(0x00000017), propput, helpstring("property")]
        HRESULT GeometrySelection([in] IDispatch* rhs);
        [id(0x0000001e), helpstring("method")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x0000001f), propget, helpstring("property")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x00000020), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x00000021), propget, helpstring("property")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x00000022), propget, helpstring("property")]
        HRESULT IsDisabled([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000023), propget, helpstring("property")]
        HRESULT HasDependents([out, retval] VARIANT_BOOL* pVal);
        [id(0x60020014), helpstring("method isSuppressed")]
        HRESULT isSuppressed([out, retval] char* pbIsSuppressed);
        [id(0x60020015), helpstring("method getDrawLocationAndRad")]
        HRESULT getDrawLocationAndRad(
                        double* xloc, 
                        double* yloc, 
                        double* zloc, 
                        double* drad);
        [id(0x60020016), helpstring("method DeleteVirtualSplitEdge")]
        HRESULT DeleteVirtualSplitEdge();
        [id(0x60020017), helpstring("method getSplitEdge")]
        HRESULT getSplitEdge(
                        unsigned int* puiPartid, 
                        unsigned int* puiRefId, 
                        unsigned int* puiTopoId);
        [id(0x60020018), helpstring("method getSplitEdgeVertex")]
        HRESULT getSplitEdgeVertex(unsigned int* puiRefId);
        [id(0x00000024), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000025), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
    };

    typedef enum {
        DISPID_VSplitFaceRefresh = 11,
        DISPID_VSplitFaceVertices = 20,
        DISPID_VSplitFaceSuppressed = 21,
        DISPID_VSplitFaceGeometryNum = 22,
        DISPID_VSplitFaceGeometrySelection = 23,
        DISPID_VSplitFaceAddComment = 30,
        DISPID_VSplitFaceComment = 31,
        DISPID_VSplitFaceAddFigure = 32,
        DISPID_VSplitFaceFigures = 33,
        DISPID_VSplitFaceDisabled = 34,
        DISPID_VSplitFaceHasDependents = 35,
        DISPID_VSplitFaceImages = 36,
        DISPID_VSplitFaceAddImage = 37
    } kDispId_VirtualSplitFace;

    [
      odl,
      uuid(B8A3AC4C-10D7-4BC0-8E4B-ABEF453DD996),
      helpstring("IDSVirtualSplitFaceAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSVirtualSplitFaceAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000006), propget, helpstring("property")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x00000014), propput, helpstring("property VirtualSplitFaceVertices")]
        HRESULT VirtualSplitFaceVertices([in] IDispatch* ppiLongs);
        [id(0x00000014), propget, helpstring("property VirtualSplitFaceVertices")]
        HRESULT VirtualSplitFaceVertices([out, retval] IDispatch** ppiLongs);
        [id(0x00000015), propget, helpstring("property")]
        HRESULT Suppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000015), propput, helpstring("property")]
        HRESULT Suppressed([in] VARIANT_BOOL pVal);
        [id(0x00000016), propget, helpstring("property")]
        HRESULT GeometryNum([out, retval] int* pVal);
        [id(0x00000017), propput, helpstring("property")]
        HRESULT GeometrySelection([in] IDispatch* rhs);
        [id(0x0000001e), helpstring("method")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x0000001f), propget, helpstring("property")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x00000020), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x00000021), propget, helpstring("property")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x00000022), propget, helpstring("property")]
        HRESULT IsDisabled([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000023), propget, helpstring("property")]
        HRESULT HasDependents([out, retval] VARIANT_BOOL* pVal);
        [id(0x60020014), helpstring("method isSuppressed")]
        HRESULT isSuppressed([out, retval] char* pbIsSuppressed);
        [id(0x60020015), helpstring("method DeleteVirtualSplitFace")]
        HRESULT DeleteVirtualSplitFace();
        [id(0x00000024), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000025), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
    };

    typedef enum {
        DISPID_VHardVertexRefresh = 11,
        DISPID_VHardVertexXYZLocation = 20,
        DISPID_VHardVertexSuppressed = 21,
        DISPID_VHardVertexGeometryNum = 22,
        DISPID_VHardVertexGeometrySelection = 23,
        DISPID_VHardVertexAddComment = 30,
        DISPID_VHardVertexComment = 31,
        DISPID_VHardVertexAddFigure = 32,
        DISPID_VHardVertexFigures = 33,
        DISPID_VHardVertexDisabled = 34,
        DISPID_VHardVertexHasDependents = 35,
        DISPID_VHardVertexImages = 36,
        DISPID_VHardVertexAddImage = 37
    } kDispId_VirtualHardVertex;

    [
      odl,
      uuid(73C9DE55-502F-421F-BBD0-CCEC3427E8C5),
      helpstring("IDSVirtualHardVertexAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSVirtualHardVertexAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000006), propget, helpstring("property")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x00000014), propget, helpstring("property VirtualHardVertexXYZLocationString")]
        HRESULT VirtualHardVertexXYZLocationString([out, retval] BSTR* pVal);
        [id(0x00000015), propget, helpstring("property")]
        HRESULT Suppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000015), propput, helpstring("property")]
        HRESULT Suppressed([in] VARIANT_BOOL pVal);
        [id(0x00000016), propget, helpstring("property")]
        HRESULT GeometryNum([out, retval] int* pVal);
        [id(0x00000017), propput, helpstring("property")]
        HRESULT GeometrySelection([in] IDispatch* rhs);
        [id(0x0000001e), helpstring("method")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x0000001f), propget, helpstring("property")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x00000020), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x00000021), propget, helpstring("property")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x00000022), propget, helpstring("property")]
        HRESULT IsDisabled([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000023), propget, helpstring("property")]
        HRESULT HasDependents([out, retval] VARIANT_BOOL* pVal);
        [id(0x60020013), helpstring("method isSuppressed")]
        HRESULT isSuppressed([out, retval] char* pbIsSuppressed);
        [id(0x60020014), helpstring("method getDrawLocationAndRad")]
        HRESULT getDrawLocationAndRad(
                        double* xloc, 
                        double* yloc, 
                        double* zloc, 
                        double* drad);
        [id(0x60020015), helpstring("method getHardVertex")]
        HRESULT getHardVertex(
                        unsigned int* puiPartid, 
                        unsigned int* puiRefId, 
                        unsigned int* puiTopoId, 
                        unsigned int* puiFaceRefId, 
                        unsigned int* puiFaceTopoId);
        [id(0x60020016), helpstring("method updateHardVertexLocation")]
        HRESULT updateHardVertexLocation(
                        double xloc, 
                        double yloc, 
                        double zloc);
        [id(0x60020017), helpstring("method DeleteVirtualHardVertex")]
        HRESULT DeleteVirtualHardVertex();
        [id(0x00000024), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000025), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
    };

    typedef enum {
        DISPID_GapSizeGeometrySelection = 10,
        DISPID_GapSizeSuppressed = 11,
        DISPID_GapSizeActive = 12,
        DISPID_GapSizeAddComment = 13,
        DISPID_GapSizeComment = 14,
        DISPID_GapSizeAddFigure = 15,
        DISPID_GapSizeFigures = 16,
        DISPID_GapSizeStandardMeshControl = 17,
        DISPID_GapSizeImages = 18,
        DISPID_GapSizeAddImage = 19
    } kDispId_GapSize;

    [
      odl,
      uuid(1475DD07-9FBE-43C7-8C79-B80EEE03B60A),
      helpstring("IDSGapSizeAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSGapSizeAuto : IDispatch {
        [id(0x00000001), propget, helpstring("Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("Id")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000006), propget, helpstring("Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x0000000a), propput, helpstring("property GeometrySelection")]
        HRESULT GeometrySelection([in] IDispatch* rhs);
        [id(0x0000000b), propget, helpstring("property Suppressed")]
        HRESULT Suppressed([out, retval] unsigned int* pVal);
        [id(0x0000000b), propput, helpstring("property Suppressed")]
        HRESULT Suppressed([in] unsigned int pVal);
        [id(0x0000000c), propget, helpstring("property Active")]
        HRESULT Active([out, retval] unsigned int* pVal);
        [id(0x0000000d), helpstring("AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x0000000e), propget, helpstring("Comment")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x0000000f), helpstring("AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x00000010), propget, helpstring("Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x00000011), propget, helpstring("property AnsMeshControl")]
        HRESULT AnsMeshControl([out, retval] IDispatch** ppiControl);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
        [id(0x00000012), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000013), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
    };

    typedef enum {
        DISPID_GapToolSetStateAll = 10,
        DISPID_GapToolInvertStateAll = 11,
        DISPID_GapToolDeleteAll = 12,
        DISPID_GapToolSuppressed = 17,
        DISPID_GapToolAddComment = 13,
        DISPID_GapToolComment = 14,
        DISPID_GapToolAddFigure = 15,
        DISPID_GapToolFigures = 16,
        DISPID_GapBetween = 18,
        DISPID_GapDefinedBy = 40,
        DISPID_GapDistanceMinParameter = 41,
        DISPID_GapDistanceMaxParameter = 42,
        DISPID_MinimumGap = 43,
        DISPID_MaximumGap = 44,
        DISPID_GapAspectRatio = 45,
        DISPID_GapDensity = 46,
        DISPID_GapRefresh = 47,
        DISPID_GapToolAutoGapSize = 48,
        DISPID_RefreshedGapSizes = 49,
        DISPID_AddGapSize = 50,
        DISPID_ValidParameters = 51,
        DISPID_GapToolImages = 52,
        DISPID_GapToolAddImage = 53
    } kDispId_GapTool;

    [
      odl,
      uuid(BC3C7959-DAB9-4782-A374-9C06D09D0ED0),
      helpstring("IDSGapToolAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSGapToolAuto : IDispatch {
        [id(0x00000001), propget, helpstring("Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("Id")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000006), propget, helpstring("Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x0000000a), helpstring("method")]
        HRESULT SetSuppressedStateAll([in] VARIANT_BOOL bVal);
        [id(0x0000000b), helpstring("method")]
        HRESULT InvertSuppressedStateAll();
        [id(0x0000000c), helpstring("method")]
        HRESULT DeleteAll();
        [id(0x00000011), propget, helpstring("property Suppressed")]
        HRESULT Suppressed([out, retval] unsigned int* pVal);
        [id(0x00000011), propput, helpstring("property Suppressed")]
        HRESULT Suppressed([in] unsigned int pVal);
        [id(0x0000000d), helpstring("AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x0000000e), propget, helpstring("Comment")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x0000000f), helpstring("AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x00000010), propget, helpstring("Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x00000012), propget, helpstring("GapBetween")]
        HRESULT GapBetween([out, retval] unsigned int* pulBetween);
        [id(0x00000012), propput, helpstring("GapBetween")]
        HRESULT GapBetween([in] unsigned int pulBetween);
        [id(0x00000028), propget, helpstring("GapDefinedBy")]
        HRESULT GapDefinedBy([out, retval] unsigned int* pulDefine);
        [id(0x00000028), propput, helpstring("GapDefinedBy")]
        HRESULT GapDefinedBy([in] unsigned int pulDefine);
        [id(0x00000029), propget, helpstring("GapDistanceMinParameter")]
        HRESULT GapDistanceMinParameter([out, retval] BSTR* pszParameter);
        [id(0x00000029), propput, helpstring("GapDistanceMinParameter")]
        HRESULT GapDistanceMinParameter([in] BSTR pszParameter);
        [id(0x0000002a), propget, helpstring("GapDistanceMaxParameter")]
        HRESULT GapDistanceMaxParameter([out, retval] BSTR* pszParameter);
        [id(0x0000002a), propput, helpstring("GapDistanceMaxParameter")]
        HRESULT GapDistanceMaxParameter([in] BSTR pszParameter);
        [id(0x0000002b), propget, helpstring("MinimumGap")]
        HRESULT MinimumGap([out, retval] double* pdMinimum);
        [id(0x0000002b), propput, helpstring("MinimumGap")]
        HRESULT MinimumGap([in] double pdMinimum);
        [id(0x0000002c), propget, helpstring("MaximumGap")]
        HRESULT MaximumGap([out, retval] double* pdMaximum);
        [id(0x0000002c), propput, helpstring("MaximumGap")]
        HRESULT MaximumGap([in] double pdMaximum);
        [id(0x0000002d), propget, helpstring("GapAspectRatio")]
        HRESULT GapAspectRatio([out, retval] unsigned int* pulAspect);
        [id(0x0000002d), propput, helpstring("GapAspectRatio")]
        HRESULT GapAspectRatio([in] unsigned int pulAspect);
        [id(0x0000002e), propget, helpstring("GapDensity")]
        HRESULT GapDensity([out, retval] unsigned int* pulDensity);
        [id(0x0000002e), propput, helpstring("GapDensity")]
        HRESULT GapDensity([in] unsigned int pulDensity);
        [id(0x0000002f), propget, helpstring("GapRefresh")]
        HRESULT GapRefresh([out, retval] unsigned int* pulRefresh);
        [id(0x0000002f), propput, helpstring("GapRefresh")]
        HRESULT GapRefresh([in] unsigned int pulRefresh);
        [id(0x00000030), helpstring("method AutoGapSize")]
        HRESULT AutoGapSize([in] IAnsProgress* Progress);
        [id(0x00000032), helpstring("method AddGapSize")]
        HRESULT AddGapSize([out, retval] IDispatch** ppVal);
        [id(0x00000033), propget, helpstring("property ValidParameters")]
        HRESULT ValidParameters([out, retval] VARIANT_BOOL* pbVal);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
        [id(0x00000034), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000035), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
    };

    typedef enum {
        kDispId_JobConnectionDescriptor = 10,
        kDispId_JobConnectionServer = 11,
        kDispId_JobConnectionSession = 12,
        kDispId_JobConnectionJob = 13,
        kDispId_JobConnectionAffectedIds = 14
    } kDispId_JobConnection;

    [
      odl,
      uuid(6AA0513D-7EA2-4226-A69E-77814724D005),
      helpstring("IDSJobConnection Interface"),
      dual,
      oleautomation
    ]
    interface IDSJobConnection : IDispatch {
        [id(0x0000000a), propget, helpstring("property Descriptor")]
        HRESULT Descriptor([out, retval] BSTR* sDescriptor);
        [id(0x0000000b), propget, helpstring("property Server")]
        HRESULT Server([out, retval] BSTR* sServer);
        [id(0x0000000c), propget, helpstring("property Session")]
        HRESULT Session([out, retval] BSTR* sSession);
        [id(0x0000000d), propget, helpstring("property Job")]
        HRESULT Job([out, retval] BSTR* sJob);
        [id(0x0000000e), propget, helpstring("property AffectedIds")]
        HRESULT AffectedIds([out, retval] IAnsUINTColl** AffectedIds);
    };

    typedef enum {
        DISPID_PointMassGeometryDefineBy = 10,
        DISPID_PointMassGeometrySelection = 11,
        DISPID_PointMassLocationX = 12,
        DISPID_PointMassLocationY = 13,
        DISPID_PointMassLocationZ = 14,
        DISPID_PointMassLocationSelection = 15,
        DISPID_PointMassMagnitude = 16,
        DISPID_PointMassSuppressed = 17,
        DISPID_PointMassUnitString = 18,
        DISPID_PointMassCoordinateSystemSelection = 19,
        DISPID_PointMassPrototypes = 20,
        DISPID_PointMassComment = 21,
        DISPID_PointMassFigure = 22,
        DISPID_PointMassBehavior = 23,
        DISPID_PointMassMassMomentOfInertiaX = 24,
        DISPID_PointMassMassMomentOfInertiaY = 25,
        DISPID_PointMassMassMomentOfInertiaZ = 26,
        DISPID_PointMassImages = 27,
        DISPID_PointMassUnitTypeByDispid = 28,
        DISPID_PointMassUnitStringByDispid = 29,
        DISPID_PointMassParamNameByDispid = 30,
        DISPID_PointMassPinballSize = 31,
        DISPID_PointMassRemotePointSelection = 32,
        DISPID_PointMassComponentSelection = 33,
        DISPID_PointMassHasValidGeoSelection = 34,
        DISPID_PointMassAppliedBy = 36,
        DISPID_PointMassNodalCoordinateSystem = 37,
        DISPID_DistributedMassInputTotalMass = 38,
        DISPID_DistributedMassInputMassPerUnitArea = 39,
        DISPID_PointMassBeamMaterialName = 40,
        DISPID_PointMassBeamRadius = 41,
        DISPID_PointMassAddFigure = 50,
        DISPID_PointMassAddComment = 51,
        DISPID_PointMassAddImage = 52,
        DISPID_PointMassThermalCapacitance = 53,
        DISPID_PointMassPhysicsType = 54,
        DISPID_IsDistributedMassObject = 55,
        DISPID_DistributedMassInputType = 56,
        DISPID_PointMassUncheckRemotePointRelatedParameters = 57
    } kDispId_PointMass;

    [
      odl,
      uuid(6FA88A53-8942-4AB4-B550-6A368F7E8AE0),
      helpstring("IDSPointMassAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSPointMassAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** __MIDL__IDSPointMassAuto0000);
        [id(0x0000000a), propget, helpstring("property GeometryDefineBy")]
        HRESULT GeometryDefineBy([out, retval] DSGeometryDefineByType* pVal);
        [id(0x0000000a), propput, helpstring("property GeometryDefineBy")]
        HRESULT GeometryDefineBy([in] DSGeometryDefineByType pVal);
        [id(0x00000036), propget, helpstring("property PhysicsType")]
        HRESULT PhysicsType([out, retval] DSPhysicsType* pVal);
        [id(0x00000036), propput, helpstring("property PhysicsType")]
        HRESULT PhysicsType([in] DSPhysicsType pVal);
        [id(0x0000000b), propput, helpstring("property GeometrySelection")]
        HRESULT GeometrySelection([in] IDispatch* rhs);
        [id(0x00000020), propget, helpstring("property RemotePointSelection")]
        HRESULT RemotePointSelection([out, retval] dsid* pVal);
        [id(0x00000020), propput, helpstring("property RemotePointSelection")]
        HRESULT RemotePointSelection([in] dsid pVal);
        [id(0x00000013), propget, helpstring("property CoordinateSystemSelection")]
        HRESULT CoordinateSystemSelection([out, retval] int* pVal);
        [id(0x00000013), propput, helpstring("property CoordinateSystemSelection")]
        HRESULT CoordinateSystemSelection([in] int pVal);
        [id(0x0000000c), propget, helpstring("property LocationX")]
        HRESULT LocationX([out, retval] double* pVal);
        [id(0x0000000c), propput, helpstring("property LocationX")]
        HRESULT LocationX([in] double pVal);
        [id(0x0000000d), propget, helpstring("property LocationY")]
        HRESULT LocationY([out, retval] double* pVal);
        [id(0x0000000d), propput, helpstring("property LocationY")]
        HRESULT LocationY([in] double pVal);
        [id(0x0000000e), propget, helpstring("property LocationZ")]
        HRESULT LocationZ([out, retval] double* pVal);
        [id(0x0000000e), propput, helpstring("property LocationZ")]
        HRESULT LocationZ([in] double pVal);
        [id(0x0000000f), propput, helpstring("property LocationSelection")]
        HRESULT LocationSelection([in] IDispatch* rhs);
        [id(0x00000010), propget, helpstring("property Magnitude")]
        HRESULT Magnitude([out, retval] double* pVal);
        [id(0x00000010), propput, helpstring("property Magnitude")]
        HRESULT Magnitude([in] double pVal);
        [id(0x00000035), propget, helpstring("property ThermalCapacitance")]
        HRESULT ThermalCapacitance([out, retval] double* pVal);
        [id(0x00000035), propput, helpstring("property ThermalCapacitance")]
        HRESULT ThermalCapacitance([in] double pVal);
        [id(0x00000018), propget, helpstring("property MassMomentOfInertiaX")]
        HRESULT MassMomentOfInertiaX([out, retval] double* pVal);
        [id(0x00000018), propput, helpstring("property MassMomentOfInertiaX")]
        HRESULT MassMomentOfInertiaX([in] double pVal);
        [id(0x00000019), propget, helpstring("property MassMomentOfInertiaY")]
        HRESULT MassMomentOfInertiaY([out, retval] double* pVal);
        [id(0x00000019), propput, helpstring("property MassMomentOfInertiaY")]
        HRESULT MassMomentOfInertiaY([in] double pVal);
        [id(0x0000001a), propget, helpstring("property MassMomentOfInertiaZ")]
        HRESULT MassMomentOfInertiaZ([out, retval] double* pVal);
        [id(0x0000001a), propput, helpstring("property MassMomentOfInertiaZ")]
        HRESULT MassMomentOfInertiaZ([in] double pVal);
        [id(0x00000011), propget, helpstring("property Suppressed")]
        HRESULT Suppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000011), propput, helpstring("property Suppressed")]
        HRESULT Suppressed([in] VARIANT_BOOL pVal);
        [id(0x00000012), propget, helpstring("property UnitString")]
        HRESULT unitString(
                        [in, optional, defaultvalue(1)] int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00000014), propget, helpstring("property Prototypes")]
        HRESULT Prototypes([out, retval] VARIANT* pVal);
        [id(0x00000015), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x00000016), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x00000033), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x00000032), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x00000017), propget, helpstring("property Behavior")]
        HRESULT Behavior([out, retval] DSLoadBehavior* pVal);
        [id(0x00000017), propput, helpstring("property Behavior")]
        HRESULT Behavior([in] DSLoadBehavior pVal);
        [id(0x0000001b), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000034), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x0000001c), propget, helpstring("property UnitTypeByDispid")]
        HRESULT UnitTypeByDispid(
                        [in] int dispid, 
                        [out, retval] int* unitType);
        [id(0x0000001d), propget, helpstring("property UnitStringByDispid")]
        HRESULT UnitStringByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* unitString);
        [id(0x0000001e), propget, helpstring("property ParamNameByDispid")]
        HRESULT ParamNameByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* paramName);
        [id(0x0000001f), propget, helpstring("property PointMassPinballSize")]
        HRESULT PinballSize([out, retval] double* dVal);
        [id(0x0000001f), propput, helpstring("property PointMassPinballSize")]
        HRESULT PinballSize([in] double dVal);
        [id(0x00000021), propget, helpstring("property ComponentSelection")]
        HRESULT ComponentSelection([out, retval] dsid* pVal);
        [id(0x00000021), propput, helpstring("property ComponentSelection")]
        HRESULT ComponentSelection([in] dsid pVal);
        [id(0x00000022), propget, helpstring("property HasValidGeoSelection")]
        HRESULT HasValidGeoSelection([out, retval] VARIANT_BOOL* pVal);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x00000024), propget, helpstring("property AppliedBy")]
        HRESULT AppliedBy([out, retval] DSRemoteApplicationType* pVal);
        [id(0x00000024), propput, helpstring("property AppliedBy")]
        HRESULT AppliedBy([in] DSRemoteApplicationType pVal);
        [id(0x00000037), propget, helpstring("property IsDistributedMassObject")]
        HRESULT IsDistributedMassObject([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000037), propput, helpstring("property IsDistributedMassObject")]
        HRESULT IsDistributedMassObject([in] VARIANT_BOOL pVal);
        [id(0x00000038), propget, helpstring("property DistributedMassInputType")]
        HRESULT DistributedMassInputType([out, retval] DSDistributedMassInputType* pVal);
        [id(0x00000038), propput, helpstring("property DistributedMassInputType")]
        HRESULT DistributedMassInputType([in] DSDistributedMassInputType pVal);
        [id(0x00000026), propget, helpstring("property TotalMass")]
        HRESULT TotalMass([out, retval] double* pVal);
        [id(0x00000026), propput, helpstring("property TotalMass")]
        HRESULT TotalMass([in] double pVal);
        [id(0x00000027), propget, helpstring("property MassPerUnitArea")]
        HRESULT MassPerUnitArea([out, retval] double* pVal);
        [id(0x00000027), propput, helpstring("property MassPerUnitArea")]
        HRESULT MassPerUnitArea([in] double pVal);
        [id(0x00000028), propget, helpstring("property BeamMaterialName")]
        HRESULT BeamMaterialName([out, retval] BSTR* pVal);
        [id(0x00000028), propput, helpstring("property BeamMaterialName")]
        HRESULT BeamMaterialName([in] BSTR pVal);
        [id(0x00000039), helpstring("method UncheckRemotePointRelatedParameters")]
        HRESULT UncheckRemotePointRelatedParameters();
        [id(0x00000029), propget, helpstring("property BeamRadius")]
        HRESULT BeamRadius([out, retval] double* dVal);
        [id(0x00000029), propput, helpstring("property BeamRadius")]
        HRESULT BeamRadius([in] double dVal);
    };

    typedef enum {
        kDistributedMassInputTotalMass = 0,
        kDistributedMassInputMassPerUnitArea = 1
    } DSDistributedMassInputType;

    [
      odl,
      uuid(FAD46BF3-2CB7-4D0B-AAD6-F8BE9B85552C),
      helpstring("IStateEngineObject Interface"),
      dual,
      oleautomation
    ]
    interface IStateEngineObject : IDispatch {
        [id(0x00000001), propget, helpstring("property Number of Objects to Update")]
        HRESULT NumObjects([out, retval] int* pVal);
        [id(0x00000002), propget, helpstring("property get an object Id that needs to update")]
        HRESULT objectId(
                        [in] int i, 
                        [out, retval] unsigned int* pVal);
        [id(0x00000003), propget, helpstring("property ObjectState")]
        HRESULT ObjectState(
                        [in] unsigned int objectId, 
                        [out, retval] eObjectState* pVal);
        [id(0x00000004), propget, helpstring("property MeshingState")]
        HRESULT MeshingState(
                        [in] unsigned int objectId, 
                        [out, retval] int* pVal);
        [id(0x00000005), propget, helpstring("property FindAnswersType")]
        HRESULT FindAnswersType(
                        [in] unsigned int objectId, 
                        [out, retval] DSFindAnswersType* pVal);
        [id(0x00000006), propget, helpstring("property Silent")]
        HRESULT Silent([out, retval] VARIANT_BOOL* vbSilenceFlag);
        [id(0x00000006), propput, helpstring("property Silent")]
        HRESULT Silent([in] VARIANT_BOOL vbSilenceFlag);
        [id(0x00000007), helpstring("method ClearRedrawList")]
        HRESULT ClearRedrawList();
        [id(0x00000008), propget, helpstring("property ErrorMessages")]
        HRESULT ErrorMessages(
                        [in] unsigned int objectId, 
                        [out, retval] BSTR* bsErrMsgs);
        [id(0x00000009), propget, helpstring("property OnStateEngineUpdate")]
        HRESULT OnStateEngineUpdate([out, retval] IAnsDelegate** pIAnsDelegate);
        [id(0x0000000a), propget, helpstring("property LicenseState")]
        HRESULT LicenseState(
                        [in] unsigned int objectId, 
                        [out, retval] eObjectState* pVal);
        [id(0x0000000b), propget, helpstring("property ValidationState")]
        HRESULT ValidationState(
                        [in] unsigned int objectId, 
                        [out, retval] eObjectState* pVal);
        [id(0x0000000c), propget, helpstring("property SolutionState")]
        HRESULT SolutionState(
                        [in] unsigned int objectId, 
                        [out, retval] eObjectState* pVal);
        [id(0x0000000d), propget, helpstring("property SolvingState")]
        HRESULT SolvingState(
                        [in] unsigned int objectId, 
                        [out, retval] eObjectState* pVal);
        [id(0x0000000e), propget, helpstring("property VisibilityState")]
        HRESULT VisibilityState(
                        [in] unsigned int objectId, 
                        [out, retval] eObjectState* pVal);
        [id(0x0000000f), propget, helpstring("property SuppressionState")]
        HRESULT SuppressionState(
                        [in] unsigned int objectId, 
                        [out, retval] VARIANT_BOOL* pVal);
        [id(0x00000010), propget, helpstring("property OnFindAnswerTypeChange")]
        HRESULT OnFindAnswerTypeChange([out, retval] IAnsDelegate** pIAnsDelegate);
        [id(0x00000011), propget, helpstring("property Number of Find Answer type changed")]
        HRESULT NumFATypeChanged([out, retval] int* pVal);
        [id(0x00000012), propget, helpstring("property get Find Answer Set id which type has changed")]
        HRESULT IdFATypeChanged(
                        [in] int i, 
                        [out, retval] unsigned int* pVal);
        [id(0x00000013), propget, helpstring("property WB2 cell state")]
        HRESULT CellState(
                        [in] WB2_CellType eCellType, 
                        [in] dsid dsIdSystem, 
                        [out, retval] CellState* peCellState);
        [id(0x00000014), helpstring("get validation State")]
        HRESULT getValidationStatus([out, retval] VARIANT_BOOL* vbValidationStatus);
        [id(0x00000015), helpstring("validate Tree")]
        HRESULT validateStateEngineTree();
        [id(0x00000016), helpstring("getIgnoreValidation")]
        HRESULT getIgnoreValidation([out, retval] VARIANT_BOOL* pbIgnoreValidation);
        [id(0x00000017), helpstring("setIgnoreValidationFromScript")]
        HRESULT setIgnoreValidationFromScript();
        [id(0x00000018), helpstring("resetValidationFromScript")]
        HRESULT resetValidationFromScript();
        [id(0x00000019), helpstring("getStateEngineStateMode")]
        HRESULT getStateEngineStateMode([out, retval] VARIANT_BOOL* pbAutoOrManual);
        [id(0x0000001a), helpstring("setStateEngineToNotUsecacheList")]
        HRESULT setStateEngineToNotUsecacheList();
        [id(0x0000001b), helpstring("putMinLoadStepChangeForRestart")]
        HRESULT putMinLoadStepChangeForRestart([in] int iMinStep);
        [id(0x0000001c), helpstring("resetMinLoadStepChangeForRestart")]
        HRESULT resetMinLoadStepChangeForRestart();
        [id(0x0000001d), helpstring("reCalculateTreeLicenseState")]
        HRESULT reCalculateTreeLicenseState();
        [id(0x0000001e), helpstring("putModifiedLoadForRestart")]
        HRESULT putModifiedLoadForRestart(
                        [in] dsid objectId, 
                        DSRestartLoadModType eRestartLoadModType);
        [id(0x0000001f), helpstring("Populate State Messages")]
        HRESULT PopulateStateMessages();
        [id(0x00000020), helpstring("IsDuringGeometryAttach")]
        HRESULT IsDuringGeometryAttach([out, retval] VARIANT_BOOL* vbVal);
        [id(0x00000021), helpstring("IsDuringUpdatingGeometryConfiguration")]
        HRESULT IsDuringUpdatingGeometryConfiguration([out, retval] VARIANT_BOOL* vbVal);
        [id(0x00000022), helpstring("IsDuringAutoContactGeneration")]
        HRESULT IsDuringAutoContactGeneration([out, retval] VARIANT_BOOL* vbVal);
        [id(0x00000023), helpstring("IsDuringAutoMeshConnectionGeneration")]
        HRESULT IsDuringAutoMeshConnectionGeneration([out, retval] VARIANT_BOOL* vbVal);
        [id(0x00000024), helpstring("IsDuringAutoVirtualCellGeneration")]
        HRESULT IsDuringAutoVirtualCellGeneration([out, retval] VARIANT_BOOL* vbVal);
        [id(0x00000025), helpstring("IsDuringDatabaseLoading")]
        HRESULT IsDuringDatabaseLoading([out, retval] VARIANT_BOOL* vbVal);
        [id(0x00000026), helpstring("IsDuringDatabaseUnLoading")]
        HRESULT IsDuringDatabaseUnLoading([out, retval] VARIANT_BOOL* vbVal);
        [id(0x00000027), helpstring("IsDuringCleanResults")]
        HRESULT IsDuringCleanResults([out, retval] VARIANT_BOOL* vbVal);
        [id(0x00000028), helpstring("IsDuringNamedSelectionImport")]
        HRESULT IsDuringNamedSelectionImport([out, retval] VARIANT_BOOL* vbVal);
        [id(0x00000029), helpstring("IsDuringMultipleDelete")]
        HRESULT IsDuringMultipleDelete([out, retval] VARIANT_BOOL* vbVal);
        [id(0x0000002a), propget, helpstring("property IgnoreMeshSync")]
        HRESULT IgnoreMeshSync([out, retval] VARIANT_BOOL* vbSilenceFlag);
        [id(0x0000002a), propput, helpstring("property IgnoreMeshSync")]
        HRESULT IgnoreMeshSync([in] VARIANT_BOOL vbSilenceFlag);
    };

    typedef enum {
        kCellUnknown = 0,
        kCellModel = 1,
        kCellSetup = 2,
        kCellSolution = 3,
        kCellResults = 4
    } WB2_CellType;

    typedef enum {
        kStateUnknown = 0,
        kStateModified = 1,
        kStateAttentionRequired = 2,
        kStateOutputGenerated = 3,
        kStateSolving = 4,
        kStateSolvedRemotelyAwaitingDownload = 5
    } CellState;

    typedef enum {
        kRestartLoadModTypeNone = 0,
        kRestartLoadModTypeTabularData = 1,
        kRestartLoadModTypeSFECommand = 2
    } DSRestartLoadModType;

    [
      odl,
      uuid(43BC3337-3DFA-4509-9F1C-6F05479B433F),
      helpstring("IWB2StateAdapter Interface"),
      dual,
      oleautomation
    ]
    interface IWB2StateAdapter : IUnknown {
        [id(0x00000001), helpstring("method GetCellState")]
        HRESULT GetCellState(
                        [in] WB2_CellType eCellType, 
                        [in] dsid dsIdSystem, 
                        [out, retval] CellState* peCellState);
    };

    typedef enum {
        DISPID_DSMessageFilterFilterSource = 10,
        DISPID_DSMessageFilterFilterFormatType = 11,
        DISPID_DSMessageFilterFilterFormatEntry = 12,
        DISPID_DSMessageFilterSource = 13,
        DISPID_DSMessageFilterFormatType = 14,
        DISPID_DSMessageFilterFormatEntry = 15,
        DISPID_DSMessageFilterFormatFilteringEnabled = 16,
        DISPID_DSMessageFilterFormatLength = 17,
        DISPID_DSMessageFilterFilterDoubleEntry = 18,
        DISPID_DSMessageFilterDoubleEntry = 19,
        DISPID_DSMessageFilterDoubleFilteringEnabled = 20,
        DISPID_DSMessageFilterDoubleLength = 21
    } kDISPID_DSMessageFilter;

    [
      odl,
      uuid(2A4ADBD0-292C-45B2-91F4-455DE2BDCE27),
      helpstring("IDSMessageFilter Interface"),
      dual,
      oleautomation
    ]
    interface IDSMessageFilter : IDispatch {
        [id(0x0000000a), propget, helpstring("property FilterSource")]
        HRESULT FilterSource([out, retval] VARIANT_BOOL* bVal);
        [id(0x0000000a), propput, helpstring("property FilterSource")]
        HRESULT FilterSource([in] VARIANT_BOOL bVal);
        [id(0x0000000b), propget, helpstring("property FilterFormatType")]
        HRESULT FilterFormatType([out, retval] VARIANT_BOOL* bVal);
        [id(0x0000000b), propput, helpstring("property FilterFormatType")]
        HRESULT FilterFormatType([in] VARIANT_BOOL bVal);
        [id(0x0000000c), propget, helpstring("property FilterFormatEntry")]
        HRESULT FilterFormatEntry(
                        [in] int iPos, 
                        [out, retval] VARIANT_BOOL* pVal);
        [id(0x0000000c), propput, helpstring("property FilterFormatEntry")]
        HRESULT FilterFormatEntry(
                        [in] int iPos, 
                        [in] VARIANT_BOOL pVal);
        [id(0x0000000d), propget, helpstring("property Source")]
        HRESULT Source([out, retval] int* pVal);
        [id(0x0000000d), propput, helpstring("property Source")]
        HRESULT Source([in] int pVal);
        [id(0x0000000e), propget, helpstring("property FormatType")]
        HRESULT FormatType([out, retval] int* pVal);
        [id(0x0000000e), propput, helpstring("property FormatType")]
        HRESULT FormatType([in] int pVal);
        [id(0x0000000f), propget, helpstring("property FormatEntry")]
        HRESULT FormatEntry(
                        [in] int iPos, 
                        [out, retval] int* pVal);
        [id(0x0000000f), propput, helpstring("property FormatEntry")]
        HRESULT FormatEntry(
                        [in] int iPos, 
                        [in] int pVal);
        [id(0x00000010), propget, helpstring("property FormatFilteringEnabled")]
        HRESULT FormatFilteringEnabled([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000011), propget, helpstring("property FormatLength")]
        HRESULT FormatLength([out, retval] int* pVal);
        [id(0x00000012), propget, helpstring("property FilterDoubleEntry")]
        HRESULT FilterDoubleEntry(
                        [in] int iPos, 
                        [out, retval] VARIANT_BOOL* pVal);
        [id(0x00000012), propput, helpstring("property FilterDoubleEntry")]
        HRESULT FilterDoubleEntry(
                        [in] int iPos, 
                        [in] VARIANT_BOOL pVal);
        [id(0x00000013), propget, helpstring("property DoubleEntry")]
        HRESULT DoubleEntry(
                        [in] int iPos, 
                        [out, retval] double* pVal);
        [id(0x00000013), propput, helpstring("property DoubleEntry")]
        HRESULT DoubleEntry(
                        [in] int iPos, 
                        [in] double pVal);
        [id(0x00000014), propget, helpstring("property DoubleFilteringEnabled")]
        HRESULT DoubleFilteringEnabled([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000015), propget, helpstring("property DoubleLength")]
        HRESULT DoubleLength([out, retval] int* pVal);
    };

    typedef enum {
        DISPID_DSMessageDatabaseGetNumMessages = 10,
        DISPID_DSMessageDatabaseAddMessage = 11,
        DISPID_DSMessageDatabaseQuery = 12,
        DISPID_DSMessageDatabaseAddNewMessage = 13,
        DISPID_DSMessageDatabaseGetMessage = 14,
        DISPID_DSMessageDatabaseClear = 15,
        DISPID_DSMessageDatabaseRemoveMessage = 16,
        DISPID_DSMessageDatabaseWriteToXML = 17,
        DISPID_DSMessageDatabaseReadFromXML = 18,
        DISPID_DSMessageDatabaseAddResumedMessage = 19,
        DISPID_DSMessageDatabasefireEvent = 20,
        DISPID_DSMessageDatabaseClearOnResume = 21,
        DISPID_DSMessageDatabaseAddMessageString = 22,
        DISPID_DSMessageDatabasePrepareForRedraw = 23,
        DISPID_DSMessageDatabaseQuietAdd = 24,
        DISPID_DSMessageDatabaseFinishedQuietAdd = 25,
        DISPID_DSMessageDatabaseOnAddMessageToDatabase = 26,
        DISPID_DSMessageDatabaseOnRedrawNeeded = 27,
        DISPID_DSMessageDatabaseCreateMessage = 28,
        DISPID_DSMessageDatabaseQuietRemoveMessage = 29,
        DISPID_DSMessageDatabaseRemoveLicenseMessageForTime = 30,
        DISPID_DSMessageDatabaseRemoveMessageByString = 31,
        DISPID_DSMessageDatabaseRemoveMessageOfGivenId = 32,
        DISPID_DSMessageDatabaseHasMessage = 33,
        DISPID_DSMessageDatabaseRemoveAllMessagesByString = 34,
        DISPID_DSMessageDatabaseFindMatchingMessageObject = 35
    } kDISPID_DSMessageDatabase;

    [
      odl,
      uuid(16B86F0F-5985-491D-88D4-F5947F8B3F3A),
      helpstring("IDSMessageDatabase Interface"),
      dual,
      oleautomation
    ]
    interface IDSMessageDatabase : IDispatch {
        [id(0x0000000a), propget, helpstring("property GetNumMessages")]
        HRESULT NumMessages([out, retval] int* lnummsg);
        [id(0x0000000b), helpstring("method AddMessage")]
        HRESULT AddMessage([in] IDSMessage* msgObj);
        [id(0x0000000c), helpstring("method Query")]
        HRESULT Query(
                        [in] IDSMessageFilter* selObj, 
                        [out, retval] IDispatch** pAnsIDispColl);
        [id(0x0000000e), helpstring("method GetMessage")]
        HRESULT GetMessage(
                        [in] int iMsg, 
                        [out, retval] IDispatch** pMsgObj);
        [id(0x0000000f), helpstring("method Clear")]
        HRESULT Clear();
        [id(0x00000010), helpstring("method RemoveMessage")]
        HRESULT RemoveMessage([in] int lRemMsg);
        [id(0x00000011), helpstring("method WriteToXML")]
        HRESULT WriteToXML([out, retval] BSTR* pbsXMLMessageDatabase);
        [id(0x00000012), helpstring("method ReadFromXML")]
        HRESULT ReadFromXML([in] BSTR bsXMLMessageDatabase);
        [id(0x00000013), helpstring("method AddResumedMessage")]
        HRESULT AddResumedMessage([in] IDSMessage* msgObj);
        [id(0x00000014), helpstring("method fireEvent")]
        HRESULT fireEvent([in] int dispid);
        [id(0x00000015), helpstring("method ClearOnResume")]
        HRESULT ClearOnResume();
        [id(0x00000016), helpstring("method AddMessageString")]
        HRESULT AddMessageString([in] BSTR bstrMessage);
        [id(0x00000017), helpstring("method PrepareForRedraw")]
        HRESULT PrepareForRedraw();
        [id(0x00000018), helpstring("method QuietAdd")]
        HRESULT QuietAdd([in] IDSMessage* msgObj);
        [id(0x00000019), helpstring("method FinishedQuietAdd")]
        HRESULT FinishedQuietAdd();
        [id(0x0000001a), propget, helpstring("property OnAddMessageToDatabase")]
        HRESULT OnAddMessageToDatabase([out, retval] IAnsDelegate** ppVal);
        [id(0x0000001b), propget, helpstring("property OnRedrawNeeded")]
        HRESULT OnRedrawNeeded([out, retval] IAnsDelegate** ppVal);
        [id(0x0000001c), helpstring("method CreateMessage")]
        HRESULT CreateMessage(IDSMessage** ppNewMessage);
        [id(0x0000001d), helpstring("method QuietRemoveMessage")]
        HRESULT QuietRemoveMessage([in] int lRemMsg);
        [id(0x0000001e), helpstring("method RemoveLicenseMessageForTime")]
        HRESULT RemoveLicenseMessageForTime();
        [id(0x0000001f), helpstring("method RemoveMessageByString")]
        HRESULT RemoveMessageByString([in] BSTR bsMessage);
        [id(0x00000020), helpstring("method RemoveMessageOfGivenId")]
        HRESULT RemoveMessageOfGivenId([in] dsid ID);
        [id(0x00000021), helpstring("method HasMessage")]
        HRESULT HasMessage(
                        [in] BSTR bsMessage, 
                        [out, retval] int* pMessagePtrIdx);
        [id(0x00000022), helpstring("method RemoveAllMessagesByString")]
        HRESULT RemoveAllMessagesByString([in] BSTR bsMessage);
        [id(0x00000023), helpstring("method FindMatchingMessageObject")]
        HRESULT FindMatchingMessageObject(
                        [in] IDSMessage* msgObj, 
                        [out, retval] int* pMessagePtrIdx);
    };

    typedef enum {
        DISPID_DSMessageFormatEntry = 10,
        DISPID_DSMessageFormatLength = 11,
        DISPID_DSMessageFormatType = 12,
        DISPID_DSMessageSource = 13,
        DISPID_DSMessageDisplayString = 14,
        DISPID_DSMessageReadyToDisplay = 15,
        DISPID_DSMessageType = 16,
        DISPID_DSMessageStringEntry = 17,
        DISPID_DSMessageStringListLength = 18,
        DISPID_DSMessageDoubleEntry = 19,
        DISPID_DSMessageDoubleLength = 20,
        DISPID_DSMessagePathId = 21,
        DISPID_DSMessageWriteToXML = 22,
        DISPID_DSMessageReadFromXML = 23,
        DISPID_DSMessageSourceOperation = 24,
        DISPID_DSMessageTimeStamp = 25,
        DISPID_DSMessageTimeStampYear = 26,
        DISPID_DSMessageTimeStampMonth = 27,
        DISPID_DSMessageTimeStampDay = 28,
        DISPID_DSMessageTimeStampHour = 29,
        DISPID_DSMessageTimeStampMinute = 30,
        DISPID_DSMessageTimeStampSecond = 31,
        DISPID_DSMessageTimeStampMilliseconds = 32,
        DISPID_DSMessageDisplayPath = 33,
        DISPID_DSMessageHasDisplayPath = 34,
        DISPID_DSMessageAddTopoId = 35,
        DISPID_DSMessageGetTopoId = 36,
        DISPID_DSMessageGetPartId = 37,
        DISPID_DSMessageNumTopoId = 38,
        DISPID_DSMessageClone = 39,
        DISPID_DSMessageDisplayStringCode = 40,
        DISPID_DSMessageTimeStampEN_US = 41,
        DISPID_DSMessageAddRelatedObjId = 42,
        DISPID_DSMessageGetRelatedObjId = 43,
        DISPID_DSMessageNumRelatedObjId = 44
    } kDispId_DSMessage;

    [
      odl,
      uuid(64473209-5C81-4CD5-B046-52EA78F5251F),
      helpstring("IDSLoadObjectCollectionSetup Interface")
    ]
    interface IDSLoadObjectCollectionSetup : IDispatch {
        [helpstring("method setNodeIds... provides all available Node Ids")]
        HRESULT _stdcall setNodeIds(
                        [in] unsigned int iNumNodes, 
                        [in] unsigned int* pulNodeIds);
        [helpstring("method setNodeRotation... sets nodal rotations")]
        HRESULT _stdcall setNodeRotation(
                        [in] unsigned int ulNodeId, 
                        [in] double pdThetaXY, 
                        [in] double pdThetaYZ, 
                        [in] double pdThetaZX);
        [helpstring("method exportXML... takes full path of XML file")]
        HRESULT _stdcall exportXML(BSTR bsFilename);
        [helpstring("method setConstraint... deprecated use setConstraintX setConstraintY setConstraintZ")]
        HRESULT _stdcall setConstraint([in] unsigned int ulNodeId);
        [helpstring("method clear")]
        HRESULT _stdcall Clear();
        [helpstring("method setConstraintX... marks as a frictionless/cylindrical support in X direction")]
        HRESULT _stdcall setConstraintX([in] unsigned int ulNodeId);
        [helpstring("method setConstraintY... marks as a frictionless/cylindrical support in Y direction")]
        HRESULT _stdcall setConstraintY([in] unsigned int ulNodeId);
        [helpstring("method setConstraintZ... marks as a frictionless/cylindrical support in Z direction")]
        HRESULT _stdcall setConstraintZ([in] unsigned int ulNodeId);
    };

    [
      odl,
      uuid(7EAF9A6B-DDC4-4B10-AC29-99CB74BCE57C),
      helpstring("IDSLoadObjectCollectionMap Interface")
    ]
    interface IDSLoadObjectCollectionMap : IDispatch {
        [helpstring("method getLoadObjectCollection for the environment")]
        HRESULT _stdcall getLoadObjectCollection(
                        unsigned int idEnvironment, 
                        [out, retval] IUnknown** pLoadObjectCollection);
        [helpstring("method createLoadObjectCollection... for the environment")]
        HRESULT _stdcall createLoadObjectCollection(unsigned int idEnvironment);
        [helpstring("method clear")]
        HRESULT _stdcall Clear();
    };

    typedef enum {
        DISPID_GenPlaneStrainGeometrySelection = 10,
        DISPID_GenPlaneStrainXCoordRefPoint = 11,
        DISPID_GenPlaneStrainYCoordRefPoint = 12,
        DISPID_GenPlaneStrainCoordinateSystemSelection = 13,
        DISPID_GenPlaneStrainBoundCondAlongFiber = 14,
        DISPID_GenPlaneStrainMagnitudeAlongFiber = 15,
        DISPID_GenPlaneStrainBoundCondRotationX = 16,
        DISPID_GenPlaneStrainMagnitudeRotationX = 17,
        DISPID_GenPlaneStrainBoundCondRotationY = 18,
        DISPID_GenPlaneStrainMagnitudeRotationY = 19,
        DISPID_GenPlaneStrainSuppressed = 20,
        DISPID_GenPlaneStrainComment = 21,
        DISPID_GenPlaneStrainFigure = 22,
        DISPID_GenPlaneStrainFiberLengthChange = 23,
        DISPID_GenPlaneStrainRotationComponentX = 24,
        DISPID_GenPlaneStrainRotationComponentY = 25,
        DISPID_GenPlaneStrainReactionForce = 26,
        DISPID_GenPlaneStrainMomentComponentX = 27,
        DISPID_GenPlaneStrainMomentComponentY = 28,
        DISPID_GenPlaneStrainImages = 29,
        DISPID_GenPlaneStrainUnitTypeByDispid = 30,
        DISPID_GenPlaneStrainUnitStringByDispid = 31,
        DISPID_GenPlaneStrainParamNameByDispid = 32,
        DISPID_GenPlaneStrainAddFigure = 50,
        DISPID_GenPlaneStrainAddComment = 51,
        DISPID_GenPlaneStrainAddImage = 52
    } kDispId_GenPlaneStrain;

    [
      odl,
      uuid(911B8CDB-44E2-4EA1-8F26-9A50A574C885),
      helpstring("IDSGenPlaneStrainAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSGenPlaneStrainAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x0000000a), propget, helpstring("property GeometrySelection")]
        HRESULT GeometrySelection([out, retval] BSTR* pVal);
        [id(0x0000000d), propget, helpstring("property CoordinateSystemSelection")]
        HRESULT CoordinateSystemSelection([out, retval] int* pVal);
        [id(0x0000000d), propput, helpstring("property CoordinateSystemSelection")]
        HRESULT CoordinateSystemSelection([in] int pVal);
        [id(0x0000000b), propget, helpstring("property xCoordOfRefPoint")]
        HRESULT xCoordOfRefPoint([out, retval] double* pVal);
        [id(0x0000000b), propput, helpstring("property xCoordOfRefPoint")]
        HRESULT xCoordOfRefPoint([in] double pVal);
        [id(0x0000000c), propget, helpstring("property yCoordOfRefPoint")]
        HRESULT yCoordOfRefPoint([out, retval] double* pVal);
        [id(0x0000000c), propput, helpstring("property yCoordOfRefPoint")]
        HRESULT yCoordOfRefPoint([in] double pVal);
        [id(0x0000000e), propget, helpstring("property BoundaryConditionAlongFiber")]
        HRESULT BoundaryConditionAlongFiber([out, retval] DSBoundCondAlongFiber* pVal);
        [id(0x0000000e), propput, helpstring("property BoundaryConditionAlongFiber")]
        HRESULT BoundaryConditionAlongFiber([in] DSBoundCondAlongFiber pVal);
        [id(0x0000000f), propget, helpstring("property MagnitudeAlongFiber")]
        HRESULT MagnitudeAlongFiber([out, retval] double* pVal);
        [id(0x0000000f), propput, helpstring("property MagnitudeAlongFiber")]
        HRESULT MagnitudeAlongFiber([in] double pVal);
        [id(0x00000010), propget, helpstring("property BoundaryConditionRotationX")]
        HRESULT BoundaryConditionRotationX([out, retval] DSBoundCondRotation* pVal);
        [id(0x00000010), propput, helpstring("property BoundaryConditionRotationX")]
        HRESULT BoundaryConditionRotationX([in] DSBoundCondRotation pVal);
        [id(0x00000011), propget, helpstring("property MagnitudeRotationX")]
        HRESULT MagnitudeRotationX([out, retval] double* pVal);
        [id(0x00000011), propput, helpstring("property MagnitudeRotationX")]
        HRESULT MagnitudeRotationX([in] double pVal);
        [id(0x00000012), propget, helpstring("property BoundaryConditionRotationY")]
        HRESULT BoundaryConditionRotationY([out, retval] DSBoundCondRotation* pVal);
        [id(0x00000012), propput, helpstring("property BoundaryConditionRotationY")]
        HRESULT BoundaryConditionRotationY([in] DSBoundCondRotation pVal);
        [id(0x00000013), propget, helpstring("property MagnitudeRotationY")]
        HRESULT MagnitudeRotationY([out, retval] double* pVal);
        [id(0x00000013), propput, helpstring("property MagnitudeRotationY")]
        HRESULT MagnitudeRotationY([in] double pVal);
        [id(0x00000014), propget, helpstring("property Suppressed")]
        HRESULT Suppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000014), propput, helpstring("property Suppressed")]
        HRESULT Suppressed([in] VARIANT_BOOL pVal);
        [id(0x00000015), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x00000016), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x00000033), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x00000032), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** __MIDL__IDSGenPlaneStrainAuto0000);
        [id(0x00000017), propget, helpstring("property FiberLengthChange")]
        HRESULT FiberLengthChange([out, retval] double* pVal);
        [id(0x00000017), propput, helpstring("property FiberLengthChange")]
        HRESULT FiberLengthChange([in] double pVal);
        [id(0x00000018), propget, helpstring("property RotationComponentX")]
        HRESULT RotationComponentX([out, retval] double* pVal);
        [id(0x00000018), propput, helpstring("property RotationComponentX")]
        HRESULT RotationComponentX([in] double pVal);
        [id(0x00000019), propget, helpstring("property RotationComponentY")]
        HRESULT RotationComponentY([out, retval] double* pVal);
        [id(0x00000019), propput, helpstring("property RotationComponentY")]
        HRESULT RotationComponentY([in] double pVal);
        [id(0x0000001a), propget, helpstring("property ReactionForce")]
        HRESULT ReactionForce([out, retval] double* pVal);
        [id(0x0000001a), propput, helpstring("property ReactionForce")]
        HRESULT ReactionForce([in] double pVal);
        [id(0x0000001b), propget, helpstring("property MomentComponentX")]
        HRESULT MomentComponentX([out, retval] double* pVal);
        [id(0x0000001b), propput, helpstring("property MomentComponentX")]
        HRESULT MomentComponentX([in] double pVal);
        [id(0x0000001c), propget, helpstring("property MomentComponentY")]
        HRESULT MomentComponentY([out, retval] double* pVal);
        [id(0x0000001c), propput, helpstring("property MomentComponentY")]
        HRESULT MomentComponentY([in] double pVal);
        [id(0x0000001d), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000034), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x0000001e), propget, helpstring("property UnitTypeByDispid")]
        HRESULT UnitTypeByDispid(
                        [in] int dispid, 
                        [out, retval] int* unitType);
        [id(0x0000001f), propget, helpstring("property UnitStringByDispid")]
        HRESULT UnitStringByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* unitString);
        [id(0x00000020), propget, helpstring("property ParamNameByDispid")]
        HRESULT ParamNameByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* paramName);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
    };

    typedef enum {
        kBcAlongFiberFree = 0,
        kBcAlongFiberForce = 1,
        kBcAlongFiberDisplacement = 2
    } DSBoundCondAlongFiber;

    typedef enum {
        kBcRotationFree = 0,
        kBcRotationMoment = 1,
        kBcRotationRotation = 2
    } DSBoundCondRotation;

    typedef enum {
        DISPID_SymmetryGroupType = 10,
        DISPID_SymmetryGroupSymmetryRegion = 11,
        DISPID_SymmetryGroupAddSymmetryRegion = 12,
        DISPID_SymmetryGroupSuppressed = 13,
        DISPID_SymmetryGroupComments = 14,
        DISPID_SymmetryGroupFigures = 15,
        DISPID_SymmetryGroupAddFigure = 16,
        DISPID_SymmetryGroupAddComment = 17,
        DISPID_SymmetryGroupVisualExpansion = 18,
        DISPID_SymmetryGroupVisualSectors = 19,
        DISPID_SymmetryGroupImages = 21,
        DISPID_SymmetryGroupAddImage = 22,
        DISPID_SymmetryGroupExpansionNumRepeat_1 = 23,
        DISPID_SymmetryGroupExpansionType_1 = 24,
        DISPID_SymmetryGroupExpansionMethod_1 = 25,
        DISPID_SymmetryGroupExpansionDelX_1 = 26,
        DISPID_SymmetryGroupExpansionDelY_1 = 27,
        DISPID_SymmetryGroupExpansionDelZ_1 = 28,
        DISPID_SymmetryGroupExpansionCSYS_1 = 29,
        DISPID_SymmetryGroupExpansionNumRepeat_2 = 30,
        DISPID_SymmetryGroupExpansionType_2 = 31,
        DISPID_SymmetryGroupExpansionMethod_2 = 32,
        DISPID_SymmetryGroupExpansionDelX_2 = 33,
        DISPID_SymmetryGroupExpansionDelY_2 = 34,
        DISPID_SymmetryGroupExpansionDelZ_2 = 35,
        DISPID_SymmetryGroupExpansionCSYS_2 = 36,
        DISPID_SymmetryGroupExpansionNumRepeat_3 = 37,
        DISPID_SymmetryGroupExpansionType_3 = 38,
        DISPID_SymmetryGroupExpansionMethod_3 = 39,
        DISPID_SymmetryGroupExpansionDelX_3 = 40,
        DISPID_SymmetryGroupExpansionDelY_3 = 41,
        DISPID_SymmetryGroupExpansionDelZ_3 = 42,
        DISPID_SymmetryGroupExpansionCSYS_3 = 43,
        DISPID_SymmetryGroupExportCyclicNodeMaps = 44
    } kDispId_SymmetryGroup;

    [
      odl,
      uuid(227CA9DE-D168-4F2A-8A3C-54D9E79672CB),
      helpstring("IDSSymmetryGroupAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSSymmetryGroupAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x0000000c), helpstring("method AddSymmetryRegion")]
        HRESULT AddSymmetryRegion(
                        [in] IDispatch* piSelectMgr, 
                        [in] DSSymmetryType sType, 
                        [out, retval] IDispatch** pDisp);
        [id(0x0000000d), propget, helpstring("property Suppressed")]
        HRESULT Suppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000000d), propput, helpstring("property Suppressed")]
        HRESULT Suppressed([in] VARIANT_BOOL pVal);
        [id(0x0000000e), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x0000000f), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x00000011), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x00000010), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
        [id(0x00000012), propget, helpstring("property VisualExpansion")]
        HRESULT VisualExpansion([out, retval] int* pVal);
        [id(0x00000012), propput, helpstring("property VisualExpansion")]
        HRESULT VisualExpansion([in] int pVal);
        [id(0x00000013), propget, helpstring("property VisualSectors")]
        HRESULT VisualSectors([out, retval] int* pVal);
        [id(0x00000013), propput, helpstring("property VisualSectors")]
        HRESULT VisualSectors([in] int pVal);
        [id(0x00000015), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000016), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00000017), propget, helpstring("property SymmetryExpansionNumRepeat_1")]
        HRESULT ExpansionNumRepeat_1([out, retval] int* pVal);
        [id(0x00000017), propput, helpstring("property SymmetryExpansionNumRepeat_1")]
        HRESULT ExpansionNumRepeat_1([in] int pVal);
        [id(0x00000018), propget, helpstring("property SymmetryExpansionType_1")]
        HRESULT ExpansionType_1([out, retval] int* pVal);
        [id(0x00000018), propput, helpstring("property SymmetryExpansionType_1")]
        HRESULT ExpansionType_1([in] int pVal);
        [id(0x00000019), propget, helpstring("property SymmetryExpansionMethod_1")]
        HRESULT ExpansionMethod_1([out, retval] int* pVal);
        [id(0x00000019), propput, helpstring("property SymmetryExpansionMethod_1")]
        HRESULT ExpansionMethod_1([in] int pVal);
        [id(0x0000001a), propget, helpstring("property SymmetryExpansionDelX_1")]
        HRESULT ExpansionDelX_1([out, retval] double* pVal);
        [id(0x0000001a), propput, helpstring("property SymmetryExpansionDelX_1")]
        HRESULT ExpansionDelX_1([in] double pVal);
        [id(0x0000001b), propget, helpstring("property SymmetryExpansionDelY_1")]
        HRESULT ExpansionDelY_1([out, retval] double* pVal);
        [id(0x0000001b), propput, helpstring("property SymmetryExpansionDelY_1")]
        HRESULT ExpansionDelY_1([in] double pVal);
        [id(0x0000001c), propget, helpstring("property SymmetryExpansionDelZ_1")]
        HRESULT ExpansionDelZ_1([out, retval] double* pVal);
        [id(0x0000001c), propput, helpstring("property SymmetryExpansionDelZ_1")]
        HRESULT ExpansionDelZ_1([in] double pVal);
        [id(0x0000001d), propget, helpstring("property SymmetryExpansionCSYS_1")]
        HRESULT ExpansionCSYS_1([out, retval] int* pVal);
        [id(0x0000001d), propput, helpstring("property SymmetryExpansionCSYS_1")]
        HRESULT ExpansionCSYS_1([in] int pVal);
        [id(0x0000001e), propget, helpstring("property SymmetryExpansionNumRepeat_2")]
        HRESULT ExpansionNumRepeat_2([out, retval] int* pVal);
        [id(0x0000001e), propput, helpstring("property SymmetryExpansionNumRepeat_2")]
        HRESULT ExpansionNumRepeat_2([in] int pVal);
        [id(0x0000001f), propget, helpstring("property SymmetryExpansionType_2")]
        HRESULT ExpansionType_2([out, retval] int* pVal);
        [id(0x0000001f), propput, helpstring("property SymmetryExpansionType_2")]
        HRESULT ExpansionType_2([in] int pVal);
        [id(0x00000020), propget, helpstring("property SymmetryExpansionMethod_2")]
        HRESULT ExpansionMethod_2([out, retval] int* pVal);
        [id(0x00000020), propput, helpstring("property SymmetryExpansionMethod_2")]
        HRESULT ExpansionMethod_2([in] int pVal);
        [id(0x00000021), propget, helpstring("property SymmetryExpansionDelX_2")]
        HRESULT ExpansionDelX_2([out, retval] double* pVal);
        [id(0x00000021), propput, helpstring("property SymmetryExpansionDelX_2")]
        HRESULT ExpansionDelX_2([in] double pVal);
        [id(0x00000022), propget, helpstring("property SymmetryExpansionDelY_2")]
        HRESULT ExpansionDelY_2([out, retval] double* pVal);
        [id(0x00000022), propput, helpstring("property SymmetryExpansionDelY_2")]
        HRESULT ExpansionDelY_2([in] double pVal);
        [id(0x00000023), propget, helpstring("property SymmetryExpansionDelZ_2")]
        HRESULT ExpansionDelZ_2([out, retval] double* pVal);
        [id(0x00000023), propput, helpstring("property SymmetryExpansionDelZ_2")]
        HRESULT ExpansionDelZ_2([in] double pVal);
        [id(0x00000024), propget, helpstring("property SymmetryExpansionCSYS_2")]
        HRESULT ExpansionCSYS_2([out, retval] int* pVal);
        [id(0x00000024), propput, helpstring("property SymmetryExpansionCSYS_2")]
        HRESULT ExpansionCSYS_2([in] int pVal);
        [id(0x00000025), propget, helpstring("property SymmetryExpansionNumRepeat_3")]
        HRESULT ExpansionNumRepeat_3([out, retval] int* pVal);
        [id(0x00000025), propput, helpstring("property SymmetryExpansionNumRepeat_3")]
        HRESULT ExpansionNumRepeat_3([in] int pVal);
        [id(0x00000026), propget, helpstring("property SymmetryExpansionType_3")]
        HRESULT ExpansionType_3([out, retval] int* pVal);
        [id(0x00000026), propput, helpstring("property SymmetryExpansionType_3")]
        HRESULT ExpansionType_3([in] int pVal);
        [id(0x00000027), propget, helpstring("property SymmetryExpansionMethod_3")]
        HRESULT ExpansionMethod_3([out, retval] int* pVal);
        [id(0x00000027), propput, helpstring("property SymmetryExpansionMethod_3")]
        HRESULT ExpansionMethod_3([in] int pVal);
        [id(0x00000028), propget, helpstring("property SymmetryExpansionDelX_3")]
        HRESULT ExpansionDelX_3([out, retval] double* pVal);
        [id(0x00000028), propput, helpstring("property SymmetryExpansionDelX_3")]
        HRESULT ExpansionDelX_3([in] double pVal);
        [id(0x00000029), propget, helpstring("property SymmetryExpansionDelY_3")]
        HRESULT ExpansionDelY_3([out, retval] double* pVal);
        [id(0x00000029), propput, helpstring("property SymmetryExpansionDelY_3")]
        HRESULT ExpansionDelY_3([in] double pVal);
        [id(0x0000002a), propget, helpstring("property SymmetryExpansionDelZ_3")]
        HRESULT ExpansionDelZ_3([out, retval] double* pVal);
        [id(0x0000002a), propput, helpstring("property SymmetryExpansionDelZ_3")]
        HRESULT ExpansionDelZ_3([in] double pVal);
        [id(0x0000002b), propget, helpstring("property SymmetryExpansionCSYS_3")]
        HRESULT ExpansionCSYS_3([out, retval] int* pVal);
        [id(0x0000002b), propput, helpstring("property SymmetryExpansionCSYS_3")]
        HRESULT ExpansionCSYS_3([in] int pVal);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x0000002c), helpstring("method ExportCyclicNodeMaps")]
        HRESULT ExportCyclicNodeMaps(
                        [in] BSTR bsPath, 
                        [in] int iOptionsMASK);
    };

    typedef enum {
        UNKNOWN = 0,
        SYMMETRIC_S = 1,
        ANTI_SYMMETRIC = 2,
        EVEN_PERIODIC = 3,
        ODD_PERIODIC = 4,
        CYCLIC_S = 5,
        LINEAR_PERIODIC = 6,
        EXTERNAL_CYCLIC = 7
    } DSSymmetryType;

    typedef enum {
        DISPID_SymmetryGeneralGeometrySelection = 10,
        DISPID_SymmetryGeneralHasValidGeoSelection = 11,
        DISPID_SymmetryGeneralComponentSelection = 12,
        DISPID_SymmetryGeneralSuppressed = 13,
        DISPID_SymmetryGeneralComments = 14,
        DISPID_SymmetryGeneralFigures = 15,
        DISPID_SymmetryGeneralAddFigure = 16,
        DISPID_SymmetryGeneralAddComment = 17,
        DISPID_SymmetryGeneralGeometryDefineBy = 18,
        DISPID_SymmetryGeneralSymmetryType = 19,
        DISPID_SymmetryGeneralAutoSymmetry = 20,
        DISPID_SymmetryGeneralLocalCoordinates = 21,
        DISPID_SymmetryGeneralNormalDirection = 22,
        DISPID_SymmetryGeneralComponentSelection2 = 23,
        DISPID_SymmetryGeneralSourceGeometry = 24,
        DISPID_SymmetryGeneralTargetGeometry = 25,
        DISPID_SymmetryGeneralImages = 26,
        DISPID_SymmetryGeneralAddImage = 27,
        DISPID_SymmetryGeneralFlipHighLow = 28,
        DISPID_SymmetryGeneralPeriodicLinearShift = 29,
        DISPID_SymmetryGeneralUnitTypeByDispid = 30,
        DISPID_SymmetryGeneralUnitStringByDispid = 31,
        DISPID_SymmetryGeneralParamNameByDispid = 32,
        DISPID_SymmetryGeneralNumSectors = 33,
        DISPID_SymmetryGeneralDistanceTolerance = 34,
        DISPID_SymmetryGeneralAngleTolerance = 35,
        DISPID_SymmetryGeneralAutomaticNodeRotation = 36
    } kDispId_SymmetryGeneral;

    [
      odl,
      uuid(4ACBAE02-E9E0-4176-8ED4-55CCF34FAFBC),
      helpstring("IDSSymmetryGeneralAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSSymmetryGeneralAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x00000012), propget, helpstring("property GeometryDefineBy")]
        HRESULT GeometryDefineBy([out, retval] DSGeometryDefineByType* pVal);
        [id(0x00000012), propput, helpstring("property GeometryDefineBy")]
        HRESULT GeometryDefineBy([in] DSGeometryDefineByType pVal);
        [id(0x0000000c), propget, helpstring("property ComponentSelection")]
        HRESULT ComponentSelection([out, retval] int* pVal);
        [id(0x0000000c), propput, helpstring("property ComponentSelection")]
        HRESULT ComponentSelection([in] int pVal);
        [id(0x0000000a), propput, helpstring("property GeometrySelection")]
        HRESULT GeometrySelection([in] IDispatch* rhs);
        [id(0x00000017), propget, helpstring("property ComponentSelection2")]
        HRESULT ComponentSelection2([out, retval] int* pVal);
        [id(0x00000017), propput, helpstring("property ComponentSelection2")]
        HRESULT ComponentSelection2([in] int pVal);
        [id(0x00000018), propput, helpstring("property SourceGeometry")]
        HRESULT SourceGeometry([in] IDispatch* rhs);
        [id(0x00000019), propput, helpstring("property TargetGeometry")]
        HRESULT TargetGeometry([in] IDispatch* rhs);
        [id(0x0000000b), propget, helpstring("property HasValidGeoSelection")]
        HRESULT HasValidGeoSelection([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000000d), propget, helpstring("property Suppressed")]
        HRESULT Suppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000000d), propput, helpstring("property Suppressed")]
        HRESULT Suppressed([in] VARIANT_BOOL pVal);
        [id(0x0000000e), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x0000000f), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x00000011), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x00000010), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x00000013), propget, helpstring("property SymmetryType")]
        HRESULT SymmetryType([out, retval] DSSymmetryType* pVal);
        [id(0x00000013), propput, helpstring("property SymmetryType")]
        HRESULT SymmetryType([in] DSSymmetryType pVal);
        [id(0x00000014), propget, helpstring("property AutoSymmetry")]
        HRESULT AutoSymmetry([out, retval] DSAutoOrMan* pVal);
        [id(0x00000014), propput, helpstring("property AutoSymmetry")]
        HRESULT AutoSymmetry([in] DSAutoOrMan pVal);
        [id(0x00000015), propget, helpstring("property LocalCoordinates")]
        HRESULT LocalCoordinates([out, retval] int* pVal);
        [id(0x00000015), propput, helpstring("property LocalCoordinates")]
        HRESULT LocalCoordinates([in] int pVal);
        [id(0x00000016), propget, helpstring("property SymmetryNormalDirection")]
        HRESULT SymmetryNormalDirection([out, retval] int* pVal);
        [id(0x00000016), propput, helpstring("property SymmetryNormalDirection")]
        HRESULT SymmetryNormalDirection([in] int pVal);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
        [id(0x0000001a), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x0000001b), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x0000001c), helpstring("method FlipHighLow")]
        HRESULT FlipHighLow([out, retval] IDispatch** pDisp);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x0000001d), propget, helpstring("property PeriodicLinearShift")]
        HRESULT PeriodicLinearShift([out, retval] double* pVal);
        [id(0x0000001d), propput, helpstring("property PeriodicLinearShift")]
        HRESULT PeriodicLinearShift([in] double pVal);
        [id(0x0000001e), propget, helpstring("property UnitTypeByDispid")]
        HRESULT UnitTypeByDispid(
                        [in] int dispid, 
                        [out, retval] int* unitType);
        [id(0x0000001f), propget, helpstring("property UnitStringByDispid")]
        HRESULT UnitStringByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* unitString);
        [id(0x00000020), propget, helpstring("property ParamNameByDispid")]
        HRESULT ParamNameByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* paramName);
        [id(0x00000021), propget, helpstring("property NumSectors")]
        HRESULT NumSectors([out, retval] int* pVal);
        [id(0x00000021), propput, helpstring("property NumSectors")]
        HRESULT NumSectors([in] int pVal);
        [id(0x00000022), propget, helpstring("property DistanceTolerance")]
        HRESULT DistanceTolerance([out, retval] double* pVal);
        [id(0x00000022), propput, helpstring("property DistanceTolerance")]
        HRESULT DistanceTolerance([in] double pVal);
        [id(0x00000023), propget, helpstring("property AngleTolerance")]
        HRESULT AngleTolerance([out, retval] double* pVal);
        [id(0x00000023), propput, helpstring("property AngleTolerance")]
        HRESULT AngleTolerance([in] double pVal);
        [id(0x00000024), propget, helpstring("property AutomaticNodeRotation")]
        HRESULT AutomaticNodeRotation([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000024), propput, helpstring("property AutomaticNodeRotation")]
        HRESULT AutomaticNodeRotation([in] VARIANT_BOOL pVal);
    };

    typedef enum {
        DISPID_ThermalConditionThermalConditionType = 10,
        DISPID_ThermalConditionUniformTemperature = 11,
        DISPID_ThermalConditionThermalEnvironment = 12,
        DISPID_ThermalConditionThermalEnvironmentTime = 13,
        DISPID_ThermalConditionSuppressed = 20,
        DISPID_ThermalConditionComment = 21,
        DISPID_ThermalConditionFigures = 22,
        DISPID_ThermalConditionImages = 23,
        DISPID_ThermalConditionNumSequenceEntries = 30,
        DISPID_ThermalConditionUnitTypeByDispid = 36,
        DISPID_ThermalConditionUnitStringByDispid = 37,
        DISPID_ThermalConditionThermalConditionTypeByIndex = 38,
        DISPID_ThermalConditionUniformTemperatureByIndex = 39,
        DISPID_ThermalConditionThermalEnvironmentByIndex = 40,
        DISPID_ThermalConditionThermalEnvironmentTimeByIndex = 41,
        DISPID_ThermalConditionParamNameByDispid = 42,
        DISPID_ThermalConditionAddFigure = 50,
        DISPID_ThermalConditionAddComment = 51,
        DISPID_ThermalConditionAddSequenceEntry = 52,
        DISPID_ThermalConditionAddImage = 53,
        DISPID_ThermalConditionThermalConditionData = 54,
        DISPID_ThermalConditionDeleteSequenceEntry = 55
    } kDispId_ThermalCondition;

    [
      odl,
      uuid(83866536-DC53-4703-A6DA-49F6CF13C8EE),
      helpstring("IDSThermalConditionAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSThermalConditionAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x0000000a), propget, helpstring("property ThermalConditionType")]
        HRESULT ThermalConditionType([out, retval] DSThermalConditionType* pVal);
        [id(0x0000000a), propput, helpstring("property ThermalConditionType")]
        HRESULT ThermalConditionType([in] DSThermalConditionType pVal);
        [id(0x0000000b), propget, helpstring("property UniformTemperature")]
        HRESULT UniformTemperature([out, retval] double* pVal);
        [id(0x0000000b), propput, helpstring("property UniformTemperature")]
        HRESULT UniformTemperature([in] double pVal);
        [id(0x0000000c), propget, helpstring("property ThermalEnvironment")]
        HRESULT ThermalEnvironment([out, retval] dsid* pVal);
        [id(0x0000000c), propput, helpstring("property ThermalEnvironment")]
        HRESULT ThermalEnvironment([in] dsid pVal);
        [id(0x0000000d), propget, helpstring("property ThermalEnvironmentTime")]
        HRESULT ThermalEnvironmentTime([out, retval] double* pVal);
        [id(0x0000000d), propput, helpstring("property ThermalEnvironmentTime")]
        HRESULT ThermalEnvironmentTime([in] double pVal);
        [id(0x00000014), propget, helpstring("property Suppressed")]
        HRESULT Suppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000014), propput, helpstring("property Suppressed")]
        HRESULT Suppressed([in] VARIANT_BOOL pVal);
        [id(0x00000015), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x00000016), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x0000001e), propget, helpstring("property NumSequenceEntries")]
        HRESULT NumSequenceEntries([out, retval] unsigned int* pVal);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
        [id(0x00000034), helpstring("method AddSequenceEntry")]
        HRESULT AddSequenceEntry([in] int newVal);
        [id(0x00000033), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x00000032), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x00000017), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000035), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00000024), propget, helpstring("property UnitTypeByDispid")]
        HRESULT UnitTypeByDispid(
                        [in] int dispid, 
                        [out, retval] int* unitType);
        [id(0x00000025), propget, helpstring("property UnitStringByDispid")]
        HRESULT UnitStringByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* unitString);
        [id(0x00000036), propget, helpstring("property ThermalConditionData")]
        HRESULT ThermalConditionData([out, retval] IDispatch** ppDisp);
        [id(0x00000037), helpstring("method DeleteSequenceEntry")]
        HRESULT DeleteSequenceEntry([in] int newVal);
        [id(0x00000026), propget, helpstring("property ThermalConditionTypeByIndex")]
        HRESULT ThermalConditionTypeByIndex(
                        [in] int iIndexVal, 
                        [out, retval] DSThermalConditionType* pVal);
        [id(0x00000026), propput, helpstring("property ThermalConditionTypeByIndex")]
        HRESULT ThermalConditionTypeByIndex(
                        [in] int iIndexVal, 
                        [in] DSThermalConditionType pVal);
        [id(0x00000027), propget, helpstring("property UniformTemperatureByIndex")]
        HRESULT UniformTemperatureByIndex(
                        [in] int iIndexVal, 
                        [out, retval] double* pVal);
        [id(0x00000027), propput, helpstring("property UniformTemperatureByIndex")]
        HRESULT UniformTemperatureByIndex(
                        [in] int iIndexVal, 
                        [in] double pVal);
        [id(0x00000028), propget, helpstring("property ThermalEnvironmentByIndex")]
        HRESULT ThermalEnvironmentByIndex(
                        [in] int iIndexVal, 
                        [out, retval] dsid* pVal);
        [id(0x00000028), propput, helpstring("property ThermalEnvironmentByIndex")]
        HRESULT ThermalEnvironmentByIndex(
                        [in] int iIndexVal, 
                        [in] dsid pVal);
        [id(0x00000029), propget, helpstring("property ThermalEnvironmentTimeByIndex")]
        HRESULT ThermalEnvironmentTimeByIndex(
                        [in] int iIndexVal, 
                        [out, retval] double* pVal);
        [id(0x00000029), propput, helpstring("property ThermalEnvironmentTimeByIndex")]
        HRESULT ThermalEnvironmentTimeByIndex(
                        [in] int iIndexVal, 
                        [in] double pVal);
        [id(0x0000002a), propget, helpstring("property ParamNameByDispid")]
        HRESULT ParamNameByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* paramName);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
    };

    typedef enum {
        kThermalConditionUniform = 0,
        kThermalConditionNonUniform = 1,
        kThermalConditionNone = 2
    } DSThermalConditionType;

    typedef enum {
        DISPID_EmagConditionEmagConditionType = 10,
        DISPID_EmagConditionUniformHeat = 11,
        DISPID_EmagConditionEmagEnvironment = 12,
        DISPID_EmagConditionEmagEnvironmentTime = 13,
        DISPID_EmagConditionSuppressed = 20,
        DISPID_EmagConditionComment = 21,
        DISPID_EmagConditionFigures = 22,
        DISPID_EmagConditionImages = 23,
        DISPID_EmagConditionNumSequenceEntries = 30,
        DISPID_EmagConditionUnitTypeByDispid = 36,
        DISPID_EmagConditionUnitStringByDispid = 37,
        DISPID_EmagConditionEmagConditionTypeByIndex = 38,
        DISPID_EmagConditionUniformHeatByIndex = 39,
        DISPID_EmagConditionEmagEnvironmentByIndex = 40,
        DISPID_EmagConditionEmagEnvironmentTimeByIndex = 41,
        DISPID_EmagConditionParamNameByDispid = 42,
        DISPID_EmagConditionAddFigure = 50,
        DISPID_EmagConditionAddComment = 51,
        DISPID_EmagConditionAddSequenceEntry = 52,
        DISPID_EmagConditionAddImage = 53,
        DISPID_EmagConditionEmagConditionData = 54,
        DISPID_EmagConditionDeleteSequenceEntry = 55
    } kDispId_EmagCondition;

    [
      odl,
      uuid(20E25562-F1E0-47B3-9423-6D592452DDEA),
      helpstring("IDSEmagConditionAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSEmagConditionAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x0000000a), propget, helpstring("property EmagConditionType")]
        HRESULT EmagConditionType([out, retval] DSEmagConditionType* pVal);
        [id(0x0000000a), propput, helpstring("property EmagConditionType")]
        HRESULT EmagConditionType([in] DSEmagConditionType pVal);
        [id(0x0000000b), propget, helpstring("property UniformHeat")]
        HRESULT UniformHeat([out, retval] double* pVal);
        [id(0x0000000b), propput, helpstring("property UniformHeat")]
        HRESULT UniformHeat([in] double pVal);
        [id(0x0000000c), propget, helpstring("property EmagEnvironment")]
        HRESULT EmagEnvironment([out, retval] dsid* pVal);
        [id(0x0000000c), propput, helpstring("property EmagEnvironment")]
        HRESULT EmagEnvironment([in] dsid pVal);
        [id(0x0000000d), propget, helpstring("property EmagEnvironmentTime")]
        HRESULT EmagEnvironmentTime([out, retval] double* pVal);
        [id(0x0000000d), propput, helpstring("property EmagEnvironmentTime")]
        HRESULT EmagEnvironmentTime([in] double pVal);
        [id(0x00000014), propget, helpstring("property Suppressed")]
        HRESULT Suppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000014), propput, helpstring("property Suppressed")]
        HRESULT Suppressed([in] VARIANT_BOOL pVal);
        [id(0x00000015), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x00000016), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x0000001e), propget, helpstring("property NumSequenceEntries")]
        HRESULT NumSequenceEntries([out, retval] unsigned int* pVal);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
        [id(0x00000034), helpstring("method AddSequenceEntry")]
        HRESULT AddSequenceEntry([in] int newVal);
        [id(0x00000033), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x00000032), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x00000017), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000035), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00000024), propget, helpstring("property UnitTypeByDispid")]
        HRESULT UnitTypeByDispid(
                        [in] int dispid, 
                        [out, retval] int* unitType);
        [id(0x00000025), propget, helpstring("property UnitStringByDispid")]
        HRESULT UnitStringByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* unitString);
        [id(0x00000036), propget, helpstring("property EmagConditionData")]
        HRESULT EmagConditionData([out, retval] IDispatch** ppDisp);
        [id(0x00000037), helpstring("method DeleteSequenceEntry")]
        HRESULT DeleteSequenceEntry([in] int newVal);
        [id(0x00000026), propget, helpstring("property EmagConditionTypeByIndex")]
        HRESULT EmagConditionTypeByIndex(
                        [in] int iIndexVal, 
                        [out, retval] DSEmagConditionType* pVal);
        [id(0x00000026), propput, helpstring("property EmagConditionTypeByIndex")]
        HRESULT EmagConditionTypeByIndex(
                        [in] int iIndexVal, 
                        [in] DSEmagConditionType pVal);
        [id(0x00000027), propget, helpstring("property UniformHeatByIndex")]
        HRESULT UniformHeatByIndex(
                        [in] int iIndexVal, 
                        [out, retval] double* pVal);
        [id(0x00000027), propput, helpstring("property UniformHeatByIndex")]
        HRESULT UniformHeatByIndex(
                        [in] int iIndexVal, 
                        [in] double pVal);
        [id(0x00000028), propget, helpstring("property EmagEnvironmentByIndex")]
        HRESULT EmagEnvironmentByIndex(
                        [in] int iIndexVal, 
                        [out, retval] dsid* pVal);
        [id(0x00000028), propput, helpstring("property EmagEnvironmentByIndex")]
        HRESULT EmagEnvironmentByIndex(
                        [in] int iIndexVal, 
                        [in] dsid pVal);
        [id(0x00000029), propget, helpstring("property EmagEnvironmentTimeByIndex")]
        HRESULT EmagEnvironmentTimeByIndex(
                        [in] int iIndexVal, 
                        [out, retval] double* pVal);
        [id(0x00000029), propput, helpstring("property EmagEnvironmentTimeByIndex")]
        HRESULT EmagEnvironmentTimeByIndex(
                        [in] int iIndexVal, 
                        [in] double pVal);
        [id(0x0000002a), propget, helpstring("property ParamNameByDispid")]
        HRESULT ParamNameByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* paramName);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
    };

    typedef enum {
        kEmagConditionUniform = 0,
        kEmagConditionNonUniform = 1,
        kEmagConditionNone = 2
    } DSEmagConditionType;

    typedef enum {
        kDependencyUnknown = 0,
        kDependencyInitialConditionEnvironment = 1,
        kDependencyThermalEffectsEnvironment = 2,
        kDependencySolutionCombinationEnvironment = 3,
        kDependencyEmagEffectsEnvironment = 4,
        kDependencyExternalLoadEnvironment = 5
    } DSDependencyType;

    typedef enum {
        kDependencyIteratorAll = 0,
        kDependencyIteratorDescendant = 1,
        kDependencyIteratorAncestor = 2
    } DSDependencyIteratorType;

    [
      odl,
      uuid(ED8F3655-92F5-478B-8E4B-38AD54E4091E),
      helpstring("IDSDependencyIterator Interface")
    ]
    interface IDSDependencyIterator : IUnknown {
        [helpstring("method Init")]
        HRESULT _stdcall Init(int key);
        [helpstring("method getCurrent")]
        HRESULT _stdcall getCurrent([out] int* piCurrent);
        [helpstring("method Next")]
        HRESULT _stdcall Next();
        [helpstring("method getEnd")]
        HRESULT _stdcall getEnd([out] long* pbEnd);
    };

    [
      odl,
      uuid(3601BE28-6BBE-49F3-8EAB-AEECD7E1F94D),
      helpstring("IDSDependencyEdgeIterator Interface")
    ]
    interface IDSDependencyNodeEventArgs : IUnknown {
        [helpstring("method getNode")]
        HRESULT _stdcall getNode([out] int* pVal);
    };

    [
      odl,
      uuid(E24A8939-4706-4A2F-BDF0-DAEE34845317),
      helpstring("IDSDependencyEdgeEventArgs Interface")
    ]
    interface IDSDependencyEdgeEventArgs : IUnknown {
        [helpstring("method getStartNode")]
        HRESULT _stdcall getStartNode([out] int* pVal);
        [helpstring("method getEndNode")]
        HRESULT _stdcall getEndNode([out] int* pVal);
        [helpstring("method getDependency")]
        HRESULT _stdcall getDependency([out] DSDependencyType* pVal);
    };

    [
      odl,
      uuid(4F7AB24E-A07B-4C50-A70F-6619CD1AE671),
      helpstring("IDSDependencyManager Interface")
    ]
    interface IDSDependencyManager : IUnknown {
        [helpstring("method getChildren")]
        HRESULT _stdcall getChildren(
                        [in] int key, 
                        IDSListWrapper* pList, 
                        [optional, defaultvalue(0)] DSDependencyType eType);
        [helpstring("method getParents")]
        HRESULT _stdcall getParents(
                        [in] int key, 
                        IDSListWrapper* pList, 
                        [optional, defaultvalue(0)] DSDependencyType eType);
        [helpstring("method getDependency")]
        HRESULT _stdcall getDependency(
                        [in] int startNode, 
                        [in] int endNode, 
                        [out] DSDependencyType* eType);
        [helpstring("method getIterator")]
        HRESULT _stdcall getIterator(
                        [in] DSDependencyIteratorType eType, 
                        [out] IDSDependencyIterator** pIter);
        [helpstring("method getModel")]
        HRESULT _stdcall getModel([out] int* pVal);
        [helpstring("method setModel")]
        HRESULT _stdcall setModel([in] int newVal);
        [propget, helpstring("property OnNodeAdded")]
        HRESULT _stdcall OnNodeAdded([out] IUnknown** pDelegate);
        [propget, helpstring("property OnNodeRemoved")]
        HRESULT _stdcall OnNodeRemoved([out] IUnknown** pDelegate);
        [propget, helpstring("property OnEdgeAdded")]
        HRESULT _stdcall OnEdgeAdded([out] IUnknown** pDelegate);
        [propget, helpstring("property OnEdgeRemoved")]
        HRESULT _stdcall OnEdgeRemoved([out] IUnknown** pDelegate);
        [helpstring("method initSetLinkedEnvs")]
        HRESULT _stdcall initSetLinkedEnvs([in] int newVal);
        [helpstring("method getIsValidDependency")]
        HRESULT _stdcall getIsValidDependency([in] int key);
    };

    [
      odl,
      uuid(9E18908B-32FD-4DF3-B521-4C2CE878C4CF),
      helpstring("IDSParameterSetHolder Interface"),
      dual,
      oleautomation
    ]
    interface IDSParameterSetItfHolder : IDispatch {
        [id(0x00000001), propget, helpstring("property Version")]
        HRESULT Version([out, retval] int* pVal);
        [id(0x00000002), propget, helpstring("property ParameterSetId")]
        HRESULT ParameterSetId([out, retval] BSTR* pVal);
        [id(0x00000002), propput, helpstring("property ParameterSetId")]
        HRESULT ParameterSetId([in] BSTR pVal);
        [id(0x00000003), helpstring("method Save")]
        HRESULT Save([in] IAnsMultiplatformStream* pMPStream);
        [id(0x00000004), helpstring("method Resume")]
        HRESULT Resume([in] IAnsMultiplatformStream* pMPStream);
        [id(0x00000005), propget, helpstring("property ParameterSetXML")]
        HRESULT ParameterSetXML([out, retval] BSTR* pVal);
        [id(0x00000005), propput, helpstring("property ParameterSetXML")]
        HRESULT ParameterSetXML([in] BSTR pVal);
        [id(0x00000006), helpstring("method Clear")]
        HRESULT Clear();
    };

    [
      odl,
      uuid(53377345-3C15-424F-8205-F662FC370D90),
      helpstring("IParamItfConverter Interface"),
      dual,
      oleautomation
    ]
    interface IParamItfConverter : IDispatch {
        [id(0x00000001), propget, helpstring("property NewParameterManager")]
        HRESULT NewParameterManager([out, retval] IDispatch** ppVal);
        [id(0x00000001), propput, helpstring("property NewParameterManager")]
        HRESULT NewParameterManager([in] IDispatch* ppVal);
        [id(0x00000002), propget, helpstring("property NewParameterSet")]
        HRESULT NewParameterSet([out, retval] IDispatch** ppVal);
        [id(0x00000002), propput, helpstring("property NewParameterSet")]
        HRESULT NewParameterSet([in] IDispatch* ppVal);
        [id(0x00000003), propget, helpstring("property DSTree")]
        HRESULT DSTree([out, retval] IDispatch** ppVal);
        [id(0x00000003), propput, helpstring("property DSTree")]
        HRESULT DSTree([in] IDispatch* ppVal);
        [id(0x00000004), propget, helpstring("property TemplateFilePath")]
        HRESULT TemplateFilePath([out, retval] BSTR* pbstrPath);
        [id(0x00000004), propput, helpstring("property TemplateFilePath")]
        HRESULT TemplateFilePath([in] BSTR pbstrPath);
        [id(0x00000005), helpstring("property Convert")]
        HRESULT Convert([out, retval] BSTR* bsExistingSetId);
        [id(0x00000006), propget, helpstring("property RuleFilePath")]
        HRESULT RuleFilePath([out, retval] BSTR* pbstrPath);
        [id(0x00000006), propput, helpstring("property RuleFilePath")]
        HRESULT RuleFilePath([in] BSTR pbstrPath);
        [id(0x00000007), helpstring("property ResumeParameterTemplates")]
        HRESULT ResumeParameterTemplates();
        [id(0x00000008), helpstring("property GetOldParameterSet")]
        HRESULT GetOldParameterSet([out, retval] IDispatch** ppVal);
    };

    typedef enum {
        DISPID_MeshWrapperSize = 10,
        DISPID_MeshWrapperFeatureAngle = 11,
        DISPID_MeshWrapperAddMeshWrap = 12,
        DISPID_MeshWrapperAddControl = 13,
        DISPID_MeshWrapperState = 15
    } kDispId_MeshWrapperGroup;

    [
      odl,
      uuid(97400000-B8E0-45B8-AF4A-2DC37D566CF2),
      helpstring("IDSMeshWrapperGroupAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSMeshWrapperGroupAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x0000000c), helpstring("method AddMeshWrap")]
        HRESULT AddMeshWrap(
                        [in] IDispatch* piSelectMgrDisp, 
                        [in] int iFrom, 
                        [out, retval] IDispatch** ppVal);
        [id(0x0000000d), helpstring("method AddMeshControl")]
        HRESULT AddMeshControl(
                        [in] IDispatch* piSelectMgrDisp, 
                        [in] int iType, 
                        [out, retval] IDispatch** ppVal);
        [id(0x0000000a), propget, helpstring("property MeshWrapperSize")]
        HRESULT MeshWrapperSize([out, retval] double* pdVal);
        [id(0x0000000a), propput, helpstring("property MeshWrapperSize")]
        HRESULT MeshWrapperSize([in] double pdVal);
        [id(0x0000000b), propget, helpstring("property MeshWrapperFeatureAngle")]
        HRESULT MeshWrapperFeatureAngle([out, retval] double* pdVal);
        [id(0x0000000b), propput, helpstring("property MeshWrapperFeatureAngle")]
        HRESULT MeshWrapperFeatureAngle([in] double pdVal);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
    };

    typedef enum {
        DISPID_MeshWrapFeatureAngle = 10,
        DISPID_MeshWrapBodiesToWrap = 11,
        DISPID_MeshWrapMasterBody = 12,
        DISPID_MeshWrapTurnOnWrap = 13,
        DISPID_MeshWrapSize = 14,
        DISPID_MeshWrapPriority = 15,
        DISPID_MeshWrapSuppressed = 16,
        DISPID_MeshWrapState = 17,
        DISPID_MeshWrapList = 18,
        DISPID_MeshWrapFacesToWrap = 19,
        DISPID_MeshWrapMasterVirtualBody = 20,
        DISPID_MeshWrapOnActive = 21,
        DISPID_MeshWrapOnVirtualBody = 22
    } kDispId_MeshWrap;

    [
      odl,
      uuid(489CC17C-7A47-491B-8E95-DA508076C236),
      helpstring("IDSMeshWrapAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSMeshWrapAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x0000000a), propget, helpstring("property MeshWrapFeatureAngle")]
        HRESULT MeshWrapFeatureAngle([out, retval] double* pdVal);
        [id(0x0000000a), propput, helpstring("property MeshWrapFeatureAngle")]
        HRESULT MeshWrapFeatureAngle([in] double pdVal);
        [id(0x0000000b), propput, helpstring("property MeshWrapBodiesToWrap")]
        HRESULT MeshWrapBodiesToWrap([in] IDispatch* rhs);
        [id(0x0000000c), propput, helpstring("property MeshWrapMasterBody")]
        HRESULT MeshWrapMasterBody([in] IDispatch* rhs);
        [id(0x0000000d), propget, helpstring("property MeshWrapTurnOnWrap")]
        HRESULT MeshWrapTurnOnWrap([out, retval] int* piVal);
        [id(0x0000000d), propput, helpstring("property MeshWrapTurnOnWrap")]
        HRESULT MeshWrapTurnOnWrap([in] int piVal);
        [id(0x0000000e), propget, helpstring("property MeshWrapSize")]
        HRESULT MeshWrapSize([out, retval] double* pdVal);
        [id(0x0000000e), propput, helpstring("property MeshWrapSize")]
        HRESULT MeshWrapSize([in] double pdVal);
        [id(0x0000000f), propget, helpstring("property MeshWrapPriority")]
        HRESULT MeshWrapPriority([out, retval] int* piVal);
        [id(0x0000000f), propput, helpstring("property MeshWrapPriority")]
        HRESULT MeshWrapPriority([in] int piVal);
        [id(0x00000010), propget, helpstring("property Suppressed")]
        HRESULT Suppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000010), propput, helpstring("property Suppressed")]
        HRESULT Suppressed([in] VARIANT_BOOL pVal);
        [id(0x60020013), helpstring("method isSuppressed")]
        HRESULT isSuppressed([out, retval] char* pbIsSuppressed);
        [id(0x00000013), propput, helpstring("property MeshWrapFacesToWrap")]
        HRESULT MeshWrapFacesToWrap([in] IDispatch* rhs);
        [id(0x00000014), propget, helpstring("property MeshWrapMasterVirtualBody")]
        HRESULT MeshWrapMasterVirtualBody([out, retval] unsigned int* pVal);
        [id(0x00000014), propput, helpstring("property MeshWrapMasterVirtualBody")]
        HRESULT MeshWrapMasterVirtualBody([in] unsigned int pVal);
        [id(0x00000015), propget, helpstring("property OnActive")]
        HRESULT OnActive([out, retval] int* plVal);
        [id(0x00000015), propput, helpstring("property OnActive")]
        HRESULT OnActive([in] int plVal);
        [id(0x00000016), propget, helpstring("property MeshWrapOnVirtualBody")]
        HRESULT MeshWrapOnVirtualBody([out, retval] int* piVal);
        [id(0x00000016), propput, helpstring("property MeshWrapOnVirtualBody")]
        HRESULT MeshWrapOnVirtualBody([in] int piVal);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
    };

    typedef enum {
        DISPID_MeshRenumberingControlGroupNodeOffset = 10,
        DISPID_MeshRenumberingControlGroupElementOffset = 11,
        DISPID_MeshRenumberingControlGroupSuppressed = 12,
        DISPID_MeshRenumberingControlGroupAddControl = 13,
        DISPID_MeshRenumberingControlGroupRenumberMesh = 14,
        DISPID_MeshRenumberingControlGroupAddComment = 15,
        DISPID_MeshRenumberingControlGroupAddFigure = 16,
        DISPID_MeshRenumberingControlGroupStateUpdate = 17,
        DISPID_MeshRenumberingControlGroupComments = 18,
        DISPID_MeshRenumberingControlGroupFigures = 19,
        DISPID_MeshRenumberingControlGroupImages = 20,
        DISPID_MeshRenumberingControlGroupAddImage = 21,
        DISPID_MeshRenumberingControlGroupCondenseNodes = 22,
        DISPID_MeshRenumberingControlGroupUserAbort = 23
    } kDispId_MeshRenumberingControlGroup;

    [
      odl,
      uuid(77D35CAE-42F0-4077-B8B8-4B3D6D787C0F),
      helpstring("IDSMeshRenumberingControlGroupAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSMeshRenumberingControlGroupAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x0000000a), propget, helpstring("property NodeOffset")]
        HRESULT NodeOffset([out, retval] unsigned int* pulNodeOffset);
        [id(0x0000000a), propput, helpstring("property NodeOffset")]
        HRESULT NodeOffset([in] unsigned int pulNodeOffset);
        [id(0x0000000b), propget, helpstring("property ElementOffset")]
        HRESULT ElementOffset([out, retval] unsigned int* pulElementOffset);
        [id(0x0000000b), propput, helpstring("property ElementOffset")]
        HRESULT ElementOffset([in] unsigned int pulElementOffset);
        [id(0x0000000c), propget, helpstring("property Suppressed")]
        HRESULT Suppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000000c), propput, helpstring("property Suppressed")]
        HRESULT Suppressed([in] VARIANT_BOOL pVal);
        [id(0x0000000d), helpstring("method AddMeshRenumberingControl")]
        HRESULT AddMeshRenumberingControl(
                        [in] IDispatch* piSelectMgr, 
                        [out, retval] IDispatch** pDisp);
        [id(0x0000000e), helpstring("method RenumberMesh")]
        HRESULT RenumberMesh();
        [id(0x0000000f), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x00000010), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x00000012), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x00000013), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x00000014), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000015), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00000016), propget, helpstring("property CondenseNodes")]
        HRESULT CondenseNodes([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000016), propput, helpstring("property CondenseNodes")]
        HRESULT CondenseNodes([in] VARIANT_BOOL pVal);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x00000017), propget, helpstring("property UserAbort")]
        HRESULT UserAbort([out, retval] VARIANT_BOOL* pVal);
    };

    typedef enum {
        DISPID_MeshRenumberingControlGeometryDefineBy = 10,
        DISPID_MeshRenumberingControlGeometrySelection = 11,
        DISPID_MeshRenumberingControlBeginNodeNumber = 12,
        DISPID_MeshRenumberingControlEndNodeNumber = 13,
        DISPID_MeshRenumberingControlBeginElementNumber = 14,
        DISPID_MeshRenumberingControlEndElementNumber = 15,
        DISPID_MeshRenumberingControlNodeNumber = 16,
        DISPID_MeshRenumberingControlListViewUpdate = 17,
        DISPID_MeshRenumberingControlRemotePointSelection = 18,
        DISPID_MeshRenumberingControlSuppressed = 19,
        DISPID_MeshRenumberingControlStateUpdate = 20,
        DISPID_MeshRenumberingControlRename = 21,
        DISPID_MeshRenumberingControlAddComment = 22,
        DISPID_MeshRenumberingControlAddFigure = 23,
        DISPID_MeshRenumberingControlComments = 24,
        DISPID_MeshRenumberingControlFigures = 25,
        DISPID_MeshRenumberingControlImages = 26,
        DISPID_MeshRenumberingControlAddImage = 27
    } kDispId_MeshRenumberingControl;

    [
      odl,
      uuid(C9179F96-D841-43EC-AC98-4E61A6A5EB5E),
      helpstring("IDSBodyMeshRenumberingControlAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSMeshRenumberingControlAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x0000000a), propget, helpstring("property GeometryDefineBy")]
        HRESULT GeometryDefineBy([out, retval] DSGeometryDefineByType* pVal);
        [id(0x0000000a), propput, helpstring("property GeometryDefineBy")]
        HRESULT GeometryDefineBy([in] DSGeometryDefineByType pVal);
        [id(0x0000000c), propget, helpstring("property BeginNodeNumber")]
        HRESULT BeginNodeNumber([out, retval] unsigned int* pulBeginNodeId);
        [id(0x0000000c), propput, helpstring("property BeginNodeNumber")]
        HRESULT BeginNodeNumber([in] unsigned int pulBeginNodeId);
        [id(0x0000000d), propget, helpstring("property EndNodeNumber")]
        HRESULT EndNodeNumber([out, retval] unsigned int* pulEndNodeId);
        [id(0x0000000d), propput, helpstring("property EndNodeNumber")]
        HRESULT EndNodeNumber([in] unsigned int pulEndNodeId);
        [id(0x0000000e), propget, helpstring("property BeginElementNumber")]
        HRESULT BeginElementNumber([out, retval] unsigned int* pulBeginElementNumber);
        [id(0x0000000e), propput, helpstring("property BeginElementNumber")]
        HRESULT BeginElementNumber([in] unsigned int pulBeginElementNumber);
        [id(0x0000000f), propget, helpstring("property EndElementNumber")]
        HRESULT EndElementNumber([out, retval] unsigned int* pulEndElementNumber);
        [id(0x0000000f), propput, helpstring("property EndElementNumber")]
        HRESULT EndElementNumber([in] unsigned int pulEndElementNumber);
        [id(0x00000010), propget, helpstring("property NodeNumber")]
        HRESULT NodeNumber([out, retval] unsigned int* pulNodeId);
        [id(0x00000010), propput, helpstring("property NodeNumber")]
        HRESULT NodeNumber([in] unsigned int pulNodeId);
        [id(0x0000000b), propput, helpstring("property GeometrySelection")]
        HRESULT GeometrySelection([in] IDispatch* rhs);
        [id(0x00000012), propget, helpstring("property RemotePointSelection")]
        HRESULT RemotePointSelection([out, retval] dsid* pVal);
        [id(0x00000012), propput, helpstring("property RemotePointSelection")]
        HRESULT RemotePointSelection([in] dsid pVal);
        [id(0x00000013), propget, helpstring("property Suppressed")]
        HRESULT Suppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000013), propput, helpstring("property Suppressed")]
        HRESULT Suppressed([in] VARIANT_BOOL pVal);
        [id(0x00000016), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x00000017), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x00000018), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x00000019), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x0000001a), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x0000001b), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
    };

    typedef enum {
        DISPID_ThicknessAnsBCType = 10,
        DISPID_ThicknessLoadVariation = 11,
        DISPID_ThicknessDataViewType = 12,
        DISPID_ThicknessVariationType = 13,
        DISPID_ThicknessVariationData = 14,
        DISPID_ThicknessUnitTypeByDispid = 15,
        DISPID_ThicknessUnitStringByDispid = 16,
        DISPID_ThicknessGeometryDefineBy = 17,
        DISPID_ThicknessGeometrySelection = 18,
        DISPID_ThicknessComponentSelection = 19,
        DISPID_ThicknessThickness = 20,
        DISPID_ThicknessTabularDataIndependentVariable = 21,
        DISPID_ThicknessPrimaryCoordinateSysIDForXYZ = 22,
        DISPID_ThicknessFunctionUnitSystem = 23,
        DISPID_ThicknessFunctionAngleMeasure = 24,
        DISPID_ThicknessFunctionNumberOfSegments = 25,
        DISPID_ThicknessFunctionRangeMin = 26,
        DISPID_ThicknessFunctionRangeMax = 27,
        DISPID_ThicknessHasValidGeoSelection = 28,
        DISPID_ThicknessSuppressed = 29,
        DISPID_ThicknessScopeMode = 30,
        DISPID_ThicknessAddComment = 31,
        DISPID_ThicknessAddFigure = 32,
        DISPID_ThicknessAddImage = 33,
        DISPID_ThicknessComment = 34,
        DISPID_ThicknessFigure = 35,
        DISPID_ThicknessImages = 36,
        DISPID_ThicknessIsAttachedToReference = 37,
        DISPID_ThicknessShellOffsetType = 38,
        DISPID_ThicknessMembraneOffset = 39,
        DISPID_ThicknessCoordinateSystemSelection = 40,
        DISPID_ThicknessLayersDefinition = 42,
        DISPID_ThicknessLayerToDisplay = 43,
        DISPID_ThicknessGetThicknessType = 44,
        DISPID_ThicknessTotalThickness = 45,
        DISPID_ThicknessTotalMass = 46,
        DISPID_ThicknessLayerInfoThicknessByIndex = 47,
        DISPID_ThicknessLayerInfoAngleByIndex = 48,
        DISPID_ThicknessLayerInfoMaterialByIndex = 49,
        DISPID_ThicknessAddLayer = 50,
        DISPID_ThicknessRemoveLayer = 51,
        DISPID_ThicknessInsertLayer = 52,
        DISPID_ThicknessNumberLayers = 53,
        DISPID_ThicknessParamNameByDispid = 54,
        DISPID_ThicknessNonlinearMaterialEffects = 55,
        DISPID_ThicknessThermalStrainCalculation = 56,
        DISPID_ThicknessLayerInfoMaterialGUIDByIndex = 58,
        DISPID_ThicknessAddLayerbyGUID = 59
    } kDispId_Thickness;

    [
      odl,
      uuid(36750020-DFD4-4478-8FFB-3636C505E03D),
      helpstring("IDSThicknessAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSThicknessAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x0000000a), propget, helpstring("method AnsBCType")]
        HRESULT AnsBCType([out, retval] int* pVal);
        [id(0x0000000b), propget, helpstring("property LoadVariation")]
        HRESULT LoadVariation(
                        [in] int ComponentPosition, 
                        [out, retval] IDispatch** ppDisp);
        [id(0x0000000c), propget, helpstring("property DataViewType ")]
        HRESULT DataViewType(
                        [in] int iAnsBCLVType, 
                        [out, retval] int* pVal);
        [id(0x0000000d), propget, helpstring("property VariationType")]
        HRESULT VariationType([out, retval] kLoadVariationType* pVal);
        [id(0x0000000d), propput, helpstring("property VariationType")]
        HRESULT VariationType([in] kLoadVariationType pVal);
        [id(0x0000000e), propget, helpstring("property VariationData")]
        HRESULT VariationData([out, retval] IDispatch** ppDisp);
        [id(0x0000000e), propput, helpstring("property VariationData")]
        HRESULT VariationData([in] IDispatch* ppDisp);
        [id(0x0000000f), propget, helpstring("property UnitTypeByDispid")]
        HRESULT UnitTypeByDispid(
                        [in] int dispid, 
                        [out, retval] int* unitType);
        [id(0x00000010), propget, helpstring("property UnitStringByDispid")]
        HRESULT UnitStringByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* unitString);
        [id(0x00000011), propget, helpstring("property GeometryDefineBy")]
        HRESULT GeometryDefineBy([out, retval] DSGeometryDefineByType* pVal);
        [id(0x00000011), propput, helpstring("property GeometryDefineBy")]
        HRESULT GeometryDefineBy([in] DSGeometryDefineByType pVal);
        [id(0x00000012), propput, helpstring("property GeometrySelection")]
        HRESULT GeometrySelection([in] IDispatch* rhs);
        [id(0x00000013), propget, helpstring("property ComponentSelection")]
        HRESULT ComponentSelection([out, retval] int* pVal);
        [id(0x00000013), propput, helpstring("property ComponentSelection")]
        HRESULT ComponentSelection([in] int pVal);
        [id(0x00000014), propget, helpstring("property Thickness")]
        HRESULT Thickness([out, retval] VARIANT* pVal);
        [id(0x00000014), propput, helpstring("property Thickness")]
        HRESULT Thickness([in] VARIANT pVal);
        [id(0x00000015), propget, helpstring("property TabularDataIndependentVariable")]
        HRESULT TabularDataIndependentVariable([out, retval] int* iVarEnum);
        [id(0x00000015), propput, helpstring("property TabularDataIndependentVariable")]
        HRESULT TabularDataIndependentVariable([in] int iVarEnum);
        [id(0x00000017), propget, helpstring("property FunctionUnitSystem")]
        HRESULT FunctionUnitSystem([out, retval] VARIANT* vtVal);
        [id(0x00000017), propput, helpstring("property FunctionUnitSystem")]
        HRESULT FunctionUnitSystem([in] VARIANT vtVal);
        [id(0x00000018), propget, helpstring("property FunctionAngleMeasure")]
        HRESULT FunctionAngleMeasure([out, retval] VARIANT* vtVal);
        [id(0x00000018), propput, helpstring("property FunctionAngleMeasure")]
        HRESULT FunctionAngleMeasure([in] VARIANT vtVal);
        [id(0x00000019), propget, helpstring("property FunctionNumberOfSegments")]
        HRESULT FunctionNumberOfSegments([out, retval] int* pVal);
        [id(0x00000019), propput, helpstring("property FunctionNumberOfSegments")]
        HRESULT FunctionNumberOfSegments([in] int pVal);
        [id(0x0000001a), propget, helpstring("property FunctionRangeMin")]
        HRESULT FunctionRangeMin([out, retval] double* dVal);
        [id(0x0000001a), propput, helpstring("property FunctionRangeMin")]
        HRESULT FunctionRangeMin([in] double dVal);
        [id(0x0000001b), propget, helpstring("property FunctionRangeMax")]
        HRESULT FunctionRangeMax([out, retval] double* dVal);
        [id(0x0000001b), propput, helpstring("property FunctionRangeMax")]
        HRESULT FunctionRangeMax([in] double dVal);
        [id(0x0000001d), propget, helpstring("property Suppressed")]
        HRESULT Suppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000001d), propput, helpstring("property Suppressed")]
        HRESULT Suppressed([in] VARIANT_BOOL pVal);
        [id(0x0000001c), propget, helpstring("property HasValidGeoSelection")]
        HRESULT HasValidGeoSelection([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000001e), propget, helpstring("property ScopeMode")]
        HRESULT ScopeMode([out, retval] DSAutoOrMan* pVal);
        [id(0x0000001f), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x00000020), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x00000021), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00000022), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x00000023), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x00000024), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000025), propget, helpstring("property IsAttachedToReference")]
        HRESULT IsAttachedToReference(
                        [in] unsigned int RefId, 
                        [out, retval] VARIANT_BOOL* pVal);
        [id(0x00000026), propget, helpstring("method to get the shell offset type")]
        HRESULT ShellOffset([out, retval] DSShellOffsetType* piVal);
        [id(0x00000026), propput, helpstring("method to get the shell offset type")]
        HRESULT ShellOffset([in] DSShellOffsetType piVal);
        [id(0x00000027), propget, helpstring("method to get the membrane offset")]
        HRESULT MembraneOffset([out, retval] double* pdVal);
        [id(0x00000027), propput, helpstring("method to get the membrane offset")]
        HRESULT MembraneOffset([in] double pdVal);
        [id(0x0000002a), propput, helpstring("property LayersDefinition")]
        HRESULT LayersDefinition([in] IDispatch* rhs);
        [id(0x00000037), propget, helpstring("property NonlinearMaterialEffects")]
        HRESULT NonlinearMaterialEffects([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000037), propput, helpstring("property NonlinearMaterialEffects")]
        HRESULT NonlinearMaterialEffects([in] VARIANT_BOOL pVal);
        [id(0x00000038), propget, helpstring("property ThermalStrainCalculation")]
        HRESULT ThermalStrainCalculation([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000038), propput, helpstring("property ThermalStrainCalculation")]
        HRESULT ThermalStrainCalculation([in] VARIANT_BOOL pVal);
        [id(0x0000002b), propget, helpstring("property LayerToDisplay")]
        HRESULT LayerToDisplay([out, retval] int* pVal);
        [id(0x0000002b), propput, helpstring("property LayerToDisplay")]
        HRESULT LayerToDisplay([in] int pVal);
        [id(0x0000002c), helpstring("method GetThicknessType")]
        HRESULT GetThicknessType([out, retval] int* pVal);
        [id(0x0000002d), propget, helpstring("method to get the total thickness")]
        HRESULT TotalThickness([out, retval] double* pdVal);
        [id(0x0000002e), propget, helpstring("method to get the total mass")]
        HRESULT TotalMass([out, retval] double* pdVal);
        [id(0x00000028), propget, helpstring("property CoordinateSystemSelection")]
        HRESULT CoordinateSystemSelection([out, retval] dsid* pVal);
        [id(0x00000028), propput, helpstring("property CoordinateSystemSelection")]
        HRESULT CoordinateSystemSelection([in] dsid pVal);
        [id(0x0000002f), propput, helpstring("method to set thickness of a layer")]
        HRESULT ThicknessLayerInfoThicknessByIndex(
                        [in] int iIndexVal, 
                        [in] double pVal);
        [id(0x0000002f), propget, helpstring("method to set thickness of a layer")]
        HRESULT ThicknessLayerInfoThicknessByIndex(
                        [in] int iIndexVal, 
                        [out, retval] double* pVal);
        [id(0x00000030), propput, helpstring("method to set angle of a layer")]
        HRESULT ThicknessLayerInfoAngleByIndex(
                        [in] int iIndexVal, 
                        [in] double pVal);
        [id(0x00000030), propget, helpstring("method to set angle of a layer")]
        HRESULT ThicknessLayerInfoAngleByIndex(
                        [in] int iIndexVal, 
                        [out, retval] double* pVal);
        [id(0x00000031), propput, helpstring("method to set material of a layer")]
        HRESULT ThicknessLayerInfoMaterialByIndex(
                        [in] int iIndexVal, 
                        [in] BSTR pVal);
        [id(0x00000031), propget, helpstring("method to set material of a layer")]
        HRESULT ThicknessLayerInfoMaterialByIndex(
                        [in] int iIndexVal, 
                        [out, retval] BSTR* pVal);
        [id(0x00000032), helpstring("method to add layer")]
        HRESULT ThicknessAddLayer(
                        [in] BSTR MaterialName, 
                        [in] double Thickness, 
                        [in] double angle);
        [id(0x00000033), helpstring("method to remove layer")]
        HRESULT ThicknessRemoveLayer([in] int iIndexVal);
        [id(0x00000034), helpstring("method to insert layer")]
        HRESULT ThicknessInsertLayer(
                        [in] BSTR materialId, 
                        [in] double Thickness, 
                        [in] double angle, 
                        [in] int iIndexVal);
        [id(0x00000035), propget, helpstring("method to get number of layers")]
        HRESULT ThicknessNumberLayers([out, retval] int* pVal);
        [id(0x00000036), propget, helpstring("property ParamNameByDispid")]
        HRESULT ParamNameByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* paramName);
        [id(0x0000003a), propput, helpstring("method to set material guid of a layer")]
        HRESULT ThicknessLayerInfoMaterialGUIDByIndex(
                        [in] int iIndexVal, 
                        [in] BSTR pVal);
        [id(0x0000003a), propget, helpstring("method to set material guid of a layer")]
        HRESULT ThicknessLayerInfoMaterialGUIDByIndex(
                        [in] int iIndexVal, 
                        [out, retval] BSTR* pVal);
        [id(0x0000003b), helpstring("method to add layer using material GUID")]
        HRESULT ThicknessAddLayerbyGUID(
                        [in] BSTR materialId, 
                        [in] double Thickness, 
                        [in] double angle);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x00000016), propget, helpstring("property PrimaryCoordinateSysIDForXYZ")]
        HRESULT PrimaryCoordinateSysIDForXYZ([out, retval] dsid* pVal);
    };

    typedef enum {
        DISPID_MappingValidationComments = 10,
        DISPID_MappingValidationFigures = 11,
        DISPID_MappingValidationImages = 12,
        DISPID_MappingValidationFileIdentifierIndex = 13,
        DISPID_MappingValidationAddComment = 20,
        DISPID_MappingValidationAddFigure = 21,
        DISPID_MappingValidationAddImage = 22,
        DISPID_MappingValidationAnalyze = 23,
        DISPID_MappingValidationValidationObject = 24,
        DISPID_MappingValidationSettings = 25,
        DISPID_MappingValidationAnalyzeFailed = 26,
        DISPID_MappingValidationClean = 27,
        DISPID_MappingValidationCreateTabbedFile = 28,
        DISPID_MappingValidationValidationType = 29,
        DISPID_MappingValidationDisplayOnParent = 30,
        DISPID_MappingValidationDefineActiveSequenceBy = 31,
        DISPID_MappingValidationActiveSequence = 32,
        DISPID_MappingValidationActiveSequenceByValue = 33,
        DISPID_MappingValidationDisplayDataType = 34,
        DISPID_MappingValidationDisplayComponentType = 35,
        DISPID_MappingValidationDisplayRealImaginaryDataType = 36,
        DISPID_MappingValidationDisplayShellFace = 37,
        DISPID_MappingValidationBoundingTolerance = 38,
        DISPID_MappingValidationMeshLayer = 39
    } kDispId_MappingValidation;

    [
      odl,
      uuid(2A0E70C1-8FE7-4C42-8D69-A0C7164B08E9),
      helpstring("IDSMappingValidationAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSMappingValidationAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
        [id(0x0000000a), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x0000000b), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x0000000c), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000014), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x00000015), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x00000016), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00000017), helpstring("method Analyze")]
        HRESULT Analyze(IAnsProgress* piProgress);
        [id(0x00000018), propget, helpstring("property ValidationObject")]
        HRESULT ValidationObject([out, retval] IDispatch** ppDisp);
        [id(0x00000019), propget, helpstring("property ValidationSettings")]
        HRESULT ValidationSettings([out, retval] IDispatch** ppDisp);
        [id(0x0000001b), helpstring("method Clean")]
        HRESULT Clean();
        [id(0x0000001c), helpstring("method CreateTabbedFile")]
        HRESULT CreateTabbedFile(
                        [in] BSTR filePath, 
                        [out, retval] BSTR* fileText);
        [id(0x0000000d), propget, helpstring("property FileIdentifier")]
        HRESULT FileIdentifierIndex([out, retval] int* pVal);
        [id(0x0000000d), propput, helpstring("property FileIdentifier")]
        HRESULT FileIdentifierIndex([in] int pVal);
        [id(0x0000001d), propget, helpstring("property ValidationType")]
        HRESULT ValidationType([out, retval] int* pVal);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x0000001e), propget, helpstring("property Tag")]
        HRESULT DisplayOnParent([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000001e), propput, helpstring("property Tag")]
        HRESULT DisplayOnParent([in] VARIANT_BOOL pVal);
        [id(0x00000026), propget, helpstring("property Tag")]
        HRESULT BoundingTolerance([out, retval] double* pVal);
        [id(0x00000026), propput, helpstring("property Tag")]
        HRESULT BoundingTolerance([in] double pVal);
    };

    typedef enum {
        DISPID_MeshMethod = 10,
        DISPID_GasketSourceGeometrySelection = 11,
        DISPID_GasketTargetGeometrySelection = 12,
        DISPID_ElementOrderSelection = 13,
        DISPID_GasketSourceTargetSelection = 14,
        DISPID_GasketFaceSweepShape = 15
    } kDispId_Gasket;

    [
      odl,
      uuid(078CC8A8-F2FE-422A-B8E7-7AF76946FF63),
      helpstring("IDSGasketAuto Interface")
    ]
    interface IDSGasketAuto : IDispatch {
        [propget, helpstring("property Name")]
        HRESULT _stdcall Name([out, retval] BSTR* pVal);
        [propput, helpstring("property Name")]
        HRESULT _stdcall Name([in] BSTR pVal);
        [propget, helpstring("property ID")]
        HRESULT _stdcall ID([out, retval] int* pVal);
        [propget, helpstring("property Class")]
        HRESULT _stdcall Class([out, retval] int* pVal);
        [propget, helpstring("property Parent")]
        HRESULT _stdcall Parent([out, retval] IDispatch** pDisp);
        [propget, helpstring("property Children")]
        HRESULT _stdcall Children([out, retval] IDispatch** pDisp);
        [propget, helpstring("property Parameters")]
        HRESULT _stdcall Parameters([out, retval] IDispatch** ppDisp);
        [propget, helpstring("property State")]
        HRESULT _stdcall State([out, retval] eObjectState* pVal);
        [propget, helpstring("property MeshMethod")]
        HRESULT _stdcall MeshMethod([out, retval] int* pVal);
        [propput, helpstring("property MeshMethod")]
        HRESULT _stdcall MeshMethod([in] int pVal);
        [propget, helpstring("property FaceMeshType")]
        HRESULT _stdcall FaceMeshType([out, retval] int* pfaceMeshType);
        [propput, helpstring("property FaceMeshType")]
        HRESULT _stdcall FaceMeshType([in] int pfaceMeshType);
        [propget, helpstring("property SrcTrgSelection")]
        HRESULT _stdcall SrcTrgSelection([out, retval] DSSourceTargetSelection* pSrcTrgSelection);
        [propput, helpstring("property SrcTrgSelection")]
        HRESULT _stdcall SrcTrgSelection([in] DSSourceTargetSelection pSrcTrgSelection);
        [propget, helpstring("property ElementOrder")]
        HRESULT _stdcall ElementOrder([out, retval] DSElementOrder* pElementOrder);
        [propput, helpstring("property ElementOrder")]
        HRESULT _stdcall ElementOrder([in] DSElementOrder pElementOrder);
        [propget, helpstring("property SourceGeometry")]
        HRESULT _stdcall SourceGeometry([out, retval] BSTR* pVal);
        [propput, helpstring("property SourceGeometry")]
        HRESULT _stdcall SourceGeometry([in] IDispatch* pVal);
        [propget, helpstring("property TargetGeometry")]
        HRESULT _stdcall TargetGeometry([out, retval] BSTR* pVal);
        [propput, helpstring("property TargetGeometry")]
        HRESULT _stdcall TargetGeometry([in] IDispatch* pVal);
        [propget, helpstring("property Tag")]
        HRESULT _stdcall Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [propput, helpstring("property Tag")]
        HRESULT _stdcall Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [helpstring("method AddTag")]
        HRESULT _stdcall AddTag([in] BSTR newVal);
        [helpstring("method RemoveTag")]
        HRESULT _stdcall RemoveTag([in] BSTR tagToRemove);
        [propget, helpstring("property IsTagInUse")]
        HRESULT _stdcall IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [propget, helpstring("TagCount")]
        HRESULT _stdcall TagCount([out, retval] unsigned int* pVal);
    };

    typedef enum {
        kManualSource = 1,
        kManualSourceTarget = 2
    } DSSourceTargetSelection;

    typedef enum {
        kProgramControlled = 0,
        kMidSideNodesDropped = 1,
        kMidSideNodesKept = 2
    } DSElementOrder;

    typedef enum {
        DISPID_AllSectionDeformation = 10,
        DISPID_RadialExpansion = 11,
        DISPID_Ovalization = 12,
        DISPID_Warping = 13,
        DISPID_ShellRotationA = 14,
        DISPID_ShellRotationT = 15,
        DISPID_PipeIdealizationGeometryDefineBy = 16,
        DISPID_PipeIdealizationGeometrySelection = 17,
        DISPID_PipeIdealizationComponentSelection = 18,
        DISPID_PipeIdealizationHasValidGeoSelection = 19,
        DISPID_PipeIdealizationSuppressed = 20,
        DISPID_PipeIdealizationFormulation = 21,
        DISPID_PipeIdealizationGrowElementsBy = 22,
        DISPID_PipeIdealizationFactor = 23,
        DISPID_PipeIdealizationNumElements = 24,
        DISPID_PipeIdealizationLength = 25
    } kDispId_PipeIdealization;

    [
      odl,
      uuid(932B5A9E-34EB-4A7A-B68C-DB86ACB479AD),
      helpstring("IDSPipeIdealizationAuto Interface")
    ]
    interface IDSPipeIdealizationAuto : IDispatch {
        [propget, helpstring("property Name")]
        HRESULT _stdcall Name([out, retval] BSTR* pVal);
        [propput, helpstring("property Name")]
        HRESULT _stdcall Name([in] BSTR pVal);
        [propget, helpstring("property ID")]
        HRESULT _stdcall ID([out, retval] int* pVal);
        [propget, helpstring("property Class")]
        HRESULT _stdcall Class([out, retval] int* pVal);
        [propget, helpstring("property Parent")]
        HRESULT _stdcall Parent([out, retval] IDispatch** pDisp);
        [propget, helpstring("property Children")]
        HRESULT _stdcall Children([out, retval] IDispatch** pDisp);
        [propget, helpstring("property Parameters")]
        HRESULT _stdcall Parameters([out, retval] IDispatch** ppDisp);
        [propget, helpstring("property State")]
        HRESULT _stdcall State([out, retval] eObjectState* pVal);
        [propget, helpstring("property GeometryDefineBy")]
        HRESULT _stdcall GeometryDefineBy([out, retval] DSGeometryDefineByType* pVal);
        [propput, helpstring("property GeometryDefineBy")]
        HRESULT _stdcall GeometryDefineBy([in] DSGeometryDefineByType pVal);
        [propput, helpstring("property GeometrySelection")]
        HRESULT _stdcall GeometrySelection([in] IDispatch* rhs);
        [propget, helpstring("property ComponentSelection")]
        HRESULT _stdcall ComponentSelection([out, retval] int* pVal);
        [propput, helpstring("property ComponentSelection")]
        HRESULT _stdcall ComponentSelection([in] int pVal);
        [propget, helpstring("property HasValidGeoSelection")]
        HRESULT _stdcall HasValidGeoSelection([out, retval] VARIANT_BOOL* pVal);
        [propget, helpstring("property Suppressed")]
        HRESULT _stdcall Suppressed([out, retval] VARIANT_BOOL* pVal);
        [propput, helpstring("property Suppressed")]
        HRESULT _stdcall Suppressed([in] VARIANT_BOOL pVal);
        [propget, helpstring("property AllSectionDeformation")]
        HRESULT _stdcall AllSectionDeformation([out, retval] FixedOrFree* pVal);
        [propput, helpstring("property AllSectionDeformation")]
        HRESULT _stdcall AllSectionDeformation([in] FixedOrFree pVal);
        [propget, helpstring("property RadialExpansion")]
        HRESULT _stdcall RadialExpansion([out, retval] FixedOrFree* pVal);
        [propput, helpstring("property RadialExpansion")]
        HRESULT _stdcall RadialExpansion([in] FixedOrFree pVal);
        [propget, helpstring("property Ovalization")]
        HRESULT _stdcall Ovalization([out, retval] FixedOrFree* pVal);
        [propput, helpstring("property Ovalization")]
        HRESULT _stdcall Ovalization([in] FixedOrFree pVal);
        [propget, helpstring("property Warping")]
        HRESULT _stdcall Warping([out, retval] FixedOrFree* pVal);
        [propput, helpstring("property Warping")]
        HRESULT _stdcall Warping([in] FixedOrFree pVal);
        [propget, helpstring("property ShellRotationA")]
        HRESULT _stdcall ShellRotationA([out, retval] FixedOrFree* pVal);
        [propput, helpstring("property ShellRotationA")]
        HRESULT _stdcall ShellRotationA([in] FixedOrFree pVal);
        [propget, helpstring("property ShellRotationT")]
        HRESULT _stdcall ShellRotationT([out, retval] FixedOrFree* pVal);
        [propput, helpstring("property ShellRotationT")]
        HRESULT _stdcall ShellRotationT([in] FixedOrFree pVal);
        [propget, helpstring("property GrowElementsBy")]
        HRESULT _stdcall GrowElementsBy([out, retval] DSGrowElbowElementsBy* pVal);
        [propput, helpstring("property GrowElementsBy")]
        HRESULT _stdcall GrowElementsBy([in] DSGrowElbowElementsBy pVal);
        [propget, helpstring("property Factor")]
        HRESULT _stdcall Factor([out, retval] double* pVal);
        [propput, helpstring("property Factor")]
        HRESULT _stdcall Factor([in] double pVal);
        [propget, helpstring("property NumElements")]
        HRESULT _stdcall NumElements([out, retval] int* pVal);
        [propput, helpstring("property NumElements")]
        HRESULT _stdcall NumElements([in] int pVal);
        [propget, helpstring("property Length")]
        HRESULT _stdcall Length([out, retval] double* pVal);
        [propput, helpstring("property Length")]
        HRESULT _stdcall Length([in] double pVal);
        [propget, helpstring("property Tag")]
        HRESULT _stdcall Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [propput, helpstring("property Tag")]
        HRESULT _stdcall Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [helpstring("method AddTag")]
        HRESULT _stdcall AddTag([in] BSTR newVal);
        [helpstring("method RemoveTag")]
        HRESULT _stdcall RemoveTag([in] BSTR tagToRemove);
        [propget, helpstring("property IsTagInUse")]
        HRESULT _stdcall IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [propget, helpstring("TagCount")]
        HRESULT _stdcall TagCount([out, retval] unsigned int* pVal);
    };

    typedef enum {
        kNo = 0,
        kByFactor = 1,
        kByLength = 2,
        kByNumberOfElements = 3
    } DSGrowElbowElementsBy;

    typedef enum {
        DISPID_ElementOrientationGeometryDefineBy = 10,
        DISPID_ElementOrientationSurfaceDefineBy = 11,
        DISPID_ElementOrientationEdgeDefineBy = 12,
        DISPID_ElementOrientationBodyGeometry = 13,
        DISPID_ElementOrientationSurfaceGeometry = 14,
        DISPID_ElementOrientationEdgeGeometry = 15,
        DISPID_ElementOrientationBodyComponentId = 16,
        DISPID_ElementOrientationSurfaceComponentId = 17,
        DISPID_ElementOrientationEdgeComponentId = 18,
        DISPID_ElementOrientationAxisSurfaceOrientation = 19,
        DISPID_ElementOrientationAxisEdgeOrientation = 20,
        DISPID_ElementOrientationSuppressed = 21,
        DISPID_ElementOrientationGuide = 22,
        DISPID_ElementOrientationSolved = 23,
        DISPID_ElementOrientationNotSolved = 24,
        DISPID_ElementOrientationSolveFailed = 25,
        DISPID_ElementOrientationImages = 26,
        DISPID_ElementOrientationAddImages = 27,
        DISPID_ElementOrientationComments = 28,
        DISPID_ElementOrientationAddComments = 29,
        DISPID_ElementOrientationFigures = 30,
        DISPID_ElementOrientationAddFigures = 31,
        DISPID_ElementOrientationCoordinateSystemId = 32
    } kDispId_ElementOrientation;

    [
      odl,
      uuid(A95EAF59-C182-4F49-9305-4DB076A70EDD),
      helpstring("IDSElementOrientationAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSElementOrientationAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x0000000a), propget, helpstring("property ElementOrientationGeometryDefineBy")]
        HRESULT GeometryDefineBy([out, retval] DSGeometryDefineByType* pVal);
        [id(0x0000000a), propput, helpstring("property ElementOrientationGeometryDefineBy")]
        HRESULT GeometryDefineBy([in] DSGeometryDefineByType pVal);
        [id(0x0000000b), propget, helpstring("property ElementOrientationSurfaceDefineBy")]
        HRESULT SurfaceDefineBy([out, retval] DSGeometryDefineByType* pVal);
        [id(0x0000000b), propput, helpstring("property ElementOrientationSurfaceDefineBy")]
        HRESULT SurfaceDefineBy([in] DSGeometryDefineByType pVal);
        [id(0x0000000c), propget, helpstring("property ElementOrientationEdgeDefineBy")]
        HRESULT EdgeDefineBy([out, retval] DSGeometryDefineByType* pVal);
        [id(0x0000000c), propput, helpstring("property ElementOrientationEdgeDefineBy")]
        HRESULT EdgeDefineBy([in] DSGeometryDefineByType pVal);
        [id(0x0000000d), propput, helpstring("property ElementOrientationBodyGeometry")]
        HRESULT BodyGeometry([in] IDispatch* rhs);
        [id(0x0000000e), propput, helpstring("property ElementOrientationSurfaceGeometry")]
        HRESULT SurfaceGeometry([in] IDispatch* rhs);
        [id(0x0000000f), propput, helpstring("property ElementOrientationEdgeGeometry")]
        HRESULT EdgeGeometry([in] IDispatch* rhs);
        [id(0x00000010), propget, helpstring("property ElementOrientationBodyComponentId")]
        HRESULT BodyComponentId([out, retval] int* pVal);
        [id(0x00000010), propput, helpstring("property ElementOrientationBodyComponentId")]
        HRESULT BodyComponentId([in] int pVal);
        [id(0x00000011), propget, helpstring("property ElementOrientationSurfaceComponentId")]
        HRESULT SurfaceComponentId([out, retval] int* pVal);
        [id(0x00000011), propput, helpstring("property ElementOrientationSurfaceComponentId")]
        HRESULT SurfaceComponentId([in] int pVal);
        [id(0x00000012), propget, helpstring("property ElementOrientationEdgeComponentId")]
        HRESULT EdgeComponentId([out, retval] int* pVal);
        [id(0x00000012), propput, helpstring("property ElementOrientationEdgeComponentId")]
        HRESULT EdgeComponentId([in] int pVal);
        [id(0x00000013), propget, helpstring("property AxisSurfaceOrientation")]
        HRESULT AxisSurfaceOrientation([out, retval] DSElementOrientationAxis* pVal);
        [id(0x00000013), propput, helpstring("property AxisSurfaceOrientation")]
        HRESULT AxisSurfaceOrientation([in] DSElementOrientationAxis pVal);
        [id(0x00000014), propget, helpstring("property AxisEdgeOrientation")]
        HRESULT AxisEdgeOrientation([out, retval] DSElementOrientationAxis* pVal);
        [id(0x00000014), propput, helpstring("property AxisEdgeOrientation")]
        HRESULT AxisEdgeOrientation([in] DSElementOrientationAxis pVal);
        [id(0x00000015), propget, helpstring("property Suppressed")]
        HRESULT Suppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000015), propput, helpstring("property Suppressed")]
        HRESULT Suppressed([in] VARIANT_BOOL pVal);
        [id(0x00000016), propget, helpstring("property ElementOrientationGuide")]
        HRESULT Guide([out, retval] DSElementOrientationGuide* pVal);
        [id(0x00000016), propput, helpstring("property ElementOrientationGuide")]
        HRESULT Guide([in] DSElementOrientationGuide pVal);
        [id(0x6002001e), helpstring("method SolveElementOrientations")]
        HRESULT SolveElementOrientations(
                        [in] IAnsProgress* piProgress, 
                        [out, retval] VARIANT_BOOL* solveSuccess);
        [id(0x6002001f), helpstring("method CleanOrientationMaps")]
        HRESULT CleanOrientationMaps();
        [id(0x0000001a), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x0000001b), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x0000001c), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x0000001d), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x0000001e), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x0000001f), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00000020), propget, helpstring("property ElementOrientationCoordinateSystemId")]
        HRESULT CoordinateSystemId([out, retval] dsid* pVal);
        [id(0x00000020), propput, helpstring("property ElementOrientationCoordinateSystemId")]
        HRESULT CoordinateSystemId([in] dsid pVal);
    };

    typedef enum {
        KAxisUndefined = 0,
        kPXaxis = 1,
        kPYaxis = 2,
        kPZaxis = 3,
        kNXaxis = 4,
        kNYaxis = 5,
        kNZaxis = 6
    } DSElementOrientationAxis;

    typedef enum {
        kUndefinedGuide = 0,
        kSurfaceEdgeGuide = 1,
        kCoordinateSystem = 2
    } DSElementOrientationGuide;

    typedef enum {
        DISPID_SimplorerPinType = 10,
        DISPID_SimplorerPinSuppressed = 11,
        DISPID_SimplorerPinScope = 12,
        DISPID_SimplorerPinJointName = 13,
        DISPID_SimplorerPinBehavior = 14,
        DISPID_SimplorerPinInputOrOutput = 15,
        DISPID_SimplorerPinDOF = 16,
        DISPID_SimplorerPinLocationMethod = 17,
        DISPID_SimplorerPinGeometrySelection = 18,
        DISPID_SimplorerPinRemotePointSelection = 19
    } kDispId_SimplorerPin;

    [
      odl,
      uuid(B4458646-469C-482E-BD14-8BA0A92AAD08),
      helpstring("IDSSimplorerPinAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSSimplorerPinAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x0000000a), propget, helpstring("property JointType")]
        HRESULT JointType([out, retval] DSJointType* pVal);
        [id(0x0000000a), propput, helpstring("property JointType")]
        HRESULT JointType([in] DSJointType pVal);
        [id(0x0000000b), propget, helpstring("property Suppressed")]
        HRESULT Suppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000000b), propput, helpstring("property Suppressed")]
        HRESULT Suppressed([in] VARIANT_BOOL pVal);
        [id(0x0000000c), propget, helpstring("property Scope")]
        HRESULT Scope([out, retval] IDispatch** ppIAnsEnumULONGsDisp);
        [id(0x0000000c), propput, helpstring("property Scope")]
        HRESULT Scope([in] IDispatch* ppIAnsEnumULONGsDisp);
        [id(0x0000000d), propget, helpstring("property JointName")]
        HRESULT JointName([out, retval] BSTR* pVal);
        [id(0x0000000e), propget, helpstring("property PinBehavior")]
        HRESULT PinBehavior([out, retval] DSSimplorerPinBehavior* pVal);
        [id(0x0000000e), propput, helpstring("property PinBehavior")]
        HRESULT PinBehavior([in] DSSimplorerPinBehavior pVal);
        [id(0x0000000f), propget, helpstring("property PinInputOrOutput")]
        HRESULT PinInputOrOutput([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000000f), propput, helpstring("property PinInputOrOutput")]
        HRESULT PinInputOrOutput([in] VARIANT_BOOL pVal);
        [id(0x00000010), propget, helpstring("property DOF")]
        HRESULT DOF([out, retval] DSKinematicDOF* pVal);
        [id(0x00000010), propput, helpstring("property DOF")]
        HRESULT DOF([in] DSKinematicDOF pVal);
        [id(0x60020016), propget]
        HRESULT CanAddId(
                        [in] int lDSId, 
                        [out, retval] VARIANT_BOOL* pvbCanAdd);
        [id(0x00000011), propget, helpstring("property LocationMethod")]
        HRESULT LocationMethod([out, retval] DSLocationDefinitionMethod* pVal);
        [id(0x00000011), propput, helpstring("property LocationMethod")]
        HRESULT LocationMethod([in] DSLocationDefinitionMethod pVal);
        [id(0x00000012), propput, helpstring("property GeometrySelection")]
        HRESULT GeometrySelection([in] IDispatch* rhs);
        [id(0x00000013), propget, helpstring("property RemotePointSelection")]
        HRESULT RemotePointSelection([out, retval] dsid* pVal);
        [id(0x00000013), propput, helpstring("property RemotePointSelection")]
        HRESULT RemotePointSelection([in] dsid pVal);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
    };

    typedef enum {
        kSimplorerPinPosition = 0,
        kSimplorerPinVelocity = 1,
        kSimplorerPinAcceleration = 2,
        kSimplorerPinForce = 3
    } DSSimplorerPinBehavior;

    typedef enum {
        DISPID_ExternalEnhancedModelType = 10,
        DISPID_ExternalEnhancedModelSuppressed = 11,
        DISPID_ExternalEnhancedModelComments = 12,
        DISPID_ExternalEnhancedModelFigures = 13,
        DISPID_ExternalEnhancedModelImages = 14,
        DISPID_ExternalEnhancedModelAddComment = 15,
        DISPID_ExternalEnhancedModelAddFigure = 16,
        DISPID_ExternalEnhancedModelAddImage = 17,
        DISPID_ExternalEnhancedModelNonlinearEffects = 18,
        DISPID_ExternalEnhancedModelThermalStrainEffects = 19,
        DISPID_ExternalEnhancedModelImport = 21,
        DISPID_ExternalEnhancedModelClean = 22,
        DISPID_ExternalEnhancedModelMaxNumberLayers = 23,
        DISPID_ExternalEnhancedModelLayerToDisplay = 24,
        DISPID_ExternalEnhancedModelIsAssembledCompositeModel = 25,
        DISPID_ExternalEnhancedModelRemove = 26,
        DISPID_ExternalEnhancedModelUpdateCellIds = 27,
        DISPID_ExternalEnhancedModelCreateDelaminationObjects = 28,
        DISPID_ExternalEnhancedModelRegroupToDefault = 29,
        DISPID_ExternalEnhancedModelAnalysisPlies = 30
    } kDispId_ExternalEnhancedModel;

    [
      odl,
      uuid(DC4854FF-2D8B-4499-991B-7003A15797A0),
      helpstring("IDSExternalEnhancedModelAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSExternalEnhancedModelAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x0000000a), propget, helpstring("property ExternalEnhancedModelType")]
        HRESULT ExternalEnhancedModelType([out, retval] DSExternalEnhancedModelType* pVal);
        [id(0x0000000a), propput, helpstring("property ExternalEnhancedModelType")]
        HRESULT ExternalEnhancedModelType([in] DSExternalEnhancedModelType pVal);
        [id(0x0000000b), propget, helpstring("property Suppressed")]
        HRESULT Suppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000000b), propput, helpstring("property Suppressed")]
        HRESULT Suppressed([in] VARIANT_BOOL pVal);
        [id(0x0000000c), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x0000000d), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x0000000e), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x0000000f), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x00000010), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x00000011), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00000012), propget, helpstring("property Nonlinear Effects")]
        HRESULT NonlinearEffects([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000012), propput, helpstring("property Nonlinear Effects")]
        HRESULT NonlinearEffects([in] VARIANT_BOOL pVal);
        [id(0x00000013), propget, helpstring("property Thermal Strain Effects")]
        HRESULT ThermalStrainEffects([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000013), propput, helpstring("property Thermal Strain Effects")]
        HRESULT ThermalStrainEffects([in] VARIANT_BOOL pVal);
        [id(0x00000018), propget, helpstring("property LayerToDisplay")]
        HRESULT LayerToDisplay([out, retval] int* pVal);
        [id(0x00000018), propput, helpstring("property LayerToDisplay")]
        HRESULT LayerToDisplay([in] int pVal);
        [id(0x00000015), helpstring("method Import enhanced model data")]
        HRESULT Import(
                        [in] IAnsBSTRColl* pFileNamesColl, 
                        [in] IAnsVARIANTColl* pFileToAddMappingColl);
        [id(0x0000001a), helpstring("method Remove enhanced model data")]
        HRESULT Remove([in] IAnsBSTRColl* pFileNamesColl);
        [id(0x00000016), helpstring("method will clear an imported enhanced model data")]
        HRESULT Clean();
        [id(0x00000017), propget, helpstring("property MaxNumberLayers")]
        HRESULT MaxNumberLayers([out, retval] int* pVal);
        [id(0x00000019), propget, helpstring("property IsAssembledCompositeModel")]
        HRESULT IsAssembledCompositeModel([out, retval] VARIANT_BOOL* pVarBool);
        [id(0x00000019), propput, helpstring("property IsAssembledCompositeModel")]
        HRESULT IsAssembledCompositeModel([in] VARIANT_BOOL pVarBool);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x0000001b), helpstring("method Import enhanced model data")]
        HRESULT UpdateDataCellIds(
                        [in] IAnsBSTRColl* pOldCellIdsColl, 
                        [in] IAnsBSTRColl* pNewCellIdsColl);
        [id(0x0000001c), helpstring("method Import enhanced model data")]
        HRESULT CreateDelaminationObjects();
        [id(0x0000001d), helpstring("method Regroup To Default")]
        HRESULT RegroupToDefault();
        [id(0x0000001e), propget, helpstring("property AnalysisPlies")]
        HRESULT AnalysisPlies([out, retval] IDispatch** ppVal);
    };

    typedef enum {
        DISPID_FractureGroupAddCrack = 10,
        DISPID_FractureGroupGenerateCrackMesh = 11,
        DISPID_FractureGroupImages = 12,
        DISPID_FractureGroupAddImage = 13,
        DISPID_FractureGroupAddComment = 14,
        DISPID_FractureGroupAddFigure = 15,
        DISPID_FractureGroupComments = 16,
        DISPID_FractureGroupFigures = 17,
        DISPID_FractureGroupCracks = 18,
        DISPID_FractureGroupRefreshComponentGroup = 19,
        DISPID_FractureGroupAddDelamination = 20,
        DISPID_FractureGroupAddDebonding = 21,
        DISPID_FractureGroupHasNativeCracks = 22
    } kDispId_FractureGroup;

    [
      odl,
      uuid(8793B36A-0D95-45EC-9676-9B17887442B3),
      helpstring("IDSFractureGroupAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSFractureGroupAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x0000000a), helpstring("method AddCrack")]
        HRESULT AddCrack(
                        [in] IDispatch* piSelectMgr, 
                        [in] VARIANT_BOOL vbIsNative, 
                        [in] DSCrackShapeType eDSCrackShapeType, 
                        [out, retval] IDispatch** pDisp);
        [id(0x00000014), helpstring("method AddDelamination")]
        HRESULT AddDelamination(
                        [in] IDispatch* piSelectMgr, 
                        [in] unsigned int CrackID, 
                        [out, retval] IDispatch** pDisp);
        [id(0x00000015), helpstring("method AddDebonding")]
        HRESULT AddDebonding(
                        [in] IDispatch* piSelectMgr, 
                        [in] unsigned int ContactId, 
                        [out, retval] IDispatch** pDisp);
        [id(0x0000000b), helpstring("method GenerateCrackMesh")]
        HRESULT GenerateCrackMesh(IAnsProgress* piProgress);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x0000000c), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x0000000d), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x0000000e), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x0000000f), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x00000010), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x00000011), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x00000012), propget, helpstring("property Comments")]
        HRESULT Cracks([out, retval] IDispatch** ppDisp);
        [id(0x00000016), helpstring("method hasNativeCracks")]
        HRESULT hasNativeCracks([out, retval] VARIANT_BOOL* vbVal);
    };

    typedef enum {
        kDSCrackShapeUnknown = 0,
        kDSCrackShapeElliptical = 1,
        kDSCrackShapeArbitrary = 2
    } DSCrackShapeType;

    typedef enum {
        DISPID_CrackGeometryDefineBy = 10,
        DISPID_CrackGeometrySelection = 11,
        DISPID_CrackCoordinateSystem = 12,
        DISPID_CrackShapeType = 13,
        DISPID_CrackShapeMajorAxis = 14,
        DISPID_CrackShapeMinorAxis = 15,
        DISPID_CrackIntegrationRadius = 16,
        DISPID_CrackDivAlongRadius = 17,
        DISPID_CrackNumContours = 18,
        DISPID_CrackDivCrackFront = 19,
        DISPID_CrackFAZType = 20,
        DISPID_CrackFAZRadius = 21,
        DISPID_CrackFAZHeight = 22,
        DISPID_CrackShapeNodeRefs = 26,
        DISPID_CrackMPCConstNodeRefs = 27,
        DISPID_CrackUnitTypeByDispid = 28,
        DISPID_CrackUnitStringByDispid = 29,
        DISPID_CrackParamNameByDispid = 30,
        DISPID_CrackFrontBiasType = 31,
        DISPID_CrackFrontBiasFactor = 32,
        DISPID_CrackSuppressed = 33,
        DISPID_CrackImages = 34,
        DISPID_CrackAddImage = 35,
        DISPID_CrackAddComment = 36,
        DISPID_CrackComments = 37,
        DISPID_CrackAddFigure = 38,
        DISPID_CrackFigures = 39,
        DISPID_CrackSourceType = 40,
        DISPID_CrackComponentSelection = 41,
        DISPID_CrackNumSolutionContours = 42,
        DISPID_CrackShapeRefColl = 43,
        DISPID_CrackMPCRefColl = 44,
        DISPID_CrackNSCrackFrontNodes = 80,
        DISPID_CrackNSCrackFacesNodes = 81,
        DISPID_CrackNSFaceTopNodes = 82,
        DISPID_CrackNSFaceBottomNodes = 83,
        DISPID_CrackNSContactPairsNodes = 84,
        DISPID_CrackNSContact1Nodes = 85,
        DISPID_CrackNSTarget1Nodes = 86,
        DISPID_CrackNSContact2Nodes = 87,
        DISPID_CrackNSTarget2Nodes = 88,
        DISPID_CrackAddCommandEditor = 89,
        DISPID_CrackPerformPostCloneTasks = 90,
        DISPID_CrackBufferZoneXext = 91,
        DISPID_CrackBufferZoneYnorm = 92,
        DISPID_CrackBufferZoneZtang = 93,
        DISPID_CrackFAZModifiedType = 94,
        DISPID_CrackCoordinateSystemAlign = 95,
        DISPID_CrackCoordinateSystemProject = 96,
        DISPID_CrackChildCoordinateSystemSelection = 97,
        DISPID_CrackCoordinateSystemForGraphics = 98,
        DISPID_CrackSurface = 99,
        DISPID_CrackFrontMeshMethod = 100,
        DISPID_CrackFrontElementSize = 101,
        DISPID_CrackGrowthRate = 102,
        DISPID_CrackSymmetry = 103
    } kDispId_Crack;

    [
      odl,
      uuid(A8CC2343-44EF-45D9-88E0-B770248CF1C1),
      helpstring("IDSCrackAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSCrackAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x0000000a), propget, helpstring("property GeometryDefineBy")]
        HRESULT GeometryDefineBy([out, retval] DSGeometryDefineByType* pVal);
        [id(0x0000000a), propput, helpstring("property GeometryDefineBy")]
        HRESULT GeometryDefineBy([in] DSGeometryDefineByType pVal);
        [id(0x0000000b), propput, helpstring("property GeometrySelection")]
        HRESULT GeometrySelection([in] IDispatch* rhs);
        [id(0x0000000c), propget, helpstring("property CrackCoordinateSystem")]
        HRESULT CrackCoordinateSystem([out, retval] unsigned int* pVal);
        [id(0x0000000c), propput, helpstring("property CrackCoordinateSystem")]
        HRESULT CrackCoordinateSystem([in] unsigned int pVal);
        [id(0x0000000d), propget, helpstring("property CrackShapeType")]
        HRESULT CrackShapeType([out, retval] DSCrackShapeType* pVal);
        [id(0x0000000d), propput, helpstring("property CrackShapeType")]
        HRESULT CrackShapeType([in] DSCrackShapeType pVal);
        [id(0x0000000e), propget, helpstring("property CrackShapeMajorAxis")]
        HRESULT CrackShapeMajorAxis([out, retval] double* pVal);
        [id(0x0000000e), propput, helpstring("property CrackShapeMajorAxis")]
        HRESULT CrackShapeMajorAxis([in] double pVal);
        [id(0x0000000f), propget, helpstring("property CrackShapeMinorAxis")]
        HRESULT CrackShapeMinorAxis([out, retval] double* pVal);
        [id(0x0000000f), propput, helpstring("property CrackShapeMinorAxis")]
        HRESULT CrackShapeMinorAxis([in] double pVal);
        [id(0x00000010), propget, helpstring("property CrackIntegrationRadius")]
        HRESULT CrackIntegrationRadius([out, retval] double* pVal);
        [id(0x00000010), propput, helpstring("property CrackIntegrationRadius")]
        HRESULT CrackIntegrationRadius([in] double pVal);
        [id(0x00000011), propget, helpstring("property CrackDivAlongRadius")]
        HRESULT CrackDivAlongRadius([out, retval] int* pVal);
        [id(0x00000011), propput, helpstring("property CrackDivAlongRadius")]
        HRESULT CrackDivAlongRadius([in] int pVal);
        [id(0x00000012), propget, helpstring("property CrackNumContours")]
        HRESULT CrackNumContours([out, retval] int* pVal);
        [id(0x00000012), propput, helpstring("property CrackNumContours")]
        HRESULT CrackNumContours([in] int pVal);
        [id(0x00000013), propget, helpstring("property CrackDivCrackFront")]
        HRESULT CrackDivCrackFront([out, retval] int* pVal);
        [id(0x00000013), propput, helpstring("property CrackDivCrackFront")]
        HRESULT CrackDivCrackFront([in] int pVal);
        [id(0x00000014), propget, helpstring("property CrackFAZType")]
        HRESULT CrackFAZType([out, retval] DSCrackFAZType* pVal);
        [id(0x00000014), propput, helpstring("property CrackFAZType")]
        HRESULT CrackFAZType([in] DSCrackFAZType pVal);
        [id(0x00000015), propget, helpstring("property CrackFAZRadius")]
        HRESULT CrackFAZRadius([out, retval] double* pVal);
        [id(0x00000015), propput, helpstring("property CrackFAZRadius")]
        HRESULT CrackFAZRadius([in] double pVal);
        [id(0x00000016), propget, helpstring("property CrackFAZHeight")]
        HRESULT CrackFAZHeight([out, retval] double* pVal);
        [id(0x00000016), propput, helpstring("property CrackFAZHeight")]
        HRESULT CrackFAZHeight([in] double pVal);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x0000001a), helpstring("property CrackShapeNodeRefs")]
        HRESULT getCrackShapeNodeRefs(IDSListWrapper* pVal);
        [id(0x0000001b), helpstring("property CrackMPCConstNodeRefs")]
        HRESULT getCrackMPCConstNodeRefs(IDSListWrapper* pVal);
        [id(0x0000001c), propget, helpstring("property UnitTypeByDispid")]
        HRESULT UnitTypeByDispid(
                        [in] int dispid, 
                        [out, retval] int* unitType);
        [id(0x0000001d), propget, helpstring("property UnitStringByDispid")]
        HRESULT UnitStringByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* unitString);
        [id(0x0000001e), propget, helpstring("property ParamNameByDispid")]
        HRESULT ParamNameByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* paramName);
        [id(0x0000001f), propget, helpstring("property GeometryDefineBy")]
        HRESULT CrackFrontBiasType([out, retval] DSCrackFrontBiasType* pVal);
        [id(0x0000001f), propput, helpstring("property GeometryDefineBy")]
        HRESULT CrackFrontBiasType([in] DSCrackFrontBiasType pVal);
        [id(0x00000020), propget, helpstring("property GeometryDefineBy")]
        HRESULT CrackFrontBiasFactor([out, retval] double* pVal);
        [id(0x00000020), propput, helpstring("property GeometryDefineBy")]
        HRESULT CrackFrontBiasFactor([in] double pVal);
        [id(0x00000021), propget, helpstring("property Suppressed")]
        HRESULT Suppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000021), propput, helpstring("property Suppressed")]
        HRESULT Suppressed([in] VARIANT_BOOL pVal);
        [id(0x00000022), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000023), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00000024), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x00000026), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x00000025), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x00000027), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x00000028), propget, helpstring("property - returns the source of the crack object")]
        HRESULT CrackSourceType([out, retval] DSCrackSourceType* pVal);
        [id(0x00000028), propput, helpstring("property - returns the source of the crack object")]
        HRESULT CrackSourceType([in] DSCrackSourceType pVal);
        [id(0x0000002a), propget, helpstring("property CrackNumSolutionContours")]
        HRESULT CrackNumSolutionContours([out, retval] int* pVal);
        [id(0x0000002a), propput, helpstring("property CrackNumSolutionContours")]
        HRESULT CrackNumSolutionContours([in] int pVal);
        [id(0x0000002b), propget, helpstring("property Images")]
        HRESULT CrackShapeRefColl([out, retval] IDispatch** ppDisp);
        [id(0x0000002c), propget, helpstring("property Images")]
        HRESULT CrackMPCRefColl([out, retval] IDispatch** ppDisp);
        [id(0x00000050), propget, helpstring("property NSCrackFrontNodes")]
        HRESULT NSCrackFrontNodes([out, retval] BSTR* pVal);
        [id(0x00000050), propput, helpstring("property NSCrackFrontNodes")]
        HRESULT NSCrackFrontNodes([in] BSTR pVal);
        [id(0x00000051), propget, helpstring("property NSCrackFacesNodes")]
        HRESULT NSCrackFacesNodes([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000051), propput, helpstring("property NSCrackFacesNodes")]
        HRESULT NSCrackFacesNodes([in] VARIANT_BOOL pVal);
        [id(0x00000052), propget, helpstring("property NSFaceTopNodes")]
        HRESULT NSFaceTopNodes([out, retval] BSTR* pVal);
        [id(0x00000052), propput, helpstring("property NSFaceTopNodes")]
        HRESULT NSFaceTopNodes([in] BSTR pVal);
        [id(0x00000053), propget, helpstring("property NSFaceBottomNodes")]
        HRESULT NSFaceBottomNodes([out, retval] BSTR* pVal);
        [id(0x00000053), propput, helpstring("property NSFaceBottomNodes")]
        HRESULT NSFaceBottomNodes([in] BSTR pVal);
        [id(0x00000054), propget, helpstring("property NSContactPairsNodes")]
        HRESULT NSContactPairsNodes([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000054), propput, helpstring("property NSContactPairsNodes")]
        HRESULT NSContactPairsNodes([in] VARIANT_BOOL pVal);
        [id(0x00000055), propget, helpstring("property NSContact1Nodes")]
        HRESULT NSContact1Nodes([out, retval] BSTR* pVal);
        [id(0x00000055), propput, helpstring("property NSContact1Nodes")]
        HRESULT NSContact1Nodes([in] BSTR pVal);
        [id(0x00000056), propget, helpstring("property NSTarget1Nodes")]
        HRESULT NSTarget1Nodes([out, retval] BSTR* pVal);
        [id(0x00000056), propput, helpstring("property NSTarget1Nodes")]
        HRESULT NSTarget1Nodes([in] BSTR pVal);
        [id(0x00000057), propget, helpstring("property NSContact2Nodes")]
        HRESULT NSContact2Nodes([out, retval] BSTR* pVal);
        [id(0x00000057), propput, helpstring("property NSContact2Nodes")]
        HRESULT NSContact2Nodes([in] BSTR pVal);
        [id(0x00000058), propget, helpstring("property NSTarget2Nodes")]
        HRESULT NSTarget2Nodes([out, retval] BSTR* pVal);
        [id(0x00000058), propput, helpstring("property NSTarget2Nodes")]
        HRESULT NSTarget2Nodes([in] BSTR pVal);
        [id(0x00000059), helpstring("method AddCommandEditor")]
        HRESULT AddCommandEditor([out, retval] IDispatch** ppVal);
        [id(0x0000005b), propget, helpstring("property BufferZoneXext")]
        HRESULT BufferZoneXext([out, retval] double* pVal);
        [id(0x0000005b), propput, helpstring("property BufferZoneXext")]
        HRESULT BufferZoneXext([in] double pVal);
        [id(0x0000005c), propget, helpstring("property BufferZoneYnorm")]
        HRESULT BufferZoneYnorm([out, retval] double* pVal);
        [id(0x0000005c), propput, helpstring("property BufferZoneYnorm")]
        HRESULT BufferZoneYnorm([in] double pVal);
        [id(0x0000005d), propget, helpstring("property BufferZoneZtang")]
        HRESULT BufferZoneZtang([out, retval] double* pVal);
        [id(0x0000005d), propput, helpstring("property BufferZoneZtang")]
        HRESULT BufferZoneZtang([in] double pVal);
        [id(0x0000005e), propget, helpstring("property CrackFAZModifiedType")]
        HRESULT CrackFAZModifiedType([out, retval] DSCrackFAZModifiedType* pVal);
        [id(0x0000005e), propput, helpstring("property CrackFAZModifiedType")]
        HRESULT CrackFAZModifiedType([in] DSCrackFAZModifiedType pVal);
        [id(0x0000005f), propget, helpstring("property CrackCoordinateSystemAlign")]
        HRESULT CrackCoordinateSystemAlign([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000005f), propput, helpstring("property CrackCoordinateSystemAlign")]
        HRESULT CrackCoordinateSystemAlign([in] VARIANT_BOOL pVal);
        [id(0x00000060), propget, helpstring("property CrackCoordinateSystemProject")]
        HRESULT CrackCoordinateSystemProject([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000060), propput, helpstring("property CrackCoordinateSystemProject")]
        HRESULT CrackCoordinateSystemProject([in] VARIANT_BOOL pVal);
        [id(0x00000061), propget, helpstring("property CrackChildCoordinateSystemSelection")]
        HRESULT CrackChildCoordinateSystemSelection([out, retval] int* pVal);
        [id(0x00000061), propput, helpstring("property CrackChildCoordinateSystemSelection")]
        HRESULT CrackChildCoordinateSystemSelection([in] int pVal);
        [id(0x00000062), helpstring("method getCrackCoordinateSystemForGraphics")]
        HRESULT getCrackCoordinateSystemForGraphics([out, retval] dsid* pVal);
        [id(0x00000063), propput, helpstring("property CrackSurface")]
        HRESULT CrackSurface([in] IDispatch* rhs);
        [id(0x00000064), propget, helpstring("property CrackFrontMeshMethod")]
        HRESULT CrackFrontMeshMethod([out, retval] DSCrackFrontMeshMethod* pVal);
        [id(0x00000064), propput, helpstring("property CrackFrontMeshMethod")]
        HRESULT CrackFrontMeshMethod([in] DSCrackFrontMeshMethod pVal);
        [id(0x00000065), propget, helpstring("property CrackFrontElementSize")]
        HRESULT CrackFrontElementSize([out, retval] double* pVal);
        [id(0x00000065), propput, helpstring("property CrackFrontElementSize")]
        HRESULT CrackFrontElementSize([in] double pVal);
        [id(0x00000066), propget, helpstring("property CrackGrowthRate")]
        HRESULT CrackGrowthRate([out, retval] double* pVal);
        [id(0x00000066), propput, helpstring("property CrackGrowthRate")]
        HRESULT CrackGrowthRate([in] double pVal);
        [id(0x00000067), propget, helpstring("property CrackSymmetry")]
        HRESULT CrackSymmetry([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000067), propput, helpstring("property CrackSymmetry")]
        HRESULT CrackSymmetry([in] VARIANT_BOOL pVal);
    };

    typedef enum {
        kDSCrackFAZUnknown = 0,
        kDSCrackFAZCylinder = 1,
        kDSCrackFAZEllipseExt = 2
    } DSCrackFAZType;

    typedef enum {
        kDSCrackFrontBiasUnknown = 0,
        kDSCrackFrontBiasLinear = 1,
        kDSCrackFrontBiasGeometric = 2
    } DSCrackFrontBiasType;

    typedef [public]
    __MIDL___MIDL_itf_DSObjectsAuto_0001_0068_0001 DSCrackSourceType;

    typedef enum {
        DSCrackSourceTypeUnknown = 0,
        DSCrackSourceTypeNative = 1,
        DSCrackSourceTypeExternal = 2
    } __MIDL___MIDL_itf_DSObjectsAuto_0001_0068_0001;

    typedef enum {
        kDSCrackFAZProgramUnknown = 0,
        kDSCrackFAZProgramControlled = 1,
        kDSCrackFAZManual = 2
    } DSCrackFAZModifiedType;

    typedef enum {
        kDSProgramControlled = 0,
        kDSHexDominant = 1,
        kDSTetrahedrons = 2
    } DSCrackFrontMeshMethod;

    typedef enum {
        DISPID_DelaminationType = 11,
        DISPID_DelaminationMethod = 12,
        DISPID_DelaminationFailureCriteriaOption = 13,
        DISPID_DelaminationFailureCriteriaCriticalRate = 14,
        DISPID_DelaminationMaterialName = 15,
        DISPID_DelaminationGeometryDefineBy = 16,
        DISPID_DelaminationSourceGeometry = 17,
        DISPID_DelaminationTargetGeometry = 18,
        DISPID_DelaminationSourceComponentId = 19,
        DISPID_DelaminationTargetComponentId = 20,
        DISPID_DelaminationContactRegionId = 21,
        DISPID_DelaminationInitialCrackId = 22,
        DISPID_DelaminationAutoTimeStepping = 23,
        DISPID_DelaminationInitialTimeStep = 24,
        DISPID_DelaminationMinimumTimeStep = 25,
        DISPID_DelaminationMaximumTimeStep = 26,
        DISPID_DelaminationToleranceType = 27,
        DISPID_DelaminationUnitTypeByDispid = 30,
        DISPID_DelaminationUnitStringByDispid = 31,
        DISPID_DelaminationParamNameByDispid = 32,
        DISPID_DelaminationCanParameterize = 33,
        DISPID_DelaminationGenerationMethod = 34,
        DISPID_DelaminationMatchControlId = 35,
        DISPID_DelaminationSuppressed = 36,
        DISPID_DelaminationMaterialId = 37,
        DISPID_DelaminationAddComment = 38,
        DISPID_DelaminationComments = 39,
        DISPID_DelaminationAddFigure = 40,
        DISPID_DelaminationFigures = 41,
        DISPID_DelaminationAddImage = 42,
        DISPID_DelaminationImages = 43,
        DISPID_DelaminationEDAMaterialTransferId = 44,
        DISPID_DelaminationDistanceTolerance = 45,
        DISPID_DelaminationAddCommandEditor = 46,
        DISPID_DelaminationPregeneratedInterface = 47
    } kDispId_Delamination;

    [
      odl,
      uuid(7A476245-2BE2-4684-9D17-2D18C0F7986E),
      helpstring("IDSDelaminationAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSDelaminationAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x0000000b), propget, helpstring("property DelaminationType")]
        HRESULT DelaminationType([out, retval] DSDelaminationType* pVal);
        [id(0x0000000b), propput, helpstring("property DelaminationType")]
        HRESULT DelaminationType([in] DSDelaminationType pVal);
        [id(0x0000000c), propget, helpstring("property DelaminationMethod")]
        HRESULT DelaminationMethod([out, retval] DSDelaminationMethod* pVal);
        [id(0x0000000c), propput, helpstring("property DelaminationMethod")]
        HRESULT DelaminationMethod([in] DSDelaminationMethod pVal);
        [id(0x0000000d), propget, helpstring("property FailureCriteriaOption")]
        HRESULT FailureCriteriaOption([out, retval] DSDelaminationFailureCriteriaOption* pVal);
        [id(0x0000000d), propput, helpstring("property FailureCriteriaOption")]
        HRESULT FailureCriteriaOption([in] DSDelaminationFailureCriteriaOption pVal);
        [id(0x0000000e), propget, helpstring("property FailureCriteriaCriticalRate")]
        HRESULT FailureCriteriaCriticalRate([out, retval] double* pVal);
        [id(0x0000000e), propput, helpstring("property FailureCriteriaCriticalRate")]
        HRESULT FailureCriteriaCriticalRate([in] double pVal);
        [id(0x00000025), propget, helpstring("property MaterialId")]
        HRESULT materialId([out, retval] int* pVal);
        [id(0x00000025), propput, helpstring("property MaterialId")]
        HRESULT materialId([in] int pVal);
        [id(0x0000000f), propget, helpstring("property MaterialName")]
        HRESULT MaterialName([out, retval] BSTR* pVal);
        [id(0x0000000f), propput, helpstring("property MaterialName")]
        HRESULT MaterialName([in] BSTR pVal);
        [id(0x00000022), propget, helpstring("property GenerationMethod")]
        HRESULT GenerationMethod([out, retval] DSDelaminationGenerationMethod* pVal);
        [id(0x00000022), propput, helpstring("property GenerationMethod")]
        HRESULT GenerationMethod([in] DSDelaminationGenerationMethod pVal);
        [id(0x00000010), propget, helpstring("property DelaminationGeometryDefineBy")]
        HRESULT GeometryDefineBy([out, retval] DSGeometryDefineByType* pVal);
        [id(0x00000010), propput, helpstring("property DelaminationGeometryDefineBy")]
        HRESULT GeometryDefineBy([in] DSGeometryDefineByType pVal);
        [id(0x00000011), propput, helpstring("property DelaminationSourceGeometry")]
        HRESULT SourceGeometry([in] IDispatch* rhs);
        [id(0x00000012), propput, helpstring("property DelaminationTargetGeometry")]
        HRESULT TargetGeometry([in] IDispatch* rhs);
        [id(0x00000013), propget, helpstring("property DelaminationSourceComponentId")]
        HRESULT SourceComponentId([out, retval] int* pVal);
        [id(0x00000013), propput, helpstring("property DelaminationSourceComponentId")]
        HRESULT SourceComponentId([in] int pVal);
        [id(0x00000014), propget, helpstring("property DelaminationTargetComponentId")]
        HRESULT TargetComponentId([out, retval] int* pVal);
        [id(0x00000014), propput, helpstring("property DelaminationTargetComponentId")]
        HRESULT TargetComponentId([in] int pVal);
        [id(0x00000015), propget, helpstring("property DelaminationContactRegion")]
        HRESULT ContactRegionID([out, retval] int* pVal);
        [id(0x00000015), propput, helpstring("property DelaminationContactRegion")]
        HRESULT ContactRegionID([in] int pVal);
        [id(0x00000016), propget, helpstring("property DelaminationInitialCrackId")]
        HRESULT InitialCrackId([out, retval] int* pVal);
        [id(0x00000016), propput, helpstring("property DelaminationInitialCrackId")]
        HRESULT InitialCrackId([in] int pVal);
        [id(0x00000017), propget, helpstring("property AutoTimeStepping")]
        HRESULT AutoTimeStepping([out, retval] DSAutoTimeSteppingType* pVal);
        [id(0x00000017), propput, helpstring("property AutoTimeStepping")]
        HRESULT AutoTimeStepping([in] DSAutoTimeSteppingType pVal);
        [id(0x00000018), propget, helpstring("property InitialTimeStep")]
        HRESULT InitialTimeStep([out, retval] double* pVal);
        [id(0x00000018), propput, helpstring("property InitialTimeStep")]
        HRESULT InitialTimeStep([in] double pVal);
        [id(0x00000019), propget, helpstring("property MinimumTimeStep")]
        HRESULT MinimumTimeStep([out, retval] double* pVal);
        [id(0x00000019), propput, helpstring("property MinimumTimeStep")]
        HRESULT MinimumTimeStep([in] double pVal);
        [id(0x0000001a), propget, helpstring("property MaximumTimeStep")]
        HRESULT MaximumTimeStep([out, retval] double* pVal);
        [id(0x0000001a), propput, helpstring("property MaximumTimeStep")]
        HRESULT MaximumTimeStep([in] double pVal);
        [id(0x0000001b), propget, helpstring("property ToleranceType")]
        HRESULT ToleranceType([out, retval] DSToleranceType* pVal);
        [id(0x0000001b), propput, helpstring("property ToleranceType")]
        HRESULT ToleranceType([in] DSToleranceType pVal);
        [id(0x0000002d), propget, helpstring("property DistanceTolerance")]
        HRESULT DistanceTolerance([out, retval] double* pVal);
        [id(0x0000002d), propput, helpstring("property DistanceTolerance")]
        HRESULT DistanceTolerance([in] double pVal);
        [id(0x0000001e), propget, helpstring("property UnitTypeByDispid")]
        HRESULT UnitTypeByDispid(
                        [in] int dispid, 
                        [out, retval] int* unitType);
        [id(0x0000001f), propget, helpstring("property UnitStringByDispid")]
        HRESULT UnitStringByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* unitString);
        [id(0x00000020), propget, helpstring("property ParamNameByDispid")]
        HRESULT ParamNameByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* paramName);
        [id(0x00000023), propget, helpstring("property DelaminationMatchControlId")]
        HRESULT MatchControlId([out, retval] int* pVal);
        [id(0x00000023), propput, helpstring("property DelaminationMatchControlId")]
        HRESULT MatchControlId([in] int pVal);
        [id(0x00000024), propget, helpstring("property Suppressed")]
        HRESULT Suppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000024), propput, helpstring("property Suppressed")]
        HRESULT Suppressed([in] VARIANT_BOOL pVal);
        [id(0x00000026), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x00000027), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x00000028), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x00000029), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x0000002a), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x0000002b), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x0000002c), propget, helpstring("property EDAMaterialTransferId")]
        HRESULT EDAMaterialTransferId([out, retval] BSTR* pVal);
        [id(0x0000002e), helpstring("method AddCommandEditor")]
        HRESULT AddCommandEditor([out, retval] IDispatch** ppVal);
        [id(0x0000002f), propget, helpstring("property PregeneratedInterface")]
        HRESULT PregeneratedInterface([out, retval] BSTR* pbsVal);
        [id(0x0000002f), propput, helpstring("property PregeneratedInterface")]
        HRESULT PregeneratedInterface([in] BSTR pbsVal);
    };

    typedef [public]
    __MIDL___MIDL_itf_DSObjectsAuto_0001_0068_0003 DSDelaminationType;

    typedef enum {
        DSDelaminationTypeUnknown = 0,
        DSDelaminationTypeINTER = 1,
        DSDelaminationTypeCONTA = 2
    } __MIDL___MIDL_itf_DSObjectsAuto_0001_0068_0003;

    typedef [public]
    __MIDL___MIDL_itf_DSObjectsAuto_0001_0068_0002 DSDelaminationMethod;

    typedef enum {
        DSDelaminationMethodUnknown = 0,
        DSDelaminationMethodVCCT = 1,
        DSDelaminationMethodCZM = 2
    } __MIDL___MIDL_itf_DSObjectsAuto_0001_0068_0002;

    typedef [public]
    __MIDL___MIDL_itf_DSObjectsAuto_0001_0068_0004 DSDelaminationFailureCriteriaOption;

    typedef enum {
        DSDelaminationFCOptionUnknown = 0,
        DSDelaminationFCOptionMTAB = 1,
        DSDelaminationFCOptionGTC = 2
    } __MIDL___MIDL_itf_DSObjectsAuto_0001_0068_0004;

    typedef [public]
    __MIDL___MIDL_itf_DSObjectsAuto_0001_0068_0005 DSDelaminationGenerationMethod;

    typedef enum {
        DSDelaminationGenerationMethodUnknown = 0,
        DSDelaminationGenerationMethodNodeMatching = 1,
        DSDelaminationGenerationMethodMatchedMeshing = 2,
        DSDelaminationGenerationMethodSurfaceSplitting = 3,
        DSDelaminationGenerationMethodPregeneratedInterface = 4
    } __MIDL___MIDL_itf_DSObjectsAuto_0001_0068_0005;

    typedef enum {
        DISPID_CondensedGeometryAddCondensedPart = 10,
        DISPID_CondensedGeometryGenerateCondensedGeometry = 11,
        DISPID_CondensedGeometrySolverFilesDirectory = 12,
        DISPID_CondensedGeometryTransparencyEnabled = 13,
        DISPID_CondensedGeometryAddCondensedPartToGenerationQueue = 14,
        DISPID_CondensedGeometryAutoCondensedPartDetection = 15,
        DISPID_CondensedGeometryUpdateModelCondensedGeometry = 16,
        DISPID_CondensedGeometryAddCondensedPartInfoTool = 17,
        DISPID_CondensedGeometryAddComment = 18,
        DISPID_CondensedGeometryComments = 19,
        DISPID_CondensedGeometryImages = 20,
        DISPID_CondensedGeometryAddImage = 21,
        DISPID_CondensedGeometryFigures = 22,
        DISPID_CondensedGeometryAddFigure = 23
    } kDispId_CondensedGeometry;

    [
      odl,
      uuid(F4DBDFBE-7441-4DD4-A165-59AD58E77A4C),
      helpstring("IDSCondensedGeometryAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSCondensedGeometryAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x0000000a), helpstring("method AddCondensedPart")]
        HRESULT AddCondensedPart(
                        [in] IDispatch* piSelectMgr, 
                        [out, retval] IDispatch** pDisp);
        [id(0x0000000b), helpstring("method GenerateCondensedGeometry")]
        HRESULT GenerateCondensedGeometry([in] IAnsProgress* pProgress);
        [id(0x0000000c), propget, helpstring("property SolverFilesDirectory")]
        HRESULT SolverFilesDirectory([out, retval] BSTR* pbsSolverDir);
        [id(0x0000000c), propput, helpstring("property SolverFilesDirectory")]
        HRESULT SolverFilesDirectory([in] BSTR pbsSolverDir);
        [id(0x0000000d), propget, helpstring("property TransparencyEnabled")]
        HRESULT TransparencyEnabled([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000000d), propput, helpstring("property TransparencyEnabled")]
        HRESULT TransparencyEnabled([in] VARIANT_BOOL pVal);
        [id(0x0000000e), helpstring("method AddCondensedPartToGenerationQueue")]
        HRESULT AddCondensedPartToGenerationQueue([in] dsid CondensedPartId);
        [id(0x0000000f), helpstring("method AutoCondensedPartDetection")]
        HRESULT AutoCondensedPartDetection([in] IDispatch* pProgress);
        [id(0x00000010), helpstring("method UpdateModelCondensedGeometry")]
        HRESULT UpdateModelCondensedGeometry([in] IAnsProgress* pProgress);
        [id(0x00000011), helpstring("method AddCondensedPartInfoTool")]
        HRESULT AddCondensedPartInfoTool([out, retval] IDispatch** pDisp);
        [id(0x00000012), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x00000013), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x00000014), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000015), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00000016), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x00000017), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
    };

    typedef enum {
        DISPID_CondensedPartGeometryDefineBy = 10,
        DISPID_CondensedPartGeometrySelection = 11,
        DISPID_CondensedPartSuppressed = 12,
        DISPID_CondensedPartAddCommandEditor = 13,
        DISPID_CondensedPartAddInterfaceData = 14,
        DISPID_CondensedPartDeleteInterfaceData = 15,
        DISPID_CondensedPartInterfaceSource = 16,
        DISPID_CondensedPartInterfaceType = 17,
        DISPID_CondensedPartInterfaceCondition = 18,
        DISPID_CondensedPartInterfaceSide = 19,
        DISPID_CondensedPartInterfaceSelection = 20,
        DISPID_CondensedPartNumInterfaceEntries = 21,
        DISPID_CondensedPartPhysics = 22,
        DISPID_CondensedPartReductionMethod = 23,
        DISPID_CondensedPartReferenceTemperature = 24,
        DISPID_CondensedPartNumberOfModes = 25,
        DISPID_CondensedPartInterfaceMethod = 26,
        DISPID_CondensedPartMinFrequency = 27,
        DISPID_CondensedPartMaxFrequency = 28,
        DISPID_CondensedPartTemperatureUnits = 29,
        DISPID_CondensedPartInterfaceSelectionValid = 30,
        DISPID_CondensedPartNumMasterNodes = 31,
        DISPID_CondensedPartSolutionName = 32,
        DISPID_CondensedPartSolutionNameMode = 33,
        DISPID_CondensedPartSolverFilesDirectory = 34,
        DISPID_CondensedPartRangeSearch = 35,
        DISPID_CondensedPartFutureIntent = 36,
        DISPID_CondensedPartAutoDetectCondensedPartInterface = 37,
        DISPID_CondensedPartSolverUnitsControl = 38,
        DISPID_CondensedPartSelectedSolverUnitSystem = 39,
        DISPID_CondensedPartScratchSolverFilesDirectory = 40,
        DISPID_CondensedPartDeleteAllInterfaceData = 41,
        DISPID_CondensedPartPointMassTreatment = 42,
        DISPID_CondensedPartComponentSelection = 43,
        DISPID_CondensedPartMode = 44,
        DISPID_CondensedPartAddComment = 45,
        DISPID_CondensedPartComments = 46,
        DISPID_CondensedPartImages = 47,
        DISPID_CondensedPartAddImage = 48,
        DISPID_CondensedPartFigures = 49,
        DISPID_CondensedPartAddFigure = 50,
        DISPID_CondensedPartMaterialUpdateEvent = 51
    } kDispId_CondensedPart;

    [
      odl,
      uuid(99A39D3A-74C7-4B11-AA3A-64621CC858C7),
      helpstring("IDSCondensedPartAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSCondensedPartAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x0000000a), propget, helpstring("property GeometryDefineBy")]
        HRESULT GeometryDefineBy([out, retval] DSGeometryDefineByType* pVal);
        [id(0x0000000a), propput, helpstring("property GeometryDefineBy")]
        HRESULT GeometryDefineBy([in] DSGeometryDefineByType pVal);
        [id(0x0000000b), propput, helpstring("property GeometrySelection")]
        HRESULT GeometrySelection([in] IDispatch* rhs);
        [id(0x0000000c), propget, helpstring("property Suppressed")]
        HRESULT Suppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000000c), propput, helpstring("property Suppressed")]
        HRESULT Suppressed([in] VARIANT_BOOL pVal);
        [id(0x0000000d), helpstring("method AddCommandEditor")]
        HRESULT AddCommandEditor([out, retval] IDispatch** ppVal);
        [id(0x0000000e), helpstring("method AddInterfaceData")]
        HRESULT AddInterfaceData();
        [id(0x0000000f), helpstring("method DeleteInterfaceData")]
        HRESULT DeleteInterfaceData(int index);
        [id(0x00000010), propget, helpstring("property InterfaceSource")]
        HRESULT InterfaceSource(
                        [in] int index, 
                        [out, retval] DS_CP_InterfaceSource* pVal);
        [id(0x00000010), propput, helpstring("property InterfaceSource")]
        HRESULT InterfaceSource(
                        [in] int index, 
                        [in] DS_CP_InterfaceSource pVal);
        [id(0x00000011), propget, helpstring("property InterfaceType")]
        HRESULT InterfaceType(
                        [in] int index, 
                        [out, retval] DS_CP_InterfaceType* pVal);
        [id(0x00000011), propput, helpstring("property InterfaceType")]
        HRESULT InterfaceType(
                        [in] int index, 
                        [in] DS_CP_InterfaceType pVal);
        [id(0x00000012), propget, helpstring("property InterfaceCondition")]
        HRESULT InterfaceCondition(
                        [in] int index, 
                        [out, retval] DS_CP_InterfaceCondition* pVal);
        [id(0x00000012), propput, helpstring("property InterfaceCondition")]
        HRESULT InterfaceCondition(
                        [in] int index, 
                        [in] DS_CP_InterfaceCondition pVal);
        [id(0x00000013), propget, helpstring("property InterfaceSide")]
        HRESULT InterfaceSide(
                        [in] int index, 
                        [out, retval] DS_CP_InterfaceSide* pVal);
        [id(0x00000013), propput, helpstring("property InterfaceSide")]
        HRESULT InterfaceSide(
                        [in] int index, 
                        [in] DS_CP_InterfaceSide pVal);
        [id(0x00000014), propget, helpstring("property InterfaceSelection")]
        HRESULT InterfaceSelection(
                        [in] int index, 
                        [out, retval] dsid* pVal);
        [id(0x00000014), propput, helpstring("property InterfaceSelection")]
        HRESULT InterfaceSelection(
                        [in] int index, 
                        [in] dsid pVal);
        [id(0x00000015), propget, helpstring("property NumInterfaceEntries")]
        HRESULT NumInterfaceEntries([out, retval] int* pVal);
        [id(0x00000015), propput, helpstring("property NumInterfaceEntries")]
        HRESULT NumInterfaceEntries([in] int pVal);
        [id(0x00000016), propget, helpstring("Property Physics")]
        HRESULT Physics([out, retval] DSCondensedPartPhysics* pVal);
        [id(0x00000016), propput, helpstring("Property Physics")]
        HRESULT Physics([in] DSCondensedPartPhysics pVal);
        [id(0x00000017), propget, helpstring("Property ReductionMethod")]
        HRESULT ReductionMethod([out, retval] DSCondensedPartReductionMethod* pVal);
        [id(0x00000017), propput, helpstring("Property ReductionMethod")]
        HRESULT ReductionMethod([in] DSCondensedPartReductionMethod pVal);
        [id(0x00000018), propget, helpstring("Property ReferenceTemperature")]
        HRESULT ReferenceTemperature([out, retval] double* pVal);
        [id(0x00000018), propput, helpstring("Property ReferenceTemperature")]
        HRESULT ReferenceTemperature([in] double pVal);
        [id(0x00000019), propget, helpstring("Property NumberOfModes")]
        HRESULT NumberOfModes([out, retval] int* pVal);
        [id(0x00000019), propput, helpstring("Property NumberOfModes")]
        HRESULT NumberOfModes([in] int pVal);
        [id(0x0000001a), propget, helpstring("Property InterfaceMethod")]
        HRESULT InterfaceMethod([out, retval] DSCondensedPartInterfaceMethod* pVal);
        [id(0x0000001a), propput, helpstring("Property InterfaceMethod")]
        HRESULT InterfaceMethod([in] DSCondensedPartInterfaceMethod pVal);
        [id(0x0000001b), propget, helpstring("Property MinFrequency")]
        HRESULT MinFrequency([out, retval] double* pVal);
        [id(0x0000001b), propput, helpstring("Property MinFrequency")]
        HRESULT MinFrequency([in] double pVal);
        [id(0x0000001c), propget, helpstring("Property MaxFrequency")]
        HRESULT MaxFrequency([out, retval] double* pVal);
        [id(0x0000001c), propput, helpstring("Property MaxFrequency")]
        HRESULT MaxFrequency([in] double pVal);
        [id(0x00000023), propget, helpstring("property RangeSearch")]
        HRESULT RangeSearch([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000023), propput, helpstring("property RangeSearch")]
        HRESULT RangeSearch([in] VARIANT_BOOL pVal);
        [id(0x0000001d), propget, helpstring("property TemperatureUnits")]
        HRESULT TemperatureUnits([out, retval] BSTR* pVal);
        [id(0x0000001e), propget, helpstring("property InterfaceSelectionValid")]
        HRESULT InterfaceSelectionValid(
                        [in] int index, 
                        [out, retval] VARIANT_BOOL* pVal);
        [id(0x0000001f), propget, helpstring("property NumMasterNodes")]
        HRESULT NumMasterNodes([out, retval] int* pVal);
        [id(0x0000001f), propput, helpstring("property NumMasterNodes")]
        HRESULT NumMasterNodes([in] int pVal);
        [id(0x00000020), propget, helpstring("property SolutionName")]
        HRESULT SolutionName([out, retval] BSTR* pVal);
        [id(0x00000020), propput, helpstring("property SolutionName")]
        HRESULT SolutionName([in] BSTR pVal);
        [id(0x00000021), propget, helpstring("property SolutionNameMode")]
        HRESULT SolutionNameMode([out, retval] DSAutoOrMan* pVal);
        [id(0x00000021), propput, helpstring("property SolutionNameMode")]
        HRESULT SolutionNameMode([in] DSAutoOrMan pVal);
        [id(0x00000022), propget, helpstring("property SolverFilesDirectory")]
        HRESULT SolverFilesDirectory([out, retval] BSTR* pbsSolverDir);
        [id(0x00000022), propput, helpstring("property SolverFilesDirectory")]
        HRESULT SolverFilesDirectory([in] BSTR pbsSolverDir);
        [id(0x00000024), propget, helpstring("property FutureIntent")]
        HRESULT FutureIntent([out, retval] DSFutureIntentType* pVal);
        [id(0x00000024), propput, helpstring("property FutureIntent")]
        HRESULT FutureIntent([in] DSFutureIntentType pVal);
        [id(0x00000025), helpstring("method AutoDetectCondensedPartInterface")]
        HRESULT AutoDetectCondensedPartInterface(
                        [in] IDispatch* pProgress, 
                        [in] IDispatch* piSelManagerDisp);
        [id(0x00000026), propget, helpstring("property SolverUnitsControl")]
        HRESULT SolverUnitsControl([out, retval] DSAnalysisSettingsSolverUnitsControlType* pVal);
        [id(0x00000026), propput, helpstring("property SolverUnitsControl")]
        HRESULT SolverUnitsControl([in] DSAnalysisSettingsSolverUnitsControlType pVal);
        [id(0x00000027), propget, helpstring("property SelectedSolverUnitSystem")]
        HRESULT SelectedSolverUnitSystem([out, retval] int* pVal);
        [id(0x00000027), propput, helpstring("property SelectedSolverUnitSystem")]
        HRESULT SelectedSolverUnitSystem([in] int pVal);
        [id(0x00000028), propget, helpstring("property ScratchSolverFilesDirectory")]
        HRESULT ScratchSolverFilesDirectory([out, retval] BSTR* pbsScratchSolverDir);
        [id(0x00000028), propput, helpstring("property ScratchSolverFilesDirectory")]
        HRESULT ScratchSolverFilesDirectory([in] BSTR pbsScratchSolverDir);
        [id(0x00000029), helpstring("method DeleteAllInterfaceData")]
        HRESULT DeleteAllInterfaceData();
        [id(0x0000002a), propget, helpstring("property PointMassTreatment")]
        HRESULT PointMassTreatment([out, retval] DSCondensedPartPointMassTreatment* pVal);
        [id(0x0000002a), propput, helpstring("property PointMassTreatment")]
        HRESULT PointMassTreatment([in] DSCondensedPartPointMassTreatment pVal);
        [id(0x0000002b), propget, helpstring("property ComponentSelection")]
        HRESULT ComponentSelection([out, retval] int* pVal);
        [id(0x0000002b), propput, helpstring("property ComponentSelection")]
        HRESULT ComponentSelection([in] int pVal);
        [id(0x0000002c), propget, helpstring("property Mode")]
        HRESULT Mode([out, retval] DSAutoOrMan* pVal);
        [id(0x0000002c), propput, helpstring("property Mode")]
        HRESULT Mode([in] DSAutoOrMan pVal);
        [id(0x0000002d), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x0000002e), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x0000002f), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000030), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00000031), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x00000032), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x00000033), helpstring("method AddFigure")]
        HRESULT FireMaterialUpdateEvent();
    };

    typedef enum {
        CP_Interface_UnknownSource = 0,
        CP_Interface_AutomaticSource = 1,
        CP_Interface_ManualSource = 2
    } DS_CP_InterfaceSource;

    typedef enum {
        CP_Interface_UnknownType = 0,
        CP_Interface_GeneralType = 1,
        CP_Interface_RemotePointType = 2
    } DS_CP_InterfaceType;

    typedef enum {
        CP_Interface_UnknownCondition = 0,
        CP_Interface_ContactCondition = 1,
        CP_Interface_BeamCondition = 2,
        CP_Interface_JointCondition = 3,
        CP_Interface_SpotWeldCondition = 4,
        CP_Interface_MeshConnectionCondition = 5,
        CP_Interface_SpringCondition = 6,
        CP_Interface_BearingCondition = 7,
        CP_Interface_LoadCondition = 8,
        CP_Interface_NamedSelectionCondition = 9,
        CP_Interface_RemotePointCondition = 10,
        CP_Interface_PointMassCondition = 11
    } DS_CP_InterfaceCondition;

    typedef enum {
        CP_Interface_UnknownSide = 0,
        CP_Interface_ContactSide = 1,
        CP_Interface_TargetSide = 2,
        CP_Interface_ReferenceSide = 3,
        CP_Interface_MobileSide = 4
    } DS_CP_InterfaceSide;

    typedef enum {
        kCondensedPartStructuralPhysics = 0,
        kCondensedPartThermalPhysics = 1
    } DSCondensedPartPhysics;

    typedef enum {
        kCondensedPartReductionMethodCMS = 0,
        kCondensedPartReductionMethodGuyan = 1
    } DSCondensedPartReductionMethod;

    typedef enum {
        kFixedInterfaceMethod = 0,
        kFreeInterfaceMethod = 1,
        kResidualFlexibleFreeInterfaceMethod = 2
    } DSCondensedPartInterfaceMethod;

    typedef enum {
        kCondensedPartIncludePointMass = 0,
        kCondensedPartInterfaceAtPointMass = 1
    } DSCondensedPartPointMassTreatment;

    typedef enum {
        DISPID_CondensedSolutionSummary = 10
    } kDispId_CondensedSolutionSummary;

    [
      odl,
      uuid(10F290B0-782E-4D60-B359-C8660433CC44),
      helpstring("IDSCondensedSolutionSummaryAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSCondensedSolutionSummaryAuto : IDispatch {
    };

    typedef enum {
        DISPID_MeshConnectionsParentAddMeshConnectionGroup = 10,
        DISPID_MeshConnectionsParentDetectionMode = 11,
        DISPID_MeshConnectionsParentTransparencyEnabled = 12,
        DISPID_MeshConnectionsParentAutoConnectionsDetection = 13,
        DISPID_RefreshedMeshConnectionsParentObjectChildren = 14,
        DISPID_MeshConnectionsParentAddNodeMove = 15,
        DISPID_MeshConnectionsImages = 16,
        DISPID_MeshConnectionsAddImages = 17,
        DISPID_MeshConnectionsComments = 18,
        DISPID_MeshConnectionsAddComments = 19,
        DISPID_MeshConnectionsFigures = 20,
        DISPID_MeshConnectionsAddFigures = 21,
        DISPID_MeshConnectionsParentGenerateAllMeshConnections = 22,
        DISPID_MeshConnectionsParentClearMeshConnections = 23,
        DISPID_MeshConnectionsRevertLastMeshConnection = 24,
        DISPID_MeshConnectionsIsBaseMeshAvailable = 25,
        DISPID_MeshConnectionsParentHasValidConnectionChild = 26,
        DISPID_MeshConnectionsParentCanDelete = 27,
        DISPID_MeshConnectionsParentIgnoreMeshgroupState = 28,
        DISPID_MeshConnectionsParentCreateMeshConnectionsFromContactRegions = 29,
        DISPID_MeshConnectionsParentGenerateSelectedMeshConnections = 30
    } kDispId_MeshConnectionsParent;

    [
      odl,
      uuid(48F72427-0580-4C38-9EBD-1558BF5E77C1),
      helpstring("IDSMeshConnectionsParentAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSMeshConnectionsParentAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x0000000a), helpstring("method AddMeshConnectionGroup")]
        HRESULT AddMeshConnectionGroup(
                        [in] IDispatch* pSelectionMgr, 
                        [in] int iGroupType, 
                        [out, retval] IDispatch** ppVal);
        [id(0x0000000b), propget, helpstring("Property DetectionMode")]
        HRESULT DetectionMode([out, retval] DSAutoOrMan* pVal);
        [id(0x0000000b), propput, helpstring("Property DetectionMode")]
        HRESULT DetectionMode([in] DSAutoOrMan pVal);
        [id(0x0000000c), propget, helpstring("property TransparencyEnabled")]
        HRESULT TransparencyEnabled([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000000c), propput, helpstring("property TransparencyEnabled")]
        HRESULT TransparencyEnabled([in] VARIANT_BOOL pVal);
        [id(0x0000000d), helpstring("method AutoConnectionsDetection")]
        HRESULT AutoConnectionsDetection(
                        [in] VARIANT_BOOL vbExcludeIntraAssembly, 
                        [in] VARIANT_BOOL vbExcludeImported, 
                        [in] IAnsProgress* piProgress);
        [id(0x00000010), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000011), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00000012), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x00000013), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x00000014), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x00000015), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x00000016), helpstring("method GenerateAllMeshConnections")]
        HRESULT GenerateAllMeshConnections(IAnsProgress* piProgress);
        [id(0x00000017), helpstring("method ClearMeshConnections")]
        HRESULT ClearMeshConnections();
        [id(0x00000018), helpstring("method RevertLastMeshConnection")]
        HRESULT RevertLastMeshConnection();
        [id(0x0000000f), helpstring("method AddNodeMove")]
        HRESULT AddNodeMove([out, retval] IDispatch** pDisp);
        [id(0x00000019), helpstring("method IsBaseMeshAvailable")]
        HRESULT IsBaseMeshAvailable(
                        [in] int baseMeshAttributeType, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x0000001a), helpstring("method HasValidConnectionChild")]
        HRESULT HasValidConnectionChild([out, retval] VARIANT_BOOL* vbVal);
        [id(0x0000001b), helpstring("method CanDelete")]
        HRESULT canDelete([out, retval] VARIANT_BOOL* vbVal);
        [id(0x0000001c), propget, helpstring("property IgnoreMeshgroupState")]
        HRESULT IgnoreMeshgroupState([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000001c), propput, helpstring("property IgnoreMeshgroupState")]
        HRESULT IgnoreMeshgroupState([in] VARIANT_BOOL pVal);
        [id(0x0000001d), helpstring("method CreateMeshConnectionsFromContactRegions")]
        HRESULT CreateMeshConnectionsFromContactRegions(
                        [in] IDispatch* pContactIds, 
                        [out, retval] IDispatch** pDisp);
        [id(0x0000001e), helpstring("method GenerateSelectedMeshConnections")]
        HRESULT GenerateSelectedMeshConnections(
                        IAnsProgress* piProgress, 
                        [in] IDispatch* pConnectionIds);
    };

    typedef enum {
        DISPID_AnalysisPlyImages = 10,
        DISPID_AnalysisPlyAddImages = 11,
        DISPID_AnalysisPlyComments = 12,
        DISPID_AnalysisPlyAddComments = 13,
        DISPID_AnalysisPlyFigures = 14,
        DISPID_AnalysisPlyAddFigures = 15,
        DISPID_AnalysisPlyNumberOfElements = 16,
        DISPID_AnalysisPlyIdentifier = 17,
        DISPID_AnalysisPlyThickness = 18,
        DISPID_AnalysisPlyAngle = 19,
        DISPID_AnalysisPlyGlobalPlyNumber = 20,
        DISPID_AnalysisPlyMaterialId = 21,
        DISPID_AnalysisPlyNameInSource = 22,
        DISPID_AnalysisPlyElementId = 23,
        DISPID_AnalysisPlyElementLayerNumber = 24
    } kDispId_AnalysisPly;

    [
      odl,
      uuid(05BBFE2F-9D8C-48F1-A8B1-DEB95820BABA),
      helpstring("IDSAnalysisPlyAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSAnalysisPlyAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x0000000a), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x0000000b), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x0000000c), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x0000000d), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x0000000e), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x0000000f), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x00000010), propget, helpstring("Property NumberOfElements")]
        HRESULT NumberOfElements([out, retval] unsigned int* pVal);
        [id(0x00000011), propget, helpstring("property Identifier")]
        HRESULT Identifier([out, retval] BSTR* pVal);
        [id(0x00000012), propget, helpstring("Property Thickness")]
        HRESULT Thickness([out, retval] double* pVal);
        [id(0x00000013), propget, helpstring("Property Angle")]
        HRESULT angle([out, retval] double* pVal);
        [id(0x00000014), propget, helpstring("Property GlobalPlyNumber")]
        HRESULT GlobalPlyNumber([out, retval] unsigned int* pVal);
        [id(0x00000015), propget, helpstring("property MaterialId")]
        HRESULT materialId([out, retval] BSTR* pVal);
        [id(0x00000016), propget, helpstring("property MaterialId")]
        HRESULT NameInSource([out, retval] BSTR* pVal);
        [id(0x00000017), propget, helpstring("property ElementId")]
        HRESULT ElementId(
                        [in] unsigned int elementIdx, 
                        [out, retval] int* pVal);
        [id(0x00000018), propget, helpstring("property ElementLayerNumber")]
        HRESULT ElementLayerNumber(
                        [in] unsigned int elementIdx, 
                        [out, retval] int* pVal);
    };

    typedef enum {
        DISPID_NonlinearAdaptivityGeometryDefineBy = 11,
        DISPID_NonlinearAdaptivityGeometrySelection = 12,
        DISPID_NonlinearAdaptivityComponentSelection = 13,
        DISPID_NonlinearAdaptivityHasValidGeoSelection = 14,
        DISPID_NonlinearAdaptivityAddedAtRestart = 15,
        DISPID_NonlinearAdaptivityActionTypeDefineBy = 21,
        DISPID_NonlinearAdaptivityCriterionTypeDefineBy = 22,
        DISPID_NonlinearAdaptivityEnergyCoefficient = 23,
        DISPID_NonlinearAdaptivityNumContactElements = 24,
        DISPID_NonlinearAdaptivityCoordinateSystem = 25,
        DISPID_NonlinearAdaptivityCoordinateX = 26,
        DISPID_NonlinearAdaptivityCoordinateY = 27,
        DISPID_NonlinearAdaptivityCoordinateZ = 28,
        DISPID_NonlinearAdaptivityXYZRange = 29,
        DISPID_NonlinearAdaptivitySkewnessCoefficient = 30,
        DISPID_NonlinearAdaptivityShapeCornerAngle = 31,
        DISPID_NonlinearAdaptivityShapeAspectRatio = 32,
        DISPID_NonlinearAdaptivityShapeParallelDeviation = 33,
        DISPID_NonlinearAdaptivityOptionTypeDefineBy = 34,
        DISPID_NonlinearAdaptivityHasCornerAng = 35,
        DISPID_NonlinearAdaptivityHasAspectRat = 36,
        DISPID_NonlinearAdaptivityHasParallelDev = 37,
        DISPID_NonlinearAdaptivityUpdateTypeDefineBy = 41,
        DISPID_NonlinearAdaptivityRecurrenceRate = 42,
        DISPID_NonlinearAdaptivityNumSpacedPoints = 43,
        DISPID_NonlinearAdaptivitySpecifyTimeRange = 44,
        DISPID_NonlinearAdaptivityTimeStart = 45,
        DISPID_NonlinearAdaptivityTimeEnd = 46,
        DISPID_NonlinearAdaptivitySuppressed = 61,
        DISPID_NonlinearAdaptivityImages = 62,
        DISPID_NonlinearAdaptivityAddImage = 63,
        DISPID_NonlinearAdaptivityAddComment = 64,
        DISPID_NonlinearAdaptivityComments = 65,
        DISPID_NonlinearAdaptivityAddFigure = 66,
        DISPID_NonlinearAdaptivityFigures = 67,
        DISPID_NonlinearAdaptivitySourceType = 68,
        DISPID_NonlinearAdaptivityCanParameterize = 81,
        DISPID_NonlinearAdaptivityParamNameByDispid = 82,
        DISPID_NonlinearAdaptivityUnitTypeByDispid = 83,
        DISPID_NonlinearAdaptivityUnitStringByDispid = 84,
        DISPID_NonlinearAdaptivityNumSequenceEntries = 101,
        DISPID_NonlinearAdaptivityLoadVariationChange = 102,
        DISPID_NonlinearAdaptivityActiveAtLoadStep = 103
    } kDispId_NonlinearAdaptivity;

    [
      odl,
      uuid(4371D718-6C73-4AFA-A07A-F0158FE303D3),
      helpstring("IDSNonlinearAdaptivityAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSNonlinearAdaptivityAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x00000043), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x00000041), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x00000040), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x00000042), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x0000003e), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x0000003f), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x0000000b), propget, helpstring("property GeometryDefineBy")]
        HRESULT GeometryDefineBy([out, retval] DSGeometryDefineByType* pVal);
        [id(0x0000000b), propput, helpstring("property GeometryDefineBy")]
        HRESULT GeometryDefineBy([in] DSGeometryDefineByType pVal);
        [id(0x0000000c), propput, helpstring("property GeometrySelection")]
        HRESULT GeometrySelection([in] IDispatch* rhs);
        [id(0x0000000d), propget, helpstring("property ComponentSelection")]
        HRESULT ComponentSelection([out, retval] int* pVal);
        [id(0x0000000d), propput, helpstring("property ComponentSelection")]
        HRESULT ComponentSelection([in] int pVal);
        [id(0x00000019), propget, helpstring("property NonlinearAdaptivityCoordinateSystem")]
        HRESULT NonlinearAdaptivityCoordinateSystem([out, retval] unsigned int* pVal);
        [id(0x00000019), propput, helpstring("property NonlinearAdaptivityCoordinateSystem")]
        HRESULT NonlinearAdaptivityCoordinateSystem([in] unsigned int pVal);
        [id(0x0000000e), propget, helpstring("property HasValidGeoSelection")]
        HRESULT HasValidGeoSelection([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000000f), propget, helpstring("property NonlinearAdaptivityAddedAtRestart")]
        HRESULT NonlinearAdaptivityAddedAtRestart([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000000f), propput, helpstring("property NonlinearAdaptivityAddedAtRestart")]
        HRESULT NonlinearAdaptivityAddedAtRestart([in] VARIANT_BOOL pVal);
        [id(0x00000016), propget, helpstring("property NonlinearAdaptivityCriterionType")]
        HRESULT NonlinearAdaptivityCriterionTypeDefineBy([out, retval] DSNonlinearAdaptivityCriterionType* pVal);
        [id(0x00000016), propput, helpstring("property NonlinearAdaptivityCriterionType")]
        HRESULT NonlinearAdaptivityCriterionTypeDefineBy([in] DSNonlinearAdaptivityCriterionType pVal);
        [id(0x00000015), propget, helpstring("property NonlinearAdaptivityActionType")]
        HRESULT NonlinearAdaptivityActionTypeDefineBy([out, retval] DSNonlinearAdaptivityActionType* pVal);
        [id(0x00000015), propput, helpstring("property NonlinearAdaptivityActionType")]
        HRESULT NonlinearAdaptivityActionTypeDefineBy([in] DSNonlinearAdaptivityActionType pVal);
        [id(0x00000029), propget, helpstring("property NonlinearAdaptivityUpdateType")]
        HRESULT NonlinearAdaptivityUpdateTypeDefineBy([out, retval] DSNonlinearAdaptivityUpdateType* pVal);
        [id(0x00000029), propput, helpstring("property NonlinearAdaptivityUpdateType")]
        HRESULT NonlinearAdaptivityUpdateTypeDefineBy([in] DSNonlinearAdaptivityUpdateType pVal);
        [id(0x0000002a), propget, helpstring("property NonlinearAdaptivityNumEverySubstep")]
        HRESULT NonlinearAdaptivityRecurrenceRate([out, retval] int* pVal);
        [id(0x0000002a), propput, helpstring("property NonlinearAdaptivityNumEverySubstep")]
        HRESULT NonlinearAdaptivityRecurrenceRate([in] int pVal);
        [id(0x0000002b), propget, helpstring("property NonlinearAdaptivityNumSpacedPoints")]
        HRESULT NonlinearAdaptivityNumSpacedPoints([out, retval] int* pVal);
        [id(0x0000002b), propput, helpstring("property NonlinearAdaptivityNumSpacedPoints")]
        HRESULT NonlinearAdaptivityNumSpacedPoints([in] int pVal);
        [id(0x0000002c), propget, helpstring("property SpecifyTimeRange")]
        HRESULT NonlinearAdaptivitySpecifyTimeRange([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000002c), propput, helpstring("property SpecifyTimeRange")]
        HRESULT NonlinearAdaptivitySpecifyTimeRange([in] VARIANT_BOOL pVal);
        [id(0x0000003d), propget, helpstring("property Suppressed")]
        HRESULT Suppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000003d), propput, helpstring("property Suppressed")]
        HRESULT Suppressed([in] VARIANT_BOOL pVal);
        [id(0x00000017), propget, helpstring("property NonlinearAdaptivityEnergyCoefficient")]
        HRESULT NonlinearAdaptivityEnergyCoefficient([out, retval] double* pVal);
        [id(0x00000017), propput, helpstring("property NonlinearAdaptivityEnergyCoefficient")]
        HRESULT NonlinearAdaptivityEnergyCoefficient([in] double pVal);
        [id(0x0000002d), propget, helpstring("property NonlinearAdaptivityTimeStart")]
        HRESULT NonlinearAdaptivityTimeStart([out, retval] double* pVal);
        [id(0x0000002d), propput, helpstring("property NonlinearAdaptivityTimeStart")]
        HRESULT NonlinearAdaptivityTimeStart([in] double pVal);
        [id(0x0000002e), propget, helpstring("property NonlinearAdaptivityTimeEnd")]
        HRESULT NonlinearAdaptivityTimeEnd([out, retval] double* pVal);
        [id(0x0000002e), propput, helpstring("property NonlinearAdaptivityTimeEnd")]
        HRESULT NonlinearAdaptivityTimeEnd([in] double pVal);
        [id(0x00000018), propget, helpstring("property NonlinearAdaptivityNumContactElements")]
        HRESULT NonlinearAdaptivityNumContactElements([out, retval] unsigned int* pVal);
        [id(0x00000018), propput, helpstring("property NonlinearAdaptivityNumContactElements")]
        HRESULT NonlinearAdaptivityNumContactElements([in] unsigned int pVal);
        [id(0x0000001d), propget, helpstring("property NonlinearAdaptivityXYZRange")]
        HRESULT NonlinearAdaptivityXYZRange([out, retval] IAnsDoubleColl** pVal);
        [id(0x0000001a), propget, helpstring("property NonlinearAdaptivityCoordinateX")]
        HRESULT NonlinearAdaptivityCoordinateX([out, retval] double* pVal);
        [id(0x0000001a), propput, helpstring("property NonlinearAdaptivityCoordinateX")]
        HRESULT NonlinearAdaptivityCoordinateX([in] double pVal);
        [id(0x0000001b), propget, helpstring("property NonlinearAdaptivityCoordinateY")]
        HRESULT NonlinearAdaptivityCoordinateY([out, retval] double* pVal);
        [id(0x0000001b), propput, helpstring("property NonlinearAdaptivityCoordinateY")]
        HRESULT NonlinearAdaptivityCoordinateY([in] double pVal);
        [id(0x0000001c), propget, helpstring("property NonlinearAdaptivityCoordinateZ")]
        HRESULT NonlinearAdaptivityCoordinateZ([out, retval] double* pVal);
        [id(0x0000001c), propput, helpstring("property NonlinearAdaptivityCoordinateZ")]
        HRESULT NonlinearAdaptivityCoordinateZ([in] double pVal);
        [id(0x0000001e), propget, helpstring("property NonlinearAdaptivitySkewnessCoefficient")]
        HRESULT NonlinearAdaptivitySkewnessCoefficient([out, retval] double* pVal);
        [id(0x0000001e), propput, helpstring("property NonlinearAdaptivitySkewnessCoefficient")]
        HRESULT NonlinearAdaptivitySkewnessCoefficient([in] double pVal);
        [id(0x0000001f), propget, helpstring("property NonlinearAdaptivityShapeCornerAngle")]
        HRESULT NonlinearAdaptivityShapeCornerAngle([out, retval] double* pVal);
        [id(0x0000001f), propput, helpstring("property NonlinearAdaptivityShapeCornerAngle")]
        HRESULT NonlinearAdaptivityShapeCornerAngle([in] double pVal);
        [id(0x00000020), propget, helpstring("property NonlinearAdaptivityShapeAspectRatio")]
        HRESULT NonlinearAdaptivityShapeAspectRatio([out, retval] double* pVal);
        [id(0x00000020), propput, helpstring("property NonlinearAdaptivityShapeAspectRatio")]
        HRESULT NonlinearAdaptivityShapeAspectRatio([in] double pVal);
        [id(0x00000021), propget, helpstring("property NonlinearAdaptivityShapeParallelDeviation")]
        HRESULT NonlinearAdaptivityShapeParallelDeviation([out, retval] double* pVal);
        [id(0x00000021), propput, helpstring("property NonlinearAdaptivityShapeParallelDeviation")]
        HRESULT NonlinearAdaptivityShapeParallelDeviation([in] double pVal);
        [id(0x00000051), propget, helpstring("property CanParameterize")]
        HRESULT CanParameterize(
                        [in] long dispid, 
                        [out, retval] VARIANT_BOOL* pFlag);
        [id(0x00000053), propget, helpstring("property UnitTypeByDispid")]
        HRESULT UnitTypeByDispid(
                        [in] int dispid, 
                        [out, retval] int* unitType);
        [id(0x00000054), propget, helpstring("property UnitStringByDispid")]
        HRESULT UnitStringByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* unitString);
        [id(0x00000052), propget, helpstring("property ParamNameByDispid")]
        HRESULT ParamNameByDispid(
                        [in] int dispid, 
                        [out, retval] BSTR* paramName);
        [id(0x00000065), propget, helpstring("property NumSequenceEntries")]
        HRESULT NumSequenceEntries([out, retval] unsigned int* pVal);
        [id(0x00000065), propput, helpstring("property NumSequenceEntries")]
        HRESULT NumSequenceEntries([in] unsigned int pVal);
        [id(0x00000067), propget, helpstring("property ActiveAtLoadStep")]
        HRESULT ActiveAtLoadStep(
                        [in] unsigned int stepNumber, 
                        [out, retval] VARIANT_BOOL* bActive);
        [id(0x00000067), propput, helpstring("property ActiveAtLoadStep")]
        HRESULT ActiveAtLoadStep(
                        [in] unsigned int stepNumber, 
                        [in] VARIANT_BOOL bActive);
        [id(0x00000022), propget, helpstring("property NonlinearAdaptivityOptionType")]
        HRESULT NonlinearAdaptivityOptionTypeDefineBy([out, retval] DSNonlinearAdaptivityOptionType* pVal);
        [id(0x00000022), propput, helpstring("property NonlinearAdaptivityOptionType")]
        HRESULT NonlinearAdaptivityOptionTypeDefineBy([in] DSNonlinearAdaptivityOptionType pVal);
        [id(0x00000023), propget, helpstring("property NonlinearAdaptivityHasCornerAng")]
        HRESULT NonlinearAdaptivityHasCornerAng([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000023), propput, helpstring("property NonlinearAdaptivityHasCornerAng")]
        HRESULT NonlinearAdaptivityHasCornerAng([in] VARIANT_BOOL pVal);
        [id(0x00000024), propget, helpstring("property NonlinearAdaptivityHasAspectRat")]
        HRESULT NonlinearAdaptivityHasAspectRat([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000024), propput, helpstring("property NonlinearAdaptivityHasAspectRat")]
        HRESULT NonlinearAdaptivityHasAspectRat([in] VARIANT_BOOL pVal);
        [id(0x00000025), propget, helpstring("property NonlinearAdaptivityHasParallelDev")]
        HRESULT NonlinearAdaptivityHasParallelDev([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000025), propput, helpstring("property NonlinearAdaptivityHasParallelDev")]
        HRESULT NonlinearAdaptivityHasParallelDev([in] VARIANT_BOOL pVal);
    };

    typedef enum {
        kDSNonlinearAdaptivityCriterion_Undefined = 0,
        kDSNonlinearAdaptivityCriterion_Contact = 1,
        kDSNonlinearAdaptivityCriterion_Energy = 2,
        kDSNonlinearAdaptivityCriterion_Box = 3,
        kDSNonlinearAdaptivityCriterion_Mesh = 4
    } DSNonlinearAdaptivityCriterionType;

    typedef enum {
        kDSNonlinearAdaptivityAction_Undefined = 0,
        kDSNonlinearAdaptivityAction_Add = 1,
        kDSNonlinearAdaptivityAction_Delete = 2,
        kDSNonlinearAdaptivityAction_On = 3,
        kDSNonlinearAdaptivityAction_Off = 4,
        kDSNonlinearAdaptivityAction_Default = 5
    } DSNonlinearAdaptivityActionType;

    typedef enum {
        kDSNonlinearAdaptivityUpdateDefineBy_Undefined = 0,
        kDSNonlinearAdaptivityUpdateDefineBy_RecurrenceRate = 1,
        kDSNonlinearAdaptivityUpdateDefineBy_SpacedPoints = 2,
        kDSNonlinearAdaptivityUpdateDefineBy_All = 3
    } DSNonlinearAdaptivityUpdateType;

    typedef enum {
        kDSNonlinearAdaptivityOption_Undefined = 0,
        kDSNonlinearAdaptivityOption_Skewness = 1,
        kDSNonlinearAdaptivityOption_Shape = 2
    } DSNonlinearAdaptivityOptionType;

    typedef enum {
        DISPID_CompositeFailureToolType = 11,
        DISPID_CompositeFailureToolSuppressed = 12,
        DISPID_CompositeFailureToolComments = 13,
        DISPID_CompositeFailureToolFigures = 14,
        DISPID_CompositeFailureToolAddFigure = 15,
        DISPID_CompositeFailureToolAddComment = 16,
        DISPID_CompositeFailureToolAddResult = 17,
        DISPID_CompositeFailureToolResults = 18,
        DISPID_CompositeFailureToolcope = 19,
        DISPID_CompositeFailureToolImages = 20,
        DISPID_CompositeFailureToolAddImage = 21,
        DISPID_CompositeFailureToolDefinedBy = 22,
        DISPID_CompositeFailureToolCriteriaSelection = 23,
        DISPID_CompositeFailureToolSelectedCriteriaId = 24,
        DISPID_CompositeFailureToolPromoteCriteria = 25,
        DISPID_CompositeFailureToolAddResultChart = 26,
        DISPID_CompositeFailureToolAddResultTable = 27,
        DISPID_CompositeFailureToolAddGroupedScopedACPResults = 28,
        DISPID_CompositeFailureToolMaxStrain = 51,
        DISPID_CompositeFailureToolMaxStress = 52,
        DISPID_CompositeFailureToolTsaiWu = 53,
        DISPID_CompositeFailureToolTsaiHill = 54,
        DISPID_CompositeFailureToolHoffman = 55,
        DISPID_CompositeFailureToolHashin = 56,
        DISPID_CompositeFailureToolPuck = 57,
        DISPID_CompositeFailureToolLaRC = 58,
        DISPID_CompositeFailureToolCuntze = 59,
        DISPID_CompositeFailureToolWrinkling = 60,
        DISPID_CompositeFailureToolCoreFailure = 61,
        DISPID_CompositeFailureToolVonMises = 62,
        DISPID_CompositeFailureToolCrimping = 63,
        DISPID_CompositeFailureToolNumCriteriaItems = 101,
        DISPID_CompositeFailureToolCriteriaItemActive = 102,
        DISPID_CompositeFailureToolCriteriaItemName = 103,
        DISPID_CompositeFailureToolCriteriaItemValue = 104,
        DISPID_CompositeFailureToolResetCriterionToDefault = 105,
        DISPID_CompositeFailureToolAuxInfo = 106
    } kDispId_CompositeFailureTool;

    [
      odl,
      uuid(FEE23C1F-AF32-4CC6-8172-EB24407CD023),
      helpstring("IDSCompositeFailureToolAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSCompositeFailureToolAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x00000014), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000015), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x0000000d), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x0000000e), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x00000010), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x0000000f), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x00000019), helpstring("method PromoteCompositeFailureCriteria")]
        HRESULT PromoteCompositeFailureCriteria();
        [id(0x00000011), helpstring("method AddResult")]
        HRESULT AddResult(
                        [in] IDispatch* piSelectMgr, 
                        [in] unsigned int resType, 
                        [out, retval] IDispatch** ppVal);
        [id(0x0000001a), helpstring("method AddResultChart")]
        HRESULT AddResultChart(
                        [in] IDispatch* piSelectMgr, 
                        [in] unsigned int resType, 
                        [in] int responseType, 
                        [out, retval] IDispatch** ppVal);
        [id(0x0000001b), helpstring("method AddResultTable")]
        HRESULT AddResultTable(
                        [in] IDispatch* piSelectMgr, 
                        [in] unsigned int resTableType, 
                        [out, retval] IDispatch** ppVal);
        [id(0x0000001c), helpstring("method AddGroupedScopedACPResults")]
        HRESULT AddGroupedScopedACPResults(
                        [in] unsigned int iResultType, 
                        [in] IDispatch* pIAnsUINTColl, 
                        [out, retval] int* groupFolderId);
        [id(0x00000016), propget, helpstring("property DefinedBy")]
        HRESULT DefinedBy([out, retval] DSRemoteApplicationType* pVal);
        [id(0x00000016), propput, helpstring("property DefinedBy")]
        HRESULT DefinedBy([in] DSRemoteApplicationType pVal);
        [id(0x00000017), propget, helpstring("property CompositeFailureCriteriaSelection")]
        HRESULT CompositeFailureCriteriaSelection([out, retval] dsid* pId);
        [id(0x00000017), propput, helpstring("property CompositeFailureCriteriaSelection")]
        HRESULT CompositeFailureCriteriaSelection([in] dsid pId);
        [id(0x00000033), propget, helpstring("property MaxStrainActive")]
        HRESULT MaxStrainActive([out, retval] VARIANT_BOOL* pMaxStrain);
        [id(0x00000034), propget, helpstring("property MaxStressActive")]
        HRESULT MaxStressActive([out, retval] VARIANT_BOOL* pMaxStress);
        [id(0x00000035), propget, helpstring("property TsaiWuActive")]
        HRESULT TsaiWuActive([out, retval] VARIANT_BOOL* pTsaiWu);
        [id(0x00000036), propget, helpstring("property TsaiHillActive")]
        HRESULT TsaiHillActive([out, retval] VARIANT_BOOL* pTsaiHill);
        [id(0x00000037), propget, helpstring("property HoffmanActive")]
        HRESULT HoffmanActive([out, retval] VARIANT_BOOL* pHoffman);
        [id(0x00000038), propget, helpstring("property HashinActive")]
        HRESULT HashinActive([out, retval] VARIANT_BOOL* pHashin);
        [id(0x00000039), propget, helpstring("property PuckActive")]
        HRESULT PuckActive([out, retval] VARIANT_BOOL* pPuck);
        [id(0x0000003a), propget, helpstring("property LaRCActive")]
        HRESULT LaRCActive([out, retval] VARIANT_BOOL* pLaRC);
        [id(0x0000003b), propget, helpstring("property CuntzeActive")]
        HRESULT CuntzeActive([out, retval] VARIANT_BOOL* pCuntze);
        [id(0x0000003c), propget, helpstring("property WrinklingActive")]
        HRESULT WrinklingActive([out, retval] VARIANT_BOOL* pWrinkling);
        [id(0x0000003d), propget, helpstring("property CoreFailureActive")]
        HRESULT CoreFailureActive([out, retval] VARIANT_BOOL* pCoreFailure);
        [id(0x0000003e), propget, helpstring("property VonMisesActive")]
        HRESULT VonMisesActive([out, retval] VARIANT_BOOL* pVonMises);
        [id(0x0000003f), propget, helpstring("property CrimpingActive")]
        HRESULT CrimpingActive([out, retval] VARIANT_BOOL* pCrimping);
        [id(0x00000065), propget, helpstring("property NumCriteriaItems")]
        HRESULT NumCriteriaItems(
                        [in] unsigned int idCriteria, 
                        [out, retval] unsigned int* nItems);
        [id(0x00000067), propget, helpstring("property CriteriaItemName")]
        HRESULT CriteriaItemName(
                        [in] unsigned int idCriteria, 
                        [in] unsigned int idProperty, 
                        [out, retval] BSTR* pCriteriaItemName);
        [id(0x00000066), propget, helpstring("property CriteriaItemActive")]
        HRESULT CriteriaItemActive(
                        [in] unsigned int idCriteria, 
                        [in] unsigned int idProperty, 
                        [out, retval] VARIANT_BOOL* pActive);
        [id(0x00000066), propput, helpstring("property CriteriaItemActive")]
        HRESULT CriteriaItemActive(
                        [in] unsigned int idCriteria, 
                        [in] unsigned int idProperty, 
                        [in] VARIANT_BOOL pActive);
        [id(0x00000068), propget, helpstring("property CriteriaItemValue")]
        HRESULT CriteriaItemValue(
                        [in] unsigned int idCriteria, 
                        [in] unsigned int idProperty, 
                        [out, retval] double* pVal);
        [id(0x00000068), propput, helpstring("property CriteriaItemValue")]
        HRESULT CriteriaItemValue(
                        [in] unsigned int idCriteria, 
                        [in] unsigned int idProperty, 
                        [in] double pVal);
        [id(0x00000069), helpstring("method ResetCriterionToDefault")]
        HRESULT ResetCriterionToDefault([in] unsigned int idCriteria);
        [id(0x0000006a), propget, helpstring("property AuxInfo")]
        HRESULT AuxInfo([out, retval] BSTR* AuxInfo);
        [id(0x0000006a), propput, helpstring("property AuxInfo")]
        HRESULT AuxInfo([in] BSTR AuxInfo);
    };

    typedef enum {
        DISPID_CompositeFailureCriteriaGroupType = 11,
        DISPID_CompositeFailureCriteriaGroupComment = 12,
        DISPID_CompositeFailureCriteriaGroupAddComment = 13,
        DISPID_CompositeFailureCriteriaGroupCompositeFailureCriteria = 14,
        DISPID_CompositeFailureCriteriaGroupAddCompositeFailureCriteria = 15,
        DISPID_CompositeFailureCriteriaGroupAddFigure = 16,
        DISPID_CompositeFailureCriteriaGroupFigures = 17,
        DISPID_CompositeFailureCriteriaGroupAddImage = 18,
        DISPID_CompositeFailureCriteriaGroupImages = 19
    } kDispId_CompositeFailureCriteriaGroup;

    [
      odl,
      uuid(03DF4115-25AE-468B-9F14-8512794DA30D),
      helpstring("IDSCompositeFailureCriteriaGroupAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSCompositeFailureCriteriaGroupAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x0000000c), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x0000000d), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x00000011), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x00000010), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x00000013), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000012), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x0000000e), propget, helpstring("property CompositeFailureCriteria")]
        HRESULT CompositeFailureCriteria([out, retval] IDispatch** ppDisp);
        [id(0x0000000f), helpstring("method AddCompositeFailureCriteria")]
        HRESULT AddCompositeFailureCriteria(
                        [in] IDispatch* piSelectMgr, 
                        [out, retval] IDispatch** pDisp);
    };

    typedef enum {
        DISPID_CompositeFailureCriteriaType = 11,
        DISPID_CompositeFailureCriteriaSuppressed = 12,
        DISPID_CompositeFailureCriteriaComments = 13,
        DISPID_CompositeFailureCriteriaFigures = 14,
        DISPID_CompositeFailureCriteriaAddFigure = 15,
        DISPID_CompositeFailureCriteriaAddComment = 16,
        DISPID_CompositeFailureCriteriaImages = 17,
        DISPID_CompositeFailureCriteriaAddImage = 18,
        DISPID_CompositeFailureCriteriaGloballyAvailable = 19,
        DISPID_CompositeFailureCriteriaPromoted = 20,
        DISPID_CompositeFailureCriteriaMaxStrain = 21,
        DISPID_CompositeFailureCriteriaMaxStress = 22,
        DISPID_CompositeFailureCriteriaTsaiWu = 23,
        DISPID_CompositeFailureCriteriaTsaiHill = 24,
        DISPID_CompositeFailureCriteriaHoffman = 25,
        DISPID_CompositeFailureCriteriaHashin = 26,
        DISPID_CompositeFailureCriteriaPuck = 27,
        DISPID_CompositeFailureCriteriaLaRC = 28,
        DISPID_CompositeFailureCriteriaCuntze = 29,
        DISPID_CompositeFailureCriteriaWrinkling = 30,
        DISPID_CompositeFailureCriteriaCoreFailure = 31,
        DISPID_CompositeFailureCriteriaVonMises = 32,
        DISPID_CompositeFailureCriteriaCrimping = 33,
        DISPID_CompositeFailureCriteriaNumItems = 41,
        DISPID_CompositeFailureCriteriaItemActive = 42,
        DISPID_CompositeFailureCriteriaItemName = 43,
        DISPID_CompositeFailureCriteriaItemValue = 44,
        DISPID_CompositeFailureCriteriaResetCriterionToDefault = 45,
        DISPID_CompositeFailureCriteriaAuxInfo = 46
    } kDispId_CompositeFailureCriteria;

    [
      odl,
      uuid(83DC0D04-189D-4995-9BFD-00267AB3563C),
      helpstring("IDSCompositeFailureCriteriaAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSCompositeFailureCriteriaAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x00000010), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x0000000f), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x00000012), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00000011), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x0000000d), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x0000000e), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x00000013), propget, helpstring("property GloballyAvailable")]
        HRESULT GloballyAvailable([out, retval] VARIANT_BOOL* pAvailable);
        [id(0x00000013), propput, helpstring("property GloballyAvailable")]
        HRESULT GloballyAvailable([in] VARIANT_BOOL pAvailable);
        [id(0x00000015), propget, helpstring("property MaxStrainActive")]
        HRESULT MaxStrainActive([out, retval] VARIANT_BOOL* pMaxStrain);
        [id(0x00000016), propget, helpstring("property MaxStressActive")]
        HRESULT MaxStressActive([out, retval] VARIANT_BOOL* pMaxStress);
        [id(0x00000017), propget, helpstring("property TsaiWuActive")]
        HRESULT TsaiWuActive([out, retval] VARIANT_BOOL* pTsaiWu);
        [id(0x00000018), propget, helpstring("property TsaiHillActive")]
        HRESULT TsaiHillActive([out, retval] VARIANT_BOOL* pTsaiHill);
        [id(0x00000019), propget, helpstring("property HoffmanActive")]
        HRESULT HoffmanActive([out, retval] VARIANT_BOOL* pHoffman);
        [id(0x0000001a), propget, helpstring("property HashinActive")]
        HRESULT HashinActive([out, retval] VARIANT_BOOL* pHashin);
        [id(0x0000001b), propget, helpstring("property PuckActive")]
        HRESULT PuckActive([out, retval] VARIANT_BOOL* pPuck);
        [id(0x0000001c), propget, helpstring("property LaRCActive")]
        HRESULT LaRCActive([out, retval] VARIANT_BOOL* pLaRC);
        [id(0x0000001d), propget, helpstring("property CuntzeActive")]
        HRESULT CuntzeActive([out, retval] VARIANT_BOOL* pCuntze);
        [id(0x0000001e), propget, helpstring("property WrinklingActive")]
        HRESULT WrinklingActive([out, retval] VARIANT_BOOL* pWrinkling);
        [id(0x0000001f), propget, helpstring("property CoreFailureActive")]
        HRESULT CoreFailureActive([out, retval] VARIANT_BOOL* pCoreFailure);
        [id(0x00000020), propget, helpstring("property VonMisesActive")]
        HRESULT VonMisesActive([out, retval] VARIANT_BOOL* pVonMises);
        [id(0x00000021), propget, helpstring("property CrimpingActive")]
        HRESULT CrimpingActive([out, retval] VARIANT_BOOL* pCrimping);
        [id(0x00000029), propget, helpstring("property NumCriteriaItems")]
        HRESULT NumCriteriaItems(
                        [in] unsigned int idCriteria, 
                        [out, retval] unsigned int* nItems);
        [id(0x0000002b), propget, helpstring("property CriteriaItemName")]
        HRESULT CriteriaItemName(
                        [in] unsigned int idCriteria, 
                        [in] unsigned int idProperty, 
                        [out, retval] BSTR* pCriteriaItemName);
        [id(0x0000002a), propget, helpstring("property CriteriaItemActive")]
        HRESULT CriteriaItemActive(
                        [in] unsigned int idCriteria, 
                        [in] unsigned int idProperty, 
                        [out, retval] VARIANT_BOOL* pActive);
        [id(0x0000002a), propput, helpstring("property CriteriaItemActive")]
        HRESULT CriteriaItemActive(
                        [in] unsigned int idCriteria, 
                        [in] unsigned int idProperty, 
                        [in] VARIANT_BOOL pActive);
        [id(0x0000002c), propget, helpstring("property CriteriaItemValue")]
        HRESULT CriteriaItemValue(
                        [in] unsigned int idCriteria, 
                        [in] unsigned int idProperty, 
                        [out, retval] double* pVal);
        [id(0x0000002c), propput, helpstring("property CriteriaItemValue")]
        HRESULT CriteriaItemValue(
                        [in] unsigned int idCriteria, 
                        [in] unsigned int idProperty, 
                        [in] double pVal);
        [id(0x0000002d), helpstring("method ResetCriterionToDefault")]
        HRESULT ResetCriterionToDefault([in] unsigned int idCriteria);
        [id(0x0000002e), propget, helpstring("property AuxInfo")]
        HRESULT AuxInfo([out, retval] BSTR* AuxInfo);
        [id(0x0000002e), propput, helpstring("property AuxInfo")]
        HRESULT AuxInfo([in] BSTR AuxInfo);
    };

    typedef enum {
        DISPID_ResponsePSDToolComments = 10,
        DISPID_ResponsePSDToolFigures = 11,
        DISPID_ResponsePSDToolAddComment = 12,
        DISPID_ResponsePSDToolAddFigure = 13,
        DISPID_ResponsePSDToolImages = 14,
        DISPID_ResponsePSDToolAddImage = 15,
        DISPID_ResponsePSDToolAddResultProbe = 16,
        DISPID_ResponsePSDToolIncludeAllExcitationFrequencies = 17,
        DISPID_ResponsePSDToolIncludeUserDefinedFrequencies = 18,
        DISPID_ResponsePSDToolUserDefinedFrequencies = 19,
        DISPID_ResponsePSDToolAddUserDefinedFrequency = 20,
        DISPID_ResponsePSDToolRemoveUserDefinedFrequency = 21,
        DISPID_ResponsePSDToolFreqSpacingResolution = 22
    } kDispId_ResponsePSDTool;

    [
      odl,
      uuid(F343ACAB-D0FF-4B20-A4E2-2D1CE43049DE),
      helpstring("IDSResponsePSDToolAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSResponsePSDToolAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x0000000a), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x0000000b), propget, helpstring("property Figures")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x0000000c), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x0000000d), helpstring("method AddFigure")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x0000000e), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x0000000f), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00000010), helpstring("method AddResultProbe")]
        HRESULT AddResultProbe(
                        [in] IDispatch* piSelectMgr, 
                        [in] DSProbeResultType probeType, 
                        [out, retval] IDispatch** ppVal);
        [id(0x00000011), propget, helpstring("property IncludeAllExcitationFrequencies")]
        HRESULT IncludeAllExcitationFrequencies([out, retval] VARIANT_BOOL* pAvailable);
        [id(0x00000011), propput, helpstring("property IncludeAllExcitationFrequencies")]
        HRESULT IncludeAllExcitationFrequencies([in] VARIANT_BOOL pAvailable);
        [id(0x00000012), propget, helpstring("property IncludeUserDefinedFrequencies")]
        HRESULT IncludeUserDefinedFrequencies([out, retval] VARIANT_BOOL* pAvailable);
        [id(0x00000012), propput, helpstring("property IncludeUserDefinedFrequencies")]
        HRESULT IncludeUserDefinedFrequencies([in] VARIANT_BOOL pAvailable);
        [id(0x00000016), propget, helpstring("method FreqSpacingResolution")]
        HRESULT FreqSpacingResolution([out, retval] unsigned int* pVal);
        [id(0x00000016), propput, helpstring("method FreqSpacingResolution")]
        HRESULT FreqSpacingResolution([in] unsigned int pVal);
        [id(0x00000013), propget, helpstring("property UserDefinedFrequencies")]
        HRESULT UserDefinedFrequencies(IDSListWrapper* pUserFrequencyPoints);
        [id(0x00000014), helpstring("method AddFrequencyPoint")]
        HRESULT AddFrequencyPoint([in] double dUserFrequency);
        [id(0x00000015), helpstring("method RemoveFrequencyPoint")]
        HRESULT RemoveFrequencyPoint([in] double dUserFrequency);
    };

    typedef enum {
        DISPID_PhysicsRegionGeometryDefineBy = 11,
        DISPID_PhysicsRegionGeometrySelection = 12,
        DISPID_PhysicsRegionElectricCondPhySelection = 13,
        DISPID_PhysicsRegionThermalPhySelection = 14,
        DISPID_PhysicsRegionSuppressed = 15
    } kDispId_PhysicsRegion;

    [
      odl,
      uuid(36D94BD6-B8F8-4420-B1B2-35202FEB9997),
      helpstring("IDSPhysicsRegionAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSPhysicsRegionAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x0000000b), propget, helpstring("property GeometryDefineBy")]
        HRESULT GeometryDefineBy([out, retval] DSGeometryDefineByType* pVal);
        [id(0x0000000b), propput, helpstring("property GeometryDefineBy")]
        HRESULT GeometryDefineBy([in] DSGeometryDefineByType pVal);
        [id(0x0000000c), propput, helpstring("property GeometrySelection")]
        HRESULT GeometrySelection([in] IDispatch* rhs);
        [id(0x0000000d), propget, helpstring("method ElectricCondPhySelection")]
        HRESULT ElectricCondPhySelection([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000000d), propput, helpstring("method ElectricCondPhySelection")]
        HRESULT ElectricCondPhySelection([in] VARIANT_BOOL pVal);
        [id(0x0000000e), propget, helpstring("method ThermalPhySelection")]
        HRESULT ThermalPhySelection([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000000e), propput, helpstring("method ThermalPhySelection")]
        HRESULT ThermalPhySelection([in] VARIANT_BOOL pVal);
        [id(0x0000000f), propget, helpstring("property Suppressed")]
        HRESULT Suppressed([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000000f), propput, helpstring("property Suppressed")]
        HRESULT Suppressed([in] VARIANT_BOOL pVal);
    };

    [
      odl,
      uuid(E141235D-CEE8-46B2-A469-1C1C1D6EACC8),
      helpstring("IAnsUITreeProxy Interface")
    ]
    interface IAnsUITreeProxy : IUnknown {
        HRESULT _stdcall getChildren([out, retval] IAnsIDispColl** pVal);
        HRESULT _stdcall GetIcon([out, retval] BSTR* pVal);
        HRESULT _stdcall GetEnabled([out, retval] VARIANT_BOOL* pVal);
    };

    [
      uuid(E8823780-AFB0-4440-94D5-69483A5BDC7B),
      helpstring("DSObjectsService Class")
    ]
    coclass DSObjectsService {
        [default] interface IDSService2;
        interface IDSObjects;
    };

    [
      odl,
      uuid(E2E04CE5-5E10-4ACF-A431-9338DC91DDC9),
      helpstring("IDSService2 Interface")
    ]
    interface IDSService2 : IUnknown {
        HRESULT _stdcall OnInit(
                        [in] wireHWND hCadHWND, 
                        [in] IUnknown* pDSCal);
        HRESULT _stdcall OnTerm();
        HRESULT _stdcall GetDescription([in] LPSTR lpszVersion);
    };

    typedef [public]
    _RemotableHandle* wireHWND;

    typedef struct tag_RemotableHandle {
                
long fContext;
                
__MIDL_IWinTypes_0009 u;
    } _RemotableHandle;

    typedef union tag__MIDL_IWinTypes_0009 {
                
long hInproc;
                
long hRemote;
    } __MIDL_IWinTypes_0009;

    [
      uuid(0618A7E4-9453-4261-910F-AE417FDCBDD3),
      helpstring("DSAccelerationAuto Class"),
      noncreatable
    ]
    coclass DSAccelerationAuto {
        [default] interface IDSAccelerationAuto;
    };

    [
      uuid(9DF09171-5BFE-4C14-9A64-A9D5A4C760AB),
      helpstring("DSAccessControl Class"),
      noncreatable
    ]
    coclass DSAccessControl {
        [default] interface IDSAccessControl;
    };

    [
      uuid(853C05D5-6D91-48C0-B831-07DDB705D2C4),
      helpstring("DSAdvancedOptionsAuto Class"),
      noncreatable
    ]
    coclass DSAdvancedOptionsAuto {
        [default] interface IDSAdvancedOptionsAuto;
    };

    [
      uuid(D86616D2-7343-4913-B41D-1E75888F27AB),
      helpstring("DSAdvancedPostOutputAuto Class"),
      noncreatable
    ]
    coclass DSAdvancedPostOutputAuto {
        [default] interface IDSAdvancedPostOutputAuto;
    };

    [
      uuid(B56C7299-F04D-4916-9E9E-DFFE66380B09),
      helpstring("DSAdvancedPostProcessingAuto Class"),
      noncreatable
    ]
    coclass DSAdvancedPostProcessingAuto {
        [default] interface IDSAdvancedPostProcessingAuto;
    };

    [
      uuid(6426FD32-B68F-480A-B594-F64C81CA0D30),
      helpstring("DSAlertAuto Class"),
      noncreatable
    ]
    coclass DSAlertAuto {
        [default] interface IDSAlertAuto;
    };

    [
      uuid(8E498679-0FE9-412F-9077-72152812801A),
      helpstring("DSAnswerSetAuto Class"),
      noncreatable
    ]
    coclass DSAnswerSetAuto {
        [default] interface IDSAnswerSetAuto;
    };

    [
      uuid(4244F4C7-5648-4CEB-95BB-E4861C0B4CDF),
      helpstring("DSBeamToolAuto Class"),
      noncreatable
    ]
    coclass DSBeamToolAuto {
        [default] interface IDSBeamToolAuto;
    };

    [
      uuid(41B57FD3-FC6F-41FF-A033-F4398238B0D4),
      helpstring("DSCompositeFailureToolAuto Class"),
      noncreatable
    ]
    coclass DSCompositeFailureToolAuto {
        [default] interface IDSCompositeFailureToolAuto;
    };

    [
      uuid(A8AA9A86-5B5E-4823-B212-C88C5B1E7AA4),
      helpstring("DSCompositeFailureCriteriaGroupAuto Class"),
      noncreatable
    ]
    coclass DSCompositeFailureCriteriaGroupAuto {
        [default] interface IDSCompositeFailureCriteriaGroupAuto;
    };

    [
      uuid(656B4B3D-1779-4B25-9EF7-2FA012BEE1C8),
      helpstring("DSCompositeFailureCriteriaAuto Class"),
      noncreatable
    ]
    coclass DSCompositeFailureCriteriaAuto {
        [default] interface IDSCompositeFailureCriteriaAuto;
    };

    [
      uuid(83F8B19E-F632-4A67-9118-6044FB68BF0E),
      helpstring("DSFractureToolAuto Class"),
      noncreatable
    ]
    coclass DSFractureToolAuto {
        [default] interface IDSFractureToolAuto;
    };

    [
      uuid(49C33E29-F1B1-447A-B2FE-43A8E29DD8D8),
      helpstring("DSBodyGroupAuto Class"),
      noncreatable
    ]
    coclass DSBodyGroupAuto {
        [default] interface IDSBodyGroupAuto;
    };

    [
      uuid(A5A39446-C8A1-4E77-A7C1-D6EC15886EE9),
      helpstring("DSBranchAuto Class"),
      noncreatable
    ]
    coclass DSBranchAuto {
        [default] interface IDSBranchAuto;
    };

    [
      uuid(B0241420-537A-4FA6-8409-5E5FBC763AF5),
      helpstring("DSChartAuto Class"),
      noncreatable
    ]
    coclass DSChartAuto {
        [default] interface IDSChartAuto;
    };

    [
      uuid(EFBA5E91-5DD0-4721-B557-7B30472D6F75),
      helpstring("DSCollectionAuto Class"),
      noncreatable
    ]
    coclass DSCollectionAuto {
        [default] interface IDSCollectionAuto;
    };

    [
      uuid(6CA5A62F-766A-4227-BEF4-CA0F46EC43B0),
      helpstring("DSCommandEditorAuto Class"),
      noncreatable
    ]
    coclass DSCommandEditorAuto {
        [default] interface IDSCommandEditorAuto;
    };

    [
      uuid(0C0A6976-7297-4DE1-BF68-03D47895FABE),
      helpstring("DSCommentAuto Class"),
      noncreatable
    ]
    coclass DSCommentAuto {
        [default] interface IDSCommentAuto;
    };

    [
      uuid(D7147D5F-3CFF-46ED-80F1-547E3CCEEA02),
      helpstring("DSConstraintEquationAuto Class"),
      noncreatable
    ]
    coclass DSConstraintEquationAuto {
        [default] interface IDSConstraintEquationAuto;
    };

    [
      uuid(0881F5FB-85AE-4529-B739-D121928BC8AC),
      helpstring("DSComponentAuto Class"),
      noncreatable
    ]
    coclass DSComponentAuto {
        [default] interface IDSComponentAuto;
    };

    [
      uuid(DEA9E963-E289-4B35-B950-D3B4911D1F8D),
      helpstring("DSComponentGroupAuto Class"),
      noncreatable
    ]
    coclass DSComponentGroupAuto {
        [default] interface IDSComponentGroupAuto;
    };

    [
      uuid(A083B980-5FF0-415B-9688-AC80CC829A86),
      helpstring("DSContactGroupAuto Class"),
      noncreatable
    ]
    coclass DSContactGroupAuto {
        [default] interface IDSContactGroupAuto;
    };

    [
      uuid(AEB10AA4-765B-4C68-A1B9-516EC96146FB),
      helpstring("DSConnectionGroupAuto Class"),
      noncreatable
    ]
    coclass DSConnectionGroupAuto {
        [default] interface IDSConnectionGroupAuto;
    };

    [
      uuid(C103852C-79DA-4AF4-BA22-056C3918DAD2),
      helpstring("DSCondensedPartInfoToolAuto Class"),
      noncreatable
    ]
    coclass DSCondensedPartInfoToolAuto {
        [default] interface IDSCondensedPartInfoToolAuto;
    };

    [
      uuid(D3B750CD-721D-4EDE-A87D-2CC222A91A5A),
      helpstring("DSContacInfoToolAuto Class"),
      noncreatable
    ]
    coclass DSContactInfoToolAuto {
        [default] interface IDSContactInfoToolAuto;
    };

    [
      uuid(F8ED2278-7AB4-4EE8-BD60-89DCAC447372),
      helpstring("DSContactRegionAuto Class"),
      noncreatable
    ]
    coclass DSContactRegionAuto {
        [default] interface IDSContactRegionAuto;
    };

    [
      uuid(C473AECF-3502-420F-9CCA-DDE7CADAD98E),
      helpstring("DSMeshConnectionAuto Class"),
      noncreatable
    ]
    coclass DSMeshConnectionAuto {
        [default] interface IDSMeshConnectionAuto;
    };

    [
      uuid(C073290A-733F-4780-8472-453BAD8C4F4F),
      helpstring("DSBeamEndReleaseAuto Class"),
      noncreatable
    ]
    coclass DSBeamEndReleaseAuto {
        [default] interface IDSBeamEndReleaseAuto;
    };

    [
      uuid(3BFA9610-DA37-4522-B1C3-C6F58AA028C6),
      helpstring("DSBoltToolAuto Class"),
      noncreatable
    ]
    coclass DSBoltToolAuto {
        [default] interface IDSBoltToolAuto;
    };

    [
      uuid(9DDA3EAC-F992-49B7-AF12-B1E931FEC173),
      helpstring("DSContactScopedAuto Class"),
      noncreatable
    ]
    coclass DSContactScopedAuto {
        [default] interface IDSContactRegionAuto;
    };

    [
      uuid(4F9B21E1-75CF-4367-82A1-9985E68490F5),
      helpstring("DSContactToolAuto Class"),
      noncreatable
    ]
    coclass DSContactToolAuto {
        [default] interface IDSContactToolAuto;
    };

    [
      uuid(143971B9-819E-414B-939C-398334E62984),
      helpstring("DSContactToolSelection Class")
    ]
    coclass DSContactToolSelection {
        [default] interface IDSContactToolSelection;
    };

    [
      uuid(030EBACD-9A5A-47FC-B39B-507D121DFB14),
      helpstring("DSConvectionAuto Class"),
      noncreatable
    ]
    coclass DSConvectionAuto {
        [default] interface IDSConvectionAuto;
    };

    [
      uuid(F57C938A-D48C-4CDB-A4B0-A6D0418FF337),
      helpstring("DSConvergenceAuto Class"),
      noncreatable
    ]
    coclass DSConvergenceAuto {
        [default] interface IDSConvergenceAuto;
    };

    [
      uuid(FA88AB00-A061-4ED5-A523-9F7F6FD8E7E9),
      helpstring("DSConstructionGeometryGroupAuto Class"),
      noncreatable
    ]
    coclass DSConstructionGeometryGroupAuto {
        [default] interface IDSConstructionGeometryGroupAuto;
    };

    [
      uuid(C985C0E8-52CF-44DE-AE85-9E34EB6779E0),
      helpstring("DSCoordinateSystemAuto Class"),
      noncreatable
    ]
    coclass DSCoordinateSystemAuto {
        [default] interface IDSCoordinateSystemAuto;
    };

    [
      uuid(625A1ABE-57C1-4D22-80E4-79866D639A0B),
      helpstring("DSCoordinateSystemGroupAuto Class"),
      noncreatable
    ]
    coclass DSCoordinateSystemGroupAuto {
        [default] interface IDSCoordinateSystemGroupAuto;
    };

    [
      uuid(A33DDA0C-7299-4628-9FBE-44849A16F64B),
      helpstring("DSCustomResultAuto Class"),
      noncreatable
    ]
    coclass DSCustomResultAuto {
        [default] interface IDSCustomResultAuto;
    };

    [
      uuid(33E7F875-32D0-42A0-AF6F-C93254EC6EA1),
      helpstring("DSDataTable Class"),
      noncreatable
    ]
    coclass DSDataTable {
        [default] interface IDSDataTable;
    };

    [
      uuid(D43D90EC-A4C4-44F4-8B44-BC1692EE5DA6),
      helpstring("DSDataCurve Class"),
      noncreatable
    ]
    coclass DSDataCurve {
        [default] interface IDSDataCurve;
    };

    [
      uuid(4CADCA8A-8103-434B-8818-9B2B6740C0F1),
      helpstring("DSElementAuto Class"),
      noncreatable
    ]
    coclass DSElementAuto {
        [default] interface IDSElementAuto;
    };

    [
      uuid(1518A801-9B0B-499C-8844-27D2CAF37C2E),
      helpstring("DSEnvironmentAuto Class"),
      noncreatable
    ]
    coclass DSEnvironmentAuto {
        [default] interface IDSEnvironmentAuto;
    };

    [
      uuid(5DDC05F2-7C76-41DB-A304-0558B94A6F15),
      helpstring("DSExternalLoadAuto Class"),
      noncreatable
    ]
    coclass DSExternalLoadAuto {
        [default] interface IDSExternalLoadAuto;
    };

    [
      uuid(48D3E270-A998-4F04-9697-ADF5DDF1553A),
      helpstring("DSExternalLoadGroupAuto Class"),
      noncreatable
    ]
    coclass DSExternalLoadGroupAuto {
        [default] interface IDSExternalLoadGroupAuto;
    };

    [
      uuid(8C564518-9F3C-40EE-BC7A-385E2D303EC0),
      helpstring("DSFaceAuto Class"),
      noncreatable
    ]
    coclass DSFaceAuto {
        [default] interface IDSFace;
    };

    [
      uuid(DCA14249-98D6-4B87-982B-B9556F0CF139),
      helpstring("DSFigure Class"),
      noncreatable
    ]
    coclass DSFigure {
        [default] interface IDSFigureAuto;
    };

    [
      uuid(AAEAC344-30D0-4A07-9B7A-E0C9B9A411C3),
      helpstring("DSFrequencyGroupAuto Class"),
      noncreatable
    ]
    coclass DSFrequencyGroupAuto {
        [default] interface IDSFrequencyGroupAuto;
    };

    [
      uuid(75B2D8AF-76B2-4850-823F-8EF96BC3BFDD),
      helpstring("DSFatigueToolAuto Class"),
      noncreatable
    ]
    coclass DSFatigueToolAuto {
        [default] interface IDSFatigueToolAuto;
    };

    [
      uuid(19187894-54E4-4C29-81CB-242BE5EDD8F8),
      helpstring("DSGeneralLoadAuto Class"),
      noncreatable
    ]
    coclass DSGeneralLoadAuto {
        [default] interface IDSGeneralLoadAuto;
    };

    [
      uuid(6518D373-B982-4A12-A801-82F9F8B5FEC9),
      helpstring("DSGeneralLoadEntry Class")
    ]
    coclass DSGeneralLoadEntry {
        [default] interface IDSGeneralLoadEntry;
    };

    [
      uuid(C660D03B-A3E4-4210-8571-E9F863BF8859),
      helpstring("DSHarmonicToolAuto Class"),
      noncreatable
    ]
    coclass DSHarmonicToolAuto {
        [default] interface IDSHarmonicToolAuto;
    };

    [
      uuid(080F186B-86EE-467B-862A-E7395EF2D1F4),
      helpstring("DSJointConditionAuto Class"),
      noncreatable
    ]
    coclass DSJointConditionAuto {
        [default] interface IDSJointConditionAuto;
    };

    [
      uuid(E99724C3-6F14-499C-8D1A-BAD7DC31E38F),
      helpstring("DSInitialInfoSummaryAuto Class"),
      noncreatable
    ]
    coclass DSInitialInfoSummaryAuto {
        [default] interface IDSInitialInfoSummaryAuto;
    };

    [
      uuid(4346F09E-CC3B-4196-BE4D-6AE1FFCB1C4A),
      helpstring("DSInitialConditionsAuto Class"),
      noncreatable
    ]
    coclass DSInitialConditionsAuto {
        [default] interface IDSInitialConditionsAuto;
    };

    [
      uuid(5AE07129-ED88-48C8-B9BA-06F60DA44C2B),
      helpstring("DSInitialConditionGroupAuto Class"),
      noncreatable
    ]
    coclass DSInitialConditionGroupAuto {
        [default] interface IDSInitialConditionGroupAuto;
    };

    [
      uuid(6EFBF809-E1BC-439E-ACF7-DE3C2D5B15DE),
      helpstring("DSBodyInteractionAuto Class"),
      noncreatable
    ]
    coclass DSBodyInteractionAuto {
        [default] interface IDSBodyInteractionAuto;
    };

    [
      uuid(D2DDC6A7-FA8F-41C9-994F-9A11C8AC5E84),
      helpstring("DSBodyInteractionGroupAuto Class"),
      noncreatable
    ]
    coclass DSBodyInteractionGroupAuto {
        [default] interface IDSBodyInteractionGroupAuto;
    };

    [
      uuid(C4B11219-CAA6-49EB-BF9B-07513E3B6C95),
      helpstring("DSRSLoadAuto Class"),
      noncreatable
    ]
    coclass DSRSLoadAuto {
        [default] interface IDSRSLoadAuto;
    };

    [
      uuid(4BAD963A-6C6C-495F-A2B5-9B854F76C08A),
      helpstring("DSPSDLoadAuto Class"),
      noncreatable
    ]
    coclass DSPSDLoadAuto {
        [default] interface IDSPSDLoadAuto;
    };

    [
      uuid(1752FDBB-B770-460F-9D2F-3C3D853F9181),
      helpstring("DSModalSettingsAuto Class"),
      noncreatable
    ]
    coclass DSModalSettingsAuto {
        [default] interface IDSModalSettingsAuto;
    };

    [
      uuid(C9D768B1-E407-43F6-AA5B-BD598E96F9C4),
      helpstring("DSAnalysisSettings Class"),
      noncreatable
    ]
    coclass DSAnalysisSettings {
        [default] interface IDSAnalysisSettings;
    };

    [
      uuid(29FE53E9-C314-447F-B586-939272642D16),
      helpstring("DSJointAuto Class")
    ]
    coclass DSJointAuto {
        [default] interface IDSJointAuto;
    };

    [
      uuid(1533FEB7-B552-4B23-BF9E-C2C5F180422B),
      helpstring("DSBeamConnectionAuto Class")
    ]
    coclass DSBeamConnectionAuto {
        [default] interface IDSBeamConnectionAuto;
    };

    [
      uuid(47638565-4B2C-4202-83CD-CB721B2BDBA2),
      helpstring("DSSpringAuto Class")
    ]
    coclass DSSpringAuto {
        [default] interface IDSSpringAuto;
    };

    [
      uuid(FDFBAFEE-02C6-49E0-9450-19C894448BE8),
      helpstring("DSBearingAuto Class")
    ]
    coclass DSBearingAuto {
        [default] interface IDSBearingAuto;
    };

    [
      uuid(8B6EC300-E8E8-4655-9F27-7E99F94ACC5F),
      helpstring("DSLoadAuto Class"),
      noncreatable
    ]
    coclass DSLoadAuto {
        [default] interface IDSLoadAuto;
    };

    [
      uuid(DC613836-7F94-446D-872D-440383CD3DC0),
      helpstring("DSAutodynBCAuto Class"),
      noncreatable
    ]
    coclass DSAutodynBCAuto {
        [default] interface IDSAutodynBCAuto;
    };

    [
      uuid(EF0A7431-B372-4152-A094-305E6D6C0EE3),
      helpstring("DSLoadGroupAuto Class"),
      noncreatable
    ]
    coclass DSLoadGroupAuto {
        [default] interface IDSLoadGroupAuto;
    };

    [
      uuid(792BD55B-9734-411F-A1BC-9781FF65872B),
      helpstring("DSSolutionCombination Class"),
      noncreatable
    ]
    coclass DSSolutionCombinationAuto {
        [default] interface IDSSolutionCombinationAuto;
    };

    [
      uuid(8AD0406A-5161-49C0-8D07-8A5F8252E06E),
      helpstring("DSDASolutionCombination Class"),
      noncreatable
    ]
    coclass DSDASolutionCombinationAuto {
        [default] interface IDSDASolutionCombinationAuto;
    };

    [
      uuid(653634A3-0EC2-4A75-9579-03C67C52298F),
      helpstring("DSDAAttribute Class"),
      noncreatable
    ]
    coclass DSDAAttributeAuto {
        [default] interface IDSDAAttributeAuto;
    };

    [
      uuid(1AAC47BC-F034-4E09-AC59-FA60D7E1CA3C),
      helpstring("DSDAResult Class"),
      noncreatable
    ]
    coclass DSDAResultAuto {
        [default] interface IDSDAResultAuto;
    };

    [
      uuid(9E68B648-3289-4363-841B-EC47708DABF9),
      helpstring("DSMaterialAuto Class"),
      noncreatable
    ]
    coclass DSMaterialAuto {
        [default] interface IDSMaterialAuto;
    };

    [
      uuid(377C5C86-6984-4E07-9DD2-32B9087F893F),
      helpstring("DSMeshAuto Class"),
      noncreatable
    ]
    coclass DSMeshAuto {
        [default] interface IDSMeshAuto;
    };

    [
      uuid(DEE6E8F2-C78E-4781-A81F-A266C8F2082B),
      helpstring("DSMeshBCAuto Class"),
      noncreatable
    ]
    coclass DSMeshBCAuto {
        [default] interface IDSMeshBCAuto;
    };

    [
      uuid(9E7AA96F-10B2-4102-8F80-FA5B1CB70212),
      helpstring("DSMeshControlAuto Class"),
      noncreatable
    ]
    coclass DSMeshControlAuto {
        [default] interface IDSMeshControlAuto;
    };

    [
      uuid(111F1C9B-6235-429E-8E94-7F5F525C2676),
      helpstring("DSMeshControlGroupAuto Class"),
      noncreatable
    ]
    coclass DSMeshControlGroupAuto {
        [default] interface IDSMeshControlGroupAuto;
    };

    [
      uuid(DF4503DC-61C2-4BF1-B5F5-F3B61F81864C),
      helpstring("DSMeshEditGroupAuto Class"),
      noncreatable
    ]
    coclass DSMeshEditGroupAuto {
        [default] interface IDSMeshEditGroupAuto;
    };

    [
      uuid(67B66C27-C100-4E3B-A272-57AC807DE175),
      helpstring("DSNodeMove Class"),
      noncreatable
    ]
    coclass DSNodeMoveAuto {
        [default] interface IDSNodeMoveAuto;
    };

    [
      uuid(B75CFD05-C5F1-4AB2-876B-967B0CE2273E),
      helpstring("DSModelAuto Class"),
      noncreatable
    ]
    coclass DSModelAuto {
        [default] interface IDSModelAuto;
    };

    [
      uuid(E77E1C80-AA8F-42BF-878A-01D70BA7E670),
      helpstring("DSSolutionInfoToolAuto Class"),
      noncreatable
    ]
    coclass DSSolutionInfoToolAuto {
        [default] interface IDSSolutionInfoToolAuto;
    };

    [
      uuid(9398E192-E3E1-4BE9-B460-38BE13D5ED70),
      helpstring("DSExpansionSettingsAuto Class"),
      noncreatable
    ]
    coclass DSExpansionSettingsAuto {
        [default] interface IDSExpansionSettingsAuto;
    };

    [
      uuid(D82AAFA6-8978-4713-B1EA-F56571D18839),
      helpstring("DSNodeAuto Class"),
      noncreatable
    ]
    coclass DSNodeAuto {
        [default] interface IDSNodeAuto;
    };

    [
      uuid(D18E300D-B2E7-42D7-8B1A-8D816A37BE45),
      helpstring("DSParameterSetAuto Class"),
      noncreatable
    ]
    coclass DSParameterSetAuto {
        [default] interface IDSParameterSetAuto;
    };

    [
      uuid(81C9D153-EACE-4E09-B850-7EF62C6D7C7A),
      helpstring("DSParameter Class")
    ]
    coclass DSParameter {
        [default] interface IDSParameter;
    };

    [
      uuid(DB5C43C9-F93F-4A95-8197-C29AAB84390A),
      helpstring("DSPretensionBoltLoadAuto Class"),
      noncreatable
    ]
    coclass DSPretensionBoltLoadAuto {
        [default] interface IDSPretensionBoltLoadAuto;
    };

    [
      uuid(531F1D05-1ABD-40C9-9F80-D7BF72D671EF),
      helpstring("DSProbeToolAuto Class"),
      noncreatable
    ]
    coclass DSProbeToolAuto {
        [default] interface IDSProbeToolAuto;
    };

    [
      uuid(5EEAF703-5F51-4277-8886-B3B7C659006B),
      helpstring("DSProbeResultAuto Class"),
      noncreatable
    ]
    coclass DSProbeResultAuto {
        [default] interface IDSProbeResultAuto;
    };

    [
      uuid(C1A7F907-FC93-4BAB-B672-43AE4E4E51E6),
      helpstring("DSProjectAuto Class"),
      noncreatable
    ]
    coclass DSProjectAuto {
        [default] interface IDSProjectAuto;
    };

    [
      odl,
      uuid(7ABF0FC9-2BD8-459C-A3A5-01EC22AB8D42),
      helpstring("IDSProjectAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSProjectAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property Name")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property ID")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property Class")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property Parent")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property Children")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x0000000a), propget, helpstring("property Author")]
        HRESULT Author([out, retval] BSTR* pVal);
        [id(0x0000000a), propput, helpstring("property Author")]
        HRESULT Author([in] BSTR pVal);
        [id(0x0000000b), propget, helpstring("property Subject")]
        HRESULT Subject([out, retval] BSTR* pVal);
        [id(0x0000000b), propput, helpstring("property Subject")]
        HRESULT Subject([in] BSTR pVal);
        [id(0x0000000c), propget, helpstring("property PreparedFor")]
        HRESULT PreparedFor([out, retval] BSTR* pVal);
        [id(0x0000000c), propput, helpstring("property PreparedFor")]
        HRESULT PreparedFor([in] BSTR pVal);
        [id(0x0000000d), propget, helpstring("property Comments")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x0000000e), propget, helpstring("property IsReadOnly")]
        HRESULT IsReadOnly([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000000e), propput, helpstring("property IsReadOnly")]
        HRESULT IsReadOnly([in] VARIANT_BOOL pVal);
        [id(0x0000000f), propget, helpstring("property CreationDate")]
        HRESULT CreationDate([out, retval] BSTR* pVal);
        [id(0x0000000f), propput, helpstring("property CreationDate")]
        HRESULT CreationDate([in] BSTR pVal);
        [id(0x00000010), propget, helpstring("property CreationTime")]
        HRESULT CreationTime([out, retval] BSTR* pVal);
        [id(0x00000010), propput, helpstring("property CreationTime")]
        HRESULT CreationTime([in] BSTR pVal);
        [id(0x00000011), propget, helpstring("property ModifiedTime")]
        HRESULT ModifiedTime([out, retval] BSTR* pVal);
        [id(0x00000011), propput, helpstring("property ModifiedTime")]
        HRESULT ModifiedTime([in] BSTR pVal);
        [id(0x00000012), propget, helpstring("property ModifiedDate")]
        HRESULT ModifiedDate([out, retval] BSTR* pVal);
        [id(0x00000012), propput, helpstring("property ModifiedDate")]
        HRESULT ModifiedDate([in] BSTR pVal);
        [id(0x00000013), propget, helpstring("property Models")]
        HRESULT Models([out, retval] IDispatch** ppDisp);
        [id(0x00000014), propget, helpstring("property Materials")]
        HRESULT Materials([out, retval] VARIANT* pVal);
        [id(0x00000015), propget, helpstring("property FilmCoeffs")]
        HRESULT FilmCoeffs([out, retval] VARIANT* pVal);
        [id(0x00000017), helpstring("method AddComment")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x00000006), propget, helpstring("property Parameters")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x00000018), propget, helpstring("property ReportSettings")]
        HRESULT ReportSettings([out, retval] IDispatch** ppDisp);
        [id(0x0000001a), propget, helpstring("property ProjectFirstSaved")]
        HRESULT FirstSaved([out, retval] BSTR* pVal);
        [id(0x0000001b), propget, helpstring("property ProjectLastSaved")]
        HRESULT LastSaved([out, retval] BSTR* pVal);
        [id(0x00000019), propget, helpstring("property ProductVersion")]
        HRESULT ProductVersion([out, retval] BSTR* pVal);
        [id(0x0000001c), helpstring("property ExportTree")]
        HRESULT ExportTree(
                        [in] BSTR newVal, 
                        unsigned int exportArgs);
        [id(0x00000008), propget, helpstring("property ParameterSet")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
        [id(0x0000001d), propget, helpstring("property WereAdvOptsConvertedToCommands")]
        HRESULT WereAdvOptsConvertedToCommands([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000001e), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x0000001f), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00000020), propget, helpstring("property to get the current system date and time")]
        HRESULT CurrentDateTimeForLocale([out, retval] BSTR* pbsLocale);
        [id(0x00000021), helpstring("property ToggleStateEngine")]
        HRESULT ToggleStateEngine();
        [id(0x00000022), helpstring("property ResetTree")]
        HRESULT ResetTree();
        [id(0x00000023), helpstring("method LoadEngrDataLibraryFromFile")]
        HRESULT LoadEngrDataLibraryFromFile([in] BSTR materialFileName);
        [id(0x00000041), helpstring("method LoadEngrDataLibraryFromFiles")]
        HRESULT LoadEngrDataLibraryFromFiles([in] IAnsBSTRColl* pMaterialFileNamesColl);
        [id(0x00000024), helpstring("method SaveEngrDataLibraryToFile")]
        HRESULT SaveEngrDataLibraryToFile([in] BSTR materialFileName);
        [id(0x00000027), helpstring("method LoadMaterialIntoLibraryFromFile")]
        HRESULT LoadMaterialIntoLibraryFromFile(
                        [in] BSTR materialFileName, 
                        [in] VARIANT_BOOL overwriteExisting, 
                        [out, retval] BSTR* pMaterialName);
        [id(0x00000042), helpstring("method LoadMaterialIntoLibraryFromFiles")]
        HRESULT LoadMaterialIntoLibraryFromFiles(
                        [in] IAnsBSTRColl* pMaterialFileNamesColl, 
                        [in] VARIANT_BOOL overwriteExisting, 
                        [out, retval] BSTR* pMaterialName);
        [id(0x00000028), helpstring("method WriteMaterialFromLibraryToFile")]
        HRESULT WriteMaterialFromLibraryToFile(
                        [in] BSTR materialFileName, 
                        [in] BSTR MaterialName);
        [id(0x00000025), propget, helpstring("property MaterialNames")]
        HRESULT MaterialNames([out, retval] IAnsBSTRColl** pMaterialNameColl);
        [id(0x0000003a), propget, helpstring("property DefaultSolidMaterialName")]
        HRESULT DefaultSolidMaterialName([out, retval] BSTR* pDefaultSolidMaterialName);
        [id(0x0000003b), propget, helpstring("property DefaultFluidMaterialName")]
        HRESULT DefaultFluidMaterialName([out, retval] BSTR* pDefaultFluidMaterialName);
        [id(0x00000026), helpstring("method MaterialPropertyNames")]
        HRESULT MaterialPropertyNames(
                        [in] BSTR MaterialName, 
                        [out, retval] IAnsBSTRColl** pPropertyNameColl);
        [id(0x00000029), helpstring("method DeleteMaterial")]
        HRESULT DeleteMaterial([in] BSTR MaterialName);
        [id(0x0000002a), helpstring("method SaveMaterialSuppression")]
        HRESULT SaveMaterialSuppression([in] BSTR suppressionFileName);
        [id(0x0000002b), helpstring("method ProjectStateEngineManualMode")]
        HRESULT ProjectStateEngineManualMode();
        [id(0x0000002c), helpstring("method ProjectStateEngineAutomaticMode")]
        HRESULT ProjectStateEngineAutomaticMode();
        [id(0x0000002d), helpstring("method BuildHTMLReportSectionForMaterials")]
        HRESULT BuildHTMLReportSectionForMaterials([out, retval] BSTR* pbsMatHTML);
        [id(0x0000002e), propget, helpstring("property ImportedFile")]
        HRESULT ImportedFile([out, retval] BSTR* pVal);
        [id(0x0000002f), propget, helpstring("property ImportedVersion")]
        HRESULT ImportedVersion([out, retval] BSTR* pVal);
        [id(0x00000030), helpstring("method DeleteSuppressedMaterialProps")]
        HRESULT DeleteSuppressedMaterialProps();
        [id(0x00000031), helpstring("property ImportObjectLinkMap")]
        HRESULT ImportObjectLinkMap([in] BSTR newVal);
        [id(0x00000032), helpstring("property RepairObjectLinkMap")]
        HRESULT RepairObjectLinkMap();
        [id(0x00000033), helpstring("method StartTiming")]
        HRESULT StartTiming();
        [id(0x00000034), helpstring("method StopTiming")]
        HRESULT StopTiming();
        [id(0x00000035), helpstring("method ClearTiming")]
        HRESULT ClearTiming();
        [id(0x00000036), helpstring("method ReportTiming")]
        HRESULT ReportTiming([in] BSTR newVal);
        [id(0x00000037), propget, helpstring("property SaveProjectBeforeSolution")]
        HRESULT SaveProjectBeforeSolution([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000037), propput, helpstring("property SaveProjectBeforeSolution")]
        HRESULT SaveProjectBeforeSolution([in] VARIANT_BOOL pVal);
        [id(0x00000038), propget, helpstring("property SaveProjectAfterSolution")]
        HRESULT SaveProjectAfterSolution([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000038), propput, helpstring("property SaveProjectAfterSolution")]
        HRESULT SaveProjectAfterSolution([in] VARIANT_BOOL pVal);
        [id(0x00000039), helpstring("property RepairAttachedReferences")]
        HRESULT RepairAttachedReferences();
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x0000003c), helpstring("method AddGlobalTag")]
        HRESULT AddGlobalTag([in] BSTR newVal);
        [id(0x0000003d), helpstring("method RemoveGlobalTag")]
        HRESULT RemoveGlobalTag([in] BSTR newVal);
        [id(0x0000003e), propget, helpstring("property GlobalTagCount")]
        HRESULT GlobalTagCount([out, retval] unsigned int* pVal);
        [id(0x0000003f), propget, helpstring("property GlobalTag")]
        HRESULT GlobalTag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* newVal);
        [id(0x00000040), helpstring("method RenameGlobalTag")]
        HRESULT RenameGlobalTag(
                        [in] BSTR oldTag, 
                        [in] BSTR newVal);
        [id(0x00000043), propget, helpstring("property HasGlobalTag")]
        HRESULT HasGlobalTag(
                        [in] BSTR newVal, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00000044), helpstring("property ExportGeometry")]
        HRESULT ExportGeometry([in] BSTR newVal);
        [id(0x00000045), helpstring("property ExportMesh")]
        HRESULT ExportMesh([in] BSTR newVal);
        [id(0x00000046), helpstring("property ExportASMJournal")]
        HRESULT ExportASMJournal([in] BSTR newVal);
        [id(0x00000047), helpstring("property InitializeCreep")]
        HRESULT InitializeCreep();
        [id(0x00000048), propget, helpstring("property FirstSavedVersion")]
        HRESULT FirstSavedVersion([out, retval] BSTR* pVal);
        [id(0x00000049), propget, helpstring("property FirstSavedDate")]
        HRESULT FirstSavedDate([out, retval] BSTR* pVal);
        [id(0x0000004a), propget, helpstring("property NumberOfTimesSaved")]
        HRESULT NumberOfTimesSaved([out, retval] unsigned int* pVal);
        [id(0x0000004b), helpstring("property ExportGeometrySelect")]
        HRESULT ExportGeometrySelect(
                        [in] BSTR newVal, 
                        [in] IDispatch* piCollectionDisp);
        [id(0x0000004c), helpstring("method GetMaterialPropertyNamesForAnalytics")]
        HRESULT GetMaterialPropertyNamesForAnalytics([out, retval] IAnsBSTRColl** pPropertyNameColl);
    };

    [
      uuid(9794B8AF-9ED6-4ED3-A622-4BDA7AC645C6),
      helpstring("DSPrototypeAuto Class"),
      noncreatable
    ]
    coclass DSPrototypeAuto {
        [default] interface IDSPrototypeAuto;
    };

    [
      uuid(4B4C7D3C-A562-4BE8-83F4-4370BD52DB91),
      helpstring("DSPrototypeGroupAuto Class"),
      noncreatable
    ]
    coclass DSPrototypeGroupAuto {
        [default] interface IDSPrototypeGroupAuto;
    };

    [
      uuid(F9D22291-01F5-4606-8721-3399832FF7D6),
      helpstring("DSRemotePointGroupAuto Class"),
      noncreatable
    ]
    coclass DSRemotePointGroupAuto {
        [default] interface IDSRemotePointGroupAuto;
    };

    [
      uuid(06E5235A-5369-455A-9BDE-C7E93FC0D201),
      helpstring("DSRemotePointAuto Class"),
      noncreatable
    ]
    coclass DSRemotePointAuto {
        [default] interface IDSRemotePointAuto;
    };

    [
      uuid(119E164F-63EF-4802-82C5-C66530D69837),
      helpstring("DSReportSettingsAuto Class"),
      noncreatable
    ]
    coclass DSReportSettingsAuto {
        [default] interface IDSReportSettingsAuto;
    };

    [
      uuid(78323F25-3E82-4D3C-B6B4-97BE2D4FB214),
      helpstring("DSResultAuto Class"),
      noncreatable
    ]
    coclass DSResultAuto {
        [default] interface IDSResultAuto;
    };

    [
      uuid(5A41411C-93ED-4BF1-A02A-71B8C514C6BE),
      helpstring("DSResultArrayAuto Class"),
      noncreatable
    ]
    coclass DSNodeResultsAuto {
        [default] interface IDSResultArrayAuto;
    };

    [
      uuid(6C539F3B-6C21-4D1D-9FD1-CECD4F0DCBD6),
      helpstring("DSResultChartAuto Class"),
      noncreatable
    ]
    coclass DSResultChartAuto {
        [default] interface IDSResultChartAuto;
    };

    [
      uuid(16BD4F96-FF98-477C-80BB-7DD0F6ADAF47),
      helpstring("DSResultTableAuto Class"),
      noncreatable
    ]
    coclass DSResultTableAuto {
        [default] interface IDSResultTableAuto;
    };

    [
      uuid(FB66DF2D-DAF7-4FD4-A72A-AC94093F3A28),
      helpstring("DSContactDataTableAuto Class"),
      noncreatable
    ]
    coclass DSContactDataTableAuto {
        [default] interface IDSContactDataTableAuto;
    };

    [
      uuid(2FFA7361-9CE1-459B-91FC-F1D22EB57405),
      helpstring("DSRotationAuto Class"),
      noncreatable
    ]
    coclass DSRotationAuto {
        [default] interface IDSRotationAuto;
    };

    [
      uuid(8AB7D643-2494-4025-8E89-F17917F570DA),
      helpstring("DSScopeAuto Class"),
      noncreatable
    ]
    coclass DSScopeAuto {
        [default] interface IDSScope;
    };

    [
      uuid(3B8C4EB8-5D08-4E0A-BD4D-53FBDAF7766D),
      helpstring("DSSolConvergenceAuto Class"),
      noncreatable
    ]
    coclass DSSolConvergenceAuto {
        [default] interface IDSSolConvergence;
    };

    [
      uuid(A17EF75C-8FC8-4DFF-A725-E7B6E6D3AD6E),
      helpstring("DSSolutionAuto Class"),
      noncreatable
    ]
    coclass DSSolutionAuto {
        [default] interface IDSSolutionAuto;
    };

    [
      uuid(CCD5026D-A7F1-4369-864B-A34875B5D811),
      helpstring("DSSolutionSettingsAuto Class"),
      noncreatable
    ]
    coclass DSSolutionSettingsAuto {
        [default] interface IDSSolutionSettingsAuto;
    };

    [
      uuid(1B2DCEB0-19FA-4537-A41E-7859ADA9BA21),
      helpstring("DSTransientThermalSettingsAuto Class"),
      noncreatable
    ]
    coclass DSTransientThermalSettingsAuto {
        [default] interface IDSTransientThermalSettingsAuto;
    };

    [
      uuid(BD9EC4DE-D62B-4298-914D-CDC1EFD49A61),
      helpstring("DSTransientMechanicalSettingsAuto Class"),
      noncreatable
    ]
    coclass DSTransientMechanicalSettingsAuto {
        [default] interface IDSTransientMechanicalSettingsAuto;
    };

    [
      uuid(050463B6-ABE5-4E35-8EC7-3C70562EAF0D),
      helpstring("DSSolutionStepAuto Class"),
      noncreatable
    ]
    coclass DSSolutionStepAuto {
        [default] interface IDSSolutionStepAuto;
    };

    [
      uuid(DEEA427C-E46D-4991-8E07-4B586F3323A8),
      helpstring("DSSolutionStepsGroupAuto Class"),
      noncreatable
    ]
    coclass DSSolutionStepsGroupAuto {
        [default] interface IDSSolutionStepsGroupAuto;
    };

    [
      uuid(BBCC6588-25BC-4686-966C-19A80C590EA7),
      helpstring("DSSolutionSummaryAuto Class"),
      noncreatable
    ]
    coclass DSSolutionSummaryAuto {
        [default] interface IDSSolutionSummaryAuto;
    };

    [
      uuid(70370EBE-2C4B-44E7-8F57-CD103832C2F8),
      helpstring("DSStressSafetyToolAuto Class"),
      noncreatable
    ]
    coclass DSStressSafetyToolAuto {
        [default] interface IDSStressSafetyToolAuto;
    };

    [
      uuid(0254BA0A-4FE8-4BCA-8879-65B778DEAD10),
      helpstring("DSSupportAuto Class"),
      noncreatable
    ]
    coclass DSSupportAuto {
        [default] interface IDSSupportAuto;
    };

    [
      uuid(739E0EEC-7E63-4B7F-BC42-855717FA10E4),
      helpstring("DSTemplateAuto Class"),
      noncreatable
    ]
    coclass DSTemplateAuto {
        [default] interface IDSTemplateAuto;
    };

    [
      uuid(598C2D76-68D0-4EDB-A816-6BD4996620F9),
      helpstring("DSTemplateOutputAuto Class"),
      noncreatable
    ]
    coclass DSTemplateOutputAuto {
        [default] interface IDSTemplateOutputAuto;
    };

    [
      uuid(7A702C58-0008-4C87-B249-0CA04B0ECBCA),
      helpstring("DSTreeGroupingFolderAuto Class"),
      noncreatable
    ]
    coclass DSTreeGroupingFolderAuto {
        [default] interface IDSTreeGroupingFolderAuto;
    };

    [
      uuid(11EC550D-89FD-4A72-A7A7-348CB2508A89),
      helpstring("DSTreePlaceHolderAuto Class"),
      noncreatable
    ]
    coclass DSTreePlaceHolderAuto {
        [default] interface IDSTreePlaceHolder;
    };

    [
      uuid(EA100DB6-E8C4-4A89-B694-3A35C9385FD9),
      helpstring("DSTreeRootAuto Class"),
      noncreatable
    ]
    coclass DSTreeRootAuto {
        [default] interface IDSTreeRootAuto;
    };

    [
      uuid(6B212641-6277-4E84-8C72-04DB687420D2),
      helpstring("DSVirtualCellAuto Class"),
      noncreatable
    ]
    coclass DSVirtualCellAuto {
        [default] interface IDSVirtualCellAuto;
    };

    [
      uuid(6FC513CC-2C0B-44B2-98DE-29191BC725A6),
      helpstring("DSVirtualSplitEdgeAuto Class"),
      noncreatable
    ]
    coclass DSVirtualSplitEdgeAuto {
        [default] interface IDSVirtualSplitEdgeAuto;
    };

    [
      uuid(BD0088C9-E378-44A5-8268-256AFBD170FB),
      helpstring("DSVirtualSplitFaceAuto Class"),
      noncreatable
    ]
    coclass DSVirtualSplitFaceAuto {
        [default] interface IDSVirtualSplitFaceAuto;
    };

    [
      uuid(42EA80E2-F35A-4D7D-9894-846E8E0D5F48),
      helpstring("DSVirtualHardVertexAuto Class"),
      noncreatable
    ]
    coclass DSVirtualHardVertexAuto {
        [default] interface IDSVirtualHardVertexAuto;
    };

    [
      uuid(145FF4F5-3288-4DE9-9A3B-24A9BB569CD5),
      helpstring("DSVirtualCellGroupAuto Class"),
      noncreatable
    ]
    coclass DSVirtualCellGroupAuto {
        [default] interface IDSVirtualCellGroupAuto;
    };

    [
      odl,
      uuid(0EA9AF11-6B1B-4B13-BF7E-BDD90F07DC7B),
      helpstring("IDSVirtualCellGroupAuto Interface"),
      dual,
      oleautomation
    ]
    interface IDSVirtualCellGroupAuto : IDispatch {
        [id(0x00000001), propget, helpstring("property")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput, helpstring("property")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget, helpstring("property")]
        HRESULT ID([out, retval] int* pVal);
        [id(0x00000003), propget, helpstring("property")]
        HRESULT Class([out, retval] int* pVal);
        [id(0x00000004), propget, helpstring("property")]
        HRESULT Parent([out, retval] IDispatch** pDisp);
        [id(0x00000005), propget, helpstring("property")]
        HRESULT Children([out, retval] IDispatch** pDisp);
        [id(0x00000006), propget, helpstring("property")]
        HRESULT Parameters([out, retval] IDispatch** ppDisp);
        [id(0x00000007), propget, helpstring("property State")]
        HRESULT State([out, retval] eObjectState* pVal);
        [id(0x0000000c), helpstring("method")]
        HRESULT CreateVirtualCell(
                        [in] IDispatch* pSelMgr, 
                        [out, retval] IDispatch** ppDisp);
        [id(0x0000000e), helpstring("method")]
        HRESULT SetSuppressedStateAll([in] VARIANT_BOOL bVal);
        [id(0x0000000f), helpstring("method")]
        HRESULT InvertSuppressedStateAll();
        [id(0x00000010), helpstring("method")]
        HRESULT DeleteAll();
        [id(0x0000001e), helpstring("method")]
        HRESULT AddComment([out, retval] IDispatch** pDisp);
        [id(0x0000001f), propget, helpstring("property")]
        HRESULT Comments([out, retval] IDispatch** ppDisp);
        [id(0x00000020), helpstring("method")]
        HRESULT AddFigure([out, retval] IDispatch** pDisp);
        [id(0x00000021), propget, helpstring("property")]
        HRESULT Figures([out, retval] IDispatch** ppDisp);
        [id(0x00000028), propput, helpstring("property")]
        HRESULT HasError([in] long pbHasError);
        [id(0x00000028), propget, helpstring("property")]
        HRESULT HasError([out, retval] long* pbHasError);
        [id(0x00000029), propput, helpstring("property")]
        HRESULT ErrorString([in] BSTR pbError);
        [id(0x00000029), propget, helpstring("property")]
        HRESULT ErrorString([out, retval] BSTR* pbError);
        [id(0x0000002a), propget, helpstring("property")]
        HRESULT VirtualCells([out, retval] IDispatch** ppDisp);
        [id(0x0000002b), helpstring("method")]
        HRESULT AutoGenerateVirtualCells();
        [id(0x0000002c), helpstring("method")]
        HRESULT GetCellIdForRefId(
                        [in] unsigned int ulRefId, 
                        [out, retval] unsigned int* pulObjId);
        [id(0x0000002d), propget, helpstring("property")]
        HRESULT RegionFlatness([out, retval] double* pdVal);
        [id(0x0000002d), propput, helpstring("property")]
        HRESULT RegionFlatness([in] double pdVal);
        [id(0x0000002e), propget, helpstring("property")]
        HRESULT SharedBoundary([out, retval] double* pdVal);
        [id(0x0000002e), propput, helpstring("property")]
        HRESULT SharedBoundary([in] double pdVal);
        [id(0x0000002f), propget, helpstring("property ")]
        HRESULT RegionSize([out, retval] double* pdVal);
        [id(0x0000002f), propput, helpstring("property ")]
        HRESULT RegionSize([in] double pdVal);
        [id(0x00000031), propget, helpstring("property")]
        HRESULT SmallEdge([out, retval] double* pdVal);
        [id(0x00000031), propput, helpstring("property")]
        HRESULT SmallEdge([in] double pdVal);
        [id(0x00000032), propget, helpstring("property")]
        HRESULT Behavior([out, retval] unsigned int* piVal);
        [id(0x00000032), propput, helpstring("property")]
        HRESULT Behavior([in] unsigned int piVal);
        [id(0x00000030), propget, helpstring("property")]
        HRESULT RefreshMode([out, retval] long* pdVal);
        [id(0x00000030), propput, helpstring("property")]
        HRESULT RefreshMode([in] long pdVal);
        [id(0x00000008), propget, helpstring("property")]
        HRESULT ParameterSet([out, retval] IDispatch** ppDisp);
        [id(0x0000003c), helpstring("method")]
        HRESULT DeleteVCellAndDependents([in] unsigned int CellId);
        [id(0x0000003d), helpstring("method")]
        HRESULT SuppressVCellAndDependents([in] unsigned int CellId);
        [id(0x0000003e), propget, helpstring("property")]
        HRESULT NeedsTreeUpdate(
                        [in] unsigned int CellId, 
                        [in] long Dependents, 
                        [out, retval] VARIANT_BOOL* bNeedsUpdate);
        [id(0x0000003f), propget, helpstring("property Images")]
        HRESULT Images([out, retval] IDispatch** ppDisp);
        [id(0x00000040), helpstring("method AddImage")]
        HRESULT AddImage([out, retval] IDispatch** pDisp);
        [id(0x00000041), helpstring("method CreateVTFromImportedPM")]
        HRESULT CreateVTFromImportedPM();
        [id(0x00000042), propget, helpstring("property")]
        HRESULT MergeFaceEdges([out, retval] long* pbVal);
        [id(0x00000042), propput, helpstring("property")]
        HRESULT MergeFaceEdges([in] long pbVal);
        [id(0x00000043), helpstring("method")]
        HRESULT CreateVirtualSplitEdge(
                        [in] IDispatch* pSelMgr, 
                        [in, optional, defaultvalue(0)] int iDoSplitAtLocation, 
                        [out, retval] IDispatch** ppDisp);
        [id(0x00000044), helpstring("method")]
        HRESULT DeleteVirtualSplitEdgeAndDependents([in] unsigned int CellId);
        [id(0x00000045), helpstring("method")]
        HRESULT DeleteAllVirtualCells();
        [id(0x00000046), helpstring("method")]
        HRESULT DeleteAllVirtualSplitEdges();
        [id(0x00000047), propget, helpstring("property")]
        HRESULT VirtualSplitEdges([out, retval] IDispatch** ppDisp);
        [id(0x00000048), helpstring("method")]
        HRESULT SuppressVirtualSplitEdgeAndDependents([in] unsigned int CellId);
        [id(0x00000049), helpstring("method")]
        HRESULT GetSplitEdgeCellIdForRefId(
                        [in] unsigned int ulRefId, 
                        [out, retval] unsigned int* pulObjId);
        [id(0x0000004a), helpstring("method")]
        HRESULT GetSplitEdgeCellIdForVertexRefId(
                        [in] unsigned int ulRefId, 
                        [out, retval] unsigned int* pulObjId);
        [id(0x0000004b), propget, helpstring("property")]
        HRESULT LockChildEdgeSplits([out, retval] long* pbVal);
        [id(0x0000004b), propput, helpstring("property")]
        HRESULT LockChildEdgeSplits([in] long pbVal);
        [id(0x0000004c), helpstring("method")]
        HRESULT DeleteVEntityAndDependents([in] unsigned int CellId);
        [id(0x0000004d), helpstring("method")]
        HRESULT DeleteAllVirtualEntities();
        [id(0x00000053), helpstring("method")]
        HRESULT AutoGenerateVirtualCellsOnSelectEntities(
                        [in] IDispatch* pSelMgr, 
                        [out, retval] IDispatch** ppDisp);
        [id(0x00000058), helpstring("method")]
        HRESULT Update_VirtualEntitiesStatistics();
        [id(0x00000059), helpstring("method")]
        HRESULT CreateVirtualSplitFace(
                        [in] IDispatch* pSelMgr, 
                        [out, retval] IDispatch** ppDisp);
        [id(0x0000005a), helpstring("method")]
        HRESULT DeleteVirtualSplitFaceAndDependents([in] unsigned int CellId);
        [id(0x0000005c), helpstring("method")]
        HRESULT SuppressVirtualSplitFaceAndDependents([in] unsigned int CellId);
        [id(0x0000005b), helpstring("method")]
        HRESULT DeleteAllVirtualSplitFaces();
        [id(0x0000005d), propget, helpstring("property")]
        HRESULT VirtualSplitFaces([out, retval] IDispatch** ppDisp);
        [id(0x0000005f), helpstring("method")]
        HRESULT CreateVirtualHardVertex(
                        [in] IDispatch* pSelMgr, 
                        [out, retval] IDispatch** ppDisp);
        [id(0x00000060), helpstring("method")]
        HRESULT DeleteVirtualHardVertexAndDependents([in] unsigned int CellId);
        [id(0x00000062), helpstring("method")]
        HRESULT SuppressVirtualHardVertexAndDependents([in] unsigned int CellId);
        [id(0x00000061), helpstring("method")]
        HRESULT DeleteAllVirtualHardVertex();
        [id(0x00000063), propget, helpstring("property")]
        HRESULT VirtualHardVertex([out, retval] IDispatch** ppDisp);
        [id(0x00000065), helpstring("method")]
        HRESULT GetHardVertexCellIdForRefId(
                        [in] unsigned int ulRefId, 
                        [out, retval] unsigned int* pulObjId);
        [id(0x00000068), helpstring("method")]
        HRESULT RelinkDatabaseOjbects();
        [id(0x00000066), helpstring("method")]
        HRESULT UpdateAfterRefresh();
        [id(0x00000067), helpstring("method")]
        HRESULT NextPreviousVirtualEntity(
                        [in] unsigned int ulDir, 
                        [in] unsigned int CellId, 
                        [in] IDispatch* pISelMgr);
        [id(0x00002716), propget, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [out, retval] BSTR* pVal);
        [id(0x00002716), propput, helpstring("property Tag")]
        HRESULT Tag(
                        [in] unsigned int index, 
                        [in] BSTR pVal);
        [id(0x00002713), helpstring("method AddTag")]
        HRESULT AddTag([in] BSTR newVal);
        [id(0x00002714), helpstring("method RemoveTag")]
        HRESULT RemoveTag([in] BSTR tagToRemove);
        [id(0x00002715), propget, helpstring("property IsTagInUse")]
        HRESULT IsTagInUse(
                        [in] BSTR tagToCheck, 
                        [out, retval] VARIANT_BOOL* vbVal);
        [id(0x00002712), propget, helpstring("TagCount")]
        HRESULT TagCount([out, retval] unsigned int* pVal);
        [id(0x00000069), propget, helpstring("property")]
        HRESULT SimplifyFaces([out, retval] long* pbVal);
        [id(0x00000069), propput, helpstring("property")]
        HRESULT SimplifyFaces([in] long pbVal);
        [id(0x00000054), propget, helpstring("property")]
        HRESULT NumVirtualFaces([out, retval] int* pVal);
        [id(0x00000055), propget, helpstring("property")]
        HRESULT NumVirtualEdges([out, retval] int* pVal);
        [id(0x00000056), propget, helpstring("property")]
        HRESULT NumVirtualSplitEdges([out, retval] int* pVal);
        [id(0x0000005e), propget, helpstring("property")]
        HRESULT NumVirtualSplitFaces([out, retval] int* pVal);
        [id(0x00000064), propget, helpstring("property")]
        HRESULT NumVirtualHardVertex([out, retval] int* pVal);
        [id(0x00000057), propget, helpstring("property")]
        HRESULT NumVirtualEntities([out, retval] int* pVal);
    };

    [
      uuid(A225EBA0-1507-4E8F-9799-A7FA763A002A),
      helpstring("DSGapSizeAuto Class"),
      noncreatable
    ]
    coclass DSGapSizeAuto {
        [default] interface IDSGapSizeAuto;
    };

    [
      uuid(AC2E7A04-3A7F-49D4-9F38-5302CB11F9BA),
      helpstring("DSGapToolAuto Class"),
      noncreatable
    ]
    coclass DSGapToolAuto {
        [default] interface IDSGapToolAuto;
    };

    [
      uuid(0EAFD071-B785-4B71-A2C3-362015D5E88D),
      helpstring("DSJobConnection Class")
    ]
    coclass DSJobConnection {
        [default] interface IDSJobConnection;
    };

    [
      uuid(51FA5004-A98C-472A-AD91-A656E73254C3),
      helpstring("IDSJobProgressMap Class")
    ]
    coclass DSJobProgressMap {
        [default] interface IDSJobProgressMap;
    };

    [
      uuid(27B33DDC-4A26-4B0A-A29C-CDCA4CEBD722),
      helpstring("DSPointMassAuto Class")
    ]
    coclass DSPointMassAuto {
        [default] interface IDSPointMassAuto;
    };

    [
      uuid(999232D3-E0D1-4528-A184-146D92E6DCBB),
      helpstring("StateEngineObject Class")
    ]
    coclass StateEngineObject {
        [default] interface IStateEngineObject;
        interface IWB2StateAdapter;
    };

    [
      uuid(4C2F2AF4-C7EF-463B-A747-29690EEF7251),
      helpstring("DSMessageDatabase Class")
    ]
    coclass DSMessageDatabase {
        [default] interface IDSMessageDatabase;
    };

    [
      uuid(4483D0FC-5956-43C5-B27F-2D6D1EED4F76),
      helpstring("DSMessage Class")
    ]
    coclass DSMessage {
        [default] interface IDSMessage;
    };

    [
      uuid(75F6C258-D470-4D6E-89AA-05D85C817F6E),
      helpstring("DSMessageFilter Class")
    ]
    coclass DSMessageFilter {
        [default] interface IDSMessageFilter;
    };

    [
      uuid(A5EF7A60-DAFE-47DF-A2FB-317000F69FE1),
      helpstring("DSLoadObjectCollection Class")
    ]
    coclass DSLoadObjectCollection {
        [default] interface IDSLoadObjectCollectionSetup;
    };

    [
      uuid(A0005A9C-A9C6-4619-A069-98D88DD31188),
      helpstring("DSLoadObjectCollectionMap Class")
    ]
    coclass DSLoadObjectCollectionMap {
        [default] interface IDSLoadObjectCollectionMap;
    };

    [
      uuid(2EBFDFD5-F24A-4F44-BA5E-93ED168A23D1),
      helpstring("DSGenPlaneStrainAuto Class")
    ]
    coclass DSGenPlaneStrainAuto {
        [default] interface IDSGenPlaneStrainAuto;
    };

    [
      uuid(BF1E19AF-F6BE-4C90-BDA2-EBA7FE2F43AA),
      helpstring("DSSymmetryGroupAuto Class")
    ]
    coclass DSSymmetryGroupAuto {
        [default] interface IDSSymmetryGroupAuto;
    };

    [
      uuid(70D5271D-7E3C-4E05-81F7-91E9079B530E),
      helpstring("DSSymmetryGeneralAuto Class")
    ]
    coclass DSSymmetryGeneralAuto {
        [default] interface IDSSymmetryGeneralAuto;
    };

    [
      uuid(1861191E-558A-42F4-B84B-E37932B5FA16),
      helpstring("StateScoreboard Class")
    ]
    coclass StateScoreboard {
        [default] interface IUnknown;
    };

    [
      uuid(17FD857A-FB03-4A7C-A20B-593753FC4FB9),
      helpstring("DSMessageDatabaseObject Class")
    ]
    coclass DSMessageDatabaseObject {
        [default] interface IUnknown;
    };

    [
      uuid(81FCC092-9378-4C15-813A-4D9EB9F37F2C),
      helpstring("DSThermalConditionAuto Class")
    ]
    coclass DSThermalConditionAuto {
        [default] interface IDSThermalConditionAuto;
    };

    [
      uuid(DD004695-57A9-4BBF-9353-1EAD477C86C1),
      helpstring("DSDependencyManager Class")
    ]
    coclass DSDependencyManager {
        [default] interface IDSDependencyManager;
    };

    [
      uuid(90296894-BD0D-446B-BB64-4A9475E1666D),
      helpstring("ParamItfConverter Class")
    ]
    coclass ParamItfConverter {
        [default] interface IParamItfConverter;
    };

    [
      uuid(629A1324-EADA-4EAC-BCBE-E2220BBED485),
      helpstring("DSParameterSetItfHolder Class")
    ]
    coclass DSParameterSetItfHolder {
        [default] interface IDSParameterSetItfHolder;
    };

    [
      uuid(39AAF174-42B4-49AE-B083-0D3B926571F7),
      helpstring("DSEmagConditionAuto Class")
    ]
    coclass DSEmagConditionAuto {
        [default] interface IDSEmagConditionAuto;
    };

    [
      uuid(FBC0DB86-8086-474F-A8D3-F53A2EB722ED),
      helpstring("DSCouplingConditionAuto Class"),
      noncreatable
    ]
    coclass DSCouplingConditionAuto {
        [default] interface IDSCouplingConditionAuto;
    };

    [
      uuid(3A875FCF-A513-40AE-92C3-034211CEC48B),
      helpstring("DSNodalRotationAuto Class"),
      noncreatable
    ]
    coclass DSNodalRotationAuto {
        [default] interface IDSNodalRotationAuto;
    };

    [
      uuid(D3E0BC19-AB41-4A48-B174-BF5F66953A2C),
      helpstring("DSPathAuto Class"),
      noncreatable
    ]
    coclass DSPathAuto {
        [default] interface IDSPathAuto;
    };

    [
      uuid(46FA6517-C610-4C85-9D37-F1ABDE6FA6E9),
      helpstring("DSSurfaceAuto Class"),
      noncreatable
    ]
    coclass DSSurfaceAuto {
        [default] interface IDSSurfaceAuto;
    };

    [
      uuid(2C1554D5-8A24-4595-9019-98F31E47B2EB),
      helpstring("DSMeshWrapperGroupAuto Class"),
      noncreatable
    ]
    coclass DSMeshWrapperGroupAuto {
        [default] interface IDSMeshWrapperGroupAuto;
    };

    [
      uuid(A6A13095-F4BB-4E95-A5C6-908AFA8D53C0),
      helpstring("DSMeshWrapAuto Class"),
      noncreatable
    ]
    coclass DSMeshWrapAuto {
        [default] interface IDSMeshWrapAuto;
    };

    [
      uuid(388FAD6E-E062-4E97-B401-F824E5A60B15),
      helpstring("DSMeshRenumberingControlGroupAuto Class"),
      noncreatable
    ]
    coclass DSMeshRenumberingControlGroupAuto {
        [default] interface IDSMeshRenumberingControlGroupAuto;
    };

    [
      uuid(A96DB4E7-3857-4118-8482-609DB55F7BEB),
      helpstring("DSBodyMeshRenumberingControlAuto Class"),
      noncreatable
    ]
    coclass DSMeshRenumberingControlAuto {
        [default] interface IDSMeshRenumberingControlAuto;
    };

    [
      uuid(4EFAADA5-7E65-4AC3-A8C4-3BC1DD1A53F8),
      helpstring("DSGasketAuto Class"),
      noncreatable
    ]
    coclass DSGasketAuto {
        [default] interface IDSGasketAuto;
    };

    [
      uuid(FD39D297-39CE-4BAB-9136-7258CAC1FD71),
      helpstring("DSPipeIdealizationAuto Class"),
      noncreatable
    ]
    coclass DSPipeIdealizationAuto {
        [default] interface IDSPipeIdealizationAuto;
    };

    [
      uuid(2821B147-680C-4C11-B641-53733FFDF045),
      helpstring("DSMappingValidationAuto Class"),
      noncreatable
    ]
    coclass DSMappingValidationAuto {
        [default] interface IDSMappingValidationAuto;
    };

    [
      uuid(F3FCD599-1D3E-4D2F-BAFD-ED7555FF1D1F),
      helpstring("IDSThicknessAuto Class")
    ]
    coclass DSThicknessAuto {
        [default] interface IDSThicknessAuto;
    };

    [
      uuid(9F315F6C-8B24-424C-BD7B-E12767302ADB),
      helpstring("IDSSimplorerPinAuto Class")
    ]
    coclass DSSimplorerPinAuto {
        [default] interface IDSSimplorerPinAuto;
    };

    [
      uuid(E727E292-73E3-48BC-80E1-3A64C494D4BE),
      helpstring("DSExternalEnhancedModelAuto Class"),
      noncreatable
    ]
    coclass DSExternalEnhancedModelAuto {
        [default] interface IDSExternalEnhancedModelAuto;
    };

    [
      uuid(624870ED-5682-4FDF-B044-3AB08E0D3673),
      helpstring("DSFractureGroupAuto Class"),
      noncreatable
    ]
    coclass DSFractureGroupAuto {
        [default] interface IDSFractureGroupAuto;
    };

    [
      uuid(EB96C4A9-E89B-416F-AAF2-9982797CAC35),
      helpstring("DSCrackAuto Class"),
      noncreatable
    ]
    coclass DSCrackAuto {
        [default] interface IDSCrackAuto;
    };

    [
      uuid(CE33B98B-A186-44DE-9F90-8BB2EF493BEE),
      helpstring("DSDelaminationAuto Class"),
      noncreatable
    ]
    coclass DSDelaminationAuto {
        [default] interface IDSDelaminationAuto;
    };

    [
      uuid(58694E39-1E43-4FF6-860C-D87E21BED843),
      helpstring("DSCondensedGeometryAuto Class"),
      noncreatable
    ]
    coclass DSCondensedGeometryAuto {
        [default] interface IDSCondensedGeometryAuto;
    };

    [
      uuid(1CE893AA-AC63-461E-BCA0-B996CA9A0B8A),
      helpstring("DSCondensedPartAuto Class"),
      noncreatable
    ]
    coclass DSCondensedPartAuto {
        [default] interface IDSCondensedPartAuto;
    };

    [
      uuid(14B200D6-F54A-45DC-AEEF-0F6513BB2462),
      helpstring("DSCondensedSolutionSummaryAuto Class"),
      noncreatable
    ]
    coclass DSCondensedSolutionSummaryAuto {
        [default] interface IDSCondensedSolutionSummaryAuto;
    };

    [
      uuid(FDFE7A29-2F1F-4021-BD0E-37A8F9A3D2DA),
      helpstring("MeshConnectionsParentAuto Class"),
      noncreatable
    ]
    coclass DSMeshConnectionsParentAuto {
        [default] interface IDSMeshConnectionsParentAuto;
    };

    [
      uuid(B065A482-E134-4D72-BDA8-2A8672A6E6CD),
      helpstring("AnalysisPlyAuto Class"),
      noncreatable
    ]
    coclass DSAnalysisPlyAuto {
        [default] interface IDSAnalysisPlyAuto;
    };

    [
      uuid(7164FF60-7AFE-46C5-9899-EA00EC5D3D62),
      helpstring("DSElementOrientationAuto Class"),
      noncreatable
    ]
    coclass DSElementOrientationAuto {
        [default] interface IDSElementOrientationAuto;
    };

    [
      uuid(2DD14E1F-D414-4AA1-A5B9-5253A6D7336C),
      helpstring("DSNonlinearAdaptivityAuto Class"),
      noncreatable
    ]
    coclass DSNonlinearAdaptivityAuto {
        [default] interface IDSNonlinearAdaptivityAuto;
    };

    [
      uuid(529971D6-3EFA-4CCC-90F6-D360060C747F),
      helpstring("DSResponsePSDToolAuto Class"),
      noncreatable
    ]
    coclass DSResponsePSDToolAuto {
        [default] interface IDSResponsePSDToolAuto;
    };

    [
      uuid(84237D94-EC48-4414-A27B-F589924A5E2F),
      helpstring("DSPhysicsRegionAuto Class"),
      noncreatable
    ]
    coclass DSPhysicsRegionAuto {
        [default] interface IDSPhysicsRegionAuto;
    };

    [
      odl,
      uuid(DB1DD0DD-59DB-4EBE-8F53-6F639710C440),
      helpstring("IScopedMeshCommit Interface"),
      dual,
      oleautomation
    ]
    interface IScopedMeshCommit : IDispatch {
    };

    [
      uuid(ABEA67EC-8263-4F3D-96B0-CA8CC415A660),
      helpstring("ScopedMeshCommitCOM Class")
    ]
    coclass ScopedMeshCommitCOM {
        [default] interface IScopedMeshCommit;
    };
};
